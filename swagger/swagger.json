{
  "openapi": "3.1.0",
  "servers": [
    {
      "url": "https://api2.dev.wrtn.club/ghd-be",
      "description": "Dev Server"
    },
    {
      "url": "https://api2.wrtn.ai/ghd-be",
      "description": "Real Server"
    }
  ],
  "info": {
    "version": "0.32.0",
    "title": "@wrtn/hub-backend",
    "description": "Hub Backend",
    "license": {
      "name": "COMMERCIAL"
    }
  },
  "paths": {
    "/_health": {
      "get": {
        "summary": "Health Check API",
        "description": "Health Check API.",
        "tags": [
          "Monitor"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/_health/performance": {
      "get": {
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPerformance"
                }
              }
            }
          }
        }
      }
    },
    "/external/wrtn/sso": {
      "post": {
        "summary": "Emplace Wrtn SSO token",
        "description": "Emplace Wrtn SSO token.\n\nEmplace Wrtn SSO's access token, so that get the external user's\nmembership information from the Wrtn SSO system. Also, newly join or\nlogin to this Ecosystem service's membership too.\n\nIf the matched Wrtn SSO user has not joined to this Ecosystem service yet,\nthen this API will join to this service membership automatically. Otherwise\nthe Wrtn SSO user has already joined to Ecosystem service, then the returned\ncustomer information will contain the pre-joined memberpship information.",
        "tags": [
          "External"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Access token of the Wrtn SSO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IWrtnSsoUser.IAuthorization"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "SSO emplaced user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IWrtnSsoUser.IActivated"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "summary": "Update Wrtn SSO user's profile",
        "description": "Update Wrtn SSO user's profile.\n\nUpdate Wrtn SSO user's profile, with access token of the Wrtn SSO.\n\nIf you've not {@link emplace emplaced} the Wrtn SSO user yet, then this\nAPI throws 403 exception. Of course, if the pre-emplaced Wrtn SSO user\nis different with the input access token, the 403 exception would be thrown\neither.",
        "tags": [
          "External"
        ],
        "parameters": [],
        "requestBody": {
          "description": "SSO content update info",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IWrtnSsoUser.IUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "SSO content updated customer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubCustomer"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/admin/access/elite": {
      "post": {
        "summary": "Promote a specific member to Elite privileges",
        "description": "Promote a specific member to Elite privileges.\n\nPromote a specific {@link IHubMember} to {@link IHubMemberElite}.",
        "tags": [
          "Admin"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Elite promotion information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubMemberElite.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Promoted member information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubMemberElite"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/admin/access/elite/{id}": {
      "delete": {
        "description": "Remove Elite privileges for a specific member\n\nRemove Elite privileges for a specific {@link IHubMember}.\nThis does not actually delete the privileges, but leaves a snapshot of the privileges being removed.",
        "tags": [
          "Admin"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " specific {@link IHubMember.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/admin/access/villain": {
      "post": {
        "description": "Demote a specific member to a Villain member\n\nDemotes a specific {@link IHubMember} to {@link IHubMemberVillain}.",
        "tags": [
          "Admin"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Villain demotion information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubMemberVillain.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Demoted member information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubMemberVillain"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/admin/access/villain/{id}": {
      "delete": {
        "description": "Remove Villain privileges of a specific member\n\nRemove Villain privileges of a specific {@link IHubMember}.\nIt does not actually delete, but leaves a snapshot of the privileges being lowered.",
        "tags": [
          "Admin"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " specific {@link IHubMember.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/admin/aggregate": {
      "patch": {
        "summary": "Retrieve all members list",
        "description": "Retrieve all members list.\n\nRetrieve all members registered in Ecosystem Members.\n\n{@link IHubAdministrator} retrieves all information about {@link IHubMember}.\n\nThis information includes information about {@link IHubMember} including whether they are Villain & Elite.",
        "tags": [
          "Admin"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IAdminCustomerAggregate.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIAdminCustomerAggregate.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/authenticate": {
      "get": {
        "summary": "Get admin info",
        "description": "Get admin info.\n\n{@link IHubAdministrator Admin} {@link IHubCustomer customer} who signed up\nas a member, re-queries his\n{@link IHubAdministrator.Invert Admin Base Reverse Reference Info}.",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "admin info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubAdministrator.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/authenticate/login": {
      "patch": {
        "summary": "Admin member login",
        "description": "Admin member login.\n\n{@link IHubAdministrator administrator} {@link IHubCustomer customer},\nenters the account email and password to log in.\n\nThis API is basically the same as the customer-side login API,\n{@link HubApi.functional.hub.customers.authenticate.login}, but it allows login\nfor simple {@link IHubMember members} who have not registered as\n{@link join administrator members}, and this is not the case. In addition,\nthe returned type is also a structure that\n{@link IHubAdministrator.IInvert reverse reference} from the administrator to\nmember and customer information, while the customer-side API is a structure that\nforward references {@link IHubCustomer.member customer to member}, and\n{@link IHubMember.seller member to administrator}.\n\nNote that before logging in as an administrator, you must call the\n{@link HubApi.functional.hub.customers.authenticate.create} function to issue a\n{@link IHubCustomer customer} record and token. This is because the system\ncannot do anything without issuing a customer token.",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Member login input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubMember.ILogin"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Sales information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubAdministrator.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/coupons": {
      "post": {
        "summary": "Register a discount coupon",
        "description": "Register a discount coupon.\n\nDesign and register a new discount coupon.\n\nPlease note that editing of coupons is not possible. Instruct users to\ndelete and create a new one.",
        "tags": [
          "Coupon"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Discount coupon input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubCoupon.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Discount coupon information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubCoupon"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "View discount coupons in bulk",
        "description": "View discount coupons in bulk.\n\n{@link IHubCoupon discount coupon} lists are returned after {@link IPage paging}.\n\nIf the current discount coupon search target is {@link IHubCustomer customer},\n\nonly coupons that are publicly available and that the current customer\ncan issue the {@link IHubCouponTicket ticket} will be displayed.",
        "tags": [
          "Coupon"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubCoupon.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paging list of discount coupons",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubCoupon"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/coupons/{id}": {
      "delete": {
        "summary": "Delete discount coupon",
        "description": "Delete discount coupon.\n\nHowever, coupons that have already started discounting cannot be deleted.",
        "tags": [
          "Coupon"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubCoupon.id } of the target discount coupon"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "View individual discount coupons",
        "description": "View individual discount coupons.",
        "tags": [
          "Coupon"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "title": "{@link IHubCoupon.id } of the target discount coupon",
            "description": " {@link IHubCoupon.id } of the target discount coupon."
          }
        ],
        "responses": {
          "200": {
            "description": "Discount coupon details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubCoupon"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/deposits/donations": {
      "patch": {
        "summary": "Bulk inquiry of deposit donation history",
        "description": "Bulk inquiry of deposit donation history.\n\n{@link IHubAdministrator administrator} retrieves\n{@link IHubDepositDonation donation history} for {@link IHubCustomer customer}.\n\nThe returned information is {@link IPage paging} processed, and depending\non how the request information {@link IHubDepositDonation.IRequest} is set,\nthe number of records per page can be {@link IHubDepositDonation.IRequest.limit},\nor only deposit donation history that satisfies a specific condition can be\n{@link IHubDepositDonation.IRequest.search}, or\n{@link IHubDepositDonation.IRequest.sort sort conditions} of deposit donation\nhistory can be arbitrarily set.",
        "tags": [
          "Deposit"
        ],
        "parameters": [],
        "requestBody": {
          "description": "page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubDepositDonation.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "paging processed deposit contribution history list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubDepositDonation"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "summary": "Donate a deposit",
        "description": "Donate a deposit.\n\n{@link IHubAdministrator administrator} randomly donates a\n{@link IHubDepositDonation deposit} to a specific customer\n({@link IHubCitizen citizen}).\n\nHowever, the administrator must write the\n{@link IHubDepositDonation.reason reason} when donating a deposit.",
        "tags": [
          "Deposit"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Deposit donation input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubDepositDonation.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Deposit donation details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubDepositDonation"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/deposits/donations/{id}": {
      "get": {
        "summary": "Check deposit donation history",
        "description": "Check deposit donation history.\n\nCheck the deposit donation history {@link IHubDepositDonation} individually.",
        "tags": [
          "Deposit"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubDepositDonation.id } of the target donation history"
          }
        ],
        "responses": {
          "200": {
            "description": "donation history information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubDepositDonation"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/deposits": {
      "patch": {
        "summary": "Bulk search for deposit meta information",
        "description": "Bulk search for deposit meta information.\n\nAll deposit meta information existing in this hub system is searched in bulk.\n\nThe returned information is processed with {@link IPage paging}, and depending\non how the request information {@link IHubDeposit.IRequest} is set, the number\nof records per page can be {@link IHubDeposit.IRequest.limit}, or only deposit\nmeta information satisfying a specific condition can be\n{@link IHubDeposit.IRequest.search}, or\n{@link IHubDeposit.IRequest.sort sorting conditions} of deposit meta information\ncan be arbitrarily set.",
        "tags": [
          "Deposit"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubDeposit.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubDeposit"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "summary": "Registering deposit meta information",
        "description": "Registering deposit meta information.\n\nRegister a new deposit meta information {@link IHubDeposit}. This is the same\nas registering a new {@link IHubDepositHistory deposit deposit/withdrawal}\nreason.\n\nOf course, registering this record does not mean that the deposit will be\nautomatically deposited/withdrawn immediately for that reason. The deposit\ndeposit/withdrawal must be implemented as actual backend logic.",
        "tags": [
          "Deposit"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Deposit meta information input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubDeposit.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Deposit meta information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubDeposit"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/deposits/{id}": {
      "get": {
        "summary": "Individually query deposit meta information",
        "description": "Individually query deposit meta information.\n\nIndividually query deposit meta information {@link IHubDeposit}.",
        "tags": [
          "Deposit"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubDeposit.id } of target deposit meta information"
          }
        ],
        "responses": {
          "200": {
            "description": "deposit meta information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubDeposit"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete deposit meta information",
        "description": "Delete deposit meta information.\n\nDelete the deposit meta information {@link IHubDeposit}. This will prevent\nthe deposit from being deposited or withdrawn {@link IHubDepositHistory}\nfor that reason.",
        "tags": [
          "Deposit"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubDeposit.id } of the target deposit meta information"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/openapi/translate/document": {
      "post": {
        "summary": "Translate Swagger Document",
        "description": "Translate Swagger Document.\n\nTranslate Swagger document into the desired language.\n\nYou can request the translation with the Swagger document or\nits containing URL.",
        "tags": [],
        "parameters": [],
        "requestBody": {
          "description": "Request of the Swagger or its URL to translate",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ISwaggerTranslation.IUrlRequest"
                  },
                  {
                    "$ref": "#/components/schemas/ISwaggerTranslation.IDocumentRequest"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "url": "#/components/schemas/ISwaggerTranslation.IUrlRequest",
                    "document": "#/components/schemas/ISwaggerTranslation.IDocumentRequest"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Translated Swagger",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISwagger"
                }
              }
            }
          }
        }
      }
    },
    "/hub/admins/openapi/translate/url": {
      "post": {
        "summary": "Translate Swagger and get URL of the translated",
        "description": "Translate Swagger and get URL of the translated.\n\nTranslate Swagger document into the desired language from URL address,\nand get the URL of the translated Swagger.",
        "tags": [
          "OpenAPI"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request of the URL to translate",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISwaggerTranslation.IUrlRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "URL containing the translated Swagger",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISwaggerTranslation"
                }
              }
            }
          }
        }
      }
    },
    "/hub/admins/orders/{orderId}/goods/{goodId}/issues/{issueId}/comments": {
      "patch": {
        "summary": "Issue comment list",
        "description": "Issue comment list.\n\nRetrieve {@link IHubOrderGoodIssueComment} list.\n\nThe returned {@link IHubOrderGoodIssueComment} are {@link IPage paging}\nprocessed. And depending on how the request information\n{@link IHubOrderGoodIssueComment.IRequest} is set, you can\n{@link IHubOrderGoodIssueComment.IRequest.limit} limit the number of records\nper page, {@link IHubOrderGoodIssueComment.IRequest.search} search only comments\nthat satisfy a specific condition, or\n{@link IHubOrderGoodIssueComment.IRequest.sort sort condition} of the comments\ncan be arbitrarily specified.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " target {@link IHubOrder.id }"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " target {@link IHubOrderGood.id }"
          },
          {
            "name": "issueId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " target {@link IHubOrderGoodIssue.id }"
          }
        ],
        "requestBody": {
          "description": "list request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGoodIssueComment.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "paged ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubOrderGoodIssueComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/orders/{orderId}/goods/{goodId}/issues/{issueId}/comments/{id}": {
      "get": {
        "summary": "Issue Comment Lookup",
        "description": "Issue Comment Lookup.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " target {@link IHubOrder.id }"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " target {@link IHubOrderGood.id }"
          },
          {
            "name": "issueId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " target {@link IHubOrderGoodIssue.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " target {@link IHubOrderGoodIssueComment.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrderGoodIssueComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/orders/{orderId}/goods/{goodId}/issues": {
      "patch": {
        "summary": "View the Issue Summary Information List",
        "description": "View the Issue Summary Information List.\n\nView the summary information list of {@link IHubOrderGoodIssue}.\n\nThe returned {@link IHubOrderGoodIssue}s are {@link IPage paging} processed.\n\nAnd depending on how the request information {@link IHubOrderGoodIssue.IRequest}\nis set, you can {@link IHubOrderGoodIssue.IRequest.limit} limit the number\nof records per page, {@link IHubOrderGoodIssue.IRequest.search} search only\nissues that satisfy a specific condition, or\n{@link IHubOrderGoodIssue.IRequest.sort sort conditions} of the issues can be\narbitrarily specified.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the target order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the target product"
          }
        ],
        "requestBody": {
          "description": "List request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGoodIssue.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Summary information list of paged issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubOrderGoodIssue.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/orders/{orderId}/goods/{goodId}/issues/{id}": {
      "get": {
        "summary": "View Issue Details",
        "description": "View Issue Details.\n\nRetrieve details of {@link IHubOrderGoodIssue}.\n\nUsed when retrieving details of a specific issue.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the target order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the target product"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGoodIssue.id } of the target issue"
          }
        ],
        "responses": {
          "200": {
            "description": "Issue details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrderGoodIssue"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/orders/{orderId}/goods/{goodId}/snapshots": {
      "patch": {
        "summary": "Retrieve the list of available API snapshots from the ordered product",
        "description": "Retrieve the list of available API snapshots from the ordered product.\n\nRetrieve the list of available APIs from the {@link IHubOrderGood product}\nordered by the customer. In other words, retrieve all available snapshots of\n{@link IHubSaleSnapshot.IInvert.version versions} for the product ordered by\nthe customer.\n\nNote that the {@link IHubSaleUnitStock.price price information} recorded at\nthis time is not the price of the snapshot, but the price of the product\nordered by the customer. Also, the statistical information recorded in the\nsnapshot is only for the snapshot time. For example, in the case of\n{@link IHubSaleGoodAggregate.call_count}, which means the total number of\nAPI calls, the total number of calls for the snapshot time is recorded,\nnot the total number of calls for the attributed items.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the product"
          }
        ],
        "requestBody": {
          "description": "Page request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paged snapshots",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleSnapshot.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/orders/{orderId}/goods/{goodId}/snapshots/{id}": {
      "get": {
        "summary": "Retrieve a specific snapshot available from an ordered product",
        "description": "Retrieve a specific snapshot available from an ordered product.\n\nRetrieve a specific API\n{@link IHubSaleSnapshot.IInvert snapshot} from the {@link IHubOrderGood product}\nordered by the customer. In other words, retrieve a snapshot of the current\nor past {@link IHubSaleSnapshot.IInvert.version version} available for the\nproduct ordered by the customer.\n\nNote that the {@link IHubSaleUnitStock.price price information} recorded at\nthis time is not the price of the snapshot, but the price of the product\nordered by the customer. In addition, the statistical information recorded in\nthe snapshot is also only for the snapshot time. For example, in the case of\n{@link IHubSaleGoodAggregate.call_count}, which means the total number of\nAPI calls, the total number of calls for the snapshot time is recorded,\nnot the total number of calls for the attributed items.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the product"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleSnapshot.IInvert.id } of the target snapshot"
          }
        ],
        "responses": {
          "200": {
            "description": "snapshot information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleSnapshot.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/orders/{orderId}/goods/{goodId}/snapshots/{id}/swagger": {
      "patch": {
        "summary": "Retrieve the Swagger document",
        "description": "Retrieve the Swagger document.\n\nFor a specific {@link IHubSaleSnapshot.IInvert snapshot} available\nfrom {@link IHubOrderGood Ordered Good}, specify the\n{@link IHubSaleSnapshotUnit.IInvert unit} and fetch its\n{@link ISwagger Swagger document}.\n\nEach time an API is called in the returned Swagger document, the number\nof API calls for that product is counted, the execution history is recorded,\nand the deposit is charged if necessary.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the bound order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the bound product"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleSnapshot.IInvert.id } of the target snapshot"
          }
        ],
        "requestBody": {
          "description": "Identifier key for the target unit",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleUnitSwaggerAccessor"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Swagger Documentation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISwagger"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/orders/{orderId}/goods/{goodId}/snapshots/{id}/openai": {
      "patch": {
        "summary": "Retrieve the OpenAI document",
        "description": "Retrieve the OpenAI document.\n\nFor a specific {@link IHubSaleSnapshot.IInvert snapshot} available from\nthe {@link IHubOrderGood order product}, specify the\n{@link IHubSaleSnapshotUnit.IInvert unit} and fetch its\n{@link IOpenAiDocument OpenAI schema document}.\n\nEach time an API is called in the returned OpenAI document, the number\nof API calls for that product is counted, the execution history is recorded,\nand the deposit is charged if necessary.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the product"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleSnapshot.IInvert.id } of the target snapshot"
          }
        ],
        "requestBody": {
          "description": "Identifier key for the target unit",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleUnitOpenAiSchemaAccessor"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OpenAI schema document",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHttpOpenAiApplication"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/orders/{orderId}/goods": {
      "patch": {
        "summary": "Bulk query of reverse reference information of ordered products",
        "description": "Bulk query of reverse reference information of ordered products.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Request information of ordered products",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGood.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of reverse reference information of ordered products that have been paged",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubOrderGood.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/orders/{orderId}/goods/{id}": {
      "get": {
        "summary": "Lookup the reverse reference information of the order item individually",
        "description": "Lookup the reverse reference information of the order item individually.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the order"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the target order item"
          }
        ],
        "responses": {
          "200": {
            "description": "reverse reference information of the order item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrderGood.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/orders": {
      "patch": {
        "summary": "Order list",
        "description": "Order list.\n\nRetrieve {@link IHubOrder} list.\n\nThe returned {@link IHubOrder}s are {@link IPage paging} processed. And\ndepending on how the request information {@link IHubOrder.IRequest} is set,\nyou can {@link IHubOrder.IRequest.limit} limit the number of records per page,\n{@link IHubOrder.IRequest.search} search only orders that satisfy a specific\ncondition, or {@link IHubOrder.IRequest.sort sort condition} of orders\narbitrarily.",
        "tags": [
          "Order"
        ],
        "parameters": [],
        "requestBody": {
          "description": "list request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrder.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "paging ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubOrder"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/orders/{id}": {
      "get": {
        "summary": "Order details",
        "description": "Order details.\n\nRetrieve a specific {@link IHubOrder}.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrder"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/push-messages/csv": {
      "post": {
        "summary": "Bulk creation/update of metadata via CSV file",
        "description": "Bulk creation/update of metadata via CSV file.\n\nBulk create or update metadata records of push messages via CSV file with\nthe columns below. If the column composition of the input CSV file is different\nfrom the following, a 400 Bad Request error occurs.\n\nAlso, for each record in CSV, if there is a code of an existing push message,\nthe corresponding push message metadata record is updated, otherwise a new\nrecord is created.",
        "tags": [
          "PushMessage"
        ],
        "parameters": [],
        "requestBody": {
          "description": "CSV file, etc.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/IHubPushMessage.ICsvUpload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/push-messages": {
      "post": {
        "summary": "Create push message metadata",
        "description": "Create push message metadata.",
        "tags": [
          "PushMessage"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Push message input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubPushMessage.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Push message information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubPushMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "Bulk push message query",
        "description": "Bulk push message query.",
        "tags": [
          "PushMessage"
        ],
        "parameters": [],
        "requestBody": {
          "description": "page request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubPushMessage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "push message list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubPushMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/push-messages/{id}": {
      "put": {
        "summary": "Modify push message content",
        "description": "Modify push message content.",
        "tags": [
          "PushMessage"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubPushMessage.id } of the target push message"
          }
        ],
        "requestBody": {
          "description": "content input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubPushMessageContent.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "modified content information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubPushMessageContent"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a push message",
        "description": "Delete a push message.\n\nThis is not an actual deletion, but a soft deletion.",
        "tags": [
          "PushMessage"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubPushMessage.id } of the target push message"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Push message individual query",
        "description": "Push message individual query.",
        "tags": [
          "PushMessage"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubPushMessage.id } of target push message"
          }
        ],
        "responses": {
          "200": {
            "description": "Push message details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubPushMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/push-messages/{code}/get": {
      "get": {
        "summary": "Push message individual query by code",
        "description": "Push message individual query by code.",
        "tags": [
          "PushMessage"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IHubPushMessage.code } of target push message"
          }
        ],
        "responses": {
          "200": {
            "description": "Push message details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubPushMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/push-messages/histories": {
      "patch": {
        "summary": "Bulk query of push message sending history",
        "description": "Bulk query of push message sending history.",
        "tags": [
          "PushMessage"
        ],
        "parameters": [],
        "requestBody": {
          "description": "page request and search information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubPushMessageHistory.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "list of push message sending history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubPushMessageHistory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/push-messages/histories/{id}": {
      "get": {
        "summary": "Individual inquiry of push message sending history",
        "description": "Individual inquiry of push message sending history.",
        "tags": [
          "PushMessage"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubPushMessageHistory.id } of target push message\r\nsending history"
          }
        ],
        "responses": {
          "200": {
            "description": "Push message sending history details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubPushMessageHistory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/sales/{saleId}/audits/{auditId}/comments": {
      "patch": {
        "summary": "Bulk query review comment history",
        "description": "Bulk query review comment history.\n\nFor a specific {@link IHubSaleAudit review post}, {@link IHubSeller sales party}\nand {@link IHubAdministrator administrator} query\n{@link IHubSaleAuditComment comments} in bulk.\n\nThe returned information is {@link IPage paging} processed, and depending\non how the request information {@link IHubSaleAuditComment.IRequest} is set,\nthe number of records per page can be {@link IHubSaleAuditComment.IRequest.limit},\nor only comments that meet a specific condition can be\n{@link IHubSaleAuditComment.IRequest.search}, or the\n{@link IHubSaleAuditComment.IRequest.sort sort condition} of the comments\ncan be set arbitrarily.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the property"
          },
          {
            "name": "auditId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleAudit.id } of the audit"
          }
        ],
        "requestBody": {
          "description": "page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleAuditComment.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "list of paged audit comments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleAuditComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "summary": "Write a review comment",
        "description": "Write a review comment.\n\nWrite a comment on a specific {@link IHubSaleAudit review post}",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of a specific listing"
          },
          {
            "name": "auditId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleAudit.id } of a specific review"
          }
        ],
        "requestBody": {
          "description": "Comment writing information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleAuditComment.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Comment writing information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleAuditComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/sales/{saleId}/audits/{auditId}/comments/{id}": {
      "get": {
        "summary": "View individual audit comments",
        "description": "View individual audit comments.\n\nView individual {@link IHubSaleAuditComment comments} written by\n{@link IHubSeller selling party} or {@link IHubAdministrator administrator} for\na specific {@link IHubSaleAudit audit post}.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the listing"
          },
          {
            "name": "auditId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleAudit.id } of the audit"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleAuditComment.id } of the comment"
          }
        ],
        "responses": {
          "200": {
            "description": "comment information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleAuditComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "summary": "Editing comments on a review post",
        "description": "Editing comments on a review post.\n\n{@link IHubSaleAuditComment comment} written on a specific\n{@link IHubSaleAudit review} post, {@link IHubSeller seller} or\n{@link IHubAdministrator administrator} can edit it themselves.\n\nHowever, as is the policy that this hub system applies to comments in general,\nediting this comment does not actually change the existing content. The edited\ncontent is recorded as a new {@link IHubSaleAuditComment.ISnapshot snapshot},\naccumulated in the existing comment. This is also made public to the\n{@link IHubAdministrator administrator} and {@link IHubSeller seller}, so\nanyone who can view the {@link IHubSaleAudit review} post can also view the\nedit history.\n\nThis is to prevent administrators or sellers from manipulating the situation\nby editing their comments, etc., due to the nature of e-commerce, which is\nprone to disputes. In other words, it is for the purpose of preserving\nevidence.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the property to be attributed"
          },
          {
            "name": "auditId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleAudit.id } of the attributed audit"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleAuditComment.id } of the comment to be modified"
          }
        ],
        "requestBody": {
          "description": "Comment modification information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleAuditComment.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Newly created snapshot content information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IBbsArticleComment.ISnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/sales/{saleId}/audits": {
      "post": {
        "summary": "Initiate an audit",
        "description": "Initiate an audit.\n\n{@link IHubAdministrator administrator} creates an {@link IHubSaleAudit audit post},\nand notifies the {@link IHubSeller selling party} of the {@link IHubSale listing}\nof the audit initiation and commencement.\n\nThe administrator writes the audit post, describes how the audit will proceed,\nand can supplement the content of the audit initiation post by adding\n{@link IHubSaleAuditSnapshot.files attachments}, etc. In addition, the\nadministrator and the seller can communicate with each other by writing\n{@link IHubSaleAuditComment comments} on this post.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the listing"
          }
        ],
        "requestBody": {
          "description": "audit input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleAudit.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "audit information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleAudit"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/sales/{saleId}/audits/{id}": {
      "put": {
        "summary": "Editing an audit post",
        "description": "Editing an audit post.\n\nEdit the {@link IHubAdminSaleAudit audit post} written by\n{@link IHubAdministrator} yourself.\n\nNote that the administrator who wrote the audit post and the administrator\nwho {@link approved} or {@link rejected} can be different, but only the\ninitiating administrator can edit it. If an administrator wants to say\nsomething different from what the initiating administrator wrote in the post,\nthey should write a {@link IHubSaleAuditComment comment} instead.\n\nIn addition, as is the policy that this hub system applies to posts in general,\neven if an administrator edits a {@link IHubSaleAudit audit post}, the original\ncontent does not actually change. The edited content is accumulated and recorded\nin the existing post record as a new {@link IHubSaleAudit.ISnapshot snapshot}.\nAnd this is disclosed to everyone, including {@link IHubSeller seller} and\n{@link IHubAdministrator administrator}, and anyone who can view the post\ncan also view the revision history.\n\nThis is to prevent administrators or sellers from manipulating the situation\nby editing their own posts, as e-commerce is a highly dispute-prone industry.\nIn other words, it is for the purpose of preserving evidence.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the listing to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleAudit.id } of the audit target"
          }
        ],
        "requestBody": {
          "description": "audit revision information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleAudit.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "audit information snapshot",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IBbsArticle.ISnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "View audit information details",
        "description": "View audit information details.\n\nView {@link IHubSaleAudit audit post} for {@link IHubSale listing} in detail.\n\nThe returned information {@link IHubSaleAudit} contains information such as\nwhich {@link IHubAdministrator administrator} initiated the audit, and who\n{@link IHubSaleAuditRejection rejected} or\n{@link IHubSaleAuditApproval approved}, along with the respective dates and\ntimes.\n\nIn addition, {@link IHubSeller seller} and administrator can communicate\nabout the audit using {@link IHubSaleAuditComment comments}, so please also\ncall the comment-related API {@link audits.comments.index}.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the listing"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleAudit.id } of the audit target"
          }
        ],
        "responses": {
          "200": {
            "description": "audit information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleAudit"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/sales/{saleId}/audits/{id}/approve": {
      "post": {
        "summary": "Approve the review",
        "description": "Approve the review.\n\n{@link IHubAdministrator administrator} approves the current\n{@link IHubSaleAudit review}, and allows the sale of the {@link IHubSale listing}.\n\nNote that the administrator who approved the review and the administrator\nwho wrote the review initiation post may be different.\n\nAlso, it is possible to {@link reject} the review and then approve it again\n(when {@link IHubSaleAuditRejection.reversible} is `true`), and in this case,\nthe administrator who rejected the review and the administrator who approved\nit may be different.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the listing to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleAudit.id } of the target review"
          }
        ],
        "requestBody": {
          "description": "Input information for review approval",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleAuditApproval.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Information for review approval",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleAuditApproval"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/sales/{saleId}/audits/{id}/reject": {
      "post": {
        "summary": "Reject the review",
        "description": "Reject the review.\n\n{@link IHubAdministrator administrator} rejects the current\n{@link IHubSaleAudit review} and disallows the sale of the\n{@link IHubSale listing}.\n\nHowever, the review rejection can be reversed and {@link approve} in some cases.\nThis is the case when the {@link IHubSaleAuditRejection.reversible} value among\nthe information entered by the administrator is `true`.\n\nIn this case, the seller can {@link emend edit} and resubmit the listing\naccording to the administrator's instructions. Also, if the seller wants to\nraise an objection to the review rejection, the seller can write a\n{@link IHubSaleAuditComment comment} on the current review post and ask the\nadministrator to reverse the rejection and {@link approve}.\n\nThe administrator can accept the seller's approval request and actually allow\nthe sale of the item. However, on the other hand, it is impossible to change\nan already approved review to a rejection, so please keep this in mind.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the item to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleAudit.id } of the target review"
          }
        ],
        "requestBody": {
          "description": "Input information for the review rejection",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleAuditRejection.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Information for the review rejection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleAuditRejection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/sales/{saleId}/audits/{id}/emend": {
      "put": {
        "summary": "Edit during review",
        "description": "Edit during review.\n\nIf a {@link IHubSeller seller} registered (or modified)\n{@link IHubSale listing} is currently under {@link IHubSaleAudit review},\nthe seller and the {@link IHubAdministrator administrator} can edit and\nadd to it.\n\nOf course, this is limited to listings that are undergoing review, and\nlistings that have not even started review yet cannot be edited. Also, listings\nthat have {@link IHubSaleAuditApproval approval} completed cannot be edited.\n\nHowever, for listings that have been {@link IHubSaleAuditRejection rejected}\nby the administrator, the seller can request a retrial by editing it. Of course,\nthis is limited to\n{@link IHubSaleAuditRejection.reversible reversible rejections}.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target listing"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleAudit.id } of the target audit"
          }
        ],
        "requestBody": {
          "description": "Editing content",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleAuditEmendation.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Editing completion information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleAuditEmendation"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/sales/{saleId}/questions/{inquiryId}/comments": {
      "patch": {
        "summary": "View the list of comments for product inquiries",
        "description": "View the list of comments for product inquiries.\n\nView the {@link IHubSaleInquiryComment} list.\n\nThe returned {@link IHubSaleInquiryComment}s are processed with\n{@link IPage paging}. And depending on how the request information\n{@link IHubSaleInquiryComment.IRequest} is set, you can\n{@link IHubSaleInquiryComment.IRequest.limit} limit the number of records\nper page, {@link IHubSaleInquiryComment.IRequest.search} search for comments\nfor product inquiries that satisfy a specific condition, or\n{@link IHubSaleInquiryComment.IRequest.sort} arbitrarily specify the sort\ncondition for comments for product inquiries.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target sale"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiry.id } of the target inquiry"
          }
        ],
        "requestBody": {
          "description": "list request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleInquiryComment.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "paged ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/sales/{saleId}/questions/{inquiryId}/comments/{id}": {
      "get": {
        "summary": "Retrieve a specific comment for a product inquiry",
        "description": "Retrieve a specific comment for a product inquiry.\n\nRetrieve a specific {@link IHubSaleInquiryComment}.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the sale"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiry.id } of the inquiry"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiryComment.id } to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment for the retrieved product inquiry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/sales/{saleId}/questions": {
      "patch": {
        "summary": "Retrieve the list of question summary information for the listing snapshot",
        "description": "Retrieve the list of question summary information for the listing snapshot.\n\nRetrieve the {@link IHubSaleQuestion} list.\n\nThe returned {@link IHubSaleQuestion}s are {@link IPage paging} processed.\nAnd depending on how the request information {@link IHubSaleQuestion.IRequest}\nis set, you can {@link IHubSaleQuestion.IRequest.limit} limit the number of\nrecords per page, {@link IHubSaleQuestion.IRequest.search} search for questions\nfor listing snapshots that meet a specific condition, or\n{@link IHubSaleQuestion.IRequest.sort} specify the sort condition for questions\nfor listing snapshots.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the sale in question"
          }
        ],
        "requestBody": {
          "description": "list request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleQuestion.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "list of paged ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleQuestion.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/sales/{saleId}/questions/{id}": {
      "get": {
        "summary": "Retrieve question details for a listing snapshot",
        "description": "Retrieve question details for a listing snapshot.\n\nRetrieves a specific {@link IHubSaleQuestion}.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the sale in question"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleQuestion.id } to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Question details for the retrieved listing snapshot",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleQuestion"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a question about a listing snapshot",
        "description": "Delete a question about a listing snapshot.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the sale being deleted"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleQuestion.id } to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "void",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/sales/{saleId}/reviews/{inquiryId}/comments": {
      "patch": {
        "summary": "View the list of comments for product inquiries",
        "description": "View the list of comments for product inquiries.\n\nView the {@link IHubSaleInquiryComment} list.\n\nThe returned {@link IHubSaleInquiryComment}s are processed with\n{@link IPage paging}. And depending on how the request information\n{@link IHubSaleInquiryComment.IRequest} is set, you can\n{@link IHubSaleInquiryComment.IRequest.limit} limit the number of records\nper page, {@link IHubSaleInquiryComment.IRequest.search} search for comments\nfor product inquiries that satisfy a specific condition, or\n{@link IHubSaleInquiryComment.IRequest.sort} arbitrarily specify the sort\ncondition for comments for product inquiries.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target sale"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiry.id } of the target inquiry"
          }
        ],
        "requestBody": {
          "description": "list request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleInquiryComment.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "paged ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/sales/{saleId}/reviews/{inquiryId}/comments/{id}": {
      "get": {
        "summary": "Retrieve a specific comment for a product inquiry",
        "description": "Retrieve a specific comment for a product inquiry.\n\nRetrieve a specific {@link IHubSaleInquiryComment}.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the sale"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiry.id } of the inquiry"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiryComment.id } to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment for the retrieved product inquiry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/sales/{saleId}/reviews": {
      "patch": {
        "summary": "Retrieve a list of review summary information for a listing snapshot",
        "description": "Retrieve a list of review summary information for a listing snapshot.\n\nRetrieve a list of summary information for {@link IHubSaleReview}.\n\nThe returned {@link IHubSaleReview}s are {@link IPage paging} processed.\n\nDepending on how you set the request information {@link IHubSaleReview.IRequest},\nyou can {@link IHubSaleReview.IRequest.limit} limit the number of records per\npage, {@link IHubSaleReview.IRequest.search} search reviews for listing\nsnapshots that meet a specific condition, or {@link IHubSaleReview.IRequest.sort}\nrandomly specify a sort condition for reviews for listing snapshots.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the sale in question"
          }
        ],
        "requestBody": {
          "description": "list request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleReview.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "list of review summary information for paged listing snapshots",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleReview.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/sales/{saleId}/reviews/{id}": {
      "get": {
        "summary": "View review details for a listing snapshot",
        "description": "View review details for a listing snapshot.\n\nView a specific {@link IHubSaleReview}.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the sale in question"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleReview.id } to view"
          }
        ],
        "responses": {
          "200": {
            "description": "Review details for the viewed listing snapshot.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleReview"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a review for a listing",
        "description": "Delete a review for a listing.\n\nDelete a review for a specific listing.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the sale in question"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleReview.id } to query"
          }
        ],
        "responses": {
          "200": {
            "description": "void",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/sales": {
      "patch": {
        "summary": "View the summary information list of properties",
        "description": "View the summary information list of properties.\n\n{@link IHubSale.ISummary summary information of properties} is loaded.\n\nThe returned {@link IHubSale.ISummary summary information} is\n{@link IPage paging} processed. And depending on how the request information\n{@link IHubSale.IRequest} is set, you can {@link IHubSale.IRequest.limit} limit\nthe number of records per page, {@link IHubSale.IRequest.search} search only\nproperties that satisfy a specific condition, or\n{@link IHubSale.IRequest.sort sort conditions} of properties can be arbitrarily\nspecified.",
        "tags": [
          "Sale"
        ],
        "parameters": [],
        "requestBody": {
          "description": "page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSale.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "list of summary information of properties that have been paged",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSale.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/sales/{id}": {
      "get": {
        "summary": "View detailed listings",
        "description": "View detailed listings.\n\nView the target listing's detailed information {@link IHubSale}.\n\nHowever, depending on who is viewing the listing, the detailed attribute values\nmay vary. The most representative one is {@link IHubSaleUnitSwagger.host},\nwhich contains the middleware API address of this hub system when the viewing\nsubject is a customer, and the commercial server API address registered by the\nseller/administrator when the viewing subject is a seller/administrator.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target listing's {@link IHubSale.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Listing details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSale"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/sales/{id}/swagger": {
      "patch": {
        "summary": "Retrieve Swagger information",
        "description": "Retrieve Swagger information.\n\nSpecifies a specific {@link IHubSaleUnit unit} and\n{@link IHubSaleUnitStock stock} from the target {@link IHubSale listing},\nand retrieves its {@link ISwagger Swagger} information.\n\nThe returned Swagger document contains the actual server API address\nregistered by the seller based on the {@link IHubSeller seller} and\n{@link IHubAdministrator administrator}, and the middleware API address of\nthis hub system for the DEV server based on the {@link IHubCustomer customer}.\nFor commercial purposes, the REAL server address is excluded.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target listing"
          }
        ],
        "requestBody": {
          "description": "Identifier key for the target unit (and stock)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleUnitSwaggerAccessor"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Swagger information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISwagger"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/sales/{saleId}/snapshots": {
      "patch": {
        "summary": "Get a list of summary information of approved snapshots in a listing",
        "description": "Get a list of summary information of approved snapshots in a listing.\n\nFor a specific {@link IHubSale listing}, retrieve\n{@link IHubSaleSnapshot.ISummary summary information} of all snapshots that\nhave been {@link IHubSaleAuditApproval audit approved} past and present.\n\nAnd at this time, the recorded statistics/aggregation information is\nonly written for the snapshot time. For example,\n{@link IHubSaleGoodAggregate.call_count}, which means the total number of\nAPI calls, is written for the snapshot time, not the total number of calls\nfor the listing.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the listing"
          }
        ],
        "requestBody": {
          "description": "page request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of snapshot summary information grouped by page",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleSnapshot.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/sales/{saleId}/snapshots/{id}": {
      "get": {
        "summary": "View details of approved snapshots in Mem",
        "description": "View details of approved snapshots in Mem.\n\nView {@link IHubSaleSnapshot snapshot} of a specific time period that\nhas been {@link IHubSaleAuditApproval} approved for review within\n{@link IHubSale listing}.\n\nHowever, if the listing is in {@link IHubSaleAudit review} and is in the\n{@link IHubSaleAuditEmendation revision} process, then\n{@link IHubSeller sellers} and {@link IHubAdministrator administrators}\ncan view it even if the review has not been approved.\n\nAnd at this time, the recorded statistics/aggregation information is only\nfor the snapshot time. For example, {@link IHubSaleGoodAggregate.call_count}\nwhich means the total number of API calls, the total number of calls for\nthe snapshot time is recorded, not the total number of calls for the listing.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the listing"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleSnapshot.id } of the target snapshot"
          }
        ],
        "responses": {
          "200": {
            "description": "snapshot details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleSnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/sales/{saleId}/snapshots/{id}/flip": {
      "get": {
        "summary": "Retrieve listing information for approved snapshots within listings",
        "description": "Retrieve listing information for approved snapshots within listings.\n\nRetrieve information for {@link IHubSaleSnapshot snapshot} of a specific\ntime period that has been {@link IHubSaleAuditApproval} approved for review,\nand retrieve listing information {@link IHubSale} at that time.\n\nHowever, if the listing is in {@link IHubSaleAudit review} and in the\n{@link IHubSaleAuditEmendation emendation} process, then\n{@link IHubSeller sellers} and {@link IHubAdministrator administrators} can\nretrieve it, even if the review has not been approved.\n\nAnd at this time, the recorded statistics/aggregation information is only for\nthe time period of the snapshot. For example, in the case of\n{@link IHubSaleGoodAggregate.call_count}, which means the total number of API\ncalls, the total number of calls for the snapshot is recorded, not the total\nnumber of calls for the attributed property.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the attributed property"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleSnapshot.id } of the target snapshot"
          }
        ],
        "responses": {
          "200": {
            "description": "property information reverse-constructed from the snapshot",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSale"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/sales/{saleId}/snapshots/{id}/swagger": {
      "patch": {
        "summary": "Retrieve Swagger information",
        "description": "Retrieve Swagger information.\n\nSpecify a specific {@link IHubSaleUnit unit} and\n{@link IHubSaleUnitStock stock} from the target\n{@link IHubSaleSnapshot listing snapshot}, and retrieve its\n{@link ISwagger Swagger} information.\n\nThe returned Swagger document contains the actual server API address\nregistered by the seller based on {@link IHubSeller seller} and\n{@link IHubAdministrator administrator}, and the middleware API address of\nthis hub system for the DEV server based on {@link IHubCustomer customer}.\nFor commercial purposes, the REAL server address is excluded.\n\nThe Swagger document is translated and provided based on\n{@link IHubCustomer.LanguageType language code}. In addition, the\ncorresponding swagger document is provided based on information about the\n{@link IHubSaleUnit unit} and {@link IHubSaleUnitStock stock} specified by\n{@link IHubSaleUnitSwaggerAccessor}.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the property being sold"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleSnapshot.id } of the target snapshot"
          }
        ],
        "requestBody": {
          "description": "Identifier key for the target unit (and stock)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleUnitSwaggerAccessor"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "swagger information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISwagger"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/sales/{saleId}/snapshots/audits": {
      "patch": {
        "summary": "Get a list of audit information by snapshot of a listing",
        "description": "Get a list of audit information by snapshot of a listing.\n\nLoad audit information by snapshot of the target listing\n{@link IHubSaleAudit.ISummary}.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target listing"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleAudit.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of summary information of the paginated listings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleAudit.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/sales/collections": {
      "post": {
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleCollection.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleCollection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleCollection.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleCollection.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/sales/collections/{id}": {
      "delete": {
        "tags": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleCollection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/sales/{saleId}/contents": {
      "patch": {
        "summary": "List up every language contents of the sale",
        "description": "List up every language contents of the sale.\n\nList up every language contents of the sale, with the pagination.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target sale's {@link IHubSale.id }"
          }
        ],
        "requestBody": {
          "description": "Request of page information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated contents of the sale",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleContent"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/sales/{saleId}/contents/{langCode}": {
      "get": {
        "summary": "Get a specific language's content",
        "description": "Get a specific language's content.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target sale's {@link IHubSale.id }"
          },
          {
            "name": "langCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Target language code"
          }
        ],
        "responses": {
          "200": {
            "description": "Sale content of the specific language",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleContent"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/sales/{saleId}/snapshots/{snapshotId}/contents": {
      "patch": {
        "summary": "List up every language contents of the sale snapshot",
        "description": "List up every language contents of the sale snapshot.\n\nList up every language contents of the sale snapshot, with the pagination.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target sale's {@link IHubSale.id }"
          },
          {
            "name": "snapshotId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target snapshot's {@link IHubSaleSnapshot.id }"
          }
        ],
        "requestBody": {
          "description": "Request of page information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated contents of the sale snapshot",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleContent"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/sales/{saleId}/snapshots/{snapshotId}/contents/{langCode}": {
      "get": {
        "summary": "Get a specific language's content",
        "description": "Get a specific language's content.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target sale's {@link IHubSale.id }"
          },
          {
            "name": "snapshotId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target snapshot's {@link IHubSaleSnapshot.id }"
          },
          {
            "name": "langCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Target language code"
          }
        ],
        "responses": {
          "200": {
            "description": "Sale content of the specific language",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleContent"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/systematic/channels/{channelCode}/categories": {
      "post": {
        "summary": "Create a channel category",
        "description": "Create a channel category.\n\nThe administrator creates a channel category.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "channelCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Channel code"
          }
        ],
        "requestBody": {
          "description": "Channel category creation information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubChannelCategory.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created channel category information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubChannelCategory.IForAdmin"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "List of channel category information",
        "description": "List of channel category information.\n\nRetrieves the {@link IHubChannelCategory} list.\n\nChannel categories have a 1: N recursive structure, and if a parent\ncategory exists, the children field contains a list of child categories.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "channelCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Channel code"
          }
        ],
        "responses": {
          "200": {
            "description": "Channel category list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IHubChannelCategory.IHierarchical"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/systematic/channels/{channelCode}/categories/{id}": {
      "put": {
        "summary": "Modify channel category information",
        "description": "Modify channel category information.\n\nModify information for a specific category.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "channelCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Channel code"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IHubChannelCategory.id } to modify"
          }
        ],
        "requestBody": {
          "description": "Category modification information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialIHubChannelCategory.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "void",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Channel category details",
        "description": "Channel category details.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "channelCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Channel code"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " The channel category {@link IHubChannelCategory.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Channel category details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubChannelCategory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/systematic/channels/{channelCode}/categories/merge": {
      "delete": {
        "summary": "Delete channel category",
        "description": "Delete channel category.\n\nThere is no concept of deleting a category. Instead, there is a concept\nof merging categories.\n\nIf you specify a channel category to keep and a channel category to merge,\nall information in the channel category to merge will be moved to the\nchannel category to keep, and the channel category to merge will be deleted.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "channelCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " channel code"
          }
        ],
        "requestBody": {
          "description": "merge information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IRecordMerge"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "void",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/systematic/channels/{channelCode}/categories/{id}/invert": {
      "get": {
        "summary": "Parent category information of a specific category",
        "description": "Parent category information of a specific category.\n\nGet parent category information of a specific category.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "channelCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " channel code"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " specific category {@link IHubChannelCategory.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "parent category information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubChannelCategory.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/systematic/channels": {
      "post": {
        "summary": "Create a channel",
        "description": "Create a channel.\n\nThe administrator creates a {@link IHubChannel}.",
        "tags": [
          "Systematic"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Channel creation information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubChannel.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created channel information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubChannel"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "List of hub channels",
        "description": "List of hub channels.\n\nRetrieve {@link IHubChannel} list.\n\nThe returned {@link IHubChannel}s are {@link IPage paging} processed.\n\nDepending on how the request information {@link IHubChannel.IRequest} is set,\nyou can {@link IHubChannel.IRequest.limit} limit the number of records per page,\n{@link IHubChannel.IRequest.search} search for hub channels that satisfy\na specific condition, or {@link IHubChannel.IRequest.sort sorting conditions}\nof `hub_channels` arbitrarily.",
        "tags": [
          "Systematic"
        ],
        "parameters": [],
        "requestBody": {
          "description": "list request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubChannel.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "paging processed ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubChannel"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/systematic/channels/{id}": {
      "put": {
        "summary": "Modify channel information",
        "description": "Modify channel information.\n\nModify information for a specific channel.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubChannel.id } to modify"
          }
        ],
        "requestBody": {
          "description": "Modify channel information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubChannel.IUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Modified channel information",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "View the hierarchy of a specific channel by channel ID",
        "description": "View the hierarchy of a specific channel by channel ID.\n\nRetrieve the hierarchy of a specific channel.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubChannel.id } to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "the hierarchy of the specific channel retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubChannel.IHierarchical"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/systematic/channels/merge": {
      "delete": {
        "summary": "Delete channel",
        "description": "Delete channel.\n\nThere is no concept of deleting a channel. Instead, there is a concept of\nmerging channels.\n\nIf you specify a channel to keep and a channel to merge, all information\nfrom the channel to be merged will be moved to the channel to be kept,\nand the channel to be merged will be deleted.",
        "tags": [
          "Systematic"
        ],
        "parameters": [],
        "requestBody": {
          "description": "merge information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IRecordMerge"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "void",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/systematic/channels/hierarchical": {
      "patch": {
        "summary": "List of channel hierarchy information",
        "description": "List of channel hierarchy information.\n\nRetrieve {@link IHubChannel.IHierarchical} category hierarchy list.\n\nThe returned {@link IHubChannel}s are {@link IPage paging} processed.\nAnd depending on how the request information {@link IHubChannel.IRequest}\nis set, you can {@link IHubChannel.IRequest.limit} limit the number of records\nper page, {@link IHubChannel.IRequest.search} search for channel hierarchies\nthat satisfy a specific condition, or\n{@link IHubChannel.IRequest.sort sort conditions} of the channel hierarchy\narbitrarily.",
        "tags": [
          "Systematic"
        ],
        "parameters": [],
        "requestBody": {
          "description": "list request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubChannel.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "paging processed ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubChannel.IHierarchical"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/systematic/channels/{code}/get": {
      "get": {
        "summary": "View the hierarchy of a specific channel by channel code",
        "description": "View the hierarchy of a specific channel by channel code.\n\nRetrieve the hierarchy of a specific channel.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IHubChannel.code } to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "The hierarchy of the specific channel retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubChannel.IHierarchical"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/systematic/sections": {
      "post": {
        "summary": "Create a section",
        "description": "Create a section.\n\nThe administrator creates a section.",
        "tags": [
          "Systematic"
        ],
        "parameters": [],
        "requestBody": {
          "description": "section creation information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSection.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "generated section information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "List of section information",
        "description": "List of section information.\n\nRetrieves a list of {@link IHubSection}.\n\nThe returned {@link IHubSection}s are {@link IPage paging} processed.\n\nDepending on how the request information {@link IHubSection.IRequest} is set,\nyou can {@link IHubSection.IRequest.limit} limit the number of records per page,\n{@link IHubSection.IRequest.search} search for sections that satisfy a specific\ncondition, or {@link IHubSection.IRequest.sort sort conditions} of sections\narbitrarily.",
        "tags": [
          "Systematic"
        ],
        "parameters": [],
        "requestBody": {
          "description": "list request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSection.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "paging ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/systematic/sections/{id}": {
      "put": {
        "summary": "Modify section information",
        "description": "Modify section information.\n\nModify information for a specific section.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSection.id } to modify"
          }
        ],
        "requestBody": {
          "description": "section modification information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSection.IUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "modified section information",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Detailed information about a specific section by section ID",
        "description": "Detailed information about a specific section by section ID.\n\nRetrieve a specific {@link IHubSection}.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSection.id } to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "retrieved section information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/systematic/sections/merge": {
      "delete": {
        "summary": "Delete a section",
        "description": "Delete a section.\n\nThere is no concept of deleting a section.\n\nInstead, there is a concept of merging sections.\n\nIf you specify a section to keep and a section to merge, all information\nin the section to merge will be moved to the section to keep, and the section\nto merge will be deleted.",
        "tags": [
          "Systematic"
        ],
        "parameters": [],
        "requestBody": {
          "description": "merge information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IRecordMerge"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "void",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/systematic/sections/{code}/get": {
      "get": {
        "summary": "Detailed section information by section code",
        "description": "Detailed section information by section code.\n\nRetrieve specific {@link IHubSection}.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IHubSection.code } to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "retrieved section information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/statistics/orders/goods/calls": {
      "patch": {
        "summary": "View API call statistics for a specific period",
        "description": "View API call statistics for a specific period.\n\nView API usage, error rate, API latency, etc. of a product.",
        "tags": [
          "Statistics"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Search and page request information for the product to view",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGoodCallAggregate.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Statistical information about the API call history of the product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubOrderGoodCallAggregate"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/statistics/orders/goods/calls/entire": {
      "patch": {
        "summary": "View API call statistics for the entire period",
        "description": "View API call statistics for the entire period.\n\nView API usage, error rate, API latency, etc. for the entire period of\nthe product.",
        "tags": [
          "Statistics"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Specific information about the target product or listing",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGoodCallAggregate.IEntireRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Statistics for the entire period of the product's API call history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrderGoodCallAggregate"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/statistics/orders/goods/calls/ranking": {
      "patch": {
        "summary": "Retrieves the ranking of a specific period of the subscribed API",
        "description": "Retrieves the ranking of a specific period of the subscribed API.",
        "tags": [
          "Statistics"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Search and page request information for the product to be retrieved",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGoodRanking.IEntireRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Statistical information about the API call history of the product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubOrderGoodRanking"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/admins/statistics/sales/calls/rankings": {
      "patch": {
        "summary": "Search for rankings based on the number of API calls for a listing",
        "description": "Search for rankings based on the number of API calls for a listing.\n\nSearch for listings with the highest rankings based on the number of times\nthe API was called when the listing was ordered.\n\nThe total searchable ranking is up to 100, and if there is a tie between\ndifferent listings, the processing is as follows.\n\n1. Listing with the most API calls\n2. Listing with the most successful API calls\n3. Listing created faster",
        "tags": [
          "Statistics"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Page request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paging processed ranking information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleCallRanking"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/authenticate/refresh": {
      "patch": {
        "summary": "Renew token",
        "description": "Renew token.\n\nRenew by issuing a new customer authentication token and reloading\ncustomer information.\n\nNote that if this API function is called with SDK,\n{@link IHubCustomer.IAuthorized.setHeaders.Authorization customer authentication token}\nis automatically assigned to the {@link IConnection.headers} object used\nat this time.",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Renew token value",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubCustomer.IRefresh"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Customer information + authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubCustomer.IAuthorized"
                }
              }
            }
          }
        }
      }
    },
    "/hub/customers/authenticate": {
      "get": {
        "summary": "Retrieve customer information",
        "description": "Retrieve customer information.\n\nRetrieve current customer information.",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "customer information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubCustomer"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "summary": "Issue customer records",
        "description": "Issue customer records.\n\n----------------\n\nThis hub system considers all participants in this market as \"customers\".\nAnd customer records are not identified based on individual\n{@link IHubCitizen people}, but rather on the basis of connection units.\nTherefore, even if they are the same person, a new `IHubCustomer` record is\nissued for each connection.\n\nTherefore, all client applications accessing this service must first call\nthis function to report the inflow path of the {@link IHubCustomer customer}\nto the server and issue an authentication token. If this function call is omitted,\nall functions other than this API cannot be used.\n\nEven if you try to {@link activate self-authentication} or have already\n{@link join membership} and try to {@link login log in} with\n{@link IHubMember member account}, there is no exception. Before\nself-authentication or login, you must call this function `create` first.\nThis is also the case when {@link IHubSeller Seller} or\n{@link IHubAdministrator Administrator} logs in.\n\n----------------\n\nAlso, the authentication token issued at this time has an expiration time,\nso it cannot be used permanently. Please note that the authentication token is\nvalid for 3 hours, and if you want to maintain customer authentication after\n3 hours, you must call the {@link refresh} function.\n\nIn addition, if this API function is called with SDK,\n{@link IHubCustomer.IAuthorized.setHeaders.Authorization Customer Authentication Token}\nis automatically assigned to the {@link IConnection.headers} object.",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Basic information for identifying the customer's inflow path",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubCustomer.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "New customer information and authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubCustomer.IAuthorized"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Modify customer information",
        "description": "Modify customer information.\n\nModify the customer's language code.\nModify an existing record without creating a new record.",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Modify customer information input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubCustomer.IUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Modified customer information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubCustomer"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/authenticate/join": {
      "post": {
        "summary": "Sign up",
        "description": "Sign up.\n\nRegister the current {@link IHubCustomer customer} as a {@link IHubMember member}.\nAnd if you also record {@link activate authentication information} when signing up,\nthen whenever the member {@link login logs in}, you can skip authentication.\n\nAlso, if the {@link IHubCustomer citizen} in the past has\n{@link IHubExternalUser external user} or {@link activate authentication}\n{@link IHubOrder purchase} or {@link IBbsArticle posts} written, the\n{@link IHubMember member} can also view or edit these through {@link login log in}.\nIn other words, you can also access the activity history before signing up.\n\nAs a reference, as described in the {@link create} function, before calling\nthis function, you must first call the {@link create} function to issue a\n{@link IHubCustomer customer} record and token.",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Membership registration input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubMember.IJoin"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Customer information after membership registration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubCustomer"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/authenticate/login": {
      "patch": {
        "summary": "Member Login",
        "description": "Member Login.\n\n{@link IHubMember member} {@link IHubCustomer customer} logs in\nby entering the account email and password.\n\nIf the member has previously {@link activate self-verification},\n{@link IHubCustomer.citizen} will be filled in accordingly. Also, if the member\nhas also registered as {@link IHubMember.administrator administrator} or\n{@link IHubMember.seller seller}, the relevant information will also be filled\nin accordingly.\n\nAs a reference, as described in the {@link create} function, before calling\nthis function, you must first call the {@link create} function to issue the\n{@link IHubCustomer customer} record and token.",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Login input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubMember.ILogin"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Customer information after logging in",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubCustomer"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/authenticate/activate": {
      "put": {
        "summary": "Authenticate citizens (yourself)",
        "description": "Authenticate citizens (yourself).\n\nAn API that allows {@link IHubCustomer customers} to verify their identity\nby entering their {@link IHubCitizen.mobile mobile phone number} and\n{@link IHubCitizen.name real name (or nickname equivalent)}.\n\nIf the customer has already {@link join membership} or\n{@link external external user information}, they can immediately obtain\n{@link IHubCitizen citizen} information and skip the authentication process by\nlogging in or re-entering the same external user information.\n\nAs a reference, as described in the {@link create} function, before calling\nthis function, you must first call the {@link create} function to issue a\n{@link IHubCustomer customer} record and token.",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Citizen authentication input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubCitizen.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Customer information after citizen authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubCustomer"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/authenticate/external": {
      "post": {
        "summary": "Enroll external user info",
        "description": "Enroll external user info.\n\n{@link IHubCustomer Customer} enrolls his/her\n{@link IHubExternalUser external user} information from other service.\n\nIt has similar effect with the {@link join membership joining} function,\nso that if you've performed the {@link IHubCitizen citizenship}\n{@link activate activation} too, then you can skip the {@link activate}\nfunction calling everytime you call this `external` function with same\ninfo from now on. Also, if the person had\n{@link IHubOrder purchased} with {@link activate} and {@link join}\nfunction calling, you can also access to the order history too. In other\nwords, activity details prior to external server registration can also be\naccessed with continuity.\n\nFor reference, as described in the {@link create} function, before calling\nthis `external` function, you must first create a customer record and token\nby calling the {@link create} function.",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Enroll information of the external user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubExternalUser.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "External user enrolled customer information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubCustomer"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/authenticate/beta": {
      "post": {
        "summary": "Beta user registration",
        "description": "Beta user registration.",
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubCustomer.IBeta"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/hub/customers/authenticate/password/change": {
      "put": {
        "summary": "Change Password",
        "description": "Change Password.\n\nChange the password of the member account.",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Password change information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubMember.IPasswordChange"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/authenticate/keys": {
      "patch": {
        "summary": "List of personal API access keys",
        "description": "List of personal API access keys.\n\nRetrieves the list of personal API access keys issued to registered\ncustomer members.",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Search information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubAuthenticateKey.ISearch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubAuthenticateKey"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "summary": "Issue a personal API access key",
        "description": "Issue a personal API access key.\n\nA registered customer receives a personal API access key.",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Issue information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubAuthenticateKey.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Issued personal API access key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubAuthenticateKey"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/authenticate/keys/{id}": {
      "delete": {
        "summary": "Disable Personal API Access Key",
        "description": "Disable Personal API Access Key.\n\nDisables the Personal API Access Key issued to a registered customer.",
        "tags": [
          "Authenticate"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Personal API Access Key {@link IHubAuthenticateKey.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "void",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Retrieve personal API access key",
        "description": "Retrieve personal API access key.",
        "tags": [
          "Authenticate"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " personal API access key {@link IHubAuthenticateKey.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved personal API access key information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubAuthenticateKey"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/authenticate/sso/verify": {
      "post": {
        "summary": "Check if the WRTN account is registered in the Ecosystem",
        "description": "Check if the WRTN account is registered in the Ecosystem.\n\nIf shouldJoin is false, it means that the account is not registered.\nIf it is true, it means that the account is registered.\n\nThe judgment condition is that if {@link IHubExternalUser.member_id} is null,\nthe account is not registered in the Ecosystem.",
        "tags": [
          "SSO"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Access Token issued by SSO.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSSO.IAuthToken"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "SSO account information and whether the account is registered.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSSO"
                }
              }
            }
          }
        }
      }
    },
    "/hub/customers/authenticate/sso": {
      "put": {
        "summary": "Change metadata information of WRTN account and Ecosystem account",
        "description": "Change metadata information of WRTN account and Ecosystem account.",
        "tags": [
          "SSO"
        ],
        "parameters": [],
        "requestBody": {
          "description": "The information you want to change.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSSO.IUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "void",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "Retrieve WRTN account details",
        "description": "Retrieve WRTN account details.",
        "tags": [],
        "parameters": [],
        "requestBody": {
          "description": "Access Token issued by SSO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSSO.IAuthToken"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSSO.ISSOUser"
                }
              }
            }
          }
        }
      }
    },
    "/hub/customers/authenticate/sso/sync": {
      "post": {
        "summary": "Sync metadata information between WRTN account and Ecosystem account",
        "description": "Sync metadata information between WRTN account and Ecosystem account.",
        "tags": [],
        "parameters": [],
        "requestBody": {
          "description": "Access Token issued by SSO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSSO.IAuthToken"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubCustomer"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/commons/attachments": {
      "get": {
        "description": "Publish Presigned URL",
        "tags": [
          "commons"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "URL information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPresignedUrl"
                }
              }
            }
          }
        }
      }
    },
    "/hub/customers/commons/attachments/v2": {
      "patch": {
        "description": "Issue Presigned URL (V2)\n\nIssues Presigned URL by entering file name and file extension.",
        "tags": [
          "commons"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPresignedUrl.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "URL information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPresignedUrl"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/commons/blockwords/find/all": {
      "patch": {
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IBlockWord.IAllRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IBlockWord.IAll"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/commons/blockwords/find/batch": {
      "patch": {
        "summary": "Harmful word checker (batch)",
        "description": "Harmful word checker (batch).\n\nBefore registering a sale, check the details, tags, etc., to see\nif they contain harmful words.\n\nThe check result tells you whether harmful words are included and, if so,\nwhich words are included. This API now supports batch processing by allowing\nmultiple sentences to be passed in an array for harmful word checks.\nThe API calls `/api/v1/blockword/find/batch`, an API of CDS (Common Data Service),\nto check harmful words. The check result can be accessed through {@link IBlockWord.IBatch}\nprovided by CDS.\n\nhttps://cds-py.dev.wrtn.club/docs#/%5Blive%5D%20blockword/find_blockword_api_v1_blockword_find_batch_post",
        "tags": [
          "commons"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Array of content to check",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IBlockWord.IBatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Check result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IBlockWord.IBatch"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/commons/check/privacy": {
      "patch": {
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ICheckPrivacy.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ICheckPrivacy.IInvalid"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/coupons": {
      "patch": {
        "summary": "View discount coupons in bulk",
        "description": "View discount coupons in bulk.\n\n{@link IHubCoupon discount coupon} lists are returned after {@link IPage paging}.\n\nIf the current discount coupon search target is {@link IHubCustomer customer},\n\nonly coupons that are publicly available and that the current customer\ncan issue the {@link IHubCouponTicket ticket} will be displayed.",
        "tags": [
          "Coupon"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubCoupon.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paging list of discount coupons",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubCoupon"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/coupons/{id}": {
      "get": {
        "summary": "View individual discount coupons",
        "description": "View individual discount coupons.",
        "tags": [
          "Coupon"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "title": "{@link IHubCoupon.id } of the target discount coupon",
            "description": " {@link IHubCoupon.id } of the target discount coupon."
          }
        ],
        "responses": {
          "200": {
            "description": "Discount coupon details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubCoupon"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/coupons/tickets": {
      "patch": {
        "summary": "Bulk search for discount coupon tickets",
        "description": "Bulk search for discount coupon tickets.\n\nBulk search for discount coupon tickets held by customers.\n\nHowever, tickets that have already been used for order payment or\nhave expired are excluded.",
        "tags": [
          "Coupon"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Search and page request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubCouponTicket.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paging tickets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubCouponTicket"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "summary": "Issue a ticket",
        "description": "Issue a ticket.\n\nThe customer issues a ticket for a specific discount coupon.",
        "tags": [
          "Coupon"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Discount coupon ticket issuance application information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubCouponTicket.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Issued discount coupon ticket information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubCouponTicket"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/coupons/tickets/{id}": {
      "get": {
        "summary": "View individual discount coupon ticket information",
        "description": "View individual discount coupon ticket information.\n\nView discount coupon ticket information held by the customer.\n\nHowever, tickets that have already been used for order payment or\nhave expired cannot be viewed.",
        "tags": [
          "Coupon"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubCouponTicket.id } of the target ticket"
          }
        ],
        "responses": {
          "200": {
            "description": "ticket information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubCouponTicket"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/deposits/charges": {
      "patch": {
        "summary": "Bulk query of deposit deposit history",
        "description": "Bulk query of deposit deposit history.\n\nRetrieves {@link IHubDepositCharge deposit deposit history} for\nthe current customer.\n\nThe returned information is processed by {@link IPage paging}, and depending\non how the request information {@link IHubDepositCharge.IRequest} is set,\nthe number of records per page can be {@link IHubDepositCharge.IRequest.limit},\nor {@link IHubDepositCharge.IRequest.search} only for deposit deposit/withdrawal\nhistory that satisfies a specific condition, or\n{@link IHubDepositCharge.IRequest.sort sort condition} of deposit\ndeposit/withdrawal history can be arbitrarily set.\n\nFor reference, if you want to query all\n{@link IHubDepositHistory deposit/withdrawal history}, call the\n{@link HubApi.functional.hub.customers.deposits.histories.index} function\ninstead.",
        "tags": [
          "Deposit"
        ],
        "parameters": [],
        "requestBody": {
          "description": "page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubDepositCharge.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "paginated list of deposit history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubDepositCharge"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "summary": "Apply for a deposit",
        "description": "Apply for a deposit.",
        "tags": [
          "Deposit"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Deposit request input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubDepositCharge.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Deposit details information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubDepositCharge"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/deposits/charges/{id}": {
      "get": {
        "summary": "Check deposit deposit history",
        "description": "Check deposit deposit history.\n\nCheck deposit deposit history {@link IHubDepositCharge} individually.",
        "tags": [
          "Deposit"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubDepositCharge.id } of target deposit history"
          }
        ],
        "responses": {
          "200": {
            "description": "deposit history information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubDepositCharge"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "summary": "Modify deposit application information",
        "description": "Modify deposit application information.\n\nModify {@link IHubDepositCharge.value amount} written when applying for deposit.",
        "tags": [
          "Deposit"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubDepositCharge.id } of the deposit application details"
          }
        ],
        "requestBody": {
          "description": "Deposit application details modification information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubDepositCharge.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/deposits/charges/{id}/publish": {
      "post": {
        "summary": "Payment for deposit request (or completion)",
        "description": "Payment for deposit request (or completion).\n\n{@link IHubDepositChargePublish payment for {@link IHubDepositCharge deposit} requested by {@link IHubCustomer customer}\n\nHowever, in some cases, payment may not be completed even if this API is called.\n\nIn the case of bank transfer or virtual account, if there is a difference between the payment and the {@link IHubDepositChargePublish.paid_at payment time} before the payment is completed,\n\nthe deposit increase is not confirmed until the payment is completed.",
        "tags": [
          "Deposit"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubDepositCharge.id } of the deposit request details"
          }
        ],
        "requestBody": {
          "description": "Payment information acquired from the PG company",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubDepositChargePublish.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Information on the deposit details for which payment has been completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubDepositChargePublish"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/deposits/charges/{id}/refund": {
      "delete": {
        "summary": "Refund",
        "description": "Refund.\n\nProcess the refund for the deposit payment.\n\nIf you deposited via a virtual account or bankbook, you must enter the refund account in\n{@link IHubDepositChargePublish.IRefundStore.account}.",
        "tags": [
          "Deposit"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubDepositCharge.id } of the deposit request details"
          }
        ],
        "requestBody": {
          "description": "Refund request input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubDepositChargePublish.IRefundStore"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/deposits/histories": {
      "patch": {
        "summary": "Bulk inquiry of deposit/withdrawal history",
        "description": "Bulk inquiry of deposit/withdrawal history.\n\nRetrieves {@link IHubDepositHistory deposit/withdrawal history}\nfor the current customer.\n\nThe returned information is {@link IPage paging} processed, and depending\non how the request information {@link IHubDepositHistory.IRequest} is set,\nthe number of records per page can be {@link IHubDepositHistory.IRequest.limit},\nor {@link IHubDepositHistory.IRequest.search} only deposit/withdrawal history\nthat satisfies a specific condition,\nor {@link IHubDepositHistory.IRequest.sort sort condition} of\ndeposit/withdrawal history can be arbitrarily set.",
        "tags": [
          "Deposit"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubDepositHistory.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of deposit/withdrawal history that has been paging processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubDepositHistory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/deposits/histories/balance": {
      "get": {
        "summary": "Check the deposit balance",
        "description": "Check the deposit balance.\n\nCheck the total deposit balance of the current customer.",
        "tags": [
          "Deposit"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Total deposit balance",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/openapi/translate/document": {
      "post": {
        "summary": "Translate Swagger Document",
        "description": "Translate Swagger Document.\n\nTranslate Swagger document into the desired language.\n\nYou can request the translation with the Swagger document or\nits containing URL.",
        "tags": [],
        "parameters": [],
        "requestBody": {
          "description": "Request of the Swagger or its URL to translate",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ISwaggerTranslation.IUrlRequest"
                  },
                  {
                    "$ref": "#/components/schemas/ISwaggerTranslation.IDocumentRequest"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "url": "#/components/schemas/ISwaggerTranslation.IUrlRequest",
                    "document": "#/components/schemas/ISwaggerTranslation.IDocumentRequest"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Translated Swagger",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISwagger"
                }
              }
            }
          }
        }
      }
    },
    "/hub/customers/openapi/translate/url": {
      "post": {
        "summary": "Translate Swagger and get URL of the translated",
        "description": "Translate Swagger and get URL of the translated.\n\nTranslate Swagger document into the desired language from URL address,\nand get the URL of the translated Swagger.",
        "tags": [
          "OpenAPI"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request of the URL to translate",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISwaggerTranslation.IUrlRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "URL containing the translated Swagger",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISwaggerTranslation"
                }
              }
            }
          }
        }
      }
    },
    "/hub/customers/carts/{cartId}/commodities": {
      "patch": {
        "summary": "Retrieve the list of products in the shopping cart",
        "description": "Retrieve the list of products in the shopping cart.\n\nRetrieve the {@link IHubCartCommodity} list.\n\nThe returned {@link IHubCartCommodity}s are processed with {@link IPage paging}.\n\nAnd depending on how you set the request information\n{@link IHubCartCommodity.IRequest}, you can\n{@link IHubCartCommodity.IRequest.limit} the number of records per page,\n{@link IHubCartCommodity.IRequest.search} search only products that meet\na specific condition, or {@link IHubCartCommodity.IRequest.sort} sort conditions\nfor the three products.",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IHubCart.id } of the cart, can be omitted as `null`"
          }
        ],
        "requestBody": {
          "description": "List request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubCartCommodity.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubCartCommodity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "summary": "Add a product to the cart",
        "description": "Add a product to the cart.\n\nAdd {@link IHubCartCommodity}.",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IHubCart.id } of the cart, can be omitted as `null`"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubCartCommodity.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubCartCommodity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/carts/{cartId}/commodities/{id}": {
      "get": {
        "summary": "Details of a specific product in the cart",
        "description": "Details of a specific product in the cart.\n\nRetrieves a specific {@link IHubCartCommodity}.",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IHubCart.id } of the cart, can be omitted as `null`"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubCartCommodity.id } to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubCartCommodity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a specific product in the cart",
        "description": "Delete a specific product in the cart.",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IHubCart.id } of the cart, can be omitted as `null`"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubCartCommodity.id } to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/carts/{cartId}/commodities/discountable": {
      "patch": {
        "summary": "Calculate discount means",
        "description": "Calculate discount means.\n\nCalculate the discount means for the raw materials and additional items\nin the cart. The returned information contains the combinations of available\ndeposits and configurable coupons.",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Request information for discount means combinations",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubCartDiscountable.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Discount means information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubCartDiscountable"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/carts/{cartId}/commodities/{id}/replica": {
      "get": {
        "summary": "Duplicate specific product input values in the cart",
        "description": "Duplicate specific product input values in the cart.",
        "tags": [
          "Cart"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IHubCart.id } of the cart, can be omitted as `null`"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubCartCommodity.id } of the target item"
          }
        ],
        "responses": {
          "200": {
            "description": "duplicated cart input information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubCartCommodity.ICreate"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/orders/{orderId}/goods/{goodId}/issues/{issueId}/comments": {
      "post": {
        "summary": "Create an Issue comment",
        "description": "Create an Issue comment.\n\nCreates a {@link IHubOrderGoodIssueComment}.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the target order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the target product"
          },
          {
            "name": "issueId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGoodIssue.id } of the target issue"
          }
        ],
        "requestBody": {
          "description": "Information about the ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGoodIssueComment.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Comment on the created issue",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrderGoodIssueComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "Issue comment list",
        "description": "Issue comment list.\n\nRetrieve {@link IHubOrderGoodIssueComment} list.\n\nThe returned {@link IHubOrderGoodIssueComment} are {@link IPage paging}\nprocessed. And depending on how the request information\n{@link IHubOrderGoodIssueComment.IRequest} is set, you can\n{@link IHubOrderGoodIssueComment.IRequest.limit} limit the number of records\nper page, {@link IHubOrderGoodIssueComment.IRequest.search} search only comments\nthat satisfy a specific condition, or\n{@link IHubOrderGoodIssueComment.IRequest.sort sort condition} of the comments\ncan be arbitrarily specified.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " target {@link IHubOrder.id }"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " target {@link IHubOrderGood.id }"
          },
          {
            "name": "issueId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " target {@link IHubOrderGoodIssue.id }"
          }
        ],
        "requestBody": {
          "description": "list request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGoodIssueComment.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "paged ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubOrderGoodIssueComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/orders/{orderId}/goods/{goodId}/issues/{issueId}/comments/{id}": {
      "put": {
        "summary": "Modify Issue Comment",
        "description": "Modify Issue Comment.\n\nModify {@link IHubOrderGoodIssueComment}.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the target order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the target product"
          },
          {
            "name": "issueId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGoodIssue.id } of the target issue"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGoodIssueComment.id } of the target comment"
          }
        ],
        "requestBody": {
          "description": "Information about the ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGoodIssueComment.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Snapshot of the comment of the modified issue",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrderGoodIssueComment.ISnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Issue Comment",
        "description": "Delete Issue Comment.\n\nDelete {@link IHubOrderGoodIssueComment}.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the target order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the target product"
          },
          {
            "name": "issueId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGoodIssue.id } of the target issue"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGoodIssueComment.id } of the target comment"
          }
        ],
        "responses": {
          "200": {
            "description": "void",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Issue Comment Lookup",
        "description": "Issue Comment Lookup.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " target {@link IHubOrder.id }"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " target {@link IHubOrderGood.id }"
          },
          {
            "name": "issueId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " target {@link IHubOrderGoodIssue.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " target {@link IHubOrderGoodIssueComment.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrderGoodIssueComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/orders/{orderId}/goods/{goodId}/issues/{issueId}/fees/{id}": {
      "post": {
        "summary": "Consent to pay the fee",
        "description": "Consent to pay the fee.\n\nConsent to pay the fee and pay the fee.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target order {@link IHubOrder.id }"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target product {@link IHubOrderGood.id }"
          },
          {
            "name": "issueId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target issue {@link IHubOrderGoodIssue.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target fee {@link IHubOrderGoodIssueFee.id }"
          }
        ],
        "requestBody": {
          "description": "Consent to pay the fee ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGoodIssueFeeAccept.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Consent to pay the fee",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrderGoodIssueFeeAccept"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "summary": "Cancels the fee payment",
        "description": "Cancels the fee payment.\n\nHowever, the fee payment cancellation is only possible before it is\n{@link IHubOrderGoodIssueFeeAccept.published_at is confirmed}.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " target order {@link IHubOrder.id }"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " target product {@link IHubOrderGood.id }"
          },
          {
            "name": "issueId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " target issue {@link IHubOrderGoodIssue.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " target fee {@link IHubOrderGoodIssueFee.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Query individual commission fees",
        "description": "Query individual commission fees.\n\nQuery individual commission fee records.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of target order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of target product"
          },
          {
            "name": "issueId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGoodIssue.id } of target issue"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGoodIssueFee.id } of target commission fee"
          }
        ],
        "responses": {
          "200": {
            "description": "commission fee information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrderGoodIssueFee"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/orders/{orderId}/goods/{goodId}/issues/{issueId}/fees": {
      "patch": {
        "summary": "Retrieve the fee list",
        "description": "Retrieve the fee list.\n\nRetrieve the list of {@link IHubOrderGoodIssueFee}.\n\nThe returned {@link IHubOrderGoodIssueFee}s are {@link IPage paging}\nprocessed. And depending on how the request information\n{@link IHubOrderGoodIssueFee.IRequest} is set, you can\n{@link IHubOrderGoodIssueFee.IRequest.limit} limit the number of records per\npage, {@link IHubOrderGoodIssueFee.IRequest.search} search only fees that\nsatisfy a specific condition, or\n{@link IHubOrderGoodIssueFee.IRequest.sort sort condition} of fees\narbitrarily specified.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the target order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the target product"
          },
          {
            "name": "issueId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGoodIssue.id } of the target issue"
          }
        ],
        "requestBody": {
          "description": "List request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGoodIssueFee.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paged commission fees",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubOrderGoodIssueFee"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/orders/{orderId}/goods/{goodId}/issues": {
      "post": {
        "summary": "Create an Issue",
        "description": "Create an Issue.\n\nCreate an issue for a purchased product.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the order to which it belongs"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the product to which it belongs"
          }
        ],
        "requestBody": {
          "description": "Issue input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGoodIssue.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Issue information written",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrderGoodIssue"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "View the Issue Summary Information List",
        "description": "View the Issue Summary Information List.\n\nView the summary information list of {@link IHubOrderGoodIssue}.\n\nThe returned {@link IHubOrderGoodIssue}s are {@link IPage paging} processed.\n\nAnd depending on how the request information {@link IHubOrderGoodIssue.IRequest}\nis set, you can {@link IHubOrderGoodIssue.IRequest.limit} limit the number\nof records per page, {@link IHubOrderGoodIssue.IRequest.search} search only\nissues that satisfy a specific condition, or\n{@link IHubOrderGoodIssue.IRequest.sort sort conditions} of the issues can be\narbitrarily specified.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the target order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the target product"
          }
        ],
        "requestBody": {
          "description": "List request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGoodIssue.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Summary information list of paged issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubOrderGoodIssue.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/orders/{orderId}/goods/{goodId}/issues/{id}": {
      "put": {
        "summary": "Modify Issue",
        "description": "Modify Issue.\n\nModify the information of an issue.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the target order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the target product"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGoodIssue.id } of the target issue"
          }
        ],
        "requestBody": {
          "description": "Information of the issue to be modified ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGoodIssue.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Information of the modified issue ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IBbsArticle.ISnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Issue",
        "description": "Delete Issue.\n\nDeletes the created issue.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the target order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the target product"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGoodIssue.id } of the target issue"
          }
        ],
        "responses": {
          "200": {
            "description": "void",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "View Issue Details",
        "description": "View Issue Details.\n\nRetrieve details of {@link IHubOrderGoodIssue}.\n\nUsed when retrieving details of a specific issue.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the target order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the target product"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGoodIssue.id } of the target issue"
          }
        ],
        "responses": {
          "200": {
            "description": "Issue details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrderGoodIssue"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/orders/{orderId}/goods/{goodId}/snapshots/{id}/execute": {
      "post": {
        "summary": "The product executor that I purchased",
        "description": "The product executor that I purchased.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the product"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " snapshot of the product"
          }
        ],
        "requestBody": {
          "description": "input required to execute",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGood.IExecute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "execution result",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/IExecutionResult.IFailure"
                    },
                    {
                      "$ref": "#/components/schemas/IExecutionResult.ISuccessany"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/orders/{orderId}/goods/{goodId}/snapshots/{id}/proceed": {
      "post": {
        "summary": "Proceed with the product I purchased",
        "description": "Proceed with the product I purchased.\n\nExecute the purchased product, but do not wait for its return value,\nbut simply return {@link IHubOrderGood} corresponding to the execution result.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the ordered product"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " snapshot of the ordered product {@link IHubSaleSnapshot.id }"
          }
        ],
        "requestBody": {
          "description": "Input required to execute",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGood.IExecute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "execution result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrderGoodHistory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/orders/{orderId}/goods/{goodId}/snapshots/{id}/workflow": {
      "patch": {
        "summary": "Retrieve Workflow of the product snapshot I purchased",
        "description": "Retrieve Workflow of the product snapshot I purchased.\n\nRetrieve Workflow of the product purchased.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the product ordered"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Snapshot of the product ordered {@link IHubSaleSnapshot.id }"
          }
        ],
        "requestBody": {
          "description": "Input required to retrieve Workflow",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGood.IWorkflow"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Workflow information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioWorkflowStandalone"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/orders/{orderId}/goods/{goodId}/snapshots": {
      "patch": {
        "summary": "Retrieve the list of available API snapshots from the ordered product",
        "description": "Retrieve the list of available API snapshots from the ordered product.\n\nRetrieve the list of available APIs from the {@link IHubOrderGood product}\nordered by the customer. In other words, retrieve all available snapshots of\n{@link IHubSaleSnapshot.IInvert.version versions} for the product ordered by\nthe customer.\n\nNote that the {@link IHubSaleUnitStock.price price information} recorded at\nthis time is not the price of the snapshot, but the price of the product\nordered by the customer. Also, the statistical information recorded in the\nsnapshot is only for the snapshot time. For example, in the case of\n{@link IHubSaleGoodAggregate.call_count}, which means the total number of\nAPI calls, the total number of calls for the snapshot time is recorded,\nnot the total number of calls for the attributed items.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the product"
          }
        ],
        "requestBody": {
          "description": "Page request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paged snapshots",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleSnapshot.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/orders/{orderId}/goods/{goodId}/snapshots/{id}": {
      "get": {
        "summary": "Retrieve a specific snapshot available from an ordered product",
        "description": "Retrieve a specific snapshot available from an ordered product.\n\nRetrieve a specific API\n{@link IHubSaleSnapshot.IInvert snapshot} from the {@link IHubOrderGood product}\nordered by the customer. In other words, retrieve a snapshot of the current\nor past {@link IHubSaleSnapshot.IInvert.version version} available for the\nproduct ordered by the customer.\n\nNote that the {@link IHubSaleUnitStock.price price information} recorded at\nthis time is not the price of the snapshot, but the price of the product\nordered by the customer. In addition, the statistical information recorded in\nthe snapshot is also only for the snapshot time. For example, in the case of\n{@link IHubSaleGoodAggregate.call_count}, which means the total number of\nAPI calls, the total number of calls for the snapshot time is recorded,\nnot the total number of calls for the attributed items.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the product"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleSnapshot.IInvert.id } of the target snapshot"
          }
        ],
        "responses": {
          "200": {
            "description": "snapshot information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleSnapshot.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/orders/{orderId}/goods/{goodId}/snapshots/{id}/swagger": {
      "patch": {
        "summary": "Retrieve the Swagger document",
        "description": "Retrieve the Swagger document.\n\nFor a specific {@link IHubSaleSnapshot.IInvert snapshot} available\nfrom {@link IHubOrderGood Ordered Good}, specify the\n{@link IHubSaleSnapshotUnit.IInvert unit} and fetch its\n{@link ISwagger Swagger document}.\n\nEach time an API is called in the returned Swagger document, the number\nof API calls for that product is counted, the execution history is recorded,\nand the deposit is charged if necessary.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the bound order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the bound product"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleSnapshot.IInvert.id } of the target snapshot"
          }
        ],
        "requestBody": {
          "description": "Identifier key for the target unit",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleUnitSwaggerAccessor"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Swagger Documentation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISwagger"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/orders/{orderId}/goods/{goodId}/snapshots/{id}/openai": {
      "patch": {
        "summary": "Retrieve the OpenAI document",
        "description": "Retrieve the OpenAI document.\n\nFor a specific {@link IHubSaleSnapshot.IInvert snapshot} available from\nthe {@link IHubOrderGood order product}, specify the\n{@link IHubSaleSnapshotUnit.IInvert unit} and fetch its\n{@link IOpenAiDocument OpenAI schema document}.\n\nEach time an API is called in the returned OpenAI document, the number\nof API calls for that product is counted, the execution history is recorded,\nand the deposit is charged if necessary.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the product"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleSnapshot.IInvert.id } of the target snapshot"
          }
        ],
        "requestBody": {
          "description": "Identifier key for the target unit",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleUnitOpenAiSchemaAccessor"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OpenAI schema document",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHttpOpenAiApplication"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/orders/{orderId}/goods/{id}/open": {
      "put": {
        "summary": "Set the start time of the order contract",
        "description": "Set the start time of the order contract.\n\nSet the start time of the contract for the target {@link IHubOrderGood product}.\n\nUnlike the order confirmation time, the effective time can be pushed back.\n\nAnd the effective time of the contract can be continuously edited until it arrives.\n\nAlso, the monthly fixed fee is calculated based on the start date.\n\nPlease note that after the customer purchases the seller's API, the review\nand development process is necessary, so the effective date of the contract\ncannot help but be pushed back further than the order confirmation.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the order"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the target order"
          }
        ],
        "requestBody": {
          "description": "Edit information for the contract start date",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGood.IOpen"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/orders/{orderId}/goods/{id}/close": {
      "put": {
        "summary": "Set the end time of the order contract",
        "description": "Set the end time of the order contract.\n\nSet the end time of the contract for the target {@link IHubOrderGood product}.\n\nHowever, the end time of the contract cannot be set immediately. Based on\nthe start time of the contract, it can only be cancelled after a period of\nat least 1 month. And if the contract has already been started, it can also\nonly be terminated in 1-month units.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the order to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the target order"
          }
        ],
        "requestBody": {
          "description": "Edit information for the end date of the contract",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGood.IClose"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/orders/{orderId}/goods": {
      "patch": {
        "summary": "Bulk query of reverse reference information of ordered products",
        "description": "Bulk query of reverse reference information of ordered products.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Request information of ordered products",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGood.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of reverse reference information of ordered products that have been paged",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubOrderGood.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/orders/{orderId}/goods/{id}": {
      "get": {
        "summary": "Lookup the reverse reference information of the order item individually",
        "description": "Lookup the reverse reference information of the order item individually.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the order"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the target order item"
          }
        ],
        "responses": {
          "200": {
            "description": "reverse reference information of the order item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrderGood.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/orders": {
      "post": {
        "summary": "Create a user order",
        "description": "Create a user order.\n\nThe user creates an order.",
        "tags": [
          "Order"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Information about the ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrder.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Information about the created order",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrder"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "Order list",
        "description": "Order list.\n\nRetrieve {@link IHubOrder} list.\n\nThe returned {@link IHubOrder}s are {@link IPage paging} processed. And\ndepending on how the request information {@link IHubOrder.IRequest} is set,\nyou can {@link IHubOrder.IRequest.limit} limit the number of records per page,\n{@link IHubOrder.IRequest.search} search only orders that satisfy a specific\ncondition, or {@link IHubOrder.IRequest.sort sort condition} of orders\narbitrarily.",
        "tags": [
          "Order"
        ],
        "parameters": [],
        "requestBody": {
          "description": "list request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrder.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "paging ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubOrder"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/orders/{id}": {
      "delete": {
        "summary": "Delete user order",
        "description": "Delete user order.\n\nDelete an order that has not been published or opened yet.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the target order"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Order details",
        "description": "Order details.\n\nRetrieve a specific {@link IHubOrder}.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrder"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/orders/{id}/discountable": {
      "patch": {
        "summary": "Calculate possible discount combinations",
        "description": "Calculate possible discount combinations.\n\nCalculate the possible discount methods for the products currently being\nordered.\n\nThe returned information contains the combinations of available deposits and\nconfigurable coupons.\n\nHowever, please note that this possible discount combination can only be\napplied to the order if the order has not been published yet.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the target order"
          }
        ],
        "requestBody": {
          "description": "Information about the target ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderDiscountable.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Discount combination information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrderDiscountable"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/orders/{id}/discount": {
      "patch": {
        "summary": "Apply a discount to an order",
        "description": "Apply a discount to an order.\n\nApply {@link IHubCoupon discount coupon} to the current\n{@link IHubOrder order}, and reduce the total deposit amount, including fixed\nand variable costs that must be paid {@link IHubOrderPublish.paid_at}.\n\nIn principle, it is also possible to make the cash payment amount 0 won\nby using the above combinations.\n\nHowever, before applying a discount coupon, be sure to call the\n{@link discountable} function in advance. Discount coupons have complex\nconstraints, and the {@link discountable} function will analyze them and\nprovide detailed information on which\n{@link IHubCouponCombination discount coupon combination} can be applied\nto the current order.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the target order"
          }
        ],
        "requestBody": {
          "description": "Information on discount coupons, mileage, deposit, etc. to apply",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderPrice.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Price information with the discount reflected",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrderPrice"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/orders/initial": {
      "post": {
        "summary": "Create and confirm a user's basic product order",
        "description": "Create and confirm a user's basic product order.\n\nCreate and confirm a user's basic product order.",
        "tags": [],
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/orders/{id}/publish/able": {
      "get": {
        "summary": "Check if the order can be confirmed",
        "description": "Check if the order can be confirmed.\n\nCheck if the order can be confirmed.\n\nIf it cannot be confirmed, the reason is returned as a message with\na status code such as 410 or 422. Conversely, if it can be confirmed,\na status code of 200 is returned.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the target order"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/orders/{id}/publish": {
      "post": {
        "summary": "Confirm the order",
        "description": "Confirm the order.\n\nConfirm the {@link IHubOrder order currently in the application stage},\nthat is, establish it as a contract.\n\nHowever, even if the contract is confirmed, it does not start immediately.\nWhen confirming the contract, (or each ordered product) can set the\n{@link IHubOrderGood.opened_at opening time} of the contract. This is designed\nso that the opening time of the contract can be postponed because the customer\nneeds to analyze and develop the API after purchasing the seller.\n\nHowever, even if the opening time of the contract is later, the fixed cost for\nthe first month is converted to a deposit status when the contract takes effect.\nOf course, the order contract can be canceled and refunded before the opening\ntime of the contract.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the target order"
          }
        ],
        "requestBody": {
          "description": "Input information for contract confirmation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderPublish.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Contract confirmation information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrderPublish"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/orders/{id}/publish/open": {
      "put": {
        "summary": "Batch application of order contract initiation time",
        "description": "Batch application of order contract initiation time.\n\nThe initiation time of the order contract is set for all\n{@link IHubOrderGood products}.\n\nThe effective time can be pushed back, unlike the order confirmation time.\n\nAnd the contract effective time can be continuously edited until it arrives.\n\nAlso, the monthly fixed fee is calculated based on the initiation date.\n\nPlease note that after the customer purchases the seller's API, the review\nand development process is necessary, so the original contract effective time\ncannot but be pushed back further than the order confirmation.\n\n> It is also possible to set a different initiation date for each order product.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the target order"
          }
        ],
        "requestBody": {
          "description": "Contract initiation date Edit information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderPublish.IOpen"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/orders/{id}/publish/close": {
      "put": {
        "summary": "Apply the end date of the order contract in bulk",
        "description": "Apply the end date of the order contract in bulk.\n\nSet the end date of the order contract in bulk for all\n{@link IHubOrderGood products}.\n\nHowever, the end date of the contract cannot be set immediately. From the\nstart date of the contract, it can only be cancelled after a minimum period\nof 1 month has passed. And if the contract has already been started, it can\nonly be terminated in 1-month units.\n\n> It is also possible to set different end dates for each order product.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the target order"
          }
        ],
        "requestBody": {
          "description": "Edit information for the end date of the contract",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderPublish.IClose"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/orders/{orderId}/goods/{goodId}/histories": {
      "patch": {
        "summary": "Bulk query the order execution history",
        "description": "Bulk query the order execution history.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the order"
          }
        ],
        "requestBody": {
          "description": "Request information for the order.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGoodHistory.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paged order execution history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubOrderGoodHistory.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/orders/{orderId}/goods/{goodId}/histories/{id}": {
      "get": {
        "summary": "View individual execution history of ordered items",
        "description": "View individual execution history of ordered items.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the ordered item"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGoodHistory.id } of the order item execution history"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrderGoodHistory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/push-messages": {
      "patch": {
        "summary": "Bulk push message query",
        "description": "Bulk push message query.",
        "tags": [
          "PushMessage"
        ],
        "parameters": [],
        "requestBody": {
          "description": "page request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubPushMessage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "push message list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubPushMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/push-messages/{id}": {
      "get": {
        "summary": "Push message individual query",
        "description": "Push message individual query.",
        "tags": [
          "PushMessage"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubPushMessage.id } of target push message"
          }
        ],
        "responses": {
          "200": {
            "description": "Push message details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubPushMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/push-messages/{code}/get": {
      "get": {
        "summary": "Push message individual query by code",
        "description": "Push message individual query by code.",
        "tags": [
          "PushMessage"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IHubPushMessage.code } of target push message"
          }
        ],
        "responses": {
          "200": {
            "description": "Push message details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubPushMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/push-messages/histories": {
      "patch": {
        "summary": "Bulk query of push message sending history",
        "description": "Bulk query of push message sending history.",
        "tags": [
          "PushMessage"
        ],
        "parameters": [],
        "requestBody": {
          "description": "page request and search information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubPushMessageHistory.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "list of push message sending history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubPushMessageHistory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/push-messages/histories/{id}": {
      "get": {
        "summary": "Individual inquiry of push message sending history",
        "description": "Individual inquiry of push message sending history.",
        "tags": [
          "PushMessage"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubPushMessageHistory.id } of target push message\r\nsending history"
          }
        ],
        "responses": {
          "200": {
            "description": "Push message sending history details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubPushMessageHistory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/sales/{saleId}/questions/{inquiryId}/comments": {
      "post": {
        "summary": "Write a query comment",
        "description": "Write a query comment.\n\nWrite a comment on the query.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target sale"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiry.id } of the target inquiry"
          }
        ],
        "requestBody": {
          "description": "Information on the ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleInquiryComment.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Information on the generated query comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "View the list of comments for product inquiries",
        "description": "View the list of comments for product inquiries.\n\nView the {@link IHubSaleInquiryComment} list.\n\nThe returned {@link IHubSaleInquiryComment}s are processed with\n{@link IPage paging}. And depending on how the request information\n{@link IHubSaleInquiryComment.IRequest} is set, you can\n{@link IHubSaleInquiryComment.IRequest.limit} limit the number of records\nper page, {@link IHubSaleInquiryComment.IRequest.search} search for comments\nfor product inquiries that satisfy a specific condition, or\n{@link IHubSaleInquiryComment.IRequest.sort} arbitrarily specify the sort\ncondition for comments for product inquiries.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target sale"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiry.id } of the target inquiry"
          }
        ],
        "requestBody": {
          "description": "list request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleInquiryComment.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "paged ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/sales/{saleId}/questions/{inquiryId}/comments/{id}": {
      "put": {
        "summary": "Modify query comment",
        "description": "Modify query comment.\n\nModify the comment written in the query.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target sale"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiry.id } of the target inquiry"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiryComment.id } of the target comment"
          }
        ],
        "requestBody": {
          "description": "Information about ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleInquiryComment.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Information about the modified query comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleInquiryComment.ISnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete query comment",
        "description": "Delete query comment.\n\nDeletes the written query comment.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target sale"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiry.id } of the target inquiry"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiryComment.id } of the target comment"
          }
        ],
        "responses": {
          "200": {
            "description": "void",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Retrieve a specific comment for a product inquiry",
        "description": "Retrieve a specific comment for a product inquiry.\n\nRetrieve a specific {@link IHubSaleInquiryComment}.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the sale"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiry.id } of the inquiry"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiryComment.id } to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment for the retrieved product inquiry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/sales/{saleId}/questions": {
      "post": {
        "summary": "Write a customer question",
        "description": "Write a customer question.\n\nCreate a customer question.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id }"
          }
        ],
        "requestBody": {
          "description": "Question creation information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleQuestion.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created question",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleQuestion"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "Retrieve the list of question summary information for the listing snapshot",
        "description": "Retrieve the list of question summary information for the listing snapshot.\n\nRetrieve the {@link IHubSaleQuestion} list.\n\nThe returned {@link IHubSaleQuestion}s are {@link IPage paging} processed.\nAnd depending on how the request information {@link IHubSaleQuestion.IRequest}\nis set, you can {@link IHubSaleQuestion.IRequest.limit} limit the number of\nrecords per page, {@link IHubSaleQuestion.IRequest.search} search for questions\nfor listing snapshots that meet a specific condition, or\n{@link IHubSaleQuestion.IRequest.sort} specify the sort condition for questions\nfor listing snapshots.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the sale in question"
          }
        ],
        "requestBody": {
          "description": "list request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleQuestion.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "list of paged ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleQuestion.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/sales/{saleId}/questions/{id}": {
      "put": {
        "summary": "Modify customer question",
        "description": "Modify customer question.\n\nModify customer question",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " corresponding {@link IHubSale.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " corresponding {@link IHubSaleQuestion.id }"
          }
        ],
        "requestBody": {
          "description": "Modify question information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IBbsArticle.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Snapshot of modified question information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IBbsArticle.ISnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Retrieve question details for a listing snapshot",
        "description": "Retrieve question details for a listing snapshot.\n\nRetrieves a specific {@link IHubSaleQuestion}.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the sale in question"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleQuestion.id } to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Question details for the retrieved listing snapshot",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleQuestion"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a question about a listing snapshot",
        "description": "Delete a question about a listing snapshot.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the sale being deleted"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleQuestion.id } to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "void",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/sales/{saleId}/reviews/{inquiryId}/comments": {
      "post": {
        "summary": "Write a query comment",
        "description": "Write a query comment.\n\nWrite a comment on the query.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target sale"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiry.id } of the target inquiry"
          }
        ],
        "requestBody": {
          "description": "Information on the ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleInquiryComment.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Information on the generated query comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "View the list of comments for product inquiries",
        "description": "View the list of comments for product inquiries.\n\nView the {@link IHubSaleInquiryComment} list.\n\nThe returned {@link IHubSaleInquiryComment}s are processed with\n{@link IPage paging}. And depending on how the request information\n{@link IHubSaleInquiryComment.IRequest} is set, you can\n{@link IHubSaleInquiryComment.IRequest.limit} limit the number of records\nper page, {@link IHubSaleInquiryComment.IRequest.search} search for comments\nfor product inquiries that satisfy a specific condition, or\n{@link IHubSaleInquiryComment.IRequest.sort} arbitrarily specify the sort\ncondition for comments for product inquiries.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target sale"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiry.id } of the target inquiry"
          }
        ],
        "requestBody": {
          "description": "list request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleInquiryComment.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "paged ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/sales/{saleId}/reviews/{inquiryId}/comments/{id}": {
      "put": {
        "summary": "Modify query comment",
        "description": "Modify query comment.\n\nModify the comment written in the query.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target sale"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiry.id } of the target inquiry"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiryComment.id } of the target comment"
          }
        ],
        "requestBody": {
          "description": "Information about ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleInquiryComment.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Information about the modified query comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleInquiryComment.ISnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete query comment",
        "description": "Delete query comment.\n\nDeletes the written query comment.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target sale"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiry.id } of the target inquiry"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiryComment.id } of the target comment"
          }
        ],
        "responses": {
          "200": {
            "description": "void",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Retrieve a specific comment for a product inquiry",
        "description": "Retrieve a specific comment for a product inquiry.\n\nRetrieve a specific {@link IHubSaleInquiryComment}.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the sale"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiry.id } of the inquiry"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiryComment.id } to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment for the retrieved product inquiry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/sales/{saleId}/reviews": {
      "post": {
        "summary": "Write a customer listing snapshot review",
        "description": "Write a customer listing snapshot review.\n\nA customer writes a review on a listing snapshot.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " corresponding {@link IHubSale.id }"
          }
        ],
        "requestBody": {
          "description": "review creation information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleReview.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "generated review information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleReview"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "Retrieve a list of review summary information for a listing snapshot",
        "description": "Retrieve a list of review summary information for a listing snapshot.\n\nRetrieve a list of summary information for {@link IHubSaleReview}.\n\nThe returned {@link IHubSaleReview}s are {@link IPage paging} processed.\n\nDepending on how you set the request information {@link IHubSaleReview.IRequest},\nyou can {@link IHubSaleReview.IRequest.limit} limit the number of records per\npage, {@link IHubSaleReview.IRequest.search} search reviews for listing\nsnapshots that meet a specific condition, or {@link IHubSaleReview.IRequest.sort}\nrandomly specify a sort condition for reviews for listing snapshots.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the sale in question"
          }
        ],
        "requestBody": {
          "description": "list request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleReview.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "list of review summary information for paged listing snapshots",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleReview.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/sales/{saleId}/reviews/{id}": {
      "put": {
        "summary": "Modify a customer listing snapshot review",
        "description": "Modify a customer listing snapshot review.\n\nModify a customer review on a listing snapshot.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " the {@link IHubSale.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " of a specific review {@link IHubSaleReview.id }"
          }
        ],
        "requestBody": {
          "description": "review modification information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleReview.IUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "a snapshot of the modified review information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleReview.ISnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "View review details for a listing snapshot",
        "description": "View review details for a listing snapshot.\n\nView a specific {@link IHubSaleReview}.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the sale in question"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleReview.id } to view"
          }
        ],
        "responses": {
          "200": {
            "description": "Review details for the viewed listing snapshot.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleReview"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a review for a listing",
        "description": "Delete a review for a listing.\n\nDelete a review for a specific listing.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the sale in question"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleReview.id } to query"
          }
        ],
        "responses": {
          "200": {
            "description": "void",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/sales": {
      "patch": {
        "summary": "View the summary information list of properties",
        "description": "View the summary information list of properties.\n\n{@link IHubSale.ISummary summary information of properties} is loaded.\n\nThe returned {@link IHubSale.ISummary summary information} is\n{@link IPage paging} processed. And depending on how the request information\n{@link IHubSale.IRequest} is set, you can {@link IHubSale.IRequest.limit} limit\nthe number of records per page, {@link IHubSale.IRequest.search} search only\nproperties that satisfy a specific condition, or\n{@link IHubSale.IRequest.sort sort conditions} of properties can be arbitrarily\nspecified.",
        "tags": [
          "Sale"
        ],
        "parameters": [],
        "requestBody": {
          "description": "page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSale.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "list of summary information of properties that have been paged",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSale.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/sales/{id}": {
      "get": {
        "summary": "View detailed listings",
        "description": "View detailed listings.\n\nView the target listing's detailed information {@link IHubSale}.\n\nHowever, depending on who is viewing the listing, the detailed attribute values\nmay vary. The most representative one is {@link IHubSaleUnitSwagger.host},\nwhich contains the middleware API address of this hub system when the viewing\nsubject is a customer, and the commercial server API address registered by the\nseller/administrator when the viewing subject is a seller/administrator.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target listing's {@link IHubSale.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Listing details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSale"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/sales/{id}/swagger": {
      "patch": {
        "summary": "Retrieve Swagger information",
        "description": "Retrieve Swagger information.\n\nSpecifies a specific {@link IHubSaleUnit unit} and\n{@link IHubSaleUnitStock stock} from the target {@link IHubSale listing},\nand retrieves its {@link ISwagger Swagger} information.\n\nThe returned Swagger document contains the actual server API address\nregistered by the seller based on the {@link IHubSeller seller} and\n{@link IHubAdministrator administrator}, and the middleware API address of\nthis hub system for the DEV server based on the {@link IHubCustomer customer}.\nFor commercial purposes, the REAL server address is excluded.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target listing"
          }
        ],
        "requestBody": {
          "description": "Identifier key for the target unit (and stock)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleUnitSwaggerAccessor"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Swagger information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISwagger"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/sales/{saleId}/snapshots": {
      "patch": {
        "summary": "Get a list of summary information of approved snapshots in a listing",
        "description": "Get a list of summary information of approved snapshots in a listing.\n\nFor a specific {@link IHubSale listing}, retrieve\n{@link IHubSaleSnapshot.ISummary summary information} of all snapshots that\nhave been {@link IHubSaleAuditApproval audit approved} past and present.\n\nAnd at this time, the recorded statistics/aggregation information is\nonly written for the snapshot time. For example,\n{@link IHubSaleGoodAggregate.call_count}, which means the total number of\nAPI calls, is written for the snapshot time, not the total number of calls\nfor the listing.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the listing"
          }
        ],
        "requestBody": {
          "description": "page request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of snapshot summary information grouped by page",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleSnapshot.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/sales/{saleId}/snapshots/{id}": {
      "get": {
        "summary": "View details of approved snapshots in Mem",
        "description": "View details of approved snapshots in Mem.\n\nView {@link IHubSaleSnapshot snapshot} of a specific time period that\nhas been {@link IHubSaleAuditApproval} approved for review within\n{@link IHubSale listing}.\n\nHowever, if the listing is in {@link IHubSaleAudit review} and is in the\n{@link IHubSaleAuditEmendation revision} process, then\n{@link IHubSeller sellers} and {@link IHubAdministrator administrators}\ncan view it even if the review has not been approved.\n\nAnd at this time, the recorded statistics/aggregation information is only\nfor the snapshot time. For example, {@link IHubSaleGoodAggregate.call_count}\nwhich means the total number of API calls, the total number of calls for\nthe snapshot time is recorded, not the total number of calls for the listing.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the listing"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleSnapshot.id } of the target snapshot"
          }
        ],
        "responses": {
          "200": {
            "description": "snapshot details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleSnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/sales/{saleId}/snapshots/{id}/flip": {
      "get": {
        "summary": "Retrieve listing information for approved snapshots within listings",
        "description": "Retrieve listing information for approved snapshots within listings.\n\nRetrieve information for {@link IHubSaleSnapshot snapshot} of a specific\ntime period that has been {@link IHubSaleAuditApproval} approved for review,\nand retrieve listing information {@link IHubSale} at that time.\n\nHowever, if the listing is in {@link IHubSaleAudit review} and in the\n{@link IHubSaleAuditEmendation emendation} process, then\n{@link IHubSeller sellers} and {@link IHubAdministrator administrators} can\nretrieve it, even if the review has not been approved.\n\nAnd at this time, the recorded statistics/aggregation information is only for\nthe time period of the snapshot. For example, in the case of\n{@link IHubSaleGoodAggregate.call_count}, which means the total number of API\ncalls, the total number of calls for the snapshot is recorded, not the total\nnumber of calls for the attributed property.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the attributed property"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleSnapshot.id } of the target snapshot"
          }
        ],
        "responses": {
          "200": {
            "description": "property information reverse-constructed from the snapshot",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSale"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/sales/{saleId}/snapshots/{id}/swagger": {
      "patch": {
        "summary": "Retrieve Swagger information",
        "description": "Retrieve Swagger information.\n\nSpecify a specific {@link IHubSaleUnit unit} and\n{@link IHubSaleUnitStock stock} from the target\n{@link IHubSaleSnapshot listing snapshot}, and retrieve its\n{@link ISwagger Swagger} information.\n\nThe returned Swagger document contains the actual server API address\nregistered by the seller based on {@link IHubSeller seller} and\n{@link IHubAdministrator administrator}, and the middleware API address of\nthis hub system for the DEV server based on {@link IHubCustomer customer}.\nFor commercial purposes, the REAL server address is excluded.\n\nThe Swagger document is translated and provided based on\n{@link IHubCustomer.LanguageType language code}. In addition, the\ncorresponding swagger document is provided based on information about the\n{@link IHubSaleUnit unit} and {@link IHubSaleUnitStock stock} specified by\n{@link IHubSaleUnitSwaggerAccessor}.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the property being sold"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleSnapshot.id } of the target snapshot"
          }
        ],
        "requestBody": {
          "description": "Identifier key for the target unit (and stock)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleUnitSwaggerAccessor"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "swagger information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISwagger"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/sales/{saleId}/bookmark": {
      "post": {
        "summary": "User adds a bookmark to a listing",
        "description": "User adds a bookmark to a listing.",
        "tags": [],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubBookmarkSale"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "User removes a property bookmark",
        "description": "User removes a property bookmark.",
        "tags": [],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/sales/collections": {
      "patch": {
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleCollection.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleCollection.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/sales/collections/{id}": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleCollection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/sales/recommendations": {
      "patch": {
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleRecommend.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleRecommend.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/sales/{saleId}/questions/{inquiryId}/likes": {
      "post": {
        "summary": "Generate a like for a product inquiry",
        "description": "Generate a like for a product inquiry.",
        "tags": [],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " The {@link IHubSale.id } of the sale being requested"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Like for Product Inquiry",
        "description": "Delete Like for Product Inquiry.",
        "tags": [
          "Inquiry",
          "Like"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the sale"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/sales/{saleId}/contents": {
      "patch": {
        "summary": "List up every language contents of the sale",
        "description": "List up every language contents of the sale.\n\nList up every language contents of the sale, with the pagination.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target sale's {@link IHubSale.id }"
          }
        ],
        "requestBody": {
          "description": "Request of page information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated contents of the sale",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleContent"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/sales/{saleId}/contents/{langCode}": {
      "get": {
        "summary": "Get a specific language's content",
        "description": "Get a specific language's content.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target sale's {@link IHubSale.id }"
          },
          {
            "name": "langCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Target language code"
          }
        ],
        "responses": {
          "200": {
            "description": "Sale content of the specific language",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleContent"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/sales/{saleId}/snapshots/{snapshotId}/contents": {
      "patch": {
        "summary": "List up every language contents of the sale snapshot",
        "description": "List up every language contents of the sale snapshot.\n\nList up every language contents of the sale snapshot, with the pagination.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target sale's {@link IHubSale.id }"
          },
          {
            "name": "snapshotId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target snapshot's {@link IHubSaleSnapshot.id }"
          }
        ],
        "requestBody": {
          "description": "Request of page information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated contents of the sale snapshot",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleContent"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/sales/{saleId}/snapshots/{snapshotId}/contents/{langCode}": {
      "get": {
        "summary": "Get a specific language's content",
        "description": "Get a specific language's content.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target sale's {@link IHubSale.id }"
          },
          {
            "name": "snapshotId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target snapshot's {@link IHubSaleSnapshot.id }"
          },
          {
            "name": "langCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Target language code"
          }
        ],
        "responses": {
          "200": {
            "description": "Sale content of the specific language",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleContent"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/statistics/orders/goods/calls": {
      "patch": {
        "summary": "View API call statistics for a specific period",
        "description": "View API call statistics for a specific period.\n\nView API usage, error rate, API latency, etc. of a product.",
        "tags": [
          "Statistics"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Search and page request information for the product to view",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGoodCallAggregate.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Statistical information about the API call history of the product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubOrderGoodCallAggregate"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/statistics/orders/goods/calls/entire": {
      "patch": {
        "summary": "View API call statistics for the entire period",
        "description": "View API call statistics for the entire period.\n\nView API usage, error rate, API latency, etc. for the entire period of\nthe product.",
        "tags": [
          "Statistics"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Specific information about the target product or listing",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGoodCallAggregate.IEntireRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Statistics for the entire period of the product's API call history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrderGoodCallAggregate"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/statistics/orders/goods/calls/ranking": {
      "patch": {
        "summary": "Retrieves the ranking of a specific period of the subscribed API",
        "description": "Retrieves the ranking of a specific period of the subscribed API.",
        "tags": [
          "Statistics"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Search and page request information for the product to be retrieved",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGoodRanking.IEntireRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Statistical information about the API call history of the product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubOrderGoodRanking"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/statistics/sales/calls/rankings": {
      "patch": {
        "summary": "Search for rankings based on the number of API calls for a listing",
        "description": "Search for rankings based on the number of API calls for a listing.\n\nSearch for listings with the highest rankings based on the number of times\nthe API was called when the listing was ordered.\n\nThe total searchable ranking is up to 100, and if there is a tie between\ndifferent listings, the processing is as follows.\n\n1. Listing with the most API calls\n2. Listing with the most successful API calls\n3. Listing created faster",
        "tags": [
          "Statistics"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Page request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paging processed ranking information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleCallRanking"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/systematic/channels/{channelCode}/categories": {
      "patch": {
        "summary": "List of channel category information",
        "description": "List of channel category information.\n\nRetrieves the {@link IHubChannelCategory} list.\n\nChannel categories have a 1: N recursive structure, and if a parent\ncategory exists, the children field contains a list of child categories.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "channelCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Channel code"
          }
        ],
        "responses": {
          "200": {
            "description": "Channel category list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IHubChannelCategory.IHierarchical"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/systematic/channels/{channelCode}/categories/{id}": {
      "get": {
        "summary": "Channel category details",
        "description": "Channel category details.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "channelCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Channel code"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " The channel category {@link IHubChannelCategory.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Channel category details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubChannelCategory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/systematic/channels/{channelCode}/categories/{id}/invert": {
      "get": {
        "summary": "Parent category information of a specific category",
        "description": "Parent category information of a specific category.\n\nGet parent category information of a specific category.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "channelCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " channel code"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " specific category {@link IHubChannelCategory.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "parent category information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubChannelCategory.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/systematic/channels": {
      "patch": {
        "summary": "List of hub channels",
        "description": "List of hub channels.\n\nRetrieve {@link IHubChannel} list.\n\nThe returned {@link IHubChannel}s are {@link IPage paging} processed.\n\nDepending on how the request information {@link IHubChannel.IRequest} is set,\nyou can {@link IHubChannel.IRequest.limit} limit the number of records per page,\n{@link IHubChannel.IRequest.search} search for hub channels that satisfy\na specific condition, or {@link IHubChannel.IRequest.sort sorting conditions}\nof `hub_channels` arbitrarily.",
        "tags": [
          "Systematic"
        ],
        "parameters": [],
        "requestBody": {
          "description": "list request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubChannel.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "paging processed ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubChannel"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/systematic/channels/hierarchical": {
      "patch": {
        "summary": "List of channel hierarchy information",
        "description": "List of channel hierarchy information.\n\nRetrieve {@link IHubChannel.IHierarchical} category hierarchy list.\n\nThe returned {@link IHubChannel}s are {@link IPage paging} processed.\nAnd depending on how the request information {@link IHubChannel.IRequest}\nis set, you can {@link IHubChannel.IRequest.limit} limit the number of records\nper page, {@link IHubChannel.IRequest.search} search for channel hierarchies\nthat satisfy a specific condition, or\n{@link IHubChannel.IRequest.sort sort conditions} of the channel hierarchy\narbitrarily.",
        "tags": [
          "Systematic"
        ],
        "parameters": [],
        "requestBody": {
          "description": "list request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubChannel.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "paging processed ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubChannel.IHierarchical"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/systematic/channels/{id}": {
      "get": {
        "summary": "View the hierarchy of a specific channel by channel ID",
        "description": "View the hierarchy of a specific channel by channel ID.\n\nRetrieve the hierarchy of a specific channel.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubChannel.id } to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "the hierarchy of the specific channel retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubChannel.IHierarchical"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/systematic/channels/{code}/get": {
      "get": {
        "summary": "View the hierarchy of a specific channel by channel code",
        "description": "View the hierarchy of a specific channel by channel code.\n\nRetrieve the hierarchy of a specific channel.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IHubChannel.code } to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "The hierarchy of the specific channel retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubChannel.IHierarchical"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/systematic/sections": {
      "patch": {
        "summary": "List of section information",
        "description": "List of section information.\n\nRetrieves a list of {@link IHubSection}.\n\nThe returned {@link IHubSection}s are {@link IPage paging} processed.\n\nDepending on how the request information {@link IHubSection.IRequest} is set,\nyou can {@link IHubSection.IRequest.limit} limit the number of records per page,\n{@link IHubSection.IRequest.search} search for sections that satisfy a specific\ncondition, or {@link IHubSection.IRequest.sort sort conditions} of sections\narbitrarily.",
        "tags": [
          "Systematic"
        ],
        "parameters": [],
        "requestBody": {
          "description": "list request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSection.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "paging ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/systematic/sections/{id}": {
      "get": {
        "summary": "Detailed information about a specific section by section ID",
        "description": "Detailed information about a specific section by section ID.\n\nRetrieve a specific {@link IHubSection}.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSection.id } to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "retrieved section information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/systematic/sections/{code}/get": {
      "get": {
        "summary": "Detailed section information by section code",
        "description": "Detailed section information by section code.\n\nRetrieve specific {@link IHubSection}.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IHubSection.code } to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "retrieved section information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/customers/shelves/orders/goods": {
      "patch": {
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubShelfOrderGood.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubShelfOrderGood"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/authenticate/login": {
      "post": {
        "summary": "Seller Member Login",
        "description": "Seller Member Login.\n\n{@link IHubSeller Seller} {@link IHubCustomer Customer} who signed up\nas a member logs in by entering the account's email and password.\n\nThis API is basically the same as the customer-side login API,\n{@link HubApi.functional.hub.customers.authenticate.login}, but it allows login\nfor simple {@link IHubMember members} who have not signed up as\n{@link join seller members}, and this is not the case. In addition, the returned\ntype is also a structure that {@link IHubSeller.IInvert reverse reference} from\nthe seller to the member and customer information, while the customer-side\nAPI references {@link IHubCustomer.member customer to member}, and\n{@link IHubMember.seller member to seller} in the forward direction.\n\nPlease note that before logging in as a seller, you must call the\n{@link HubApi.functional.hub.customers.authenticate.create} function to issue\na {@link IHubCustomer customer} record and token. This is because the system\ncannot do anything without issuing a customer token.",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Member login input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubMember.ILogin"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Sales information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSeller.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/authenticate/join": {
      "post": {
        "summary": "Sign up for seller membership",
        "description": "Sign up for seller membership.\n\n{@link IHubMember General Member} {@link IHubCustomer Customer},\nsign up as {@link IHubSeller Seller Member}.\n\nOf course, in order to call this API function, you must issue a customer token\nand complete registration as a general member. Therefore, the following two\nAPIs must have been called in order in advance.\n\n1. {@link HubApi.functional.hub.customers.authenticate.create}\n2. {@link HubApi.functional.hub.customers.authenticate.join}",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Membership registration input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSeller.IJoin"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Seller information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSeller.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/authenticate": {
      "get": {
        "summary": "Get seller information",
        "description": "Get seller information.\n\n{@link IHubSeller Seller} {@link IHubCustomer Customer} who signed up as a member,\nre-queries his {@link IHubSeller.Invert Seller Reference Information}.",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "seller information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSeller.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/commons/attachments": {
      "get": {
        "description": "Publish Presigned URL",
        "tags": [
          "commons"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "URL information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPresignedUrl"
                }
              }
            }
          }
        }
      }
    },
    "/hub/sellers/commons/attachments/v2": {
      "patch": {
        "description": "Issue Presigned URL (V2)\n\nIssues Presigned URL by entering file name and file extension.",
        "tags": [
          "commons"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPresignedUrl.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "URL information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPresignedUrl"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/coupons": {
      "post": {
        "summary": "Register a discount coupon",
        "description": "Register a discount coupon.\n\nDesign and register a new discount coupon.\n\nPlease note that editing of coupons is not possible. Instruct users to\ndelete and create a new one.",
        "tags": [
          "Coupon"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Discount coupon input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubCoupon.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Discount coupon information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubCoupon"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "View discount coupons in bulk",
        "description": "View discount coupons in bulk.\n\n{@link IHubCoupon discount coupon} lists are returned after {@link IPage paging}.\n\nIf the current discount coupon search target is {@link IHubCustomer customer},\n\nonly coupons that are publicly available and that the current customer\ncan issue the {@link IHubCouponTicket ticket} will be displayed.",
        "tags": [
          "Coupon"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubCoupon.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paging list of discount coupons",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubCoupon"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/coupons/{id}": {
      "delete": {
        "summary": "Delete discount coupon",
        "description": "Delete discount coupon.\n\nHowever, coupons that have already started discounting cannot be deleted.",
        "tags": [
          "Coupon"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubCoupon.id } of the target discount coupon"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "View individual discount coupons",
        "description": "View individual discount coupons.",
        "tags": [
          "Coupon"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "title": "{@link IHubCoupon.id } of the target discount coupon",
            "description": " {@link IHubCoupon.id } of the target discount coupon."
          }
        ],
        "responses": {
          "200": {
            "description": "Discount coupon details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubCoupon"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/push-messages": {
      "patch": {
        "summary": "Bulk push message query",
        "description": "Bulk push message query.",
        "tags": [
          "PushMessage"
        ],
        "parameters": [],
        "requestBody": {
          "description": "page request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubPushMessage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "push message list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubPushMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/push-messages/{id}": {
      "get": {
        "summary": "Push message individual query",
        "description": "Push message individual query.",
        "tags": [
          "PushMessage"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubPushMessage.id } of target push message"
          }
        ],
        "responses": {
          "200": {
            "description": "Push message details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubPushMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/push-messages/{code}/get": {
      "get": {
        "summary": "Push message individual query by code",
        "description": "Push message individual query by code.",
        "tags": [
          "PushMessage"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IHubPushMessage.code } of target push message"
          }
        ],
        "responses": {
          "200": {
            "description": "Push message details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubPushMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/push-messages/histories": {
      "patch": {
        "summary": "Bulk query of push message sending history",
        "description": "Bulk query of push message sending history.",
        "tags": [
          "PushMessage"
        ],
        "parameters": [],
        "requestBody": {
          "description": "page request and search information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubPushMessageHistory.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "list of push message sending history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubPushMessageHistory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/push-messages/histories/{id}": {
      "get": {
        "summary": "Individual inquiry of push message sending history",
        "description": "Individual inquiry of push message sending history.",
        "tags": [
          "PushMessage"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubPushMessageHistory.id } of target push message\r\nsending history"
          }
        ],
        "responses": {
          "200": {
            "description": "Push message sending history details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubPushMessageHistory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/openapi/translate/document": {
      "post": {
        "summary": "Translate Swagger Document",
        "description": "Translate Swagger Document.\n\nTranslate Swagger document into the desired language.\n\nYou can request the translation with the Swagger document or\nits containing URL.",
        "tags": [],
        "parameters": [],
        "requestBody": {
          "description": "Request of the Swagger or its URL to translate",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ISwaggerTranslation.IUrlRequest"
                  },
                  {
                    "$ref": "#/components/schemas/ISwaggerTranslation.IDocumentRequest"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "url": "#/components/schemas/ISwaggerTranslation.IUrlRequest",
                    "document": "#/components/schemas/ISwaggerTranslation.IDocumentRequest"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Translated Swagger",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISwagger"
                }
              }
            }
          }
        }
      }
    },
    "/hub/sellers/openapi/translate/url": {
      "post": {
        "summary": "Translate Swagger and get URL of the translated",
        "description": "Translate Swagger and get URL of the translated.\n\nTranslate Swagger document into the desired language from URL address,\nand get the URL of the translated Swagger.",
        "tags": [
          "OpenAPI"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request of the URL to translate",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISwaggerTranslation.IUrlRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "URL containing the translated Swagger",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISwaggerTranslation"
                }
              }
            }
          }
        }
      }
    },
    "/hub/sellers/orders/{orderId}/goods/{goodId}/issues/{issueId}/comments": {
      "post": {
        "summary": "Create an Issue comment",
        "description": "Create an Issue comment.\n\nCreates a {@link IHubOrderGoodIssueComment}.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the target order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the target product"
          },
          {
            "name": "issueId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGoodIssue.id } of the target issue"
          }
        ],
        "requestBody": {
          "description": "Information about the ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGoodIssueComment.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Comment on the created issue",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrderGoodIssueComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "Issue comment list",
        "description": "Issue comment list.\n\nRetrieve {@link IHubOrderGoodIssueComment} list.\n\nThe returned {@link IHubOrderGoodIssueComment} are {@link IPage paging}\nprocessed. And depending on how the request information\n{@link IHubOrderGoodIssueComment.IRequest} is set, you can\n{@link IHubOrderGoodIssueComment.IRequest.limit} limit the number of records\nper page, {@link IHubOrderGoodIssueComment.IRequest.search} search only comments\nthat satisfy a specific condition, or\n{@link IHubOrderGoodIssueComment.IRequest.sort sort condition} of the comments\ncan be arbitrarily specified.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " target {@link IHubOrder.id }"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " target {@link IHubOrderGood.id }"
          },
          {
            "name": "issueId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " target {@link IHubOrderGoodIssue.id }"
          }
        ],
        "requestBody": {
          "description": "list request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGoodIssueComment.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "paged ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubOrderGoodIssueComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/orders/{orderId}/goods/{goodId}/issues/{issueId}/comments/{id}": {
      "put": {
        "summary": "Modify Issue Comment",
        "description": "Modify Issue Comment.\n\nModify {@link IHubOrderGoodIssueComment}.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the target order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the target product"
          },
          {
            "name": "issueId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGoodIssue.id } of the target issue"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGoodIssueComment.id } of the target comment"
          }
        ],
        "requestBody": {
          "description": "Information about the ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGoodIssueComment.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Snapshot of the comment of the modified issue",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrderGoodIssueComment.ISnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Issue Comment",
        "description": "Delete Issue Comment.\n\nDelete {@link IHubOrderGoodIssueComment}.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the target order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the target product"
          },
          {
            "name": "issueId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGoodIssue.id } of the target issue"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGoodIssueComment.id } of the target comment"
          }
        ],
        "responses": {
          "200": {
            "description": "void",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Issue Comment Lookup",
        "description": "Issue Comment Lookup.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " target {@link IHubOrder.id }"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " target {@link IHubOrderGood.id }"
          },
          {
            "name": "issueId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " target {@link IHubOrderGoodIssue.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " target {@link IHubOrderGoodIssueComment.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrderGoodIssueComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/orders/{orderId}/goods/{goodId}/issues/{issueId}/fees": {
      "post": {
        "summary": "Offer a fee",
        "description": "Offer a fee.\n\nThe seller offers a fee for the issue.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the target order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the target product"
          },
          {
            "name": "issueId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGoodIssue.id } of the target issue"
          }
        ],
        "requestBody": {
          "description": "Information about the ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGoodIssueFee.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Information about the fee offer to be created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrderGoodIssueFee"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "Retrieve the fee list",
        "description": "Retrieve the fee list.\n\nRetrieve the list of {@link IHubOrderGoodIssueFee}.\n\nThe returned {@link IHubOrderGoodIssueFee}s are {@link IPage paging}\nprocessed. And depending on how the request information\n{@link IHubOrderGoodIssueFee.IRequest} is set, you can\n{@link IHubOrderGoodIssueFee.IRequest.limit} limit the number of records per\npage, {@link IHubOrderGoodIssueFee.IRequest.search} search only fees that\nsatisfy a specific condition, or\n{@link IHubOrderGoodIssueFee.IRequest.sort sort condition} of fees\narbitrarily specified.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the target order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the target product"
          },
          {
            "name": "issueId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGoodIssue.id } of the target issue"
          }
        ],
        "requestBody": {
          "description": "List request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGoodIssueFee.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paged commission fees",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubOrderGoodIssueFee"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/orders/{orderId}/goods/{goodId}/issues/{issueId}/fees/{id}": {
      "delete": {
        "summary": "Delete the commission fee offer",
        "description": "Delete the commission fee offer.\n\nDelete the commission fee offered by the seller.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the target order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the target product"
          },
          {
            "name": "issueId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGoodIssue.id } of the target issue"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGoodIssueFee.id } of the target commission fee"
          }
        ],
        "responses": {
          "200": {
            "description": "void",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Query individual commission fees",
        "description": "Query individual commission fees.\n\nQuery individual commission fee records.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of target order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of target product"
          },
          {
            "name": "issueId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGoodIssue.id } of target issue"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGoodIssueFee.id } of target commission fee"
          }
        ],
        "responses": {
          "200": {
            "description": "commission fee information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrderGoodIssueFee"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/orders/{orderId}/goods/{goodId}/issues": {
      "post": {
        "summary": "Create an Issue",
        "description": "Create an Issue.\n\nCreate an issue for a purchased product.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the order to which it belongs"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the product to which it belongs"
          }
        ],
        "requestBody": {
          "description": "Issue input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGoodIssue.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Issue information written",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrderGoodIssue"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "View the Issue Summary Information List",
        "description": "View the Issue Summary Information List.\n\nView the summary information list of {@link IHubOrderGoodIssue}.\n\nThe returned {@link IHubOrderGoodIssue}s are {@link IPage paging} processed.\n\nAnd depending on how the request information {@link IHubOrderGoodIssue.IRequest}\nis set, you can {@link IHubOrderGoodIssue.IRequest.limit} limit the number\nof records per page, {@link IHubOrderGoodIssue.IRequest.search} search only\nissues that satisfy a specific condition, or\n{@link IHubOrderGoodIssue.IRequest.sort sort conditions} of the issues can be\narbitrarily specified.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the target order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the target product"
          }
        ],
        "requestBody": {
          "description": "List request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGoodIssue.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Summary information list of paged issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubOrderGoodIssue.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/orders/{orderId}/goods/{goodId}/issues/{id}": {
      "put": {
        "summary": "Modify Issue",
        "description": "Modify Issue.\n\nModify the information of an issue.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the target order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the target product"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGoodIssue.id } of the target issue"
          }
        ],
        "requestBody": {
          "description": "Information of the issue to be modified ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGoodIssue.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Information of the modified issue ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IBbsArticle.ISnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Issue",
        "description": "Delete Issue.\n\nDeletes the created issue.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the target order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the target product"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGoodIssue.id } of the target issue"
          }
        ],
        "responses": {
          "200": {
            "description": "void",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "View Issue Details",
        "description": "View Issue Details.\n\nRetrieve details of {@link IHubOrderGoodIssue}.\n\nUsed when retrieving details of a specific issue.",
        "tags": [
          "Issue"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the target order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the target product"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGoodIssue.id } of the target issue"
          }
        ],
        "responses": {
          "200": {
            "description": "Issue details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrderGoodIssue"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/orders/{orderId}/goods/{goodId}/snapshots": {
      "patch": {
        "summary": "Retrieve the list of available API snapshots from the ordered product",
        "description": "Retrieve the list of available API snapshots from the ordered product.\n\nRetrieve the list of available APIs from the {@link IHubOrderGood product}\nordered by the customer. In other words, retrieve all available snapshots of\n{@link IHubSaleSnapshot.IInvert.version versions} for the product ordered by\nthe customer.\n\nNote that the {@link IHubSaleUnitStock.price price information} recorded at\nthis time is not the price of the snapshot, but the price of the product\nordered by the customer. Also, the statistical information recorded in the\nsnapshot is only for the snapshot time. For example, in the case of\n{@link IHubSaleGoodAggregate.call_count}, which means the total number of\nAPI calls, the total number of calls for the snapshot time is recorded,\nnot the total number of calls for the attributed items.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the product"
          }
        ],
        "requestBody": {
          "description": "Page request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paged snapshots",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleSnapshot.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/orders/{orderId}/goods/{goodId}/snapshots/{id}": {
      "get": {
        "summary": "Retrieve a specific snapshot available from an ordered product",
        "description": "Retrieve a specific snapshot available from an ordered product.\n\nRetrieve a specific API\n{@link IHubSaleSnapshot.IInvert snapshot} from the {@link IHubOrderGood product}\nordered by the customer. In other words, retrieve a snapshot of the current\nor past {@link IHubSaleSnapshot.IInvert.version version} available for the\nproduct ordered by the customer.\n\nNote that the {@link IHubSaleUnitStock.price price information} recorded at\nthis time is not the price of the snapshot, but the price of the product\nordered by the customer. In addition, the statistical information recorded in\nthe snapshot is also only for the snapshot time. For example, in the case of\n{@link IHubSaleGoodAggregate.call_count}, which means the total number of\nAPI calls, the total number of calls for the snapshot time is recorded,\nnot the total number of calls for the attributed items.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the product"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleSnapshot.IInvert.id } of the target snapshot"
          }
        ],
        "responses": {
          "200": {
            "description": "snapshot information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleSnapshot.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/orders/{orderId}/goods/{goodId}/snapshots/{id}/swagger": {
      "patch": {
        "summary": "Retrieve the Swagger document",
        "description": "Retrieve the Swagger document.\n\nFor a specific {@link IHubSaleSnapshot.IInvert snapshot} available\nfrom {@link IHubOrderGood Ordered Good}, specify the\n{@link IHubSaleSnapshotUnit.IInvert unit} and fetch its\n{@link ISwagger Swagger document}.\n\nEach time an API is called in the returned Swagger document, the number\nof API calls for that product is counted, the execution history is recorded,\nand the deposit is charged if necessary.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the bound order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the bound product"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleSnapshot.IInvert.id } of the target snapshot"
          }
        ],
        "requestBody": {
          "description": "Identifier key for the target unit",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleUnitSwaggerAccessor"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Swagger Documentation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISwagger"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/orders/{orderId}/goods/{goodId}/snapshots/{id}/openai": {
      "patch": {
        "summary": "Retrieve the OpenAI document",
        "description": "Retrieve the OpenAI document.\n\nFor a specific {@link IHubSaleSnapshot.IInvert snapshot} available from\nthe {@link IHubOrderGood order product}, specify the\n{@link IHubSaleSnapshotUnit.IInvert unit} and fetch its\n{@link IOpenAiDocument OpenAI schema document}.\n\nEach time an API is called in the returned OpenAI document, the number\nof API calls for that product is counted, the execution history is recorded,\nand the deposit is charged if necessary.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the order"
          },
          {
            "name": "goodId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the product"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleSnapshot.IInvert.id } of the target snapshot"
          }
        ],
        "requestBody": {
          "description": "Identifier key for the target unit",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleUnitOpenAiSchemaAccessor"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OpenAI schema document",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHttpOpenAiApplication"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/orders/{orderId}/goods": {
      "patch": {
        "summary": "Bulk query of reverse reference information of ordered products",
        "description": "Bulk query of reverse reference information of ordered products.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Request information of ordered products",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGood.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of reverse reference information of ordered products that have been paged",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubOrderGood.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/orders/{orderId}/goods/{id}": {
      "get": {
        "summary": "Lookup the reverse reference information of the order item individually",
        "description": "Lookup the reverse reference information of the order item individually.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } of the order"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrderGood.id } of the target order item"
          }
        ],
        "responses": {
          "200": {
            "description": "reverse reference information of the order item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrderGood.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/orders": {
      "patch": {
        "summary": "Order list",
        "description": "Order list.\n\nRetrieve {@link IHubOrder} list.\n\nThe returned {@link IHubOrder}s are {@link IPage paging} processed. And\ndepending on how the request information {@link IHubOrder.IRequest} is set,\nyou can {@link IHubOrder.IRequest.limit} limit the number of records per page,\n{@link IHubOrder.IRequest.search} search only orders that satisfy a specific\ncondition, or {@link IHubOrder.IRequest.sort sort condition} of orders\narbitrarily.",
        "tags": [
          "Order"
        ],
        "parameters": [],
        "requestBody": {
          "description": "list request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrder.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "paging ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubOrder"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/orders/{id}": {
      "get": {
        "summary": "Order details",
        "description": "Order details.\n\nRetrieve a specific {@link IHubOrder}.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubOrder.id } to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrder"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/{saleId}/audits/{auditId}/comments": {
      "patch": {
        "summary": "Bulk query review comment history",
        "description": "Bulk query review comment history.\n\nFor a specific {@link IHubSaleAudit review post}, {@link IHubSeller sales party}\nand {@link IHubAdministrator administrator} query\n{@link IHubSaleAuditComment comments} in bulk.\n\nThe returned information is {@link IPage paging} processed, and depending\non how the request information {@link IHubSaleAuditComment.IRequest} is set,\nthe number of records per page can be {@link IHubSaleAuditComment.IRequest.limit},\nor only comments that meet a specific condition can be\n{@link IHubSaleAuditComment.IRequest.search}, or the\n{@link IHubSaleAuditComment.IRequest.sort sort condition} of the comments\ncan be set arbitrarily.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the property"
          },
          {
            "name": "auditId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleAudit.id } of the audit"
          }
        ],
        "requestBody": {
          "description": "page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleAuditComment.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "list of paged audit comments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleAuditComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "summary": "Write a review comment",
        "description": "Write a review comment.\n\nWrite a comment on a specific {@link IHubSaleAudit review post}",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of a specific listing"
          },
          {
            "name": "auditId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleAudit.id } of a specific review"
          }
        ],
        "requestBody": {
          "description": "Comment writing information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleAuditComment.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Comment writing information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleAuditComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/{saleId}/audits/{auditId}/comments/{id}": {
      "get": {
        "summary": "View individual audit comments",
        "description": "View individual audit comments.\n\nView individual {@link IHubSaleAuditComment comments} written by\n{@link IHubSeller selling party} or {@link IHubAdministrator administrator} for\na specific {@link IHubSaleAudit audit post}.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the listing"
          },
          {
            "name": "auditId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleAudit.id } of the audit"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleAuditComment.id } of the comment"
          }
        ],
        "responses": {
          "200": {
            "description": "comment information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleAuditComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "summary": "Editing comments on a review post",
        "description": "Editing comments on a review post.\n\n{@link IHubSaleAuditComment comment} written on a specific\n{@link IHubSaleAudit review} post, {@link IHubSeller seller} or\n{@link IHubAdministrator administrator} can edit it themselves.\n\nHowever, as is the policy that this hub system applies to comments in general,\nediting this comment does not actually change the existing content. The edited\ncontent is recorded as a new {@link IHubSaleAuditComment.ISnapshot snapshot},\naccumulated in the existing comment. This is also made public to the\n{@link IHubAdministrator administrator} and {@link IHubSeller seller}, so\nanyone who can view the {@link IHubSaleAudit review} post can also view the\nedit history.\n\nThis is to prevent administrators or sellers from manipulating the situation\nby editing their comments, etc., due to the nature of e-commerce, which is\nprone to disputes. In other words, it is for the purpose of preserving\nevidence.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the property to be attributed"
          },
          {
            "name": "auditId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleAudit.id } of the attributed audit"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleAuditComment.id } of the comment to be modified"
          }
        ],
        "requestBody": {
          "description": "Comment modification information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleAuditComment.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Newly created snapshot content information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IBbsArticleComment.ISnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/{saleId}/audits/{id}": {
      "get": {
        "summary": "View audit information details",
        "description": "View audit information details.\n\nView {@link IHubSaleAudit audit post} for {@link IHubSale listing} in detail.\n\nThe returned information {@link IHubSaleAudit} contains information such as\nwhich {@link IHubAdministrator administrator} initiated the audit, and who\n{@link IHubSaleAuditRejection rejected} or\n{@link IHubSaleAuditApproval approved}, along with the respective dates and\ntimes.\n\nIn addition, {@link IHubSeller seller} and administrator can communicate\nabout the audit using {@link IHubSaleAuditComment comments}, so please also\ncall the comment-related API {@link audits.comments.index}.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the listing"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleAudit.id } of the audit target"
          }
        ],
        "responses": {
          "200": {
            "description": "audit information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleAudit"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/{saleId}/audits/{id}/emend": {
      "put": {
        "summary": "Edit during review",
        "description": "Edit during review.\n\nIf a {@link IHubSeller seller} registered (or modified)\n{@link IHubSale listing} is currently under {@link IHubSaleAudit review},\nthe seller and the {@link IHubAdministrator administrator} can edit and\nadd to it.\n\nOf course, this is limited to listings that are undergoing review, and\nlistings that have not even started review yet cannot be edited. Also, listings\nthat have {@link IHubSaleAuditApproval approval} completed cannot be edited.\n\nHowever, for listings that have been {@link IHubSaleAuditRejection rejected}\nby the administrator, the seller can request a retrial by editing it. Of course,\nthis is limited to\n{@link IHubSaleAuditRejection.reversible reversible rejections}.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target listing"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleAudit.id } of the target audit"
          }
        ],
        "requestBody": {
          "description": "Editing content",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleAuditEmendation.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Editing completion information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleAuditEmendation"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/{saleId}/questions/{inquiryId}/comments": {
      "post": {
        "summary": "Write a query comment",
        "description": "Write a query comment.\n\nWrite a comment on the query.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target sale"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiry.id } of the target inquiry"
          }
        ],
        "requestBody": {
          "description": "Information on the ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleInquiryComment.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Information on the generated query comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "View the list of comments for product inquiries",
        "description": "View the list of comments for product inquiries.\n\nView the {@link IHubSaleInquiryComment} list.\n\nThe returned {@link IHubSaleInquiryComment}s are processed with\n{@link IPage paging}. And depending on how the request information\n{@link IHubSaleInquiryComment.IRequest} is set, you can\n{@link IHubSaleInquiryComment.IRequest.limit} limit the number of records\nper page, {@link IHubSaleInquiryComment.IRequest.search} search for comments\nfor product inquiries that satisfy a specific condition, or\n{@link IHubSaleInquiryComment.IRequest.sort} arbitrarily specify the sort\ncondition for comments for product inquiries.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target sale"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiry.id } of the target inquiry"
          }
        ],
        "requestBody": {
          "description": "list request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleInquiryComment.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "paged ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/{saleId}/questions/{inquiryId}/comments/{id}": {
      "put": {
        "summary": "Modify query comment",
        "description": "Modify query comment.\n\nModify the comment written in the query.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target sale"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiry.id } of the target inquiry"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiryComment.id } of the target comment"
          }
        ],
        "requestBody": {
          "description": "Information about ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleInquiryComment.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Information about the modified query comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleInquiryComment.ISnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete query comment",
        "description": "Delete query comment.\n\nDeletes the written query comment.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target sale"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiry.id } of the target inquiry"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiryComment.id } of the target comment"
          }
        ],
        "responses": {
          "200": {
            "description": "void",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Retrieve a specific comment for a product inquiry",
        "description": "Retrieve a specific comment for a product inquiry.\n\nRetrieve a specific {@link IHubSaleInquiryComment}.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the sale"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiry.id } of the inquiry"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiryComment.id } to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment for the retrieved product inquiry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/{saleId}/questions/{questionId}": {
      "post": {
        "summary": "Write a response to a listing question",
        "description": "Write a response to a listing question.\n\nThe seller writes a response to a listing question.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " specific {@link IHubSale.id }"
          },
          {
            "name": "questionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " specific {@link IHubSaleInquiry.id }"
          }
        ],
        "requestBody": {
          "description": "Question information to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleInquiryAnswer.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Asher",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleInquiryAnswer"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "summary": "Modify an answer to a listing question",
        "description": "Modify an answer to a listing question.\n\nThe seller modifies an answer to a listing question.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " specific {@link IHubSale.id }"
          },
          {
            "name": "questionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " specific {@link IHubSaleInquiry.id }"
          }
        ],
        "requestBody": {
          "description": "The answer information to modify.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleInquiryAnswer.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A snapshot of the modified answer information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleInquiryAnswer.ISnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/{saleId}/questions": {
      "patch": {
        "summary": "Retrieve the list of question summary information for the listing snapshot",
        "description": "Retrieve the list of question summary information for the listing snapshot.\n\nRetrieve the {@link IHubSaleQuestion} list.\n\nThe returned {@link IHubSaleQuestion}s are {@link IPage paging} processed.\nAnd depending on how the request information {@link IHubSaleQuestion.IRequest}\nis set, you can {@link IHubSaleQuestion.IRequest.limit} limit the number of\nrecords per page, {@link IHubSaleQuestion.IRequest.search} search for questions\nfor listing snapshots that meet a specific condition, or\n{@link IHubSaleQuestion.IRequest.sort} specify the sort condition for questions\nfor listing snapshots.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the sale in question"
          }
        ],
        "requestBody": {
          "description": "list request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleQuestion.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "list of paged ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleQuestion.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/{saleId}/questions/{id}": {
      "get": {
        "summary": "Retrieve question details for a listing snapshot",
        "description": "Retrieve question details for a listing snapshot.\n\nRetrieves a specific {@link IHubSaleQuestion}.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the sale in question"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleQuestion.id } to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Question details for the retrieved listing snapshot",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleQuestion"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a question about a listing snapshot",
        "description": "Delete a question about a listing snapshot.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the sale being deleted"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleQuestion.id } to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "void",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/{saleId}/reviews/{inquiryId}/comments": {
      "post": {
        "summary": "Write a query comment",
        "description": "Write a query comment.\n\nWrite a comment on the query.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target sale"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiry.id } of the target inquiry"
          }
        ],
        "requestBody": {
          "description": "Information on the ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleInquiryComment.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Information on the generated query comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "View the list of comments for product inquiries",
        "description": "View the list of comments for product inquiries.\n\nView the {@link IHubSaleInquiryComment} list.\n\nThe returned {@link IHubSaleInquiryComment}s are processed with\n{@link IPage paging}. And depending on how the request information\n{@link IHubSaleInquiryComment.IRequest} is set, you can\n{@link IHubSaleInquiryComment.IRequest.limit} limit the number of records\nper page, {@link IHubSaleInquiryComment.IRequest.search} search for comments\nfor product inquiries that satisfy a specific condition, or\n{@link IHubSaleInquiryComment.IRequest.sort} arbitrarily specify the sort\ncondition for comments for product inquiries.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target sale"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiry.id } of the target inquiry"
          }
        ],
        "requestBody": {
          "description": "list request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleInquiryComment.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "paged ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/{saleId}/reviews/{inquiryId}/comments/{id}": {
      "put": {
        "summary": "Modify query comment",
        "description": "Modify query comment.\n\nModify the comment written in the query.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target sale"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiry.id } of the target inquiry"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiryComment.id } of the target comment"
          }
        ],
        "requestBody": {
          "description": "Information about ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleInquiryComment.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Information about the modified query comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleInquiryComment.ISnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete query comment",
        "description": "Delete query comment.\n\nDeletes the written query comment.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target sale"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiry.id } of the target inquiry"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiryComment.id } of the target comment"
          }
        ],
        "responses": {
          "200": {
            "description": "void",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Retrieve a specific comment for a product inquiry",
        "description": "Retrieve a specific comment for a product inquiry.\n\nRetrieve a specific {@link IHubSaleInquiryComment}.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the sale"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiry.id } of the inquiry"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleInquiryComment.id } to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment for the retrieved product inquiry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/{saleId}/reviews/{reviewId}": {
      "post": {
        "summary": "Generate a response to a listing review",
        "description": "Generate a response to a listing review.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of a specific listing"
          },
          {
            "name": "reviewId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleReview.id } of a review of a specific listing"
          }
        ],
        "requestBody": {
          "description": "Information about the response to generate",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleInquiryAnswer.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Information about the generated response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleInquiryAnswer"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "summary": "Modify a response to a listing review",
        "description": "Modify a response to a listing review.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of a specific listing"
          },
          {
            "name": "reviewId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleReview.id } of a review of a specific listing"
          }
        ],
        "requestBody": {
          "description": "Information about the response to be modified",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleInquiryAnswer.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Information about the modified response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleInquiryAnswer.ISnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/{saleId}/reviews": {
      "patch": {
        "summary": "Retrieve a list of review summary information for a listing snapshot",
        "description": "Retrieve a list of review summary information for a listing snapshot.\n\nRetrieve a list of summary information for {@link IHubSaleReview}.\n\nThe returned {@link IHubSaleReview}s are {@link IPage paging} processed.\n\nDepending on how you set the request information {@link IHubSaleReview.IRequest},\nyou can {@link IHubSaleReview.IRequest.limit} limit the number of records per\npage, {@link IHubSaleReview.IRequest.search} search reviews for listing\nsnapshots that meet a specific condition, or {@link IHubSaleReview.IRequest.sort}\nrandomly specify a sort condition for reviews for listing snapshots.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the sale in question"
          }
        ],
        "requestBody": {
          "description": "list request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleReview.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "list of review summary information for paged listing snapshots",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleReview.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/{saleId}/reviews/{id}": {
      "get": {
        "summary": "View review details for a listing snapshot",
        "description": "View review details for a listing snapshot.\n\nView a specific {@link IHubSaleReview}.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the sale in question"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleReview.id } to view"
          }
        ],
        "responses": {
          "200": {
            "description": "Review details for the viewed listing snapshot.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleReview"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a review for a listing",
        "description": "Delete a review for a listing.\n\nDelete a review for a specific listing.",
        "tags": [
          "Inquiry"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the sale in question"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleReview.id } to query"
          }
        ],
        "responses": {
          "200": {
            "description": "void",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales": {
      "post": {
        "summary": "Registering a listing",
        "description": "Registering a listing.\n\n{@link IHubSeller seller} registers a new {@link IHubSale listing}.\n\nHowever, even if a seller registers a listing through this API, the sale does\nnot start immediately. The manager must {@link IHubSaleAudit review} and\n{@link IHubSaleAuditApproval approve} the listing, and even then, the\n{@link IHubSale.opened_at sales start date} set by the seller when registering\nthe listing arrives, and only then does the actual sale begin.\n\nPlease note that the listing has a rather complex structure, and its\n{@link IHubSale.ICreate input information} is also the same. Therefore,\nplease read the explanations in the related DTO and ERD commentary carefully\nand fully understand the related structure before developing the client.",
        "tags": [
          "Sale"
        ],
        "parameters": [],
        "requestBody": {
          "description": "listing input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSale.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "generated listing information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSale"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "View the summary information list of properties",
        "description": "View the summary information list of properties.\n\n{@link IHubSale.ISummary summary information of properties} is loaded.\n\nThe returned {@link IHubSale.ISummary summary information} is\n{@link IPage paging} processed. And depending on how the request information\n{@link IHubSale.IRequest} is set, you can {@link IHubSale.IRequest.limit} limit\nthe number of records per page, {@link IHubSale.IRequest.search} search only\nproperties that satisfy a specific condition, or\n{@link IHubSale.IRequest.sort sort conditions} of properties can be arbitrarily\nspecified.",
        "tags": [
          "Sale"
        ],
        "parameters": [],
        "requestBody": {
          "description": "page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSale.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "list of summary information of properties that have been paged",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSale.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/{id}": {
      "put": {
        "summary": "Edit listing",
        "description": "Edit listing.\n\nModify an existing {@link IHubSale listing} registered by\n{@link IHubSeller seller}. However, the modification is done by accumulating\nand issuing new {@link IHubSaleSnapshot snapshot} records, not by modifying\nan existing record.\n\nAnd if the listing has already been {@link IHubSaleAudit reviewed} and\n{@link IHubSaleAuditApproval approved}, this means that the listing must be\nreviewed again by the {@link IHubAdministrator administrator} when modifying it.\n\nOn the other hand, if the current listing is under review, this API cannot be\nused. Instead, use the {@link HubApi.functional.hub.sellers.sales.audits.emend}\nfunction corresponding to the edit API. For reference, listings that have been\n{@link IHubSaleAuditRejection rejected} whether additional revisions are possible\nor not depends on {@link IHubSaleAuditRejection.reversible}, which indicates\nwhether the review is possible.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target listing"
          }
        ],
        "requestBody": {
          "description": "listing edit information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSale.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "modified listing information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSale"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "View detailed listings",
        "description": "View detailed listings.\n\nView the target listing's detailed information {@link IHubSale}.\n\nHowever, depending on who is viewing the listing, the detailed attribute values\nmay vary. The most representative one is {@link IHubSaleUnitSwagger.host},\nwhich contains the middleware API address of this hub system when the viewing\nsubject is a customer, and the commercial server API address registered by the\nseller/administrator when the viewing subject is a seller/administrator.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target listing's {@link IHubSale.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Listing details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSale"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/{id}/replica": {
      "get": {
        "summary": "Duplicate listing input values",
        "description": "Duplicate listing input values.\n\nThis API is a kind of utility function that reconstructs\n{@link IHubSale.ICreate input information} from the {@link IHubSale listing}\nregistered by {@link IHubSeller seller}. This will be useful when a seller needs\nto {@link create duplicate} an existing listing, or {@link update edit} an\nexisting listing.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target listing"
          }
        ],
        "responses": {
          "200": {
            "description": "duplicated listing input information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSale.ICreate"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/{id}/pause": {
      "delete": {
        "summary": "Pause",
        "description": "Pause.\n\nTemporarily pauses the sale of {@link IHubSale listing}.\nThe current time is recorded in {@link IHubSale.paused_at}. In this case,\n{@link IHubCustomer customer} can still view the listing on the list and\ndetail pages, but the listing will be labeled \"This item is paused for sale.\"\n\nIn addition, customers will not be able to add it to their\n{@link IHubCartItem cart} until the {@link IHubSeller seller} calls the\n{@link restore} function to remove the \"paused\" status of the listing.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target listing"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/{id}/suspend": {
      "delete": {
        "summary": "Suspend sale of the listing",
        "description": "Suspend sale of the listing.\n\n{@link IHubSeller seller} suspends the sale of the {@link IHubSale listing}\nthat he/she registered himself/herself for some reason. The current time is\nrecorded in {@link IHubSale.suspended_at}, and customers cannot view the listing\nat all on the list or details page.\n\nHowever, {@link IHubSeller seller} and {@link IHubAdministrator administrator}\ncan still view it, so it is a SOFT DELETION only for customers. Of course,\nuntil {@link IHubSeller seller} calls the {@link restore} function to remove\nthe \"suspended sale\" status of the listing, the customer cannot add it to the\n{@link IHubCartItem shopping cart}.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target listing"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/{id}/restore": {
      "put": {
        "summary": "Resume sale",
        "description": "Resume sale.\n\nWhen the target {@link IHubSale listing} is in\n{@link IHubSale.paused_at sale paused} or {@link IHubSale.suspended_at suspended}\nstate, it will be cleared and the sale will resume.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " of the target listing {@link IHubSale.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/{id}/swagger": {
      "patch": {
        "summary": "Retrieve Swagger information",
        "description": "Retrieve Swagger information.\n\nSpecifies a specific {@link IHubSaleUnit unit} and\n{@link IHubSaleUnitStock stock} from the target {@link IHubSale listing},\nand retrieves its {@link ISwagger Swagger} information.\n\nThe returned Swagger document contains the actual server API address\nregistered by the seller based on the {@link IHubSeller seller} and\n{@link IHubAdministrator administrator}, and the middleware API address of\nthis hub system for the DEV server based on the {@link IHubCustomer customer}.\nFor commercial purposes, the REAL server address is excluded.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target listing"
          }
        ],
        "requestBody": {
          "description": "Identifier key for the target unit (and stock)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleUnitSwaggerAccessor"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Swagger information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISwagger"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/{saleId}/snapshots": {
      "patch": {
        "summary": "Get a list of summary information of approved snapshots in a listing",
        "description": "Get a list of summary information of approved snapshots in a listing.\n\nFor a specific {@link IHubSale listing}, retrieve\n{@link IHubSaleSnapshot.ISummary summary information} of all snapshots that\nhave been {@link IHubSaleAuditApproval audit approved} past and present.\n\nAnd at this time, the recorded statistics/aggregation information is\nonly written for the snapshot time. For example,\n{@link IHubSaleGoodAggregate.call_count}, which means the total number of\nAPI calls, is written for the snapshot time, not the total number of calls\nfor the listing.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the listing"
          }
        ],
        "requestBody": {
          "description": "page request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of snapshot summary information grouped by page",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleSnapshot.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/{saleId}/snapshots/{id}": {
      "get": {
        "summary": "View details of approved snapshots in Mem",
        "description": "View details of approved snapshots in Mem.\n\nView {@link IHubSaleSnapshot snapshot} of a specific time period that\nhas been {@link IHubSaleAuditApproval} approved for review within\n{@link IHubSale listing}.\n\nHowever, if the listing is in {@link IHubSaleAudit review} and is in the\n{@link IHubSaleAuditEmendation revision} process, then\n{@link IHubSeller sellers} and {@link IHubAdministrator administrators}\ncan view it even if the review has not been approved.\n\nAnd at this time, the recorded statistics/aggregation information is only\nfor the snapshot time. For example, {@link IHubSaleGoodAggregate.call_count}\nwhich means the total number of API calls, the total number of calls for\nthe snapshot time is recorded, not the total number of calls for the listing.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the listing"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleSnapshot.id } of the target snapshot"
          }
        ],
        "responses": {
          "200": {
            "description": "snapshot details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleSnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/{saleId}/snapshots/{id}/flip": {
      "get": {
        "summary": "Retrieve listing information for approved snapshots within listings",
        "description": "Retrieve listing information for approved snapshots within listings.\n\nRetrieve information for {@link IHubSaleSnapshot snapshot} of a specific\ntime period that has been {@link IHubSaleAuditApproval} approved for review,\nand retrieve listing information {@link IHubSale} at that time.\n\nHowever, if the listing is in {@link IHubSaleAudit review} and in the\n{@link IHubSaleAuditEmendation emendation} process, then\n{@link IHubSeller sellers} and {@link IHubAdministrator administrators} can\nretrieve it, even if the review has not been approved.\n\nAnd at this time, the recorded statistics/aggregation information is only for\nthe time period of the snapshot. For example, in the case of\n{@link IHubSaleGoodAggregate.call_count}, which means the total number of API\ncalls, the total number of calls for the snapshot is recorded, not the total\nnumber of calls for the attributed property.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the attributed property"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleSnapshot.id } of the target snapshot"
          }
        ],
        "responses": {
          "200": {
            "description": "property information reverse-constructed from the snapshot",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSale"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/{saleId}/snapshots/{id}/swagger": {
      "patch": {
        "summary": "Retrieve Swagger information",
        "description": "Retrieve Swagger information.\n\nSpecify a specific {@link IHubSaleUnit unit} and\n{@link IHubSaleUnitStock stock} from the target\n{@link IHubSaleSnapshot listing snapshot}, and retrieve its\n{@link ISwagger Swagger} information.\n\nThe returned Swagger document contains the actual server API address\nregistered by the seller based on {@link IHubSeller seller} and\n{@link IHubAdministrator administrator}, and the middleware API address of\nthis hub system for the DEV server based on {@link IHubCustomer customer}.\nFor commercial purposes, the REAL server address is excluded.\n\nThe Swagger document is translated and provided based on\n{@link IHubCustomer.LanguageType language code}. In addition, the\ncorresponding swagger document is provided based on information about the\n{@link IHubSaleUnit unit} and {@link IHubSaleUnitStock stock} specified by\n{@link IHubSaleUnitSwaggerAccessor}.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the property being sold"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleSnapshot.id } of the target snapshot"
          }
        ],
        "requestBody": {
          "description": "Identifier key for the target unit (and stock)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleUnitSwaggerAccessor"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "swagger information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISwagger"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/{saleId}/snapshots/{snapshotId}/units/{unitId}/parameters": {
      "patch": {
        "summary": "Get parameter information for a listing",
        "description": "Get parameter information for a listing.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target listing"
          },
          {
            "name": "snapshotId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "name": "unitId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleUnit.id } of the target unit"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "IHubSaleUnitParameter page information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleUnitParameter"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "summary": "Generate parameter information for the listing",
        "description": "Generate parameter information for the listing.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target listing"
          },
          {
            "name": "snapshotId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "name": "unitId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleUnit.id } of the target unit"
          }
        ],
        "requestBody": {
          "description": "Parameter information to generate",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleUnitParameter.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Generated parameter information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleUnitParameter"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/{saleId}/snapshots/{snapshotId}/units/{unitId}/parameters/{id}": {
      "put": {
        "summary": "Modify specific parameter information for a listing",
        "description": "Modify specific parameter information for a listing.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target listing"
          },
          {
            "name": "snapshotId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "name": "unitId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleUnit.id } of the target unit"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " parameter to modify {@link IHubSaleUnitParameter.id }"
          }
        ],
        "requestBody": {
          "description": "parameter information to modify",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleUnitParameter.IUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "modified parameter information",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete specific parameter information for a listing",
        "description": "Delete specific parameter information for a listing.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSale.id } of the target listing"
          },
          {
            "name": "snapshotId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "name": "unitId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSaleUnit.id } of the target unit"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Parameter to delete {@link IHubSaleUnitParameter.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/contents/{langCode}/translate": {
      "post": {
        "summary": "Translate to another language",
        "description": "Translate to another language.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "langCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Target language code"
          }
        ],
        "requestBody": {
          "description": "Input data of the sale content",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSaleContent.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Translated sale content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleContent.ICreate"
                }
              }
            }
          }
        }
      }
    },
    "/hub/sellers/sales/{saleId}/contents": {
      "patch": {
        "summary": "List up every language contents of the sale",
        "description": "List up every language contents of the sale.\n\nList up every language contents of the sale, with the pagination.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target sale's {@link IHubSale.id }"
          }
        ],
        "requestBody": {
          "description": "Request of page information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated contents of the sale",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleContent"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/{saleId}/contents/{langCode}": {
      "get": {
        "summary": "Get a specific language's content",
        "description": "Get a specific language's content.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target sale's {@link IHubSale.id }"
          },
          {
            "name": "langCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Target language code"
          }
        ],
        "responses": {
          "200": {
            "description": "Sale content of the specific language",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleContent"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/{saleId}/snapshots/{snapshotId}/contents": {
      "patch": {
        "summary": "List up every language contents of the sale snapshot",
        "description": "List up every language contents of the sale snapshot.\n\nList up every language contents of the sale snapshot, with the pagination.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target sale's {@link IHubSale.id }"
          },
          {
            "name": "snapshotId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target snapshot's {@link IHubSaleSnapshot.id }"
          }
        ],
        "requestBody": {
          "description": "Request of page information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated contents of the sale snapshot",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleContent"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/sales/{saleId}/snapshots/{snapshotId}/contents/{langCode}": {
      "get": {
        "summary": "Get a specific language's content",
        "description": "Get a specific language's content.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target sale's {@link IHubSale.id }"
          },
          {
            "name": "snapshotId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target snapshot's {@link IHubSaleSnapshot.id }"
          },
          {
            "name": "langCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Target language code"
          }
        ],
        "responses": {
          "200": {
            "description": "Sale content of the specific language",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSaleContent"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/statistics/orders/goods/calls": {
      "patch": {
        "summary": "View API call statistics for a specific period",
        "description": "View API call statistics for a specific period.\n\nView API usage, error rate, API latency, etc. of a product.",
        "tags": [
          "Statistics"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Search and page request information for the product to view",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGoodCallAggregate.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Statistical information about the API call history of the product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubOrderGoodCallAggregate"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/statistics/orders/goods/calls/entire": {
      "patch": {
        "summary": "View API call statistics for the entire period",
        "description": "View API call statistics for the entire period.\n\nView API usage, error rate, API latency, etc. for the entire period of\nthe product.",
        "tags": [
          "Statistics"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Specific information about the target product or listing",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGoodCallAggregate.IEntireRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Statistics for the entire period of the product's API call history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubOrderGoodCallAggregate"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/statistics/orders/goods/calls/ranking": {
      "patch": {
        "summary": "Retrieves the ranking of a specific period of the subscribed API",
        "description": "Retrieves the ranking of a specific period of the subscribed API.",
        "tags": [
          "Statistics"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Search and page request information for the product to be retrieved",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubOrderGoodRanking.IEntireRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Statistical information about the API call history of the product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubOrderGoodRanking"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/statistics/sales/calls/rankings": {
      "patch": {
        "summary": "Search for rankings based on the number of API calls for a listing",
        "description": "Search for rankings based on the number of API calls for a listing.\n\nSearch for listings with the highest rankings based on the number of times\nthe API was called when the listing was ordered.\n\nThe total searchable ranking is up to 100, and if there is a tie between\ndifferent listings, the processing is as follows.\n\n1. Listing with the most API calls\n2. Listing with the most successful API calls\n3. Listing created faster",
        "tags": [
          "Statistics"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Page request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paging processed ranking information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSaleCallRanking"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/systematic/channels/{channelCode}/categories": {
      "patch": {
        "summary": "List of channel category information",
        "description": "List of channel category information.\n\nRetrieves the {@link IHubChannelCategory} list.\n\nChannel categories have a 1: N recursive structure, and if a parent\ncategory exists, the children field contains a list of child categories.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "channelCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Channel code"
          }
        ],
        "responses": {
          "200": {
            "description": "Channel category list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IHubChannelCategory.IHierarchical"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/systematic/channels/{channelCode}/categories/{id}": {
      "get": {
        "summary": "Channel category details",
        "description": "Channel category details.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "channelCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Channel code"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " The channel category {@link IHubChannelCategory.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Channel category details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubChannelCategory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/systematic/channels/{channelCode}/categories/{id}/invert": {
      "get": {
        "summary": "Parent category information of a specific category",
        "description": "Parent category information of a specific category.\n\nGet parent category information of a specific category.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "channelCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " channel code"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " specific category {@link IHubChannelCategory.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "parent category information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubChannelCategory.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/systematic/channels": {
      "patch": {
        "summary": "List of hub channels",
        "description": "List of hub channels.\n\nRetrieve {@link IHubChannel} list.\n\nThe returned {@link IHubChannel}s are {@link IPage paging} processed.\n\nDepending on how the request information {@link IHubChannel.IRequest} is set,\nyou can {@link IHubChannel.IRequest.limit} limit the number of records per page,\n{@link IHubChannel.IRequest.search} search for hub channels that satisfy\na specific condition, or {@link IHubChannel.IRequest.sort sorting conditions}\nof `hub_channels` arbitrarily.",
        "tags": [
          "Systematic"
        ],
        "parameters": [],
        "requestBody": {
          "description": "list request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubChannel.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "paging processed ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubChannel"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/systematic/channels/hierarchical": {
      "patch": {
        "summary": "List of channel hierarchy information",
        "description": "List of channel hierarchy information.\n\nRetrieve {@link IHubChannel.IHierarchical} category hierarchy list.\n\nThe returned {@link IHubChannel}s are {@link IPage paging} processed.\nAnd depending on how the request information {@link IHubChannel.IRequest}\nis set, you can {@link IHubChannel.IRequest.limit} limit the number of records\nper page, {@link IHubChannel.IRequest.search} search for channel hierarchies\nthat satisfy a specific condition, or\n{@link IHubChannel.IRequest.sort sort conditions} of the channel hierarchy\narbitrarily.",
        "tags": [
          "Systematic"
        ],
        "parameters": [],
        "requestBody": {
          "description": "list request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubChannel.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "paging processed ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubChannel.IHierarchical"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/systematic/channels/{id}": {
      "get": {
        "summary": "View the hierarchy of a specific channel by channel ID",
        "description": "View the hierarchy of a specific channel by channel ID.\n\nRetrieve the hierarchy of a specific channel.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubChannel.id } to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "the hierarchy of the specific channel retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubChannel.IHierarchical"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/systematic/channels/{code}/get": {
      "get": {
        "summary": "View the hierarchy of a specific channel by channel code",
        "description": "View the hierarchy of a specific channel by channel code.\n\nRetrieve the hierarchy of a specific channel.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IHubChannel.code } to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "The hierarchy of the specific channel retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubChannel.IHierarchical"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/systematic/sections": {
      "patch": {
        "summary": "List of section information",
        "description": "List of section information.\n\nRetrieves a list of {@link IHubSection}.\n\nThe returned {@link IHubSection}s are {@link IPage paging} processed.\n\nDepending on how the request information {@link IHubSection.IRequest} is set,\nyou can {@link IHubSection.IRequest.limit} limit the number of records per page,\n{@link IHubSection.IRequest.search} search for sections that satisfy a specific\ncondition, or {@link IHubSection.IRequest.sort sort conditions} of sections\narbitrarily.",
        "tags": [
          "Systematic"
        ],
        "parameters": [],
        "requestBody": {
          "description": "list request information ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IHubSection.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "paging ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIHubSection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/systematic/sections/{id}": {
      "get": {
        "summary": "Detailed information about a specific section by section ID",
        "description": "Detailed information about a specific section by section ID.\n\nRetrieve a specific {@link IHubSection}.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IHubSection.id } to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "retrieved section information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/hub/sellers/systematic/sections/{code}/get": {
      "get": {
        "summary": "Detailed section information by section code",
        "description": "Detailed section information by section code.\n\nRetrieve specific {@link IHubSection}.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IHubSection.code } to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "retrieved section information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IHubSection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/accounts": {
      "patch": {
        "summary": "Retrieve the list of account summary information",
        "description": "Retrieve the list of account summary information.\n\nAll {@link IStudioAccount.IInvert account summary information} existing\nin this studio system {@link IPage paging processing} is retrieved.",
        "tags": [
          "Account"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioAccount.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paging accounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioAccount.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/accounts/{id}": {
      "get": {
        "summary": "Retrieve account details with {@link IStudioAccount.id}",
        "description": "Retrieve account details with {@link IStudioAccount.id}.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioAccount.id } of target account"
          }
        ],
        "responses": {
          "200": {
            "description": "account information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioAccount"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/accounts/{code}/get": {
      "get": {
        "summary": "Retrieve account details with {@link IStudioAccount.code}",
        "description": "Retrieve account details with {@link IStudioAccount.code}.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of target account"
          }
        ],
        "responses": {
          "200": {
            "description": "account information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioAccount"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/accounts/{accountCode}/schedules": {
      "patch": {
        "summary": "View the schedule list",
        "description": "View the schedule list.\n\nAll {@link IStudioAccountSchedule schedule summary information} set for\n{@link IStudioAccount studio account} are retrieved by {@link IPage paging}.\n\nNote that the schedules set for the studio account can only be viewed by\n{@link IStudioEnterpriseEmployee employees} who are the owner of the account\nor have a manager or higher position in the {@link IStudioEnterprise company}\nthat owns the account.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioAccountSchedule.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of summary information for schedules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioAccountSchedule.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/accounts/{accountCode}/schedules/{id}": {
      "get": {
        "summary": "View schedule details",
        "description": "View schedule details.\n\nRetrieves details of {@link IStudioAccountSchedule schedule} set in\n{@link IStudioAccount studio account}. The returned details include variable\nvalues that are not in {@link IStudioAccountSchedule.ISummary} and detailed\ndescriptions.\n\nNote that schedules set in a studio account can only be viewed by\n{@link IStudioEnterpriseEmployee employees} who are the owners of the account\nor have a manager or higher position in the {@link IStudioEnterprise company}\nthat owns the account.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.id } of the target schedule"
          }
        ],
        "responses": {
          "200": {
            "description": "Schedule details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioAccountSchedule"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/accounts/{accountCode}/secrets": {
      "patch": {
        "summary": "Retrieves a list of secret variable sets",
        "description": "Retrieves a list of secret variable sets.\n\nAll {@link IStudioAccountSecret secret variable set summary information}\nset in {@link IStudioAccount studio account} are retrieved by\n{@link IPage paging}.\n\nNote that the secret variable sets set in a studio account can only be\nretrieved by {@link IStudioEnterpriseEmployee employees} who are the owners\nof the account or have a manager or higher position in the\n{@link IStudioEnterprise company} that owns the account.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioAccountSecret.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Summary information list of secret variable sets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioAccountSecret.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/accounts/{accountCode}/secrets/{id}": {
      "get": {
        "summary": "Gets details of a secret variable set",
        "description": "Gets details of a secret variable set.\n\nGets details of the {@link IStudioAccountSecret secret variable set}\nset to {@link IStudioAccount studio account}. The returned details include\na list of variable values that are not in {@link IStudioAccountSecret.ISummary}\nand a detailed description.\n\nNote that the secret variable set set to a studio account can only be checked\nby the owner of the account or an {@link IStudioEnterpriseEmployee employee}\nwho has a manager or higher position in the {@link IStudioEnterprise company}\nthat owns the account.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.id } of the target secret variable set"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret variable details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioAccountSecret"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/accounts/{accountCode}/secrets/{key}/get": {
      "get": {
        "summary": "Secret variable set details by key",
        "description": "Secret variable set details by key.\n\nRetrieves the details of the {@link IStudioAccountSecret secret variable}\nset in the {@link IStudioAccount studio account}, as its key value\n(variable name). The returned details include variable values and detailed\ndescriptions that are not in {@link IStudioAccountSecret.ISummary}.\n\nNote that the secret variables set in the studio account can only be retrieved\nby the owner of the account or {@link IStudioEnterpriseEmployee employees} who\nhave a manager or higher position in the {@link IStudioEnterprise company} that\nowns the account.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "key",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccountSecret.key } of the target secret variable set"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret variable details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioAccountSecret"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/accounts/{accountCode}/secrets/values": {
      "patch": {
        "summary": "Retrieve a list of global variables",
        "description": "Retrieve a list of global variables.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioAccountSecretValue.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of summary information on dereferenced variable values",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioAccountSecretValue.IInvertSummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/accounts/{accountCode}/secrets/{secretId}/values/{id}": {
      "get": {
        "summary": "Global variable details",
        "description": "Global variable details.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "secretId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioAccountSecret.id } of the set of secret variables to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioAccountSecretValue.id } of the target variable value"
          }
        ],
        "responses": {
          "200": {
            "description": "Variable value details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioAccountSecretValue"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/accounts/{accountCode}/widgets/{widgetCode}/tiles/minimap": {
      "patch": {
        "summary": "Minimap batch query of widget tiles",
        "description": "Minimap batch query of widget tiles.\n\n{@link IStudioAccountWidgetTileGeometry geometry information of widget tiles}\nis batch-queried for a specific\n{@link IStudioAccountWidgetTileGeometry.breakpoint}.\n\nThrough this, a minimap can be configured, and detailed component information\nof each widget tile can be queried by area unit through the {@link index} API.",
        "tags": [],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "widgetCode",
            "in": "path",
            "schema": {
              "const": "general"
            },
            "required": true,
            "description": " Code of the widget to which it belongs"
          },
          {
            "name": "breakpoint",
            "in": "query",
            "schema": {
              "oneOf": [
                {
                  "const": "md"
                },
                {
                  "const": "xs"
                },
                {
                  "const": "sm"
                },
                {
                  "const": "lg"
                }
              ]
            },
            "description": " target {@link IStudioAccountWidgetTileGeometry.breakpoint }",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Minimap information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IStudioAccountWidgetTile.IMinimapItem"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/accounts/{accountCode}/widgets/{widgetCode}/tiles": {
      "patch": {
        "summary": "Retrieve the list of widget tiles",
        "description": "Retrieve the list of widget tiles.\n\nLoads {@link IStudioAccountWidgetTile tiles} belonging to a specific\n{@link IStudioAccount account} and widget, in units of pages.\n\nHowever, unlike general pagination APIs, widgets perform\n{@link IGeometryPage pagination} by\n{@link IStudioAccountWidgetTile.IGeometry 2D spatial coordinates and size},\nnot scalar values (e.g. page 1).\n\nSpecify this point, move to the area of the page you want to retrieve, and\nperform the pagination task.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account you are interested in"
          },
          {
            "name": "widgetCode",
            "in": "path",
            "schema": {
              "const": "general"
            },
            "required": true,
            "description": " Code of the widget you are interested in"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioAccountWidgetTile.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of widget tiles that are paged in the coordinate system",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGeometryPageIStudioAccountWidgetTile.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/accounts/{accountCode}/widgets/{widgetCode}/tiles/{id}": {
      "get": {
        "summary": "Lookup widget tiles individually",
        "description": "Lookup widget tiles individually.\n\nLookup a specific {@link IStudioAccountWidgetTile widget tile} individually.\n\nProbably not used in front-end applications, but will likely be an API for\npure test verification.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "widgetCode",
            "in": "path",
            "schema": {
              "const": "general"
            },
            "required": true,
            "description": " Code of the widget to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioAccountWidgetTile.id } of the target tile"
          }
        ],
        "responses": {
          "200": {
            "description": "Widget tile information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioAccountWidgetTile"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/enterprises/{accountCode}/employees": {
      "patch": {
        "summary": "Retrieve the summary information list of corporate employees",
        "description": "Retrieve the summary information list of corporate employees.\n\nAll {@link IStudioEnterpriseEmployee.ISummary employee summary information}\nbelonging to a specific {@link IStudioEnterprise company} {@link IPage paging}\nis retrieved.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the corporate account"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioEnterpriseEmployee.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paging employee summary information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioEnterpriseEmployee.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/enterprises/{accountCode}/employees/{id}": {
      "get": {
        "summary": "Get employee details",
        "description": "Get employee details.\n\nGet the details of a specific {@link IStudioEnterpriseEmployee employee}.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the affiliated company account"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioEnterpriseEmployee.id } of the target employee"
          }
        ],
        "responses": {
          "200": {
            "description": "employee details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioEnterpriseEmployee"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/enterprises": {
      "patch": {
        "summary": "Retrieve the list of corporate summary information",
        "description": "Retrieve the list of corporate summary information.\n\nAll {@link IStudioEnterprise.ISummary corporate summary information}\nexisting in this studio system {@link IPage paging processing} is retrieved.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioEnterprise.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paging-processed corporate summary information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioEnterprise.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/enterprises/{id}": {
      "get": {
        "summary": "View company details",
        "description": "View company details.\n\nView details of a specific {@link IStudioEnterprise company}.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " of the target company {@link IStudioEnterprise.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "company details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioEnterprise"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/enterprises/{accountCode}/get": {
      "get": {
        "summary": "View company details (by account code)",
        "description": "View company details (by account code).\n\nView details of a specific {@link IStudioEnterprise company} by the\n{@link IStudioAccount.code code} of the account it belongs to.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account belonging to the company"
          }
        ],
        "responses": {
          "200": {
            "description": "company details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioEnterprise"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/enterprises/{accountCode}/teams/{teamCode}/companions": {
      "patch": {
        "summary": "Retrieve the summary information list of corporate team members",
        "description": "Retrieve the summary information list of corporate team members.\n\nRetrieves {@link IPage paging} the\n{@link IStudioEnterpriseTeamCompanion.ISummary members' summary information}\nbelonging to {@link IStudioEnterpriseTeam team} of a specific\n{@link IStudioEnterprise company}.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the corporate account"
          },
          {
            "name": "teamCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioEnterpriseTeam.code } of the team"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioEnterpriseTeamCompanion.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paging summary information of members",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioEnterpriseTeamCompanion.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/enterprises/{accountCode}/teams/{teamCode}/companions/{id}": {
      "get": {
        "summary": "Retrieve member details",
        "description": "Retrieve member details.\n\nRetrieve details of a specific {@link IStudioEnterpriseTeamCompanion member}\nbelonging to a {@link IStudioEnterpriseTeam team}.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the affiliated company account"
          },
          {
            "name": "teamCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioEnterpriseTeam.code } of the affiliated team"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioEnterpriseTeamCompanion.id } of the target member"
          }
        ],
        "responses": {
          "200": {
            "description": "member details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioEnterpriseTeamCompanion"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/enterprises/{accountCode}/teams": {
      "patch": {
        "summary": "Retrieve the summary information list of corporate teams",
        "description": "Retrieve the summary information list of corporate teams.\n\nRetrieves all {@link IStudioEnterpriseTeam.ISummary team summary information}s\nof a specific {@link IStudioEnterprise company}.\n\n{@link IPage paging}.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the corporate account"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioEnterpriseTeam.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paging team summary information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioEnterpriseTeam.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/enterprises/{accountCode}/teams/{id}": {
      "get": {
        "summary": "View team details",
        "description": "View team details.\n\nView details of a specific {@link IStudioEnterpriseTeam team} organized by\n{@link IStudioEnterprise}.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the affiliated company account"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioEnterpriseTeam.id } of the target team"
          }
        ],
        "responses": {
          "200": {
            "description": "team details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioEnterpriseTeam"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/enterprises/{accountCode}/teams/{code}/get": {
      "get": {
        "summary": "View team details by code",
        "description": "View team details by code.\n\nView details of a specific {@link IStudioEnterpriseTeam team} configured by\n{@link IStudioEnterprise} using the team's code (`code`).",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the affiliated company account"
          },
          {
            "name": "code",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioEnterpriseTeam.code } of the target team"
          }
        ],
        "responses": {
          "200": {
            "description": "Team details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioEnterpriseTeam"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/meta/statistics/statistics": {
      "patch": {
        "summary": "Retrieve the statistics of the Meta LLM",
        "description": "Retrieve the statistics of the Meta LLM.",
        "tags": [
          "Meta"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Statistics of the Meta LLM",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioMetaStatistics"
                }
              }
            }
          }
        }
      }
    },
    "/studio/admins/meta/chat/sessions": {
      "patch": {
        "summary": "Retrieve the chat session list",
        "description": "Retrieve the chat session list.\n\nRetrieve the chat session {@link IStudioMetaChatSession} list.\n\nThe returned {@link IStudioMetaChatSession}s are {@link IPage paging} processed.\n\nAnd depending on how you set the request information\n{@link IStudioMetaChatSession.IRequest}, you can limit the number of\nrecords per page by {@link IStudioMetaChatSession.IRequest.limit}, search\nonly sessions that meet a specific condition by\n{@link IStudioMetaChatSession.IRequest.search}, or arbitrarily specify the\n{@link IStudioMetaChatSession.IRequest.sort sorting condition} of the\nsessions.",
        "tags": [
          "Meta"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioMetaChatSession.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paging sessions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioMetaChatSession"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/meta/chat/sessions/{id}": {
      "get": {
        "summary": "View individual chat sessions",
        "description": "View individual chat sessions.\n\nView the target chat session details {@link IStudioMetaChatSession}.",
        "tags": [
          "Meta"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioMetaChatSession.id } of the target chat session"
          }
        ],
        "responses": {
          "200": {
            "description": "Chat session details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioMetaChatSession"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/meta/chat/sessions/{sessionId}/connections": {
      "patch": {
        "summary": "Retrieve the list of connection information for the Meta LLM chat session",
        "description": "Retrieve the list of connection information for the Meta LLM chat session.\n\nBatch retrieve the Websocket connection information of\n{@link IHubCustomer customer} for {@link IStudioMetaChatSession chat session}.\n\nThe returned {@link IStudioMetaChatSessionConnection}s are {@link IPage paging}\nprocessed. And depending on how the request information\n{@link IStudioMetaChatSessionConnection.IRequest} is set,\nthe number of records per page can be limited by\n{@link IStudioMetaChatSessionConnection.IRequest.limit},\n{@link IStudioMetaChatSessionConnection.IRequest.search}, or\n{@link IStudioMetaChatSessionConnection.IRequest.sort sort conditions}\ncan be set arbitrarily.",
        "tags": [
          "Meta"
        ],
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioMetaChatSession.id } of the chat session"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioMetaChatSessionConnection.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paged connection list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioMetaChatSessionConnection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/meta/chat/sessions/{sessionId}/connections/{id}": {
      "get": {
        "summary": "Meta LLM Chat session connection information individual query",
        "description": "Meta LLM Chat session connection information individual query.\n\n{@link IStudioMetaChatSession chat session}\n{@link IHubCustomer customer}'s Websocket connection information\n{@link IStudioMetaChatSessionConnection} is individually searched.",
        "tags": [
          "Meta"
        ],
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioMetaChatSession.id } of the chat session belonging to"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioMetaChatSessionConnection.id } of the target connection"
          }
        ],
        "responses": {
          "200": {
            "description": "Connection details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioMetaChatSessionConnection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/meta/chat/sessions/{sessionId}/messages": {
      "patch": {
        "summary": "Retrieve the list of chat session messages",
        "description": "Retrieve the list of chat session messages.\n\nRetrieve the list of all {@link IStudioMetaChatSessionMessage messages}\nthat occurred in the {@link IStudioMetaChatSession chat session}.\n\nIf you want to limit the {@link IStudioMetaChatSessionConnection connection unit}\nthat the message occurred in, set\n{@link IStudioMetaChatSessionMessage.IRequest.connection_id}.\n\nThe returned {@link IStudioMetaChatSessionMessage} are {@link IPage paging}\nprocessed. And depending on how you set the request information\n{@link IStudioMetaChatSessionMessage.IRequest}, you can limit the number of\nrecords per page {@link IStudioMetaChatSessionMessage.IRequest.limit},\n{@link IStudioMetaChatSessionMessage.IRequest.search}, or\n{@link IStudioMetaChatSessionMessage.IRequest.sort sort conditions} arbitrarily.",
        "tags": [
          "Meta"
        ],
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioMetaChatSession.id } of the chat session to which it belongs"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioMetaChatSessionMessage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paging messages",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioMetaChatSessionMessageIStudioMetaChatSessionMessageData"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/meta/chat/sessions/{sessionId}/messages/{id}": {
      "get": {
        "summary": "Retrieve chat session message details",
        "description": "Retrieve chat session message details.\n\nRetrieve the details of a specific\n{@link IStudioMetaChatSessionMessage message}\nthat occurred in a {@link IStudioMetaChatSession chat session}.",
        "tags": [
          "Meta"
        ],
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioMetaChatSession.id } of the chat session to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioMetaChatSessionMessage.id } of the target message"
          }
        ],
        "responses": {
          "200": {
            "description": "message details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioMetaChatSessionMessageIStudioMetaChatSessionMessageData"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/meta/chat/sessions/shares": {
      "patch": {
        "summary": "Retrieve the chat session share list",
        "description": "Retrieve the chat session share list.\n\nRetrieve the chat session share {@link IStudioMetaChatSessionShare} list.\n\nThe returned {@link IStudioMetaChatSessionShare}s are \n{@link IPage paging} processed.\n\nAnd depending on how you set the request information\n{@link IStudioMetaChatSessionShare.IRequest}, you can limit the number of\nrecords per page by {@link IStudioMetaChatSessionShare.IRequest.limit}, \nsearch only sessions that meet a specific condition by\n{@link IStudioMetaChatSessionShare.IRequest.search}, or arbitrarily specify\nthe {@link IStudioMetaChatSessionShare.IRequest.sort sorting condition} of\nthe sessions.",
        "tags": [
          "Meta"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioMetaChatSessionShare.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paging session shares",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioMetaChatSessionShare"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/meta/chat/sessions/shares/{id}": {
      "get": {
        "summary": "View individual chat session shares",
        "description": "View individual chat session shares.\n\nView the target chat session share details {@link IStudioMetaChatSessionShare}.",
        "tags": [
          "Meta"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " ID of the target chat session share"
          }
        ],
        "responses": {
          "200": {
            "description": "Chat session share details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioMetaChatSessionShare"
                }
              }
            }
          }
        }
      }
    },
    "/studio/admins/meta/chat/sessions/shares/{shareId}/messages": {
      "patch": {
        "summary": "Get list of messages in a chat session of shared",
        "description": "Get list of messages in a chat session of shared.",
        "tags": [
          "Meta"
        ],
        "parameters": [
          {
            "name": "shareId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Target chat session share's {@link IStudioMetaChatSessionShare.id }"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioMetaChatSessionMessage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paging messages",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioMetaChatSessionMessageIStudioMetaChatSessionMessageData"
                }
              }
            }
          }
        }
      }
    },
    "/studio/admins/repositories/{accountCode}": {
      "patch": {
        "summary": "Retrieval of the list of repository summary information",
        "description": "Retrieval of the list of repository summary information.\n\nAll {@link IStudioRepository.ISummary repository summary information}\nexisting in this studio system are retrieved by {@link IPage paging}.\n\nHowever, {@link IStudioRepository.IRequest page request information} is\nconfigured, and the scope of the search target can be limited to a specific\n{@link IStudioAccount account}.\n\nAnd the code of the account to which it belongs, *accountCode*, can be set\nto `null`, in which case, all repositories accessible to the\n{@link IHubCustommer customer} will be searched regardless of the account to\nwhich it belongs. In other words, unless *accountCode* is `null`, only\nrepositories belonging to the account will be searched. And this is different\nfrom {@link IStudioRepository.IRequest.ISearch.account.code}, in that the\naccount code used for the search is a similar search, and the code used in\nthis path parameter is an exact match search.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string"
                }
              ]
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepository.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "paginated repository list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioRepository.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/repositories/{accountCode}/{id}": {
      "get": {
        "summary": "Get repository details",
        "description": "Get repository details.\n\nGet details of a specific {@link IStudioRepository repository}.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.id } of the target repository"
          }
        ],
        "responses": {
          "200": {
            "description": "repository details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepository"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/repositories/{accountCode}/{code}/get": {
      "get": {
        "summary": "Get repository details (by code)",
        "description": "Get repository details (by code).\n\nGet the details of a specific {@link IStudioRepository repository},\nusing the {@link IStudioAccount account} and the repository code (`code`).",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "code",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the target repository"
          }
        ],
        "responses": {
          "200": {
            "description": "repository details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepository"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/repositories/{accountCode}/{repositoryCode}/accesses": {
      "patch": {
        "summary": "Retrieve summary information list of repository access rights",
        "description": "Retrieve summary information list of repository access rights.\n\nRetrieves summary information of all\n{@link IStudioRepositoryAccess.ISummary access rights} granted to a specific\n{@link IStudioRepository repository} {@link IPage paging}.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryAccess.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Summary information list of paged access rights",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioRepositoryAccess.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/repositories/{accountCode}/{repositoryCode}/accesses/{id}": {
      "get": {
        "summary": "Get access permission details",
        "description": "Get access permission details.\n\nGet the details of a specific {@link IStudioRepositoryAccess access permission}.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryAccess.id } of the target access permission"
          }
        ],
        "responses": {
          "200": {
            "description": "Access permission details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepositoryAccess"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/buckets": {
      "patch": {
        "summary": "Retrieve the summary information list of buckets based on a specific commit",
        "description": "Retrieve the summary information list of buckets based on a specific commit.\n\nBased on a specific {@link IStudioRepositoryCommit commit}, the\n{@link IStudioRepositoryBucket.ISummary bucket summary information}\nis retrieved by {@link IPage paging}.\n\nAs a reference, {@link IStudioRepositoryBucket.IRequest page request information}\nis configured, and the target {@link IStudioRepositoryDirectory folder path}\ncan be specified.\n\nIn addition, you can retrieve all buckets based on the commit without\nbeing restricted by the folder path, but in this case, no folder information\nis retrieved.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          }
        ],
        "requestBody": {
          "description": "Page and search request information + folder path",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryBucket.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated bucket list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioRepositoryBucket.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/buckets/{id}": {
      "get": {
        "summary": "Retrieve detailed information about a bucket",
        "description": "Retrieve detailed information about a bucket.\n\nRetrieves detailed information about a {@link IStudioRepositoryBucket bucket}\nbased on a specific {@link IStudioRepositoryCommit commit}.\n\nIf the query target is a {@link IStudioRepositoryDirectory folder},\ninformation about all buckets belonging to that folder is retrieved. However,\nif there are many buckets, the amount of data itself may be huge. Therefore,\nit is recommended to avoid retrieving detailed information about a folder,\nand instead call the {@link index} function.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryBucket.id } of the target bucket"
          }
        ],
        "responses": {
          "200": {
            "description": "Bucket details",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/IStudioRepositoryDirectory"
                    },
                    {
                      "$ref": "#/components/schemas/IStudioRepositoryFile"
                    },
                    {
                      "$ref": "#/components/schemas/IStudioWorkflow"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "directory": "#/components/schemas/IStudioRepositoryDirectory",
                      "file": "#/components/schemas/IStudioRepositoryFile",
                      "workflow": "#/components/schemas/IStudioWorkflow"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/buckets/get": {
      "patch": {
        "summary": "Bucket details query by path",
        "description": "Bucket details query by path.\n\nRetrieves details of {@link IStudioRepositoryBucket bucket} based on a\nspecific {@link IStudioRepositoryCommit commit}, through its path,\n{@link IStudioRepositoryBucket.path}.\n\nIf the query target is {@link IStudioRepositoryDirectory folder}, information\non all buckets belonging to that folder is retrieved, but the amount of data\nitself may be huge because there are many buckets. Therefore, it is recommended\nto avoid retrieving folder details, and instead call the {@link index} function.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          }
        ],
        "requestBody": {
          "description": "Path of the target bucket (wrapped)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryBucket.IPath"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Details of the bucket",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/IStudioRepositoryDirectory"
                    },
                    {
                      "$ref": "#/components/schemas/IStudioRepositoryFile"
                    },
                    {
                      "$ref": "#/components/schemas/IStudioWorkflow"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "directory": "#/components/schemas/IStudioRepositoryDirectory",
                      "file": "#/components/schemas/IStudioRepositoryFile",
                      "workflow": "#/components/schemas/IStudioWorkflow"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/repositories/{accountCode}/{repositoryCode}/commits": {
      "patch": {
        "summary": "Retrieve the summary information list of commits in the repository",
        "description": "Retrieve the summary information list of commits in the repository.\n\n{@link IStudioRepository repository}\n{@link IStudioRepositoryCommit.ISummary commit summary information} is\nretrieved by {@link IPage paging}.\n\nNote that {@link IHubCustomer customer} is currently modifying, so in the case of\n{@link IStudioRepositoryCommit.archived_at commits that have not yet been recorded},\nonly the customer who created the commit can view it.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryCommit.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paging list of commits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioRepositoryCommit.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/repositories/{accountCode}/{repositoryCode}/commits/{id}": {
      "get": {
        "summary": "Get commit details",
        "description": "Get commit details.\n\nGets details of a specific {@link IStudioRepositoryCommit commit} in the\n{@link IStudioRepository repository}.\n\nNote that {@link IHubCustomer customer} is currently modifying the\n{@link IStudioRepositoryCommit.archived_at commit that has not been recorded yet},\nonly the customer who created the commit can view it.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          }
        ],
        "responses": {
          "200": {
            "description": "commit details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepositoryCommit"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{workflowId}/histories": {
      "patch": {
        "summary": "Batch query of workflow execution history summary information",
        "description": "Batch query of workflow execution history summary information.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          },
          {
            "name": "workflowId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the target workflow"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioWorkflowHistory.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of workflow execution history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioWorkflowHistory.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{workflowId}/histories/details": {
      "patch": {
        "summary": "Bulk query of workflow execution history details",
        "description": "Bulk query of workflow execution history details.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          },
          {
            "name": "workflowId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the target workflow"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioWorkflowHistory.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of workflow execution history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioWorkflowHistory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{workflowId}/histories/{id}": {
      "get": {
        "summary": "View workflow execution history details",
        "description": "View workflow execution history details.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          },
          {
            "name": "workflowId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the target workflow"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflowHistory.id } of the target workflow execution history"
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow execution details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioWorkflowHistory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Stop workflow execution",
        "description": "Stop workflow execution.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          },
          {
            "name": "workflowId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the target workflow"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflowHistory.id } of the target workflow execution history"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/repositories/{accountCode}/{repositoryCode}/commits/workflows/standalone/{workflowId}": {
      "get": {
        "summary": "Retrieve workflows alone",
        "description": "Retrieve workflows alone.\n\nAn API function that retrieves the {@link IStudioWorkflow workflow} file\nfrom a specific {@link IStudioRepository repository}, the most recent\n{@link IStudioRepositoryCommit commit}.",
        "deprecated": true,
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "workflowId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the target workflow"
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow + commit information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioWorkflowStandalone"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/repositories/{accountCode}/{repositoryCode}/commits/workflows/standalone/get": {
      "patch": {
        "summary": "Get workflows by get",
        "description": "Get workflows by get.\n\nAPI function to get {@link IStudioWorkflow workflow} files from a specific\n{@link IStudioRepository repository}, the most recent\n{@link IStudioRepositoryCommit commit} based on the path.",
        "deprecated": true,
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository"
          }
        ],
        "requestBody": {
          "description": "Workflow path",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioWorkflowStandalone.IPath"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Workflow + commit information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioWorkflowStandalone"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{id}/compile": {
      "post": {
        "summary": "Temporarily compile workflow documents",
        "description": "Temporarily compile workflow documents.\n\nTemporarily compile only the current {@link IStudioWorkflow workflow} document.\n\nThis compilation also occurs when building the\n{@link IStudioWorkflowRepositoryRelease distribution program} from the\noriginal repository. This API is separate from that, and performs partial\ncompilation only for individual workflow documents and some script files\n`imported` from them.\n\nIts main purpose is to test the operation of individual workflows, etc.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the target workflow"
          }
        ],
        "responses": {
          "201": {
            "description": "URL of the compiled program",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{id}/execute": {
      "post": {
        "summary": "Execute a workflow function",
        "description": "Execute a workflow function.\n\nExecute a workflow function and wait for its return value to return.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the target workflow"
          }
        ],
        "requestBody": {
          "description": "Parameter input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioWorkflow.IExecute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Return value as the result of executing the workflow function",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/IExecutionResult.IFailure"
                    },
                    {
                      "$ref": "#/components/schemas/IExecutionResult.ISuccessany"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{id}/proceed": {
      "post": {
        "summary": "Run a workflow function",
        "description": "Run a workflow function.\n\nExecute a workflow function, but do not wait for its return value.\nInstead, return {@link IStudioWorkflowHistory.ISummary} corresponding to\nthe execution result history.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the target workflow"
          }
        ],
        "requestBody": {
          "description": "Parameter input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioWorkflow.IExecute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Return value as the result of executing the workflow function",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioWorkflowHistory.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{id}/simulate": {
      "post": {
        "summary": "Compile simulation",
        "description": "Compile simulation.\n\nSimulate the process by checking the TypeScript files generated during\ncompilation without compiling the workflow document directly.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the target workflow"
          }
        ],
        "requestBody": {
          "description": "Whether to debug",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioWorkflow.ISimulate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Dictionary of TypeScript files",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Recordstringstring"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/repositories/{accountCode}/{repositoryCode}/releases": {
      "patch": {
        "description": "Retrieve the summary information list of distribution programs in the\nrepository.\n\nRetrieves all\n{@link IStudioRepositoryRelease distribution program summary information} in\na specific {@link IStudioRepository repository} by {@link IPage paging}.\n\nThe distribution program summary information includes the version, date,\nand document information of the distribution program.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryRelease.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paginated distribution programs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioRepositoryRelease.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/repositories/{accountCode}/{repositoryCode}/releases/{id}": {
      "get": {
        "summary": "Get details of a distribution program in a repository",
        "description": "Get details of a distribution program in a repository.\n\nGets details of a specific {@link IStudioRepositoryRelease distribution program}\nin {@link IStudioRepository repository}.\n\nThe distribution program details include all\n{@link IStudioRepositoryReleaseNode function nodes} that are `exported` from\nthe program, along with their metatype information.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryRelease.id } of the target distribution program"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the distribution program",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepositoryRelease"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/repositories/{accountCode}/{repositoryCode}/releases/{version}/get": {
      "get": {
        "summary": "Retrieve details of a distribution program in a repository by version",
        "description": "Retrieve details of a distribution program in a repository by version.\n\nRetrieve details of a specific\n{@link IStudioRepositoryRelease distribution program} in the\n{@link IStudioRepository repository}, by the version name of the release.\n\nThe distribution program details include all\n{@link IStudioRepositoryReleaseNode function nodes} that are `exported` by\nthe program, and their meta type information.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "version",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepositoryRelease.version } of the target distribution program"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the distribution program",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepositoryRelease"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/repositories/{accountCode}/{repositoryCode}/releases/{id}/swagger": {
      "get": {
        "summary": "Look up the distribution program as a Swagger document",
        "description": "Look up the distribution program as a Swagger document.\n\nThis studio system also provides each\n{@link IStudioRepositoryRepositoryReleaseNode node function} of the\n{@link IStudioRepositoryRelease distributed program} in the\n{@link IStudioRepositoryRepository}, in the form of individual Rest APIs.\nThis function is a function that can view the specifications of these\nRest APIs in the Swagger document.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryRelease.id } of the target distribution program"
          }
        ],
        "responses": {
          "200": {
            "description": "Swagger document",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISwagger"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/repositories/{accountCode}/{repositoryCode}/releases/{releaseId}/nodes/{id}/execute": {
      "post": {
        "summary": "Run a release node",
        "description": "Run a release node.\n\nRun a release node and wait for its return value.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the bound account"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the bound repository"
          },
          {
            "name": "releaseId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepositoryRelease.id } of the bound deployment program"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryReleaseNode.id } of the target function node"
          }
        ],
        "requestBody": {
          "description": "Parameter input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryReleaseNode.IExecute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Return value as the result of executing the target function node",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/IExecutionResult.IFailure"
                    },
                    {
                      "$ref": "#/components/schemas/IExecutionResult.ISuccessany"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/repositories/{accountCode}/{repositoryCode}/releases/{releaseId}/nodes/{id}/proceed": {
      "post": {
        "summary": "Run a release node",
        "description": "Run a release node.\n\nRun the release node, but do not wait for its return value, but simply\nreturn {@link IStudioRepositoryReleaseNodeHistory.ISummary} corresponding\nto the execution result history.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the bound account"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the bound repository"
          },
          {
            "name": "releaseId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepositoryRelease.id } of the bound release program"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryReleaseNode.id } of the target function node"
          }
        ],
        "requestBody": {
          "description": "Parameter input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryReleaseNode.IExecute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Return value as the execution result of the target function node",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepositoryReleaseNodeHistory.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/repositories/{accountCode}/{repositoryCode}/releases/{releaseId}/nodes/{nodeId}/histories": {
      "patch": {
        "summary": "Batch query of summary information of release node execution history",
        "description": "Batch query of summary information of release node execution history.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "releaseId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryRelease.id } of the target release"
          },
          {
            "name": "nodeId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryReleaseNode.id } of the target node"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryReleaseNodeHistory.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of release node history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioRepositoryReleaseNodeHistory.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/repositories/{accountCode}/{repositoryCode}/releases/{releaseId}/nodes/{nodeId}/histories/details": {
      "patch": {
        "summary": "Batch query of release node execution history details",
        "description": "Batch query of release node execution history details.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "releaseId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryRelease.id } of the target release"
          },
          {
            "name": "nodeId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryReleaseNode.id } of the target node"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryReleaseNodeHistory.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of release node history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioRepositoryReleaseNodeHistory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/admins/repositories/{accountCode}/{repositoryCode}/releases/{releaseId}/nodes/{nodeId}/histories/{id}": {
      "get": {
        "summary": "View details of release node execution history",
        "description": "View details of release node execution history.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "releaseId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryRelease.id } of the target release"
          },
          {
            "name": "nodeId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryReleaseNode.id } of the target node"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryReleaseNodeHistory.id } of the target release node execution history"
          }
        ],
        "responses": {
          "200": {
            "description": "Release node execution details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepositoryReleaseNodeHistory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/accounts": {
      "post": {
        "summary": "Create an account",
        "description": "Create an account.\n\n{@link IHubCustomer customer} creates a {@link IStudioAccount account}.\n\nEven if the customer's purpose is to establish a\n{@link IStudioEnterprise company} and assign the account to it, the customer\nmust first create his or her own account, then establish the company,\nand then transfer ownership of the account.",
        "tags": [
          "Account"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Account creation information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioAccount.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Details of the created account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioAccount"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "Retrieve the list of account summary information",
        "description": "Retrieve the list of account summary information.\n\nAll {@link IStudioAccount.IInvert account summary information} existing\nin this studio system {@link IPage paging processing} is retrieved.",
        "tags": [
          "Account"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioAccount.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paging accounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioAccount.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/accounts/{id}": {
      "put": {
        "summary": "Edit Account",
        "description": "Edit Account.\n\n{@link IHubCustomer Customer} modifies the identifier code of the\n{@link IStudioAccount account} that he/she created in the past.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioAccount.id } of the target account"
          }
        ],
        "requestBody": {
          "description": "Modify account code information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioAccount.IUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete account",
        "description": "Delete account.\n\n{@link IHubCustomer customer} deletes the {@link IStudioAccount account}\nthat he/she previously created.\n\nIf the target account belongs to a {@link IStudioEnterprise company}, not a\n{@link IHubMember member}, the current customer must be a\n{@link IStudioEnterpriseEmployee employee} with top-level administrator\nrights in the company. The company will be deleted along with the account.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioAccount.id } of the target account"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Retrieve account details with {@link IStudioAccount.id}",
        "description": "Retrieve account details with {@link IStudioAccount.id}.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioAccount.id } of target account"
          }
        ],
        "responses": {
          "200": {
            "description": "account information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioAccount"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/accounts/{code}/get": {
      "get": {
        "summary": "Retrieve account details with {@link IStudioAccount.code}",
        "description": "Retrieve account details with {@link IStudioAccount.code}.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of target account"
          }
        ],
        "responses": {
          "200": {
            "description": "account information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioAccount"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/accounts/{accountCode}/schedules": {
      "post": {
        "summary": "Create a schedule",
        "description": "Create a schedule.\n\nCreate a new schedule {@link IStudioAccountSchedule} in\n{@link IStudioAccount studio account}.\n\nNote that schedules set in a studio account can only be edited by\n{@link IStudioEnterpriseEmployee} who is the owner of the account or has\na manager or higher position in the {@link IStudioEnterprise company} that\nowns the account.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/IStudioAccountSchedule.ICreateForRelease"
                  },
                  {
                    "$ref": "#/components/schemas/IStudioAccountSchedule.ICreateForGood"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioAccountSchedule"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "View the schedule list",
        "description": "View the schedule list.\n\nAll {@link IStudioAccountSchedule schedule summary information} set for\n{@link IStudioAccount studio account} are retrieved by {@link IPage paging}.\n\nNote that the schedules set for the studio account can only be viewed by\n{@link IStudioEnterpriseEmployee employees} who are the owner of the account\nor have a manager or higher position in the {@link IStudioEnterprise company}\nthat owns the account.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioAccountSchedule.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of summary information for schedules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioAccountSchedule.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/accounts/{accountCode}/schedules/{id}/pause": {
      "put": {
        "summary": "Pause the schedule",
        "description": "Pause the schedule.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioAccount.id } of the target schedule"
          }
        ],
        "requestBody": {
          "description": "Schedule interval information to pause",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioAccountSchedule.IPause"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/accounts/{accountCode}/schedules/{id}/resume": {
      "put": {
        "summary": "Resume a suspended schedule",
        "description": "Resume a suspended schedule.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioAccount.id } of the target schedule"
          }
        ],
        "requestBody": {
          "description": "Information on the schedule to resume",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioAccountSchedule.IResume"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/accounts/{accountCode}/schedules/{id}": {
      "put": {
        "summary": "Modify the schedule",
        "description": "Modify the schedule.\n\nModify the {@link IStudioAccountSchedule schedule} set in the\n{@link IStudioAccount studio account}.\n\nNote that the schedule set in the studio account can only be edited by\nthe owner of the account or an {@link IStudioEnterpriseEmployee employee}\nwith a manager or higher position in the {@link IStudioEnterprise company}\nthat owns the account.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioAccount.id } of the target schedule"
          }
        ],
        "requestBody": {
          "description": "Schedule information to modify",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioAccountSchedule.IUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete schedule",
        "description": "Delete schedule.\n\nDelete {@link IStudioAccountSchedule schedule} set in\n{@link IStudioAccount studio account}.\n\nNote that schedules set in a studio account can only be edited by\n{@link IStudioEnterpriseEmployee employees} who are the owner of the account\nor have a manager or higher position in the {@link IStudioEnterprise company}\nthat owns the account.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioAccount.id } of the target schedule"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "View schedule details",
        "description": "View schedule details.\n\nRetrieves details of {@link IStudioAccountSchedule schedule} set in\n{@link IStudioAccount studio account}. The returned details include variable\nvalues that are not in {@link IStudioAccountSchedule.ISummary} and detailed\ndescriptions.\n\nNote that schedules set in a studio account can only be viewed by\n{@link IStudioEnterpriseEmployee employees} who are the owners of the account\nor have a manager or higher position in the {@link IStudioEnterprise company}\nthat owns the account.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.id } of the target schedule"
          }
        ],
        "responses": {
          "200": {
            "description": "Schedule details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioAccountSchedule"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/accounts/{accountCode}/secrets": {
      "post": {
        "summary": "Create a global variable",
        "description": "Create a global variable.\n\nCreate a new global variable\n{@link IStudioAccountSecret} in {@link IStudioAccount studio account}. Note\nthat the variable value set in the global variable\n{@link IStudioAccountSecret.value} is encrypted and stored in the DB.\n\nNote that the global variable set in the studio account can only be edited by\nthe owner of the account or an {@link IStudioEnterpriseEmployee employee}\nwho has a position higher than an administrator of the\n{@link IStudioEnterprise company} that owns the account.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          }
        ],
        "requestBody": {
          "description": "Global variable information to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioAccountSecret.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created global variable information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioAccountSecret"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "Retrieves a list of secret variable sets",
        "description": "Retrieves a list of secret variable sets.\n\nAll {@link IStudioAccountSecret secret variable set summary information}\nset in {@link IStudioAccount studio account} are retrieved by\n{@link IPage paging}.\n\nNote that the secret variable sets set in a studio account can only be\nretrieved by {@link IStudioEnterpriseEmployee employees} who are the owners\nof the account or have a manager or higher position in the\n{@link IStudioEnterprise company} that owns the account.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioAccountSecret.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Summary information list of secret variable sets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioAccountSecret.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/accounts/{accountCode}/secrets/emplace": {
      "post": {
        "summary": "Variable Create or edit a variable",
        "description": "Variable Create or edit a variable.\n\nCreate a new global variable {@link IStudioAccountSecret} in\n{@link IStudioAccount studio account}. If there is a record with the same\n{@link IStudioAccountSecret.key} value, edit that record. Then, repeat the\nsame process for {@link IStudioAccountSecret.values} to create or edit\nvariable values.\n\nNote that global variables set in a studio account can only be edited by\nthe owner of the account or {@link IStudioEnterpriseEmployee employees}\nwho have a manager or higher position in the {@link IStudioEnterprise company}\nthat owns the account.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          }
        ],
        "requestBody": {
          "description": "Information about the global variable to be created or edited",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioAccountSecret.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Information about the global variable created or edited",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioAccountSecret"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/accounts/{accountCode}/secrets/{id}": {
      "put": {
        "summary": "Modify global variables",
        "description": "Modify global variables.\n\nModify the {@link IStudioAccountSecret global variable} set in the\n{@link IStudioAccount studio account}.\n\nNote that global variables set in a studio account can only be edited by\nthe owner of the account or an {@link IStudioEnterpriseEmployee employee}\nwith a position higher than an administrator of the\n{@link IStudioEnterprise company} that owns the account.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioAccount.id } of the target global variable"
          }
        ],
        "requestBody": {
          "description": "Information on the global variable to be modified",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioAccountSecret.IUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete global variables",
        "description": "Delete global variables.\n\nDelete the {@link IStudioAccountSecret global variable} set in\n{@link IStudioAccount studio account}.\n\nNote that global variables set in a studio account can only be edited by\nthe owner of the account or an {@link IStudioEnterpriseEmployee employee}\nwith a manager or higher position in the {@link IStudioEnterprise company}\nthat owns the account.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioAccount.id } of the target global variable"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Gets details of a secret variable set",
        "description": "Gets details of a secret variable set.\n\nGets details of the {@link IStudioAccountSecret secret variable set}\nset to {@link IStudioAccount studio account}. The returned details include\na list of variable values that are not in {@link IStudioAccountSecret.ISummary}\nand a detailed description.\n\nNote that the secret variable set set to a studio account can only be checked\nby the owner of the account or an {@link IStudioEnterpriseEmployee employee}\nwho has a manager or higher position in the {@link IStudioEnterprise company}\nthat owns the account.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.id } of the target secret variable set"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret variable details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioAccountSecret"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/accounts/{accountCode}/secrets/{key}/get": {
      "get": {
        "summary": "Secret variable set details by key",
        "description": "Secret variable set details by key.\n\nRetrieves the details of the {@link IStudioAccountSecret secret variable}\nset in the {@link IStudioAccount studio account}, as its key value\n(variable name). The returned details include variable values and detailed\ndescriptions that are not in {@link IStudioAccountSecret.ISummary}.\n\nNote that the secret variables set in the studio account can only be retrieved\nby the owner of the account or {@link IStudioEnterpriseEmployee employees} who\nhave a manager or higher position in the {@link IStudioEnterprise company} that\nowns the account.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "key",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccountSecret.key } of the target secret variable set"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret variable details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioAccountSecret"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/accounts/{accountCode}/secrets/{secretId}/values": {
      "post": {
        "summary": "Generate individual variable values",
        "description": "Generate individual variable values.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the attributed account"
          },
          {
            "name": "secretId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioAccountSecret.id } of the attributed variable value set"
          }
        ],
        "requestBody": {
          "description": "Variable value creation information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioAccountSecretValue.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Generated variable values",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioAccountSecretValue"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/accounts/{accountCode}/secrets/{secretId}/values/{id}": {
      "put": {
        "summary": "Modify individual variable values",
        "description": "Modify individual variable values.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the attributed account"
          },
          {
            "name": "secretId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioAccountSecret.id } of the attributed variable value set"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioAccountSecretValue.id } of the variable value"
          }
        ],
        "requestBody": {
          "description": "Modification information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioAccountSecretValue.IUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete individual variable values",
        "description": "Delete individual variable values.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "secretId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioAccountSecret.id } of the set of variable values to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioAccountSecretValue.id } of the variable value"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Global variable details",
        "description": "Global variable details.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "secretId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioAccountSecret.id } of the set of secret variables to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioAccountSecretValue.id } of the target variable value"
          }
        ],
        "responses": {
          "200": {
            "description": "Variable value details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioAccountSecretValue"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/accounts/{accountCode}/secrets/values": {
      "patch": {
        "summary": "Retrieve a list of global variables",
        "description": "Retrieve a list of global variables.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioAccountSecretValue.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of summary information on dereferenced variable values",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioAccountSecretValue.IInvertSummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/accounts/secrets/values/sandboxes/{id}": {
      "get": {
        "summary": "Get secret variable value from sandbox",
        "description": "Get secret variable value from sandbox.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target secret variable value sandbox record {@link IStudioAccountSecretValueSandbox.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioAccountSecretValueSandbox"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Change secret variable value from sandbox",
        "description": "Change secret variable value from sandbox.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " target secret variable value sandbox record {@link IStudioAccountSecretValueSandbox.id }"
          }
        ],
        "requestBody": {
          "description": "secret variable value to change",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioAccountSecretValueSandbox.IUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/studio/customers/accounts/{accountCode}/widgets/{widgetCode}/tiles": {
      "post": {
        "summary": "Create a widget tile",
        "description": "Create a widget tile.\n\nCreate a new {@link IStudioAccountWidgetTile tile} for a specific\n{@link IStudioAccount account} and widget.\n\nWhen creating a tile, you need to enter the\n{@link IStudioAccountWidgetTile.position coordinates} and the\n{@link IStudioAccountWidgetTile.position size} where it will be placed. If there\nis an existing tile that overlaps the coordinate area, the operation may succeed\nor fail depending on the {@link IStudioAccountWidgetTile.bash} property, so be\nsure to read {@link IStudioAccountWidgetTile.bash} carefully.\n\n- Push `false`:\n- 422 Unprocessable Entity error\n- Push `true`:\n- Push overlapping tiles downward (Y coordinate value increases)\n- If there is another tile that overlaps the pushed tile, push it as well\n- However, {@link IStudioAccountWidgetTile.pinned} cannot be pushed and 422 error occurs",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "widgetCode",
            "in": "path",
            "schema": {
              "const": "general"
            },
            "required": true,
            "description": " Code of the widget to which it belongs"
          }
        ],
        "requestBody": {
          "description": "Tile input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioAccountWidgetTile.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Generated tile information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioAccountWidgetTile"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "summary": "Editing widget tiles",
        "description": "Editing widget tiles.\n\nModify the geometry information, such as the coordinates or size of a specific\n{@link IStudioAccountWidgetTile}.\n\nWhen modifying a tile, you need to enter the\n{@link IStudioAccountWidgetTile.position coordinate} and the\n{@link IStudioAccountWidgetTile.position size} where it will be newly placed.\nIf there is an existing tile that overlaps the coordinate area, the operation\nmay succeed or fail depending on the {@link IStudioAccountWidgetTile.bash}\nproperty, so be sure to read {@link IStudioAccountWidgetTile.bash} carefully.\n\n- Push `false`:\n  - 422 Unprocessable Entity error\n- Push `true`:\n  - Push overlapping tiles downward (Y coordinate value increases)\n  - If there is another tile that overlaps the pushed tile, push it as well\n  - However, {@link IStudioAccountWidgetTile.pinned} cannot be pushed and 422 error occurs",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "widgetCode",
            "in": "path",
            "schema": {
              "const": "general"
            },
            "required": true,
            "description": " Code of the widget to which it belongs"
          }
        ],
        "requestBody": {
          "description": "Widget editing information",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IStudioAccountWidgetTile.IUpdate"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "Retrieve the list of widget tiles",
        "description": "Retrieve the list of widget tiles.\n\nLoads {@link IStudioAccountWidgetTile tiles} belonging to a specific\n{@link IStudioAccount account} and widget, in units of pages.\n\nHowever, unlike general pagination APIs, widgets perform\n{@link IGeometryPage pagination} by\n{@link IStudioAccountWidgetTile.IGeometry 2D spatial coordinates and size},\nnot scalar values (e.g. page 1).\n\nSpecify this point, move to the area of the page you want to retrieve, and\nperform the pagination task.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account you are interested in"
          },
          {
            "name": "widgetCode",
            "in": "path",
            "schema": {
              "const": "general"
            },
            "required": true,
            "description": " Code of the widget you are interested in"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioAccountWidgetTile.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of widget tiles that are paged in the coordinate system",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGeometryPageIStudioAccountWidgetTile.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/accounts/{accountCode}/widgets/{widgetCode}/tiles/{id}": {
      "delete": {
        "summary": "Delete a widget tile",
        "description": "Delete a widget tile.\n\nDeletes a specific {@link IStudioAccountWidgetTile}.\n\nDeleting a tile is permanent and cannot be restored.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account it belongs to"
          },
          {
            "name": "widgetCode",
            "in": "path",
            "schema": {
              "const": "general"
            },
            "required": true,
            "description": " Code of the widget it belongs to"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioAccountWidgetTile.id } of the target tile"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Lookup widget tiles individually",
        "description": "Lookup widget tiles individually.\n\nLookup a specific {@link IStudioAccountWidgetTile widget tile} individually.\n\nProbably not used in front-end applications, but will likely be an API for\npure test verification.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "widgetCode",
            "in": "path",
            "schema": {
              "const": "general"
            },
            "required": true,
            "description": " Code of the widget to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioAccountWidgetTile.id } of the target tile"
          }
        ],
        "responses": {
          "200": {
            "description": "Widget tile information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioAccountWidgetTile"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/accounts/{accountCode}/widgets/{widgetCode}/tiles/minimap": {
      "patch": {
        "summary": "Minimap batch query of widget tiles",
        "description": "Minimap batch query of widget tiles.\n\n{@link IStudioAccountWidgetTileGeometry geometry information of widget tiles}\nis batch-queried for a specific\n{@link IStudioAccountWidgetTileGeometry.breakpoint}.\n\nThrough this, a minimap can be configured, and detailed component information\nof each widget tile can be queried by area unit through the {@link index} API.",
        "tags": [],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "widgetCode",
            "in": "path",
            "schema": {
              "const": "general"
            },
            "required": true,
            "description": " Code of the widget to which it belongs"
          },
          {
            "name": "breakpoint",
            "in": "query",
            "schema": {
              "oneOf": [
                {
                  "const": "md"
                },
                {
                  "const": "xs"
                },
                {
                  "const": "sm"
                },
                {
                  "const": "lg"
                }
              ]
            },
            "description": " target {@link IStudioAccountWidgetTileGeometry.breakpoint }",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Minimap information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IStudioAccountWidgetTile.IMinimapItem"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/accounts/{accountCode}/widgets/{widgetCode}/tiles/trashes": {
      "post": {
        "summary": "Reviving a deleted widget tile",
        "description": "Reviving a deleted widget tile.\n\nRe-register a specific deleted {@link IStudioAccountWidgetTile} to the widget.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "widgetCode",
            "in": "path",
            "schema": {
              "const": "general"
            },
            "required": true,
            "description": " Code of the widget to which it belongs"
          }
        ],
        "requestBody": {
          "description": "Tile information to re-register to the widget",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioAccountWidgetTile.IRestore"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "Retrieve the list of deleted widget tiles",
        "description": "Retrieve the list of deleted widget tiles.\n\nRetrieves the deleted {@link IStudioAccountWidgetTile tiles} belonging to\na specific {@link IStudioAccount account} and widget, page by page.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "widgetCode",
            "in": "path",
            "schema": {
              "const": "general"
            },
            "required": true,
            "description": " Code of the widget to which it belongs"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paged widget tiles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioAccountWidgetTile"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/enterprises/{accountCode}/employees": {
      "post": {
        "summary": "Appoint an employee",
        "description": "Appoint an employee.\n\n{@link IHubCustomer Customer}, who is an employee of {@link IStudioEnterprise}\nat least an administrator level, appoints a specific {@link IHubMember member}\nas an employee of {@link IStudioEnterpriseEmployee}.\n\nHowever, the person who can appoint an employee must be an owner or an\nadministrator of the company. In the case of an administrator, he can only\nappoint employees of a lower rank than himself, and only the owner can appoint\nemployees with the owner or administrator level.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the company account"
          }
        ],
        "requestBody": {
          "description": "Employee appointment information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioEnterpriseEmployee.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Details of the appointed employee",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioEnterpriseEmployee"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "Retrieve the summary information list of corporate employees",
        "description": "Retrieve the summary information list of corporate employees.\n\nAll {@link IStudioEnterpriseEmployee.ISummary employee summary information}\nbelonging to a specific {@link IStudioEnterprise company} {@link IPage paging}\nis retrieved.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the corporate account"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioEnterpriseEmployee.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paging employee summary information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioEnterpriseEmployee.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/enterprises/{accountCode}/employees/{id}": {
      "put": {
        "summary": "Change Employee Position",
        "description": "Change Employee Position.\n\n{@link IHubCustomer Customer}, who is an employee of\n{@link IStudioEnterprise Enterprise} at the manager level or higher, changes\nthe position of a specific {@link IStudioEnterpriseEmployee Employee}.\n\nHowever, only the owner or manager of the company can change the employee's\nposition.\n\nIn the case of managers, only positions of lower ranks can be changed, and only\nthe owner can change employees with the owner or manager position.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the company account"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioEnterpriseEmployee.id } of the target employee"
          }
        ],
        "requestBody": {
          "description": "Employee position change information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioEnterpriseEmployee.IUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Fire an employee",
        "description": "Fire an employee.\n\nAn {@link IHubCustomer customer} who is an employee of\n{@link IStudioEnterprise company} at least an administrator level fires\na specific {@link IStudioEnterpriseEmployee employee}.\n\nHowever, the only person who can fire an employee is the owner or\nan administrator of the company.\n\nAn administrator can only fire employees of a lower rank than themselves,\nand only the owner can fire employees who are either owners or administrators.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the company account"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioEnterpriseEmployee.id } of the target employee"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Get employee details",
        "description": "Get employee details.\n\nGet the details of a specific {@link IStudioEnterpriseEmployee employee}.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the affiliated company account"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioEnterpriseEmployee.id } of the target employee"
          }
        ],
        "responses": {
          "200": {
            "description": "employee details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioEnterpriseEmployee"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/enterprises/{accountCode}/employees/approve": {
      "put": {
        "summary": "Accepting an employee invitation",
        "description": "Accepting an employee invitation.\n\n{@link IHubCustomer Customer} accepts the invitation sent to him/her,\nthereby becoming an {@link IStudioEnterpriseEmployee Employee} of the actual\n{@link IStudioEnterprise Company}.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the target company account"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioEnterpriseEmployee"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/enterprises": {
      "post": {
        "summary": "Create a company",
        "description": "Create a company.\n\nCreate a new {@link IStudioEnterprise company}.\n\n{@link IHubCustomer Customer} can create a new company and issue a new account\nto the company, or transfer their {@link IStudioAccount account} to the new\ncompany and issue another new account for themselves.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Company creation information",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/IStudioEnterprise.ICreate.INew"
                  },
                  {
                    "$ref": "#/components/schemas/IStudioEnterprise.ICreate.IMigrate"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Details of the created company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioEnterprise"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/enterprises/{id}": {
      "put": {
        "summary": "Change company information",
        "description": "Change company information.\n\nChange the basic information of {@link IStudioEnterprise company}.\n\nHowever, to do this, the current {@link IHubCustomer customer} must be a\n{@link IStudioEnterpriseEmployee employee} with the owner title of the company.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Company change information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioEnterprise.IUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a company",
        "description": "Delete a company.\n\nDeletes a {@link IStudioEnterprise company}, and also removes the\n{@link IStudioAccount account} of which it is a part.\n\nHowever, the current {@link IHubCustomer customer} must be a\n{@link IStudioEnterpriseEmployee employee} with the owner title of the\ncompany.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "View company details",
        "description": "View company details.\n\nView details of a specific {@link IStudioEnterprise company}.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " of the target company {@link IStudioEnterprise.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "company details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioEnterprise"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/enterprises/{accountCode}/get": {
      "get": {
        "summary": "View company details (by account code)",
        "description": "View company details (by account code).\n\nView details of a specific {@link IStudioEnterprise company} by the\n{@link IStudioAccount.code code} of the account it belongs to.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account belonging to the company"
          }
        ],
        "responses": {
          "200": {
            "description": "company details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioEnterprise"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/enterprises/{accountCode}/teams/{teamCode}/companions": {
      "post": {
        "summary": "Assign team members",
        "description": "Assign team members.\n\nA {@link IHubCustomer customer} who is a {@link IStudioEnterpriseTeam team}\nmanager or higher level {@link IStudioEnterpriseTeamCompanion member}\nwithin the {@link IStudioEnterprise company} appoints a specific\n{@link IStudioEnterpriseEmployee employee} within the company to his team.\n\nHowever, only the manager or \"head\" of the team can appoint members. In the\ncase of managers, only members of a lower level than their own role can be\nappointed, and only the \"head\" of the team can appoint members of the \"head\"\nand \"manager\" level.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the repository to which the member belongs"
          },
          {
            "name": "teamCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioEnterpriseTeam.code } of the team to which the member belongs"
          }
        ],
        "requestBody": {
          "description": "Member appointment information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioEnterpriseTeamCompanion.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Details of the created member",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioEnterpriseTeamCompanion"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "Retrieve the summary information list of corporate team members",
        "description": "Retrieve the summary information list of corporate team members.\n\nRetrieves {@link IPage paging} the\n{@link IStudioEnterpriseTeamCompanion.ISummary members' summary information}\nbelonging to {@link IStudioEnterpriseTeam team} of a specific\n{@link IStudioEnterprise company}.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the corporate account"
          },
          {
            "name": "teamCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioEnterpriseTeam.code } of the team"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioEnterpriseTeamCompanion.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paging summary information of members",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioEnterpriseTeamCompanion.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/enterprises/{accountCode}/teams/{teamCode}/companions/{id}": {
      "put": {
        "summary": "Change a member's role",
        "description": "Change a member's role.\n\nA {@link IHubCustomer customer} who is a\n{@link IStudioEnterpriseTeamCompanion member} of an\n{@link IStudioEnterpriseTeam team} within {@link IStudioEnterprise company},\nchanges another member's {@link IStudioEnterpriseTeamCompanion.role role}.\n\nHowever, only the manager or \"head\" of the team can change the member's role.\nIn the case of an manager, only members with a lower level than their own\nrole can be changed, and only the \"head\" of the team can change members with\na \"head\" or \"manager\" level.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the repository to which it belongs"
          },
          {
            "name": "teamCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioEnterpriseTeam.code } of the team to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioEnterpriseTeamCompanion.id } of the target member"
          }
        ],
        "requestBody": {
          "description": "Information about changing the member's role",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioEnterpriseTeamCompanion.IUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Remove a member",
        "description": "Remove a member.\n\nA {@link IHubCustomer customer} who is a {@link IStudioEnterpriseTeam team}\nof an {@link IStudioEnterpriseTeam team} of an {@link IStudioEnterprise Team}\nof an administrator level or higher removes another member from the team.\n\nHowever, only the administrator or \"head\" of the team can remove a member.\n\nIn the case of an administrator, only members of a lower level can be removed,\nand only the \"head\" of the team can remove members of the \"head\" and \"manager\"\nlevel.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the repository to which it belongs"
          },
          {
            "name": "teamCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioEnterpriseTeam.code } of the team to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioEnterpriseTeamCompanion.id } of the target member"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Retrieve member details",
        "description": "Retrieve member details.\n\nRetrieve details of a specific {@link IStudioEnterpriseTeamCompanion member}\nbelonging to a {@link IStudioEnterpriseTeam team}.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the affiliated company account"
          },
          {
            "name": "teamCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioEnterpriseTeam.code } of the affiliated team"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioEnterpriseTeamCompanion.id } of the target member"
          }
        ],
        "responses": {
          "200": {
            "description": "member details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioEnterpriseTeamCompanion"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/enterprises/{accountCode}/teams": {
      "post": {
        "summary": "Creates a new team in a company",
        "description": "Creates a new team in a company.\n\nA {@link IHubCustomer customer} who is an\n{@link IStudioEnterpriseEmployee employee} of a {@link IStudioEnterprise company}\nand above, creates a new {@link IStudioEnterpriseTeam team}.\n\nAlso, the customer who created the team, himself, becomes the \"head\"\n{@link IStudioEnterpriseTeamCompanion member} of the team.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " The {@link IStudioAccount.code } of the company account to which the team belongs"
          }
        ],
        "requestBody": {
          "description": "Team creation information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioEnterpriseTeam.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Details of the created team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioEnterpriseTeam"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "Retrieve the summary information list of corporate teams",
        "description": "Retrieve the summary information list of corporate teams.\n\nRetrieves all {@link IStudioEnterpriseTeam.ISummary team summary information}s\nof a specific {@link IStudioEnterprise company}.\n\n{@link IPage paging}.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the corporate account"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioEnterpriseTeam.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paging team summary information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioEnterpriseTeam.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/enterprises/{accountCode}/teams/{id}": {
      "put": {
        "summary": "Change team information",
        "description": "Change team information.\n\n{@link IStudioEnterpriseTeam Enterprise Team} manager or higher level\n{@link IStudioEnterpriseTeamCompanion member} {@link IHubCustomer customer},\n\nChanges the team information.\n\nIf the information to be changed is related to a member, not a team,\nyou must use a different API.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the corporate account"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioEnterpriseTeam.id } of the target team"
          }
        ],
        "requestBody": {
          "description": "Team change information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioEnterpriseTeam.IUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Disbands a team",
        "description": "Disbands a team.\n\nA {@link IStudioEnterpriseTeamCompanion member} {@link IHubCustomer customer}\nwho is a \"leader\" of a {@link IStudioEnterpriseTeam enterprise team}, disbands\nhis or her own team.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the enterprise account to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioEnterpriseTeam.id } of the target team"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "View team details",
        "description": "View team details.\n\nView details of a specific {@link IStudioEnterpriseTeam team} organized by\n{@link IStudioEnterprise}.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the affiliated company account"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioEnterpriseTeam.id } of the target team"
          }
        ],
        "responses": {
          "200": {
            "description": "team details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioEnterpriseTeam"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/enterprises/{accountCode}/teams/merge": {
      "delete": {
        "summary": "Merge teams",
        "description": "Merge teams.\n\nA {@link IStudioEnterpriseTeamCompanion member}\n{@link IStudioEnterpriseTeam customer} who is a \"leader\" of multiple\n{@link IStudioEnterpriseTeam teams} within a {@link IStudioEnterprise company}\nmerges multiple teams into one.\n\nIf there are {@link IStudioEnterpriseEmployee employees} who are\nsimultaneously on multiple teams to be merged, they will be assigned the\n{@link IStudioEnterpriseTeamCompanion.role role} of the remaining team.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " The {@link IStudioAccount.code } of the company account"
          }
        ],
        "requestBody": {
          "description": "Team merge information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioEnterpriseTeam.IMerge"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/enterprises/{accountCode}/teams/{code}/get": {
      "get": {
        "summary": "View team details by code",
        "description": "View team details by code.\n\nView details of a specific {@link IStudioEnterpriseTeam team} configured by\n{@link IStudioEnterprise} using the team's code (`code`).",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the affiliated company account"
          },
          {
            "name": "code",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioEnterpriseTeam.code } of the target team"
          }
        ],
        "responses": {
          "200": {
            "description": "Team details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioEnterpriseTeam"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/meta/statistics/statistics": {
      "patch": {
        "summary": "Retrieve the statistics of the Meta LLM",
        "description": "Retrieve the statistics of the Meta LLM.",
        "tags": [
          "Meta"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Statistics of the Meta LLM",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioMetaStatistics"
                }
              }
            }
          }
        }
      }
    },
    "/studio/customers/meta/chat/sessions": {
      "post": {
        "summary": "Open only Meta LLM chat sessions",
        "description": "Open only Meta LLM chat sessions.\n\nOpen Meta LLM chat sessions, but do not connect to them and start chatting.\n\nA feature specifically created for Frontend requests.",
        "tags": [
          "Meta"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioMetaChatSession.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioMetaChatSession"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "Retrieve the chat session list",
        "description": "Retrieve the chat session list.\n\nRetrieve the chat session {@link IStudioMetaChatSession} list.\n\nThe returned {@link IStudioMetaChatSession}s are {@link IPage paging} processed.\n\nAnd depending on how you set the request information\n{@link IStudioMetaChatSession.IRequest}, you can limit the number of\nrecords per page by {@link IStudioMetaChatSession.IRequest.limit}, search\nonly sessions that meet a specific condition by\n{@link IStudioMetaChatSession.IRequest.search}, or arbitrarily specify the\n{@link IStudioMetaChatSession.IRequest.sort sorting condition} of the\nsessions.",
        "tags": [
          "Meta"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioMetaChatSession.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paging sessions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioMetaChatSession"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/meta/chat/sessions/{id}": {
      "put": {
        "summary": "Modify Meta LLM chat session information",
        "description": "Modify Meta LLM chat session information.\n\nModify the information of the previously created\n{@link IStudioMetaChatSession Meta LLM chat session}.\n\nCurrently, the only information that can be modified is\n{@link IStudioMetaChatSession.title}.",
        "tags": [
          "Meta"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioMetaChatSession.id } of the target chat session"
          }
        ],
        "requestBody": {
          "description": "Modify information for the session",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioMetaChatSession.IUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Meta LLM chat session",
        "description": "Delete Meta LLM chat session.\n\nDeletes the previously created {@link IStudioMetaChatSession Meta LLM chat session}.\n\nThe session can no longer be retrieved with {@link index} and {@link at},\nand cannot be restarted with {@link restart}.",
        "tags": [
          "Meta"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioMetaChatSession.id } of the target chat session"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "View individual chat sessions",
        "description": "View individual chat sessions.\n\nView the target chat session details {@link IStudioMetaChatSession}.",
        "tags": [
          "Meta"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioMetaChatSession.id } of the target chat session"
          }
        ],
        "responses": {
          "200": {
            "description": "Chat session details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioMetaChatSession"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/meta/chat/sessions/{id}/pin": {
      "put": {
        "summary": "Meta LLM Pins a chat session",
        "description": "Meta LLM Pins a chat session.\n\nA pinned chat session is displayed pinned to the top, separate from other\nchat sessions.",
        "tags": [
          "Meta"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioMetaChatSession.id } of the target chat session"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/meta/chat/sessions/{id}/unpin": {
      "put": {
        "summary": "Unpin a Meta LLM chat session",
        "description": "Unpin a Meta LLM chat session.\n\nA pinned chat session is displayed pinned to the top, separate from\nother chat sessions.\n\nThis function unpins such a chat session, returning it to a normal chat session.",
        "tags": [
          "Meta"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioMetaChatSession.id } of the target chat session"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/meta/chat/sessions/eraseAll": {
      "delete": {
        "summary": "Bulk delete Meta LLM chat sessions",
        "description": "Bulk delete Meta LLM chat sessions.\n\nAll {@link IStudioMetaChatSession Meta LLM chat sessions} created by\nthe customer will be deleted in bulk.\n\nThe customer will no longer be able to view existing sessions, and\n{@link restart restart} is also not possible.",
        "tags": [
          "Meta"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/meta/chat/sessions/{id}/disconnect": {
      "delete": {
        "summary": "Disconnection handling for all connections in Meta LLM chat session",
        "description": "Disconnection handling for all connections in Meta LLM chat session.\n\nAn API that handles Meta LLM chat session connections as if they were closed,\neven if they were not actually closed.\n\nThis is a temporary API provided because the front-end is currently unable\nto properly disconnect websocket connections, so this API will be deprecated\nsoon.",
        "deprecated": true,
        "tags": [
          "Meta"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioMetaChatSession.id } of the chat session to which it belongs"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/meta/chat/sessions/{sessionId}/connections/{id}/disconnect": {
      "delete": {
        "summary": "Meta LLM Chat Session Connection Disconnection Processing",
        "description": "Meta LLM Chat Session Connection Disconnection Processing.\n\nAn API that processes Meta LLM Chat Session Connections as if they were\nclosed, even if they were not actually closed.\n\nThis API is provided temporarily because the front-end is currently unable\nto properly disconnect WebSockets, so this API will be deprecated soon.",
        "deprecated": true,
        "tags": [
          "Meta"
        ],
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioMetaChatSession.id } of the chat session to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioMetaChatSessionConnection.id } of the target chat session connection"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/meta/chat/sessions/{sessionId}/connections": {
      "patch": {
        "summary": "Retrieve the list of connection information for the Meta LLM chat session",
        "description": "Retrieve the list of connection information for the Meta LLM chat session.\n\nBatch retrieve the Websocket connection information of\n{@link IHubCustomer customer} for {@link IStudioMetaChatSession chat session}.\n\nThe returned {@link IStudioMetaChatSessionConnection}s are {@link IPage paging}\nprocessed. And depending on how the request information\n{@link IStudioMetaChatSessionConnection.IRequest} is set,\nthe number of records per page can be limited by\n{@link IStudioMetaChatSessionConnection.IRequest.limit},\n{@link IStudioMetaChatSessionConnection.IRequest.search}, or\n{@link IStudioMetaChatSessionConnection.IRequest.sort sort conditions}\ncan be set arbitrarily.",
        "tags": [
          "Meta"
        ],
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioMetaChatSession.id } of the chat session"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioMetaChatSessionConnection.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paged connection list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioMetaChatSessionConnection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/meta/chat/sessions/{sessionId}/connections/{id}": {
      "get": {
        "summary": "Meta LLM Chat session connection information individual query",
        "description": "Meta LLM Chat session connection information individual query.\n\n{@link IStudioMetaChatSession chat session}\n{@link IHubCustomer customer}'s Websocket connection information\n{@link IStudioMetaChatSessionConnection} is individually searched.",
        "tags": [
          "Meta"
        ],
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioMetaChatSession.id } of the chat session belonging to"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioMetaChatSessionConnection.id } of the target connection"
          }
        ],
        "responses": {
          "200": {
            "description": "Connection details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioMetaChatSessionConnection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/meta/chat/sessions/{sessionId}/messages": {
      "patch": {
        "summary": "Retrieve the list of chat session messages",
        "description": "Retrieve the list of chat session messages.\n\nRetrieve the list of all {@link IStudioMetaChatSessionMessage messages}\nthat occurred in the {@link IStudioMetaChatSession chat session}.\n\nIf you want to limit the {@link IStudioMetaChatSessionConnection connection unit}\nthat the message occurred in, set\n{@link IStudioMetaChatSessionMessage.IRequest.connection_id}.\n\nThe returned {@link IStudioMetaChatSessionMessage} are {@link IPage paging}\nprocessed. And depending on how you set the request information\n{@link IStudioMetaChatSessionMessage.IRequest}, you can limit the number of\nrecords per page {@link IStudioMetaChatSessionMessage.IRequest.limit},\n{@link IStudioMetaChatSessionMessage.IRequest.search}, or\n{@link IStudioMetaChatSessionMessage.IRequest.sort sort conditions} arbitrarily.",
        "tags": [
          "Meta"
        ],
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioMetaChatSession.id } of the chat session to which it belongs"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioMetaChatSessionMessage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paging messages",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioMetaChatSessionMessageIStudioMetaChatSessionMessageData"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/meta/chat/sessions/{sessionId}/messages/{id}": {
      "get": {
        "summary": "Retrieve chat session message details",
        "description": "Retrieve chat session message details.\n\nRetrieve the details of a specific\n{@link IStudioMetaChatSessionMessage message}\nthat occurred in a {@link IStudioMetaChatSession chat session}.",
        "tags": [
          "Meta"
        ],
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioMetaChatSession.id } of the chat session to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioMetaChatSessionMessage.id } of the target message"
          }
        ],
        "responses": {
          "200": {
            "description": "message details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioMetaChatSessionMessageIStudioMetaChatSessionMessageData"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/meta/chat/sessions/shares": {
      "post": {
        "summary": "Create a chat session share",
        "description": "Create a chat session share.\n\nCreate a chat session share {@link IStudioMetaChatSessionShare}.\n\nThe chat session share is a feature that allows you to share the chat session\nwith other users, and the other users can only read the chat session messages\nwithout being able to send messages.\n\nIf you specify a specific message ID in the chat session share, the other\nuser can only read the chat session messages to the specified message ID.\nThe next message will not be displayed.",
        "tags": [
          "Meta"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Chat session share creation information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioMetaChatSessionShare.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Chat session share details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioMetaChatSessionShare"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "Retrieve the chat session share list",
        "description": "Retrieve the chat session share list.\n\nRetrieve the chat session share {@link IStudioMetaChatSessionShare} list.\n\nThe returned {@link IStudioMetaChatSessionShare}s are \n{@link IPage paging} processed.\n\nAnd depending on how you set the request information\n{@link IStudioMetaChatSessionShare.IRequest}, you can limit the number of\nrecords per page by {@link IStudioMetaChatSessionShare.IRequest.limit}, \nsearch only sessions that meet a specific condition by\n{@link IStudioMetaChatSessionShare.IRequest.search}, or arbitrarily specify\nthe {@link IStudioMetaChatSessionShare.IRequest.sort sorting condition} of\nthe sessions.",
        "tags": [
          "Meta"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioMetaChatSessionShare.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paging session shares",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioMetaChatSessionShare"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/meta/chat/sessions/shares/{id}": {
      "put": {
        "summary": "Update a chat session share",
        "description": "Update a chat session share.\n\nUpdate a chat session share record; {@link IStudioMetaChatSessionShare}.\n\nYou can change {@link IStudioMetaChatSessionShare.IUpdate.title title} or\n{@link IStudioMetaChatSessionShare.IUpdate.message_id endpoint message}.",
        "tags": [
          "Meta"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target chat session share ID"
          }
        ],
        "requestBody": {
          "description": "Chat session share update information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioMetaChatSessionShare.IUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Erase a chat session share",
        "description": "Erase a chat session share.\n\nErase a chat session share record; {@link IStudioMetaChatSessionShare}.\n\nThe chat session share will be deleted and the other user\nwill no longer be able to read the chat session messages.",
        "tags": [
          "Meta"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target chat session share ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "View individual chat session shares",
        "description": "View individual chat session shares.\n\nView the target chat session share details {@link IStudioMetaChatSessionShare}.",
        "tags": [
          "Meta"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " ID of the target chat session share"
          }
        ],
        "responses": {
          "200": {
            "description": "Chat session share details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioMetaChatSessionShare"
                }
              }
            }
          }
        }
      }
    },
    "/studio/customers/meta/chat/sessions/shares/{shareId}/messages": {
      "patch": {
        "summary": "Get list of messages in a chat session of shared",
        "description": "Get list of messages in a chat session of shared.",
        "tags": [
          "Meta"
        ],
        "parameters": [
          {
            "name": "shareId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Target chat session share's {@link IStudioMetaChatSessionShare.id }"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioMetaChatSessionMessage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paging messages",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioMetaChatSessionMessageIStudioMetaChatSessionMessageData"
                }
              }
            }
          }
        }
      }
    },
    "/studio/customers/repositories/{accountCode}": {
      "post": {
        "summary": "Create a repository",
        "description": "Create a repository.\n\n{@link IHubCustomer customer} creates a {@link IStudioRepository repository}.\n\nThe repository created can belong to the customer {@link IHubMember member}'s\nown {@link IStudioAccount account}, or it can belong to the\n{@link IStudioEnterprise company} to which the customer belongs as a\n{@link IStudioEnterpriseEmployee employee}.\n\nIn addition, the customer is automatically granted the owner\n{@link IStudioRepositoryAccess permission} for the repository he or she created.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account he or she belongs to"
          }
        ],
        "requestBody": {
          "description": "Repository creation information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepository.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Details of the created repository",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepository"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "Retrieval of the list of repository summary information",
        "description": "Retrieval of the list of repository summary information.\n\nAll {@link IStudioRepository.ISummary repository summary information}\nexisting in this studio system are retrieved by {@link IPage paging}.\n\nHowever, {@link IStudioRepository.IRequest page request information} is\nconfigured, and the scope of the search target can be limited to a specific\n{@link IStudioAccount account}.\n\nAnd the code of the account to which it belongs, *accountCode*, can be set\nto `null`, in which case, all repositories accessible to the\n{@link IHubCustommer customer} will be searched regardless of the account to\nwhich it belongs. In other words, unless *accountCode* is `null`, only\nrepositories belonging to the account will be searched. And this is different\nfrom {@link IStudioRepository.IRequest.ISearch.account.code}, in that the\naccount code used for the search is a similar search, and the code used in\nthis path parameter is an exact match search.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string"
                }
              ]
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepository.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "paginated repository list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioRepository.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{id}": {
      "put": {
        "summary": "Modify a repository",
        "description": "Modify a repository.\n\nModify the public level, title, and search tags of a specific\n{@link IStudioRepository repository}. The identifier code\n{@link IStudioRepository.code} of the repository can also be modified through\nthis API function.\n\nHowever, in order to modify a repository, the customer must have the top-level\nadministrator {@link IStudioRepositoryAccesss permission} for the repository.\nAlso, if the repository's attributed account is a member, it can be the\ncustomer party, or if it is a company, it can be the customer's top-level\nadministrator employee of the company.\n\nAnd if what you want to do is change/transfer the repository's attributable\naccount, use the {@link shift} function instead. Also, if you are modifying\nan internal bucket, issue a new {@link IStudioRepositoryCommit commit}.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the attributable account"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepository.id } of the target repository"
          }
        ],
        "requestBody": {
          "description": "Repository modification information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialIStudioRepository.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a repository",
        "description": "Delete a repository.\n\n{@link IHubCustomer customer} deletes a {@link IStudioRepository repository}\nthat he/she previously created.\n\nNote that in order to delete a repository, you must actually be the owner\nof the repository.\n\nSimply being granted {@link IStudioRepositoryAccess permission} from the\nrepository does not change the ownership of the repository.\n\nAlso, if the target repository's affiliated account is not a\n{@link IHubMember member} but a {@link IStudioEnterprise company}, the\ncurrent customer must be a {@link IStudioEnterpriseEmployee employee}\nwith the company's top-level admin permission.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the affiliated account"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepository.id } of the target repository"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Get repository details",
        "description": "Get repository details.\n\nGet details of a specific {@link IStudioRepository repository}.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.id } of the target repository"
          }
        ],
        "responses": {
          "200": {
            "description": "repository details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepository"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{id}/shift": {
      "put": {
        "summary": "Transfer Repository Ownership",
        "description": "Transfer Repository Ownership.\n\n{@link IHubCustomer customer} transfers ownership of their\n{@link IStudioRepository repository} to another {@link IStudioAccount account}.\n\nNote that in order to transfer a repository, you must actually be the owner\nof the repository.\n\nYou cannot change ownership of a repository by simply being granted\n{@link IStudioRepositoryAccess permission} from the repository.\n\nAlso, if the target repository's owner account is a\n{@link IStudioEnterprise company}, not a {@link IHubMember member}, the current\ncustomer must be a {@link IStudioEnterpriseEmployee employee} with the company's\ntop-level administrator permission.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the owner account"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepository.id } of the target repository"
          }
        ],
        "requestBody": {
          "description": "Repository transfer information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepository.IShift"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{code}/get": {
      "get": {
        "summary": "Get repository details (by code)",
        "description": "Get repository details (by code).\n\nGet the details of a specific {@link IStudioRepository repository},\nusing the {@link IStudioAccount account} and the repository code (`code`).",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "code",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the target repository"
          }
        ],
        "responses": {
          "200": {
            "description": "repository details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepository"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/accesses": {
      "post": {
        "summary": "Grants new access rights to a repository",
        "description": "Grants new access rights to a repository.\n\nA {@link IHubMember} or {@link IStudioEnterpriseTeam} with administrator\nor higher level rights of a specific {@link IStudioRepository repository}\ngrants new {@link IStudioRepositoryAccess access rights} to a new member or\nenterprise team to the repository.\n\nHowever, the person who can grant access rights must be an administrator or\nowner of the repository.\n\nAnd in the case of an administrator, only lower level rights can be granted,\nand only the owner can grant \"Owner\" and \"Administrator\" level rights.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository"
          }
        ],
        "requestBody": {
          "description": "Repository access rights creation information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryAccess.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Details of the created repository access rights",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepositoryAccess"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "Retrieve summary information list of repository access rights",
        "description": "Retrieve summary information list of repository access rights.\n\nRetrieves summary information of all\n{@link IStudioRepositoryAccess.ISummary access rights} granted to a specific\n{@link IStudioRepository repository} {@link IPage paging}.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryAccess.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Summary information list of paged access rights",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioRepositoryAccess.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/accesses/{id}": {
      "put": {
        "summary": "Changes the repository access rights",
        "description": "Changes the repository access rights.\n\n{@link IHubMember} or {@link IStudioEnterpriseTeam}, who has administrator\nor higher level rights of a specific {@link IStudioRepository repository},\nchanges the existing {@link IStudioRepositoryAccess access rights} for\na specific member or corporate team.\n\nHowever, only the administrator or owner of the repository can change\nthe access rights.\n\nIn the case of an administrator, only lower-level rights can be changed,\nand only the owner can change \"Owner\" and \"Administrator\" level rights.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryAccess.id } of the target repository access rights"
          }
        ],
        "requestBody": {
          "description": "Repository access rights change information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryAccess.IUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Revokes repository access rights",
        "description": "Revokes repository access rights.\n\n{@link IHubMember} or {@link IStudioEnterpriseTeam}, who has administrator\nlevel rights or higher for a specific {@link IStudioRepository repository},\nrevoke the existing {@link IStudioRepositoryAccess access rights} for\na specific member or enterprise team.\n\nHowever, only the administrator or owner of the repository can revoke\naccess rights.\n\nIn the case of an administrator, only lower-level rights can be revoked,\nand only the owner can revoke \"Owner\" and \"Administrator\"-level rights.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryAccess.id } of the target repository access rights"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Get access permission details",
        "description": "Get access permission details.\n\nGet the details of a specific {@link IStudioRepositoryAccess access permission}.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryAccess.id } of the target access permission"
          }
        ],
        "responses": {
          "200": {
            "description": "Access permission details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepositoryAccess"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/accesses/{id}/approve": {
      "put": {
        "summary": "Accepting a repository access grant",
        "description": "Accepting a repository access grant.\n\nA manager or higher level position of a {@link IHubCustomer customer} or\n{@link IStudioEnterpriseTeam enterprise team} accepts\n{@link IStudioRepositoryAccess access} granted to a specific\n{@link IStudioRepository repository}.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryAccess.id } of the target access record"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepositoryAccess"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/buckets": {
      "patch": {
        "summary": "Retrieve the summary information list of buckets based on a specific commit",
        "description": "Retrieve the summary information list of buckets based on a specific commit.\n\nBased on a specific {@link IStudioRepositoryCommit commit}, the\n{@link IStudioRepositoryBucket.ISummary bucket summary information}\nis retrieved by {@link IPage paging}.\n\nAs a reference, {@link IStudioRepositoryBucket.IRequest page request information}\nis configured, and the target {@link IStudioRepositoryDirectory folder path}\ncan be specified.\n\nIn addition, you can retrieve all buckets based on the commit without\nbeing restricted by the folder path, but in this case, no folder information\nis retrieved.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          }
        ],
        "requestBody": {
          "description": "Page and search request information + folder path",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryBucket.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated bucket list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioRepositoryBucket.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/buckets/{id}": {
      "get": {
        "summary": "Retrieve detailed information about a bucket",
        "description": "Retrieve detailed information about a bucket.\n\nRetrieves detailed information about a {@link IStudioRepositoryBucket bucket}\nbased on a specific {@link IStudioRepositoryCommit commit}.\n\nIf the query target is a {@link IStudioRepositoryDirectory folder},\ninformation about all buckets belonging to that folder is retrieved. However,\nif there are many buckets, the amount of data itself may be huge. Therefore,\nit is recommended to avoid retrieving detailed information about a folder,\nand instead call the {@link index} function.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryBucket.id } of the target bucket"
          }
        ],
        "responses": {
          "200": {
            "description": "Bucket details",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/IStudioRepositoryDirectory"
                    },
                    {
                      "$ref": "#/components/schemas/IStudioRepositoryFile"
                    },
                    {
                      "$ref": "#/components/schemas/IStudioWorkflow"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "directory": "#/components/schemas/IStudioRepositoryDirectory",
                      "file": "#/components/schemas/IStudioRepositoryFile",
                      "workflow": "#/components/schemas/IStudioWorkflow"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/buckets/get": {
      "patch": {
        "summary": "Bucket details query by path",
        "description": "Bucket details query by path.\n\nRetrieves details of {@link IStudioRepositoryBucket bucket} based on a\nspecific {@link IStudioRepositoryCommit commit}, through its path,\n{@link IStudioRepositoryBucket.path}.\n\nIf the query target is {@link IStudioRepositoryDirectory folder}, information\non all buckets belonging to that folder is retrieved, but the amount of data\nitself may be huge because there are many buckets. Therefore, it is recommended\nto avoid retrieving folder details, and instead call the {@link index} function.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          }
        ],
        "requestBody": {
          "description": "Path of the target bucket (wrapped)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryBucket.IPath"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Details of the bucket",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/IStudioRepositoryDirectory"
                    },
                    {
                      "$ref": "#/components/schemas/IStudioRepositoryFile"
                    },
                    {
                      "$ref": "#/components/schemas/IStudioWorkflow"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "directory": "#/components/schemas/IStudioRepositoryDirectory",
                      "file": "#/components/schemas/IStudioRepositoryFile",
                      "workflow": "#/components/schemas/IStudioWorkflow"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/commits": {
      "post": {
        "summary": "Issue a new commit",
        "description": "Issue a new commit.\n\n{@link IHubCustomer customer} edits {@link IStudioRepositoryBucket bucket files}\nfrom {@link IStudioRepository repository}, and issues\n{@link IStudioRepositoryCommit commit}.\n\nNote that in order to commit, the customer must be granted\n{@link IStudioRepositoryAccess access} of at least \"member\" from the repository,\nand issuing a commit does not mean that the commit is final.\n\nA commit can continue to {@link update modify}\n{@link IStudioRepositoryBucket buckets}, and even cancel and\n{@link erase delete} the commit, if the {@link IStudioRepositoryCommit.archived_at}\nproperty, which indicates the time of its record fixation, is `null`.\n\nThe commit is finalized only by calling the {@link archive} method.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account you are affiliating"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the target repository"
          }
        ],
        "requestBody": {
          "description": "Commit issue information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryCommit.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Details of the generated commit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepositoryCommit"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "Retrieve the summary information list of commits in the repository",
        "description": "Retrieve the summary information list of commits in the repository.\n\n{@link IStudioRepository repository}\n{@link IStudioRepositoryCommit.ISummary commit summary information} is\nretrieved by {@link IPage paging}.\n\nNote that {@link IHubCustomer customer} is currently modifying, so in the case of\n{@link IStudioRepositoryCommit.archived_at commits that have not yet been recorded},\nonly the customer who created the commit can view it.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryCommit.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paging list of commits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioRepositoryCommit.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/commits/{id}": {
      "put": {
        "summary": "Modify an existing commit",
        "description": "Modify an existing commit.\n\nModify the {@link IStudioRepositoryCommit commit} already published by\n{@link IHubCustomer customer}.\n\nOf course, the target commit must have {@link IStudioRepositoryCommit.archived_at}\nproperty set to `null`. In other words, it must be a commit that has not been\nfinalized.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          }
        ],
        "requestBody": {
          "description": "Commit modification information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryCommit.IUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete commit",
        "description": "Delete commit.\n\nCancel and delete the {@link IStudioRepositoryCommit commit} that was being\ncomposed.\n\nOf course, the target commit must still have the\n{@link IStudioRepositoryCommit.archived_at} property as `null`. In other words,\nit must be a commit that has not been finalized.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Get commit details",
        "description": "Get commit details.\n\nGets details of a specific {@link IStudioRepositoryCommit commit} in the\n{@link IStudioRepository repository}.\n\nNote that {@link IHubCustomer customer} is currently modifying the\n{@link IStudioRepositoryCommit.archived_at commit that has not been recorded yet},\nonly the customer who created the commit can view it.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          }
        ],
        "responses": {
          "200": {
            "description": "commit details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepositoryCommit"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/commits/{id}/archive": {
      "post": {
        "summary": "Record a commit",
        "description": "Record a commit.\n\nBy recording all changes of {@link IStudioRepositoryCommit commit}, complete\nby recording them to {@link IStudioRepository repository}.\n\nAfter recording the commit, {@link update modification} and\n{@link erase deletion} are not possible at all.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudio } of the target commit"
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepositoryCommit.IArchivedCommit"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/commits/{id}/fork": {
      "post": {
        "summary": "Clone a repository",
        "description": "Clone a repository.\n\nClone/create a new repository from a specific commit.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account you are affiliating with"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the target repository"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          }
        ],
        "requestBody": {
          "description": "New repository creation information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepository.ICreateFork"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "New repository information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepository"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/releases": {
      "post": {
        "summary": "Deploy a program",
        "description": "Deploy a program.\n\nDeploy a program from a specific {@link IStudioRepositoryCommit commit} of\nthis {@link IStudioRepository repository}.\n\n{@link IHubCustomer Customer} can build and deploy a single program by\nspecifying target functions from each {@link IStudioWorkflow workflow document}\nand {@link IStudioRepositoryFile script file} that make up the repository\n(commit). In addition, a deployment copy can be generated and documentation\ncan be written about it.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the target repository"
          }
        ],
        "requestBody": {
          "description": "Deployment information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryRelease.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Details of the generated deployment program",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepositoryRelease"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "description": "Retrieve the summary information list of distribution programs in the\nrepository.\n\nRetrieves all\n{@link IStudioRepositoryRelease distribution program summary information} in\na specific {@link IStudioRepository repository} by {@link IPage paging}.\n\nThe distribution program summary information includes the version, date,\nand document information of the distribution program.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryRelease.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paginated distribution programs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioRepositoryRelease.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/releases/{id}": {
      "put": {
        "summary": "Modify the documentation of the distribution program",
        "description": "Modify the documentation of the distribution program.\n\nModify the documentation and search tags of the\n{@link IStudioRepositoryRelease distributed program}.\n\nIt is not possible to modify the {@link IStudioRepositoryCommit commit} of\nthe existing distribution program, or to change the\n{@link IStudioWorkflow workflow document} to be `exported` or the\n{@link IStudioRepositoryFile user-defined function} through this function. If you\nwant to do that, it is recommended to {@link erase} the current distribution\nprogram and {@link create a new distribution}.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the attributed account"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the target repository"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Document and search tag information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryRelease.IUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Details of the modified distribution program",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete the distribution program",
        "description": "Delete the distribution program.\n\nDelete the previously distributed program {@link IStudioRepositoryRelease}.\n\nHowever, {@link IStudioWorkflow workflow documents} or\n{@link IStudioRepositoryFile script files} of another\n{@link IStudioRepository repository} that is already using the distribution\nprogram by `importing` it will not be affected.\n\nThis is the same for programs already sold from the market.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the target repository"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryRelease.id } of the target distribution program"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Get details of a distribution program in a repository",
        "description": "Get details of a distribution program in a repository.\n\nGets details of a specific {@link IStudioRepositoryRelease distribution program}\nin {@link IStudioRepository repository}.\n\nThe distribution program details include all\n{@link IStudioRepositoryReleaseNode function nodes} that are `exported` from\nthe program, along with their metatype information.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryRelease.id } of the target distribution program"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the distribution program",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepositoryRelease"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/releases/{version}/get": {
      "get": {
        "summary": "Retrieve details of a distribution program in a repository by version",
        "description": "Retrieve details of a distribution program in a repository by version.\n\nRetrieve details of a specific\n{@link IStudioRepositoryRelease distribution program} in the\n{@link IStudioRepository repository}, by the version name of the release.\n\nThe distribution program details include all\n{@link IStudioRepositoryReleaseNode function nodes} that are `exported` by\nthe program, and their meta type information.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "version",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepositoryRelease.version } of the target distribution program"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the distribution program",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepositoryRelease"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/releases/{id}/swagger": {
      "get": {
        "summary": "Look up the distribution program as a Swagger document",
        "description": "Look up the distribution program as a Swagger document.\n\nThis studio system also provides each\n{@link IStudioRepositoryRepositoryReleaseNode node function} of the\n{@link IStudioRepositoryRelease distributed program} in the\n{@link IStudioRepositoryRepository}, in the form of individual Rest APIs.\nThis function is a function that can view the specifications of these\nRest APIs in the Swagger document.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryRelease.id } of the target distribution program"
          }
        ],
        "responses": {
          "200": {
            "description": "Swagger document",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISwagger"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{id}/compile": {
      "post": {
        "summary": "Temporarily compile workflow documents",
        "description": "Temporarily compile workflow documents.\n\nTemporarily compile only the current {@link IStudioWorkflow workflow} document.\n\nThis compilation also occurs when building the\n{@link IStudioWorkflowRepositoryRelease distribution program} from the\noriginal repository. This API is separate from that, and performs partial\ncompilation only for individual workflow documents and some script files\n`imported` from them.\n\nIts main purpose is to test the operation of individual workflows, etc.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the target workflow"
          }
        ],
        "responses": {
          "201": {
            "description": "URL of the compiled program",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{id}/execute": {
      "post": {
        "summary": "Execute a workflow function",
        "description": "Execute a workflow function.\n\nExecute a workflow function and wait for its return value to return.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the target workflow"
          }
        ],
        "requestBody": {
          "description": "Parameter input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioWorkflow.IExecute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Return value as the result of executing the workflow function",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/IExecutionResult.IFailure"
                    },
                    {
                      "$ref": "#/components/schemas/IExecutionResult.ISuccessany"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{id}/proceed": {
      "post": {
        "summary": "Run a workflow function",
        "description": "Run a workflow function.\n\nExecute a workflow function, but do not wait for its return value.\nInstead, return {@link IStudioWorkflowHistory.ISummary} corresponding to\nthe execution result history.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the target workflow"
          }
        ],
        "requestBody": {
          "description": "Parameter input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioWorkflow.IExecute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Return value as the result of executing the workflow function",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioWorkflowHistory.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{id}/simulate": {
      "post": {
        "summary": "Compile simulation",
        "description": "Compile simulation.\n\nSimulate the process by checking the TypeScript files generated during\ncompilation without compiling the workflow document directly.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the target workflow"
          }
        ],
        "requestBody": {
          "description": "Whether to debug",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioWorkflow.ISimulate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Dictionary of TypeScript files",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Recordstringstring"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{workflowId}/histories": {
      "patch": {
        "summary": "Batch query of workflow execution history summary information",
        "description": "Batch query of workflow execution history summary information.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          },
          {
            "name": "workflowId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the target workflow"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioWorkflowHistory.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of workflow execution history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioWorkflowHistory.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{workflowId}/histories/details": {
      "patch": {
        "summary": "Bulk query of workflow execution history details",
        "description": "Bulk query of workflow execution history details.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          },
          {
            "name": "workflowId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the target workflow"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioWorkflowHistory.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of workflow execution history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioWorkflowHistory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{workflowId}/histories/{id}": {
      "get": {
        "summary": "View workflow execution history details",
        "description": "View workflow execution history details.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          },
          {
            "name": "workflowId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the target workflow"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflowHistory.id } of the target workflow execution history"
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow execution details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioWorkflowHistory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Stop workflow execution",
        "description": "Stop workflow execution.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          },
          {
            "name": "workflowId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the target workflow"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflowHistory.id } of the target workflow execution history"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{workflowId}/sandboxes": {
      "put": {
        "summary": "Emplace a secret sandbox",
        "description": "Emplace a secret sandbox.\n\nEmplace a secret sandbox for prerequisite execution\nfrom the frontend application of the editor side.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Belonged account's {@link IStudioAccount.code }"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Belonged repository's {@link IStudioRepository.code }"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " Target commit's {@link IStudioRepositoryCommit.id }"
          },
          {
            "name": "workflowId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target workflow's {@link IStudioWorkflow.id }"
          }
        ],
        "requestBody": {
          "description": "Request info containing target secret key and value",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioAccountSecretValueSandbox.IEmplace"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Emplaced sandbox record",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioAccountSecretValueSandbox"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{workflowId}/sandboxes/{id}": {
      "delete": {
        "summary": "Erase a sandbox record",
        "description": "Erase a sandbox record.\n\nErase a sandbox record emplaced from the target workflow.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Belonged account's {@link IStudioAccount.code }"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Belonged repository's {@link IStudioRepository.code }"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " Target commit's {@link IStudioRepositoryCommit.id }"
          },
          {
            "name": "workflowId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target workflow's {@link IStudioWorkflow.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target sandbox' {@link IStudioSecretValueSandbox.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{workflowId}/sandboxes/clear": {
      "delete": {
        "summary": "Clear every sandboxes",
        "description": "Clear every sandboxes.\n\nClear every sandbox records emplaced from the target workflow.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Belonged account's {@link IStudioAccount.code }"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Belonged repository's {@link IStudioRepository.code }"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " Target commit's {@link IStudioRepositoryCommit.id }"
          },
          {
            "name": "workflowId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target workflow's {@link IStudioWorkflow.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/commits/workflows/standalone": {
      "post": {
        "summary": "Create a workflow standalone",
        "description": "Create a workflow standalone.\n\nAn API function that creates a new {@link IStudioWorkflow workflow} file\nfrom a specific {@link IStudioRepository repository} and publishes it to a\n{@link IStudioRepositoryCommit commit}.\n\nSince it creates only one workflow file when creating a commit, the returned\nobject type, {@link IStudioWorkflowStandalone}, contains the information of\nthe commit of the workflow at the same time.\n\nNote that {@link IStudioRepsitoryCommit.archived_at archive} of the created\ncommit must be performed by going to the original commit API. In other words,\nthe original {@link HubApi.functional.studio.customers.repositories.commits.archive}\nfunction must be called, not this group.",
        "deprecated": true,
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          }
        ],
        "requestBody": {
          "description": "Workflow and commit creation information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioWorkflowStandalone.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Generated workflow + commit information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioWorkflowStandalone"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "summary": "Modify Workflow",
        "description": "Modify Workflow.\n\nAPI function to modify individual {@link IStudioWorkflow workflow} files from\na specific {@link IStudioRepository repository} of a\n{@link IStudioRepositoryCommit.archived_at unarchived commit}.\n\nNote that the last commit of the target repository must not be archived yet,\notherwise an error will occur. Also, the\n{@link IStudioRepsitoryCommit.archived_at archive} of the modified commit must be\n\ndone by going to the original commit API. That is, the original\n{@link HubApi.functional.studio.customers.repositories.commits.archive} function\nmust be called, not this group.",
        "deprecated": true,
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          }
        ],
        "requestBody": {
          "description": "Commit modification information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioWorkflowStandalone.IUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/commits/workflows/standalone/accumulate": {
      "post": {
        "summary": "Accumulate Workflow",
        "description": "Accumulate Workflow.\n\nAn API function that exclusively modifies an existing\n{@link IStudioWorkflow workflow} file from a specific\n{@link IStudioRepository repository} and issues a new\n{@link IStudioRepositoryCommit commit}.\n\nSince it modifies only one workflow document while issuing a commit, the\nreturned object type, {@link IStudioWorkflowStandalone}, contains the\ninformation of the commit of the corresponding workflow at the same time.\n\nNote that {@link IStudioRepsitoryCommit.archived_at archive} of the generated\ncommit must be performed by going to the original commit API. In other words, the\noriginal {@link HubApi.functional.studio.customers.repositories.commits.archive}\nfunction must be called, not this group.",
        "deprecated": true,
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          }
        ],
        "requestBody": {
          "description": "Commit creation + workflow modification information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioWorkflowStandalone.IAccumulate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Modified workflow + generated commit information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioWorkflowStandalone"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/commits/workflows/standalone/{workflowId}": {
      "get": {
        "summary": "Retrieve workflows alone",
        "description": "Retrieve workflows alone.\n\nAn API function that retrieves the {@link IStudioWorkflow workflow} file\nfrom a specific {@link IStudioRepository repository}, the most recent\n{@link IStudioRepositoryCommit commit}.",
        "deprecated": true,
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "workflowId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the target workflow"
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow + commit information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioWorkflowStandalone"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/commits/workflows/standalone/get": {
      "patch": {
        "summary": "Get workflows by get",
        "description": "Get workflows by get.\n\nAPI function to get {@link IStudioWorkflow workflow} files from a specific\n{@link IStudioRepository repository}, the most recent\n{@link IStudioRepositoryCommit commit} based on the path.",
        "deprecated": true,
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository"
          }
        ],
        "requestBody": {
          "description": "Workflow path",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioWorkflowStandalone.IPath"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Workflow + commit information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioWorkflowStandalone"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{workflowId}/scripts": {
      "patch": {
        "summary": "Retrieve the script connector list",
        "description": "Retrieve the script connector list.\n\nFrom the {@link IStudioWorkflow workflow document} and\n{@link IStudioRepository repository} and {@link IStudioRepositoryCommit commit},\nall available {@link IStudioWorkflowScriptConnector script connectors} are\nretrieved. The returned script connectors are {@link IPage paging} processed and\nfiltered according to the search conditions.\n\nNote that a workflow document is also a type of function, so a workflow document\nis also a type of (script) connector function from the perspective of another\nworkflow document. Therefore, if you want to exclude the current workflow document\nfrom the returned script connectors, you can filter them using\n{@link IStudioWorkflowScriptConnector.IRequest.workflow_id}.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the commit to which it belongs"
          },
          {
            "name": "workflowId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the workflow to which it belongs"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioWorkflowScriptConnector.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paged script connectors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioWorkflowScriptConnector"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{workflowId}/scripts/get": {
      "patch": {
        "summary": "Lookup script connectors individually",
        "description": "Lookup script connectors individually.\n\nFrom the {@link IStudioWorkflow workflow document} and\n{@link IStudioRepository repository} and {@link IStudioRepositoryCommit commit},\nspecify the target script function (or other workflow document) individually,\nand retrieve its {@link IStudioWorkflowScriptConnector script connector}\ninformation.\n\nNote that other workflow documents in the same repository can also be imported\nas script connectors because workflow documents are also a type of function and\ncan be `imported`.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the commit to which it belongs"
          },
          {
            "name": "workflowId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the workflow to which it belongs"
          }
        ],
        "requestBody": {
          "description": "Identifier of the target script function or workflow document",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioWorkflowScriptConnector.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Script connector information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioWorkflowScriptConnector"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{workflowId}/swaggers": {
      "patch": {
        "summary": "Bulk query of Swagger documents registered in the workflow document",
        "description": "Bulk query of Swagger documents registered in the workflow document.\n\nBatch query all Swagger documents registered in\n{@link IStudioWorkflow workflow document}. The returned Swagger document is\nprocessed with {@link IPage paging}, and is wrapped in the form of\n{@link IStudioWorkflowSwagger} for binding with\n{@link IStudioWorkflowSwaggerConnector connector}.\n\nNote that this information is also recorded in the workflow main document\n({@link IStudioWorkflowData.swaggers}), so when querying a workflow document,\nyou do not need to call this API directly. Use it only when you want to query\nthe Swagger documents used there, separately from other workflow documents.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the commit to which it belongs"
          },
          {
            "name": "workflowId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the workflow to which it belongs"
          }
        ],
        "responses": {
          "200": {
            "description": "a paged list of Swagger connectors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioWorkflowSwagger"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "summary": "Convert Swagger document to connector structure",
        "description": "Convert Swagger document to connector structure.\n\nConvert {@link ISwagger Swagger document} to a connector structure that can\nbe used in the current {@link IStudioWorkflow workflow document}.\n\nThe returned object {@link IStudioWorkflowSwagger} contains the original\nSwagger information, and a list of\n{@link IStudioWorkflowSwaggerConnector connectors}.\n\nEach connector matches the original Swagger's {@link ISwaggerOperation} based\non the endpoint's path and method.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the commit to which it belongs"
          },
          {
            "name": "workflowId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the workflow to which it belongs"
          }
        ],
        "requestBody": {
          "description": "Information needed to create a Swagger connector, a combination of Swagger data + identifier UUID",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/IStudioWorkflowSwagger.IGoodCreate"
                  },
                  {
                    "$ref": "#/components/schemas/IStudioWorkflowSwagger.IManualCreate"
                  },
                  {
                    "$ref": "#/components/schemas/IStudioWorkflowSwagger.ILinkCreate"
                  }
                ],
                "discriminator": {
                  "propertyName": "source",
                  "mapping": {
                    "good": "#/components/schemas/IStudioWorkflowSwagger.IGoodCreate",
                    "manual": "#/components/schemas/IStudioWorkflowSwagger.IManualCreate",
                    "link": "#/components/schemas/IStudioWorkflowSwagger.ILinkCreate"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Swagger and connector information",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/IStudioWorkflowSwagger.ILinkSwagger"
                    },
                    {
                      "$ref": "#/components/schemas/IStudioWorkflowSwagger.IManualSwagger"
                    },
                    {
                      "$ref": "#/components/schemas/IStudioWorkflowSwagger.IGoodSwagger"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "source",
                    "mapping": {
                      "link": "#/components/schemas/IStudioWorkflowSwagger.ILinkSwagger",
                      "manual": "#/components/schemas/IStudioWorkflowSwagger.IManualSwagger",
                      "good": "#/components/schemas/IStudioWorkflowSwagger.IGoodSwagger"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{workflowId}/temporary": {
      "patch": {
        "summary": "Retrieve the list of temporary storage records",
        "description": "Retrieve the list of temporary storage records.\n\nRetrieves the list of {@link IStudioWorkflowTemporary.ISummary}, which is\nthe summary information of the temporary storage records of the target\n{@link IStudioWorkflow workflow document}. The returned information is\nprocessed by {@link IPage paging} and filtered according to the search conditions.\n\nNote that the entity that temporarily stores the workflow document is the\nfront application, and each temporary storage record is deleted in bulk at the\nmoment when the {@link IStudioRepositoryCommit.archived_at commit is confirmed}.\nAlso, for the attributed commit and workflow document, if the number of temporary\nstorage records exceeds N, they are automatically deleted.\n\nTherefore, even if the previously created temporary storage records are not\nfound in the list, this may not be a normal bug but a specification, so please\nnote this.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the commit to which it belongs"
          },
          {
            "name": "workflowId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the workflow to which it belongs"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioWorkflowTemporary.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paged temporary records",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioWorkflowTemporary.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "summary": "Create a temporary storage record for a workflow document",
        "description": "Create a temporary storage record for a workflow document.\n\nCurrently, {@link IStudioRepositoryCommit.archived_at commit being edited}\nand {@link IStudioWorkflow workflow document} create a new\n{@link IStudioWorkflowTemporary temporary storage record}.\n\nThis API is executed by the front application and should be called by the\nsystem's scheduler, not a human.\n\nNote that if the attributable commit has already been recorded, temporary\nstorage cannot be performed any more, and a `422 unprocessable entity` error\noccurs.\n\nAnd along with the recording of the attributable commit, all temporary storage\nrecords for the corresponding commit are deleted in bulk.\n\nTherefore, even if the creation of a temporary storage record fails or the\npreviously created temporary storage record is no longer queried, this may be\na part of the specification, not a bug, so please keep this in mind.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the commit to which it belongs"
          },
          {
            "name": "workflowId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the workflow to which it belongs"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioWorkflowTemporary.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Summary information about the generated temporary storage record",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioWorkflowTemporary.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{workflowId}/temporary/{id}": {
      "get": {
        "summary": "Retrieve temporary storage records",
        "description": "Retrieve temporary storage records.\n\nRetrieve the temporary storage record {@link IStudioWorkflowTemporary} of\nthe workflow document.\n\nAnd according to the query information {@link IStudioWorkflowTemporary.IQuery},\nthe retrieved records are deleted at the same time.\n\nFor reference, the entity that temporarily stores the workflow document is the front application, and each temporary\nstorage record is deleted in bulk at the moment when the associated {@link IStudioRepositoryCommit.archived_at commit is confirmed}. And for the associated commit and workflow document, even if the number of temporary\nstorage records exceeds N, they are automatically deleted.\n\nTherefore, even if the previously created temporary storage record is not\nretrieved in this API, this may not be a normal bug but a specification, so\nplease note this.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the commit to which it belongs"
          },
          {
            "name": "workflowId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the workflow to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflowTemporary.id } of the target temporary record"
          },
          {
            "name": "erase",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "required": false,
            "title": "Whether to delete",
            "description": "Whether to delete.\n\nWhether to view the temporary storage record and delete the record."
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed information about the target temporary record",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioWorkflowTemporary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete temporary storage records",
        "description": "Delete temporary storage records.\n\nDelete the target {@link IStudioWorkflowTemporary temporary storage record}.\n\nHowever, temporary storage is only possible when the\n{@link IStudioRepositoryCommit commit} has not been\n{@link IStudioRepositoryCommit.archived_at recorded}. And the moment the\ncommitted commit is recorded, it is deleted in bulk.\n\nIn addition, it is possible to {@link at individually query} the temporary\nstorage record and delete it at the moment of querying.\n\nTherefore, even if the temporary storage record that was created has already\nbeen deleted even though this API function has not been called, this is not\na bug but a specification. Please note this.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the commit to which it belongs"
          },
          {
            "name": "workflowId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the workflow to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflowTemporary.id } of the target temporary record"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{workflowId}/temporary/clear": {
      "delete": {
        "summary": "Delete temporary storage records in bulk",
        "description": "Delete temporary storage records in bulk.\n\nDelete {@link IStudioWorkflowTemporary temporary storage records} for the\ntarget {@link IStudioWorkflow workflow} in bulk.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the commit to which it belongs"
          },
          {
            "name": "workflowId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the workflow to which it belongs"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/releases/{releaseId}/nodes/{id}/execute": {
      "post": {
        "summary": "Run a release node",
        "description": "Run a release node.\n\nRun a release node and wait for its return value.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the bound account"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the bound repository"
          },
          {
            "name": "releaseId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepositoryRelease.id } of the bound deployment program"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryReleaseNode.id } of the target function node"
          }
        ],
        "requestBody": {
          "description": "Parameter input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryReleaseNode.IExecute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Return value as the result of executing the target function node",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/IExecutionResult.IFailure"
                    },
                    {
                      "$ref": "#/components/schemas/IExecutionResult.ISuccessany"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/releases/{releaseId}/nodes/{id}/proceed": {
      "post": {
        "summary": "Run a release node",
        "description": "Run a release node.\n\nRun the release node, but do not wait for its return value, but simply\nreturn {@link IStudioRepositoryReleaseNodeHistory.ISummary} corresponding\nto the execution result history.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the bound account"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the bound repository"
          },
          {
            "name": "releaseId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepositoryRelease.id } of the bound release program"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryReleaseNode.id } of the target function node"
          }
        ],
        "requestBody": {
          "description": "Parameter input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryReleaseNode.IExecute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Return value as the execution result of the target function node",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepositoryReleaseNodeHistory.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/releases/{releaseId}/nodes/{nodeId}/histories/{id}": {
      "delete": {
        "summary": "Stop the release node execution",
        "description": "Stop the release node execution.\n\nTODO - Currently it doesn't actually stop, it just saves the state.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account it belongs to"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository it belongs to"
          },
          {
            "name": "releaseId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryRelease.id } of the target release"
          },
          {
            "name": "nodeId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryReleaseNode.id } of the target node"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryReleaseNodeHistory.id } of the target release node execution history"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "View details of release node execution history",
        "description": "View details of release node execution history.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "releaseId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryRelease.id } of the target release"
          },
          {
            "name": "nodeId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryReleaseNode.id } of the target node"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryReleaseNodeHistory.id } of the target release node execution history"
          }
        ],
        "responses": {
          "200": {
            "description": "Release node execution details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepositoryReleaseNodeHistory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/releases/{releaseId}/nodes/{nodeId}/histories": {
      "patch": {
        "summary": "Batch query of summary information of release node execution history",
        "description": "Batch query of summary information of release node execution history.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "releaseId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryRelease.id } of the target release"
          },
          {
            "name": "nodeId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryReleaseNode.id } of the target node"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryReleaseNodeHistory.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of release node history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioRepositoryReleaseNodeHistory.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/repositories/{accountCode}/{repositoryCode}/releases/{releaseId}/nodes/{nodeId}/histories/details": {
      "patch": {
        "summary": "Batch query of release node execution history details",
        "description": "Batch query of release node execution history details.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "releaseId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryRelease.id } of the target release"
          },
          {
            "name": "nodeId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryReleaseNode.id } of the target node"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryReleaseNodeHistory.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of release node history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioRepositoryReleaseNodeHistory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/shelves/commits/workflows": {
      "patch": {
        "description": "Retrieve a list of summary information for workflow documents on the\nworkspace shelves.\n\nReturns a list of {@link IStudioShelfCommitWorkflow.ISummary} containing summary\ninformation of workflow documents and {@link IStudioRepositoryCommit commits} and\n{@link IStudioRepository repositories} that {@link IPage customers} have placed\non the workspace shelves.\n\nThe returned objects indicate that the {@link IStudioWorkflow workflow document}\nhas never been {@link IStudioRepositoryRelease deployed}. If a particular workflow\ndocument has been deployed even once, it is classified as a\n{@link IStudioShelfReleaseWorkflow}, which means a bookshelf in the distribution\nso the {@link HubApi.functional.customers.shelves.releases.workflows.index}\nfunction should be used instead.",
        "tags": [
          "Shelves"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Page and search request information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioShelfCommitWorkflow.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Summary information about the workflow documents on the workspace bookshelf.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioShelfCommitWorkflow.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/shelves/commits/workflows/details": {
      "patch": {
        "summary": "Retrieve the list of workflow documents in the workshop bookshelf",
        "description": "Retrieve the list of workflow documents in the workshop bookshelf.\n\nReturns a list of {@link IStudioShelfCommitWorkflow} containing the workflow\ndocuments and details of the {@link IStudioRepositoryCommit commit} and\n{@link IStudioRepository repository} that {@link IHubCustomer customer} has\nplaced in the workshop bookshelf, and {@link IPage paging} them.\n\nThe returned objects indicate that the {@link IStudioWorkflow workflow document}\nhas never been {@link IStudioRepositoryRelease deployed}. If a particular workflow\ndocument has been deployed even once, it is classified as a\n{@link IStudioShelfReleaseWorkflow}, which means a bookshelf in the distribution,\nso the {@link HubApi.functional.customers.shelves.releases.workflows.details}\nfunction should be used instead.",
        "tags": [
          "Shelves"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Page and search request information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioShelfCommitWorkflow.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Summary information about the workflow documents on the workspace bookshelf.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioShelfCommitWorkflow"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/shelves/commits/workflows/{id}": {
      "get": {
        "description": "Retrieves the details of a workflow document that is placed on a bookshelf\nin a workshop.\n\nReturns a {@link IStudioShelfCommitWorkflow} object that contains the details\nof the workflow document that {@link IHubCustomer customer} placed on the\nbookshelf in the workshop and the {@link IStudioRepositoryCommit commit}\nand {@link IStudioRepository repository}.\n\nThe returned object means that the {@link IStudioWorkflow workflow document}\nhas never been {@link IStudioRepositoryRelease deployed}. If a particular\nworkflow document has been deployed even once, it is classified as a\n{@link IStudioShelfReleaseWorkflow}, which means a bookshelf in the distribution,\nso the {@link HubApi.functional.customers.shelves.releases.workflows.at} function\nshould be used instead.",
        "tags": [
          "Shelves"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "title": "{@link IStudioShelfCommitWorkflow.id } of the target record",
            "description": " {@link IStudioShelfCommitWorkflow.id } of the target record."
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the workflow document on the workspace bookshelf.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioShelfCommitWorkflow"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/shelves/releases/workflows": {
      "patch": {
        "description": "Retrieve a list of summary information for workflow documents placed\non the distribution shelf.\n\nReturns a list of {@link IStudioShelfReleaseWorkflow.ISummary} containing\nsummary information of workflow documents placed on the distribution shelf by\n{@link IHubCustomer customer} and {@link IStudioRepositoryRelease distribution}\nand {@link IStudioRepository repository}, by {@link IPage paging}.\n\nThe returned objects indicate that the {@link IStudioWorkflow workflow document}\nhas been {@link IStudioRepositoryRelease deployed} at least once. If a particular\nworkflow document has never been deployed, it is classified as\n{@link IStudioShelfCommitWorkflow}, which means a workspace shelf, and the\n{@link HubApi.functional.customers.shelves.commits.workflows.index} function\nshould be used instead.",
        "tags": [
          "Shelves"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Page and search request information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioShelfReleaseWorkflow.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Summary information about the workflow documents on the distribution shelf.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioShelfReleaseWorkflow.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/shelves/releases/workflows/{id}": {
      "get": {
        "summary": "Retrieve details of workflow documents placed on the distribution shelf",
        "description": "Retrieve details of workflow documents placed on the distribution shelf.\n\nReturns a {@link IStudioShelfReleaseWorkflow} object containing details of\nworkflow documents placed on the distribution shelf by\n{@link IHubCustomer customer} and the associated\n{@link IStudioRepositoryRelease distribution} and\n{@link IStudioRepository repository}.\n\nThe returned object means that the associated\n{@link IStudioWorkflow workflow document} has been\n{@link IStudioRepositoryRelease deployed} at least once. If a particular\nworkflow document has never been deployed, it is classified as a\n{@link IStudioShelfCommitWorkflow}, which means a workspace shelf, so the\n{@link HubApi.functional.customers.shelves.commits.workflows.at} function should\nbe used instead.",
        "tags": [
          "Shelves"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "title": "{@link IStudioShelfCommitWorkflow.id } of the target record",
            "description": " {@link IStudioShelfCommitWorkflow.id } of the target record."
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the workflow document on the distribution shelf.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioShelfReleaseWorkflow"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/customers/shelves/releases/workflows/categories/{purpose}": {
      "get": {
        "summary": "Get the number of workflows distributed by category",
        "description": "Get the number of workflows distributed by category.",
        "tags": [
          "Shelves"
        ],
        "parameters": [
          {
            "name": "purpose",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "app"
                },
                {
                  "const": "agent"
                }
              ]
            },
            "required": true,
            "description": " Purpose of the distribution"
          }
        ],
        "responses": {
          "200": {
            "description": "The number of workflows released by category.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioShelfReleaseWorkflow.Category"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/accounts": {
      "patch": {
        "summary": "Retrieve the list of account summary information",
        "description": "Retrieve the list of account summary information.\n\nAll {@link IStudioAccount.IInvert account summary information} existing\nin this studio system {@link IPage paging processing} is retrieved.",
        "tags": [
          "Account"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioAccount.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paging accounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioAccount.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/accounts/{id}": {
      "get": {
        "summary": "Retrieve account details with {@link IStudioAccount.id}",
        "description": "Retrieve account details with {@link IStudioAccount.id}.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioAccount.id } of target account"
          }
        ],
        "responses": {
          "200": {
            "description": "account information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioAccount"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/accounts/{code}/get": {
      "get": {
        "summary": "Retrieve account details with {@link IStudioAccount.code}",
        "description": "Retrieve account details with {@link IStudioAccount.code}.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of target account"
          }
        ],
        "responses": {
          "200": {
            "description": "account information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioAccount"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/accounts/{accountCode}/schedules": {
      "patch": {
        "summary": "View the schedule list",
        "description": "View the schedule list.\n\nAll {@link IStudioAccountSchedule schedule summary information} set for\n{@link IStudioAccount studio account} are retrieved by {@link IPage paging}.\n\nNote that the schedules set for the studio account can only be viewed by\n{@link IStudioEnterpriseEmployee employees} who are the owner of the account\nor have a manager or higher position in the {@link IStudioEnterprise company}\nthat owns the account.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioAccountSchedule.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of summary information for schedules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioAccountSchedule.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/accounts/{accountCode}/schedules/{id}": {
      "get": {
        "summary": "View schedule details",
        "description": "View schedule details.\n\nRetrieves details of {@link IStudioAccountSchedule schedule} set in\n{@link IStudioAccount studio account}. The returned details include variable\nvalues that are not in {@link IStudioAccountSchedule.ISummary} and detailed\ndescriptions.\n\nNote that schedules set in a studio account can only be viewed by\n{@link IStudioEnterpriseEmployee employees} who are the owners of the account\nor have a manager or higher position in the {@link IStudioEnterprise company}\nthat owns the account.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.id } of the target schedule"
          }
        ],
        "responses": {
          "200": {
            "description": "Schedule details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioAccountSchedule"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/accounts/{accountCode}/secrets": {
      "patch": {
        "summary": "Retrieves a list of secret variable sets",
        "description": "Retrieves a list of secret variable sets.\n\nAll {@link IStudioAccountSecret secret variable set summary information}\nset in {@link IStudioAccount studio account} are retrieved by\n{@link IPage paging}.\n\nNote that the secret variable sets set in a studio account can only be\nretrieved by {@link IStudioEnterpriseEmployee employees} who are the owners\nof the account or have a manager or higher position in the\n{@link IStudioEnterprise company} that owns the account.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioAccountSecret.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Summary information list of secret variable sets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioAccountSecret.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/accounts/{accountCode}/secrets/{id}": {
      "get": {
        "summary": "Gets details of a secret variable set",
        "description": "Gets details of a secret variable set.\n\nGets details of the {@link IStudioAccountSecret secret variable set}\nset to {@link IStudioAccount studio account}. The returned details include\na list of variable values that are not in {@link IStudioAccountSecret.ISummary}\nand a detailed description.\n\nNote that the secret variable set set to a studio account can only be checked\nby the owner of the account or an {@link IStudioEnterpriseEmployee employee}\nwho has a manager or higher position in the {@link IStudioEnterprise company}\nthat owns the account.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.id } of the target secret variable set"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret variable details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioAccountSecret"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/accounts/{accountCode}/secrets/{key}/get": {
      "get": {
        "summary": "Secret variable set details by key",
        "description": "Secret variable set details by key.\n\nRetrieves the details of the {@link IStudioAccountSecret secret variable}\nset in the {@link IStudioAccount studio account}, as its key value\n(variable name). The returned details include variable values and detailed\ndescriptions that are not in {@link IStudioAccountSecret.ISummary}.\n\nNote that the secret variables set in the studio account can only be retrieved\nby the owner of the account or {@link IStudioEnterpriseEmployee employees} who\nhave a manager or higher position in the {@link IStudioEnterprise company} that\nowns the account.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "key",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccountSecret.key } of the target secret variable set"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret variable details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioAccountSecret"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/accounts/{accountCode}/secrets/values": {
      "patch": {
        "summary": "Retrieve a list of global variables",
        "description": "Retrieve a list of global variables.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioAccountSecretValue.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of summary information on dereferenced variable values",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioAccountSecretValue.IInvertSummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/accounts/{accountCode}/secrets/{secretId}/values/{id}": {
      "get": {
        "summary": "Global variable details",
        "description": "Global variable details.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "secretId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioAccountSecret.id } of the set of secret variables to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioAccountSecretValue.id } of the target variable value"
          }
        ],
        "responses": {
          "200": {
            "description": "Variable value details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioAccountSecretValue"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/accounts/{accountCode}/widgets/{widgetCode}/tiles/minimap": {
      "patch": {
        "summary": "Minimap batch query of widget tiles",
        "description": "Minimap batch query of widget tiles.\n\n{@link IStudioAccountWidgetTileGeometry geometry information of widget tiles}\nis batch-queried for a specific\n{@link IStudioAccountWidgetTileGeometry.breakpoint}.\n\nThrough this, a minimap can be configured, and detailed component information\nof each widget tile can be queried by area unit through the {@link index} API.",
        "tags": [],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "widgetCode",
            "in": "path",
            "schema": {
              "const": "general"
            },
            "required": true,
            "description": " Code of the widget to which it belongs"
          },
          {
            "name": "breakpoint",
            "in": "query",
            "schema": {
              "oneOf": [
                {
                  "const": "md"
                },
                {
                  "const": "xs"
                },
                {
                  "const": "sm"
                },
                {
                  "const": "lg"
                }
              ]
            },
            "description": " target {@link IStudioAccountWidgetTileGeometry.breakpoint }",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Minimap information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IStudioAccountWidgetTile.IMinimapItem"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/accounts/{accountCode}/widgets/{widgetCode}/tiles": {
      "patch": {
        "summary": "Retrieve the list of widget tiles",
        "description": "Retrieve the list of widget tiles.\n\nLoads {@link IStudioAccountWidgetTile tiles} belonging to a specific\n{@link IStudioAccount account} and widget, in units of pages.\n\nHowever, unlike general pagination APIs, widgets perform\n{@link IGeometryPage pagination} by\n{@link IStudioAccountWidgetTile.IGeometry 2D spatial coordinates and size},\nnot scalar values (e.g. page 1).\n\nSpecify this point, move to the area of the page you want to retrieve, and\nperform the pagination task.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account you are interested in"
          },
          {
            "name": "widgetCode",
            "in": "path",
            "schema": {
              "const": "general"
            },
            "required": true,
            "description": " Code of the widget you are interested in"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioAccountWidgetTile.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of widget tiles that are paged in the coordinate system",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGeometryPageIStudioAccountWidgetTile.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/accounts/{accountCode}/widgets/{widgetCode}/tiles/{id}": {
      "get": {
        "summary": "Lookup widget tiles individually",
        "description": "Lookup widget tiles individually.\n\nLookup a specific {@link IStudioAccountWidgetTile widget tile} individually.\n\nProbably not used in front-end applications, but will likely be an API for\npure test verification.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "widgetCode",
            "in": "path",
            "schema": {
              "const": "general"
            },
            "required": true,
            "description": " Code of the widget to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioAccountWidgetTile.id } of the target tile"
          }
        ],
        "responses": {
          "200": {
            "description": "Widget tile information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioAccountWidgetTile"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/enterprises/{accountCode}/employees": {
      "patch": {
        "summary": "Retrieve the summary information list of corporate employees",
        "description": "Retrieve the summary information list of corporate employees.\n\nAll {@link IStudioEnterpriseEmployee.ISummary employee summary information}\nbelonging to a specific {@link IStudioEnterprise company} {@link IPage paging}\nis retrieved.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the corporate account"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioEnterpriseEmployee.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paging employee summary information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioEnterpriseEmployee.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/enterprises/{accountCode}/employees/{id}": {
      "get": {
        "summary": "Get employee details",
        "description": "Get employee details.\n\nGet the details of a specific {@link IStudioEnterpriseEmployee employee}.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the affiliated company account"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioEnterpriseEmployee.id } of the target employee"
          }
        ],
        "responses": {
          "200": {
            "description": "employee details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioEnterpriseEmployee"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/enterprises/{id}": {
      "get": {
        "summary": "View company details",
        "description": "View company details.\n\nView details of a specific {@link IStudioEnterprise company}.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " of the target company {@link IStudioEnterprise.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "company details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioEnterprise"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/enterprises/{accountCode}/get": {
      "get": {
        "summary": "View company details (by account code)",
        "description": "View company details (by account code).\n\nView details of a specific {@link IStudioEnterprise company} by the\n{@link IStudioAccount.code code} of the account it belongs to.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account belonging to the company"
          }
        ],
        "responses": {
          "200": {
            "description": "company details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioEnterprise"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/enterprises/{accountCode}/teams/{teamCode}/companions": {
      "patch": {
        "summary": "Retrieve the summary information list of corporate team members",
        "description": "Retrieve the summary information list of corporate team members.\n\nRetrieves {@link IPage paging} the\n{@link IStudioEnterpriseTeamCompanion.ISummary members' summary information}\nbelonging to {@link IStudioEnterpriseTeam team} of a specific\n{@link IStudioEnterprise company}.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the corporate account"
          },
          {
            "name": "teamCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioEnterpriseTeam.code } of the team"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioEnterpriseTeamCompanion.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paging summary information of members",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioEnterpriseTeamCompanion.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/enterprises/{accountCode}/teams/{teamCode}/companions/{id}": {
      "get": {
        "summary": "Retrieve member details",
        "description": "Retrieve member details.\n\nRetrieve details of a specific {@link IStudioEnterpriseTeamCompanion member}\nbelonging to a {@link IStudioEnterpriseTeam team}.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the affiliated company account"
          },
          {
            "name": "teamCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioEnterpriseTeam.code } of the affiliated team"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioEnterpriseTeamCompanion.id } of the target member"
          }
        ],
        "responses": {
          "200": {
            "description": "member details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioEnterpriseTeamCompanion"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/enterprises/{accountCode}/teams": {
      "patch": {
        "summary": "Retrieve the summary information list of corporate teams",
        "description": "Retrieve the summary information list of corporate teams.\n\nRetrieves all {@link IStudioEnterpriseTeam.ISummary team summary information}s\nof a specific {@link IStudioEnterprise company}.\n\n{@link IPage paging}.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the corporate account"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioEnterpriseTeam.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paging team summary information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioEnterpriseTeam.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/enterprises/{accountCode}/teams/{id}": {
      "get": {
        "summary": "View team details",
        "description": "View team details.\n\nView details of a specific {@link IStudioEnterpriseTeam team} organized by\n{@link IStudioEnterprise}.",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the affiliated company account"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioEnterpriseTeam.id } of the target team"
          }
        ],
        "responses": {
          "200": {
            "description": "team details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioEnterpriseTeam"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/enterprises/{accountCode}/teams/{code}/get": {
      "get": {
        "summary": "View team details by code",
        "description": "View team details by code.\n\nView details of a specific {@link IStudioEnterpriseTeam team} configured by\n{@link IStudioEnterprise} using the team's code (`code`).",
        "tags": [
          "Enterprise"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the affiliated company account"
          },
          {
            "name": "code",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioEnterpriseTeam.code } of the target team"
          }
        ],
        "responses": {
          "200": {
            "description": "Team details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioEnterpriseTeam"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/meta/statistics/statistics": {
      "patch": {
        "summary": "Retrieve the statistics of the Meta LLM",
        "description": "Retrieve the statistics of the Meta LLM.",
        "tags": [
          "Meta"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Statistics of the Meta LLM",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioMetaStatistics"
                }
              }
            }
          }
        }
      }
    },
    "/studio/sellers/meta/chat/sessions": {
      "patch": {
        "summary": "Retrieve the chat session list",
        "description": "Retrieve the chat session list.\n\nRetrieve the chat session {@link IStudioMetaChatSession} list.\n\nThe returned {@link IStudioMetaChatSession}s are {@link IPage paging} processed.\n\nAnd depending on how you set the request information\n{@link IStudioMetaChatSession.IRequest}, you can limit the number of\nrecords per page by {@link IStudioMetaChatSession.IRequest.limit}, search\nonly sessions that meet a specific condition by\n{@link IStudioMetaChatSession.IRequest.search}, or arbitrarily specify the\n{@link IStudioMetaChatSession.IRequest.sort sorting condition} of the\nsessions.",
        "tags": [
          "Meta"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioMetaChatSession.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paging sessions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioMetaChatSession"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/meta/chat/sessions/{id}": {
      "get": {
        "summary": "View individual chat sessions",
        "description": "View individual chat sessions.\n\nView the target chat session details {@link IStudioMetaChatSession}.",
        "tags": [
          "Meta"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioMetaChatSession.id } of the target chat session"
          }
        ],
        "responses": {
          "200": {
            "description": "Chat session details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioMetaChatSession"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/meta/chat/sessions/{sessionId}/connections": {
      "patch": {
        "summary": "Retrieve the list of connection information for the Meta LLM chat session",
        "description": "Retrieve the list of connection information for the Meta LLM chat session.\n\nBatch retrieve the Websocket connection information of\n{@link IHubCustomer customer} for {@link IStudioMetaChatSession chat session}.\n\nThe returned {@link IStudioMetaChatSessionConnection}s are {@link IPage paging}\nprocessed. And depending on how the request information\n{@link IStudioMetaChatSessionConnection.IRequest} is set,\nthe number of records per page can be limited by\n{@link IStudioMetaChatSessionConnection.IRequest.limit},\n{@link IStudioMetaChatSessionConnection.IRequest.search}, or\n{@link IStudioMetaChatSessionConnection.IRequest.sort sort conditions}\ncan be set arbitrarily.",
        "tags": [
          "Meta"
        ],
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioMetaChatSession.id } of the chat session"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioMetaChatSessionConnection.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paged connection list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioMetaChatSessionConnection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/meta/chat/sessions/{sessionId}/connections/{id}": {
      "get": {
        "summary": "Meta LLM Chat session connection information individual query",
        "description": "Meta LLM Chat session connection information individual query.\n\n{@link IStudioMetaChatSession chat session}\n{@link IHubCustomer customer}'s Websocket connection information\n{@link IStudioMetaChatSessionConnection} is individually searched.",
        "tags": [
          "Meta"
        ],
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioMetaChatSession.id } of the chat session belonging to"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioMetaChatSessionConnection.id } of the target connection"
          }
        ],
        "responses": {
          "200": {
            "description": "Connection details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioMetaChatSessionConnection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/meta/chat/sessions/{sessionId}/messages": {
      "patch": {
        "summary": "Retrieve the list of chat session messages",
        "description": "Retrieve the list of chat session messages.\n\nRetrieve the list of all {@link IStudioMetaChatSessionMessage messages}\nthat occurred in the {@link IStudioMetaChatSession chat session}.\n\nIf you want to limit the {@link IStudioMetaChatSessionConnection connection unit}\nthat the message occurred in, set\n{@link IStudioMetaChatSessionMessage.IRequest.connection_id}.\n\nThe returned {@link IStudioMetaChatSessionMessage} are {@link IPage paging}\nprocessed. And depending on how you set the request information\n{@link IStudioMetaChatSessionMessage.IRequest}, you can limit the number of\nrecords per page {@link IStudioMetaChatSessionMessage.IRequest.limit},\n{@link IStudioMetaChatSessionMessage.IRequest.search}, or\n{@link IStudioMetaChatSessionMessage.IRequest.sort sort conditions} arbitrarily.",
        "tags": [
          "Meta"
        ],
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioMetaChatSession.id } of the chat session to which it belongs"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioMetaChatSessionMessage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paging messages",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioMetaChatSessionMessageIStudioMetaChatSessionMessageData"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/meta/chat/sessions/{sessionId}/messages/{id}": {
      "get": {
        "summary": "Retrieve chat session message details",
        "description": "Retrieve chat session message details.\n\nRetrieve the details of a specific\n{@link IStudioMetaChatSessionMessage message}\nthat occurred in a {@link IStudioMetaChatSession chat session}.",
        "tags": [
          "Meta"
        ],
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioMetaChatSession.id } of the chat session to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioMetaChatSessionMessage.id } of the target message"
          }
        ],
        "responses": {
          "200": {
            "description": "message details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioMetaChatSessionMessageIStudioMetaChatSessionMessageData"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/meta/chat/sessions/shares": {
      "patch": {
        "summary": "Retrieve the chat session share list",
        "description": "Retrieve the chat session share list.\n\nRetrieve the chat session share {@link IStudioMetaChatSessionShare} list.\n\nThe returned {@link IStudioMetaChatSessionShare}s are \n{@link IPage paging} processed.\n\nAnd depending on how you set the request information\n{@link IStudioMetaChatSessionShare.IRequest}, you can limit the number of\nrecords per page by {@link IStudioMetaChatSessionShare.IRequest.limit}, \nsearch only sessions that meet a specific condition by\n{@link IStudioMetaChatSessionShare.IRequest.search}, or arbitrarily specify\nthe {@link IStudioMetaChatSessionShare.IRequest.sort sorting condition} of\nthe sessions.",
        "tags": [
          "Meta"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioMetaChatSessionShare.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paging session shares",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioMetaChatSessionShare"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/meta/chat/sessions/shares/{id}": {
      "get": {
        "summary": "View individual chat session shares",
        "description": "View individual chat session shares.\n\nView the target chat session share details {@link IStudioMetaChatSessionShare}.",
        "tags": [
          "Meta"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " ID of the target chat session share"
          }
        ],
        "responses": {
          "200": {
            "description": "Chat session share details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioMetaChatSessionShare"
                }
              }
            }
          }
        }
      }
    },
    "/studio/sellers/meta/chat/sessions/shares/{shareId}/messages": {
      "patch": {
        "summary": "Get list of messages in a chat session of shared",
        "description": "Get list of messages in a chat session of shared.",
        "tags": [
          "Meta"
        ],
        "parameters": [
          {
            "name": "shareId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Target chat session share's {@link IStudioMetaChatSessionShare.id }"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioMetaChatSessionMessage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paging messages",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioMetaChatSessionMessageIStudioMetaChatSessionMessageData"
                }
              }
            }
          }
        }
      }
    },
    "/studio/sellers/repositories/{accountCode}": {
      "patch": {
        "summary": "Retrieval of the list of repository summary information",
        "description": "Retrieval of the list of repository summary information.\n\nAll {@link IStudioRepository.ISummary repository summary information}\nexisting in this studio system are retrieved by {@link IPage paging}.\n\nHowever, {@link IStudioRepository.IRequest page request information} is\nconfigured, and the scope of the search target can be limited to a specific\n{@link IStudioAccount account}.\n\nAnd the code of the account to which it belongs, *accountCode*, can be set\nto `null`, in which case, all repositories accessible to the\n{@link IHubCustommer customer} will be searched regardless of the account to\nwhich it belongs. In other words, unless *accountCode* is `null`, only\nrepositories belonging to the account will be searched. And this is different\nfrom {@link IStudioRepository.IRequest.ISearch.account.code}, in that the\naccount code used for the search is a similar search, and the code used in\nthis path parameter is an exact match search.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string"
                }
              ]
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepository.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "paginated repository list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioRepository.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/repositories/{accountCode}/{id}": {
      "get": {
        "summary": "Get repository details",
        "description": "Get repository details.\n\nGet details of a specific {@link IStudioRepository repository}.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.id } of the target repository"
          }
        ],
        "responses": {
          "200": {
            "description": "repository details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepository"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/repositories/{accountCode}/{code}/get": {
      "get": {
        "summary": "Get repository details (by code)",
        "description": "Get repository details (by code).\n\nGet the details of a specific {@link IStudioRepository repository},\nusing the {@link IStudioAccount account} and the repository code (`code`).",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "code",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the target repository"
          }
        ],
        "responses": {
          "200": {
            "description": "repository details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepository"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/repositories/{accountCode}/{repositoryCode}/accesses": {
      "patch": {
        "summary": "Retrieve summary information list of repository access rights",
        "description": "Retrieve summary information list of repository access rights.\n\nRetrieves summary information of all\n{@link IStudioRepositoryAccess.ISummary access rights} granted to a specific\n{@link IStudioRepository repository} {@link IPage paging}.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryAccess.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Summary information list of paged access rights",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioRepositoryAccess.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/repositories/{accountCode}/{repositoryCode}/accesses/{id}": {
      "get": {
        "summary": "Get access permission details",
        "description": "Get access permission details.\n\nGet the details of a specific {@link IStudioRepositoryAccess access permission}.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryAccess.id } of the target access permission"
          }
        ],
        "responses": {
          "200": {
            "description": "Access permission details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepositoryAccess"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/buckets": {
      "patch": {
        "summary": "Retrieve the summary information list of buckets based on a specific commit",
        "description": "Retrieve the summary information list of buckets based on a specific commit.\n\nBased on a specific {@link IStudioRepositoryCommit commit}, the\n{@link IStudioRepositoryBucket.ISummary bucket summary information}\nis retrieved by {@link IPage paging}.\n\nAs a reference, {@link IStudioRepositoryBucket.IRequest page request information}\nis configured, and the target {@link IStudioRepositoryDirectory folder path}\ncan be specified.\n\nIn addition, you can retrieve all buckets based on the commit without\nbeing restricted by the folder path, but in this case, no folder information\nis retrieved.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          }
        ],
        "requestBody": {
          "description": "Page and search request information + folder path",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryBucket.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated bucket list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioRepositoryBucket.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/buckets/{id}": {
      "get": {
        "summary": "Retrieve detailed information about a bucket",
        "description": "Retrieve detailed information about a bucket.\n\nRetrieves detailed information about a {@link IStudioRepositoryBucket bucket}\nbased on a specific {@link IStudioRepositoryCommit commit}.\n\nIf the query target is a {@link IStudioRepositoryDirectory folder},\ninformation about all buckets belonging to that folder is retrieved. However,\nif there are many buckets, the amount of data itself may be huge. Therefore,\nit is recommended to avoid retrieving detailed information about a folder,\nand instead call the {@link index} function.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryBucket.id } of the target bucket"
          }
        ],
        "responses": {
          "200": {
            "description": "Bucket details",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/IStudioRepositoryDirectory"
                    },
                    {
                      "$ref": "#/components/schemas/IStudioRepositoryFile"
                    },
                    {
                      "$ref": "#/components/schemas/IStudioWorkflow"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "directory": "#/components/schemas/IStudioRepositoryDirectory",
                      "file": "#/components/schemas/IStudioRepositoryFile",
                      "workflow": "#/components/schemas/IStudioWorkflow"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/buckets/get": {
      "patch": {
        "summary": "Bucket details query by path",
        "description": "Bucket details query by path.\n\nRetrieves details of {@link IStudioRepositoryBucket bucket} based on a\nspecific {@link IStudioRepositoryCommit commit}, through its path,\n{@link IStudioRepositoryBucket.path}.\n\nIf the query target is {@link IStudioRepositoryDirectory folder}, information\non all buckets belonging to that folder is retrieved, but the amount of data\nitself may be huge because there are many buckets. Therefore, it is recommended\nto avoid retrieving folder details, and instead call the {@link index} function.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          }
        ],
        "requestBody": {
          "description": "Path of the target bucket (wrapped)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryBucket.IPath"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Details of the bucket",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/IStudioRepositoryDirectory"
                    },
                    {
                      "$ref": "#/components/schemas/IStudioRepositoryFile"
                    },
                    {
                      "$ref": "#/components/schemas/IStudioWorkflow"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "directory": "#/components/schemas/IStudioRepositoryDirectory",
                      "file": "#/components/schemas/IStudioRepositoryFile",
                      "workflow": "#/components/schemas/IStudioWorkflow"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/repositories/{accountCode}/{repositoryCode}/commits": {
      "patch": {
        "summary": "Retrieve the summary information list of commits in the repository",
        "description": "Retrieve the summary information list of commits in the repository.\n\n{@link IStudioRepository repository}\n{@link IStudioRepositoryCommit.ISummary commit summary information} is\nretrieved by {@link IPage paging}.\n\nNote that {@link IHubCustomer customer} is currently modifying, so in the case of\n{@link IStudioRepositoryCommit.archived_at commits that have not yet been recorded},\nonly the customer who created the commit can view it.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryCommit.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paging list of commits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioRepositoryCommit.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/repositories/{accountCode}/{repositoryCode}/commits/{id}": {
      "get": {
        "summary": "Get commit details",
        "description": "Get commit details.\n\nGets details of a specific {@link IStudioRepositoryCommit commit} in the\n{@link IStudioRepository repository}.\n\nNote that {@link IHubCustomer customer} is currently modifying the\n{@link IStudioRepositoryCommit.archived_at commit that has not been recorded yet},\nonly the customer who created the commit can view it.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          }
        ],
        "responses": {
          "200": {
            "description": "commit details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepositoryCommit"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{workflowId}/histories": {
      "patch": {
        "summary": "Batch query of workflow execution history summary information",
        "description": "Batch query of workflow execution history summary information.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          },
          {
            "name": "workflowId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the target workflow"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioWorkflowHistory.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of workflow execution history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioWorkflowHistory.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{workflowId}/histories/details": {
      "patch": {
        "summary": "Bulk query of workflow execution history details",
        "description": "Bulk query of workflow execution history details.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          },
          {
            "name": "workflowId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the target workflow"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioWorkflowHistory.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of workflow execution history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioWorkflowHistory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{workflowId}/histories/{id}": {
      "get": {
        "summary": "View workflow execution history details",
        "description": "View workflow execution history details.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          },
          {
            "name": "workflowId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the target workflow"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflowHistory.id } of the target workflow execution history"
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow execution details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioWorkflowHistory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Stop workflow execution",
        "description": "Stop workflow execution.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          },
          {
            "name": "workflowId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the target workflow"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflowHistory.id } of the target workflow execution history"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/repositories/{accountCode}/{repositoryCode}/commits/workflows/standalone/{workflowId}": {
      "get": {
        "summary": "Retrieve workflows alone",
        "description": "Retrieve workflows alone.\n\nAn API function that retrieves the {@link IStudioWorkflow workflow} file\nfrom a specific {@link IStudioRepository repository}, the most recent\n{@link IStudioRepositoryCommit commit}.",
        "deprecated": true,
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "workflowId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the target workflow"
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow + commit information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioWorkflowStandalone"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/repositories/{accountCode}/{repositoryCode}/commits/workflows/standalone/get": {
      "patch": {
        "summary": "Get workflows by get",
        "description": "Get workflows by get.\n\nAPI function to get {@link IStudioWorkflow workflow} files from a specific\n{@link IStudioRepository repository}, the most recent\n{@link IStudioRepositoryCommit commit} based on the path.",
        "deprecated": true,
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository"
          }
        ],
        "requestBody": {
          "description": "Workflow path",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioWorkflowStandalone.IPath"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Workflow + commit information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioWorkflowStandalone"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{id}/compile": {
      "post": {
        "summary": "Temporarily compile workflow documents",
        "description": "Temporarily compile workflow documents.\n\nTemporarily compile only the current {@link IStudioWorkflow workflow} document.\n\nThis compilation also occurs when building the\n{@link IStudioWorkflowRepositoryRelease distribution program} from the\noriginal repository. This API is separate from that, and performs partial\ncompilation only for individual workflow documents and some script files\n`imported` from them.\n\nIts main purpose is to test the operation of individual workflows, etc.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the target workflow"
          }
        ],
        "responses": {
          "201": {
            "description": "URL of the compiled program",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{id}/execute": {
      "post": {
        "summary": "Execute a workflow function",
        "description": "Execute a workflow function.\n\nExecute a workflow function and wait for its return value to return.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the target workflow"
          }
        ],
        "requestBody": {
          "description": "Parameter input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioWorkflow.IExecute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Return value as the result of executing the workflow function",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/IExecutionResult.IFailure"
                    },
                    {
                      "$ref": "#/components/schemas/IExecutionResult.ISuccessany"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{id}/proceed": {
      "post": {
        "summary": "Run a workflow function",
        "description": "Run a workflow function.\n\nExecute a workflow function, but do not wait for its return value.\nInstead, return {@link IStudioWorkflowHistory.ISummary} corresponding to\nthe execution result history.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the target workflow"
          }
        ],
        "requestBody": {
          "description": "Parameter input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioWorkflow.IExecute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Return value as the result of executing the workflow function",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioWorkflowHistory.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/repositories/{accountCode}/{repositoryCode}/commits/{commitId}/workflows/{id}/simulate": {
      "post": {
        "summary": "Compile simulation",
        "description": "Compile simulation.\n\nSimulate the process by checking the TypeScript files generated during\ncompilation without compiling the workflow document directly.",
        "tags": [
          "Workflow"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "commitId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "const": "latest"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " {@link IStudioRepositoryCommit.id } of the target commit"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioWorkflow.id } of the target workflow"
          }
        ],
        "requestBody": {
          "description": "Whether to debug",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioWorkflow.ISimulate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Dictionary of TypeScript files",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Recordstringstring"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/repositories/{accountCode}/{repositoryCode}/releases": {
      "patch": {
        "description": "Retrieve the summary information list of distribution programs in the\nrepository.\n\nRetrieves all\n{@link IStudioRepositoryRelease distribution program summary information} in\na specific {@link IStudioRepository repository} by {@link IPage paging}.\n\nThe distribution program summary information includes the version, date,\nand document information of the distribution program.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          }
        ],
        "requestBody": {
          "description": "Page and search request information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryRelease.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of paginated distribution programs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioRepositoryRelease.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/repositories/{accountCode}/{repositoryCode}/releases/{id}": {
      "get": {
        "summary": "Get details of a distribution program in a repository",
        "description": "Get details of a distribution program in a repository.\n\nGets details of a specific {@link IStudioRepositoryRelease distribution program}\nin {@link IStudioRepository repository}.\n\nThe distribution program details include all\n{@link IStudioRepositoryReleaseNode function nodes} that are `exported` from\nthe program, along with their metatype information.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryRelease.id } of the target distribution program"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the distribution program",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepositoryRelease"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/repositories/{accountCode}/{repositoryCode}/releases/{version}/get": {
      "get": {
        "summary": "Retrieve details of a distribution program in a repository by version",
        "description": "Retrieve details of a distribution program in a repository by version.\n\nRetrieve details of a specific\n{@link IStudioRepositoryRelease distribution program} in the\n{@link IStudioRepository repository}, by the version name of the release.\n\nThe distribution program details include all\n{@link IStudioRepositoryReleaseNode function nodes} that are `exported` by\nthe program, and their meta type information.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "version",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepositoryRelease.version } of the target distribution program"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the distribution program",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepositoryRelease"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/repositories/{accountCode}/{repositoryCode}/releases/{id}/swagger": {
      "get": {
        "summary": "Look up the distribution program as a Swagger document",
        "description": "Look up the distribution program as a Swagger document.\n\nThis studio system also provides each\n{@link IStudioRepositoryRepositoryReleaseNode node function} of the\n{@link IStudioRepositoryRelease distributed program} in the\n{@link IStudioRepositoryRepository}, in the form of individual Rest APIs.\nThis function is a function that can view the specifications of these\nRest APIs in the Swagger document.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryRelease.id } of the target distribution program"
          }
        ],
        "responses": {
          "200": {
            "description": "Swagger document",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISwagger"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/repositories/{accountCode}/{repositoryCode}/releases/{releaseId}/nodes/{id}/execute": {
      "post": {
        "summary": "Run a release node",
        "description": "Run a release node.\n\nRun a release node and wait for its return value.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the bound account"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the bound repository"
          },
          {
            "name": "releaseId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepositoryRelease.id } of the bound deployment program"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryReleaseNode.id } of the target function node"
          }
        ],
        "requestBody": {
          "description": "Parameter input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryReleaseNode.IExecute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Return value as the result of executing the target function node",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/IExecutionResult.IFailure"
                    },
                    {
                      "$ref": "#/components/schemas/IExecutionResult.ISuccessany"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/repositories/{accountCode}/{repositoryCode}/releases/{releaseId}/nodes/{id}/proceed": {
      "post": {
        "summary": "Run a release node",
        "description": "Run a release node.\n\nRun the release node, but do not wait for its return value, but simply\nreturn {@link IStudioRepositoryReleaseNodeHistory.ISummary} corresponding\nto the execution result history.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the bound account"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the bound repository"
          },
          {
            "name": "releaseId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepositoryRelease.id } of the bound release program"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryReleaseNode.id } of the target function node"
          }
        ],
        "requestBody": {
          "description": "Parameter input information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryReleaseNode.IExecute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Return value as the execution result of the target function node",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepositoryReleaseNodeHistory.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/repositories/{accountCode}/{repositoryCode}/releases/{releaseId}/nodes/{nodeId}/histories": {
      "patch": {
        "summary": "Batch query of summary information of release node execution history",
        "description": "Batch query of summary information of release node execution history.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "releaseId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryRelease.id } of the target release"
          },
          {
            "name": "nodeId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryReleaseNode.id } of the target node"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryReleaseNodeHistory.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of release node history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioRepositoryReleaseNodeHistory.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/repositories/{accountCode}/{repositoryCode}/releases/{releaseId}/nodes/{nodeId}/histories/details": {
      "patch": {
        "summary": "Batch query of release node execution history details",
        "description": "Batch query of release node execution history details.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "releaseId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryRelease.id } of the target release"
          },
          {
            "name": "nodeId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryReleaseNode.id } of the target node"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IStudioRepositoryReleaseNodeHistory.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of release node history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIStudioRepositoryReleaseNodeHistory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/studio/sellers/repositories/{accountCode}/{repositoryCode}/releases/{releaseId}/nodes/{nodeId}/histories/{id}": {
      "get": {
        "summary": "View details of release node execution history",
        "description": "View details of release node execution history.",
        "tags": [
          "Repository"
        ],
        "parameters": [
          {
            "name": "accountCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioAccount.code } of the account to which it belongs"
          },
          {
            "name": "repositoryCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " {@link IStudioRepository.code } of the repository to which it belongs"
          },
          {
            "name": "releaseId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryRelease.id } of the target release"
          },
          {
            "name": "nodeId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryReleaseNode.id } of the target node"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " {@link IStudioRepositoryReleaseNodeHistory.id } of the target release node execution history"
          }
        ],
        "responses": {
          "200": {
            "description": "Release node execution details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStudioRepositoryReleaseNodeHistory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "IPerformance": {
        "type": "object",
        "properties": {
          "cpu": {
            "$ref": "#/components/schemas/process.global.NodeJS.CpuUsage"
          },
          "memory": {
            "$ref": "#/components/schemas/process.global.NodeJS.MemoryUsage"
          },
          "resource": {
            "$ref": "#/components/schemas/process.global.NodeJS.ResourceUsage"
          }
        },
        "required": [
          "cpu",
          "memory",
          "resource"
        ]
      },
      "process.global.NodeJS.CpuUsage": {
        "type": "object",
        "properties": {
          "user": {
            "type": "number"
          },
          "system": {
            "type": "number"
          }
        },
        "required": [
          "user",
          "system"
        ]
      },
      "process.global.NodeJS.MemoryUsage": {
        "type": "object",
        "properties": {
          "rss": {
            "type": "number",
            "description": "Resident Set Size, is the amount of space occupied in the main memory device (that is a subset of the total allocated memory) for the\nprocess, including all C++ and JavaScript objects and code."
          },
          "heapTotal": {
            "type": "number",
            "title": "Refers to V8's memory usage",
            "description": "Refers to V8's memory usage."
          },
          "heapUsed": {
            "type": "number",
            "title": "Refers to V8's memory usage",
            "description": "Refers to V8's memory usage."
          },
          "external": {
            "type": "number"
          },
          "arrayBuffers": {
            "type": "number",
            "description": "Refers to memory allocated for `ArrayBuffer`s and `SharedArrayBuffer`s, including all Node.js Buffers. This is also included\nin the external value. When Node.js is used as an embedded library, this value may be `0` because allocations for `ArrayBuffer`s\nmay not be tracked in that case."
          }
        },
        "required": [
          "rss",
          "heapTotal",
          "heapUsed",
          "external",
          "arrayBuffers"
        ]
      },
      "process.global.NodeJS.ResourceUsage": {
        "type": "object",
        "properties": {
          "fsRead": {
            "type": "number"
          },
          "fsWrite": {
            "type": "number"
          },
          "involuntaryContextSwitches": {
            "type": "number"
          },
          "ipcReceived": {
            "type": "number"
          },
          "ipcSent": {
            "type": "number"
          },
          "majorPageFault": {
            "type": "number"
          },
          "maxRSS": {
            "type": "number"
          },
          "minorPageFault": {
            "type": "number"
          },
          "sharedMemorySize": {
            "type": "number"
          },
          "signalsCount": {
            "type": "number"
          },
          "swappedOut": {
            "type": "number"
          },
          "systemCPUTime": {
            "type": "number"
          },
          "unsharedDataSize": {
            "type": "number"
          },
          "unsharedStackSize": {
            "type": "number"
          },
          "userCPUTime": {
            "type": "number"
          },
          "voluntaryContextSwitches": {
            "type": "number"
          }
        },
        "required": [
          "fsRead",
          "fsWrite",
          "involuntaryContextSwitches",
          "ipcReceived",
          "ipcSent",
          "majorPageFault",
          "maxRSS",
          "minorPageFault",
          "sharedMemorySize",
          "signalsCount",
          "swappedOut",
          "systemCPUTime",
          "unsharedDataSize",
          "unsharedStackSize",
          "userCPUTime",
          "voluntaryContextSwitches"
        ]
      },
      "IWrtnSsoUser.IActivated": {
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/IHubCustomer",
            "title": "Customer information",
            "description": "Customer information."
          },
          "user": {
            "$ref": "#/components/schemas/IWrtnSsoUser",
            "title": "Wrtn SSO user information",
            "description": "Wrtn SSO user information."
          },
          "newbie": {
            "type": "boolean",
            "title": "Whether the user is a newbie or not",
            "description": "Whether the user is a newbie or not.\n\nIt means that, the user has newly joined to this Ecosystem service.\nTherefore, if a {@link IHubMember} record be newly created, this property\nbecomes `true`, and vice versa."
          }
        },
        "required": [
          "customer",
          "user",
          "newbie"
        ],
        "description": "Activated Wrtn SSO User.\n\nIn other words, result of the SSO user authorization."
      },
      "IHubCustomer": {
        "type": "object",
        "properties": {
          "type": {
            "const": "customer",
            "title": "Discriminator for the discriminated union type",
            "description": "Discriminator for the discriminated union type."
          },
          "member": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubMember"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "member": "#/components/schemas/IHubMember"
              }
            },
            "title": "Membership information",
            "description": "Membership information.\n\nIf you have not registered or logged in, this information is `null`."
          },
          "citizen": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubCitizen"
              }
            ],
            "title": "Citizen Information",
            "description": "Citizen Information.\n\nWhether the customer has authenticated himself or has done so in the past."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "channel": {
            "$ref": "#/components/schemas/IHubChannel",
            "title": "Channel affiliation information",
            "description": "Channel affiliation information.\n\nWhich channel is the customer?"
          },
          "external_user": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubExternalUser"
              }
            ],
            "title": "External user information",
            "description": "External user information.\n\nApplies to customers who access from external services."
          },
          "href": {
            "type": "string",
            "format": "uri",
            "title": "The connection address",
            "description": "The connection address.\n\nSame value as {@link window.location.href}."
          },
          "referrer": {
            "oneOf": [
              {
                "type": "string",
                "format": "uri"
              },
              {
                "type": "string",
                "maxLength": 0
              }
            ],
            "title": "Referrer URL",
            "description": "Referrer URL.\n\nSame value as {@link window.document.referrer}."
          },
          "ip": {
            "oneOf": [
              {
                "type": "string",
                "format": "ipv4"
              },
              {
                "type": "string",
                "format": "ipv6"
              }
            ],
            "title": "The connecting IP address",
            "description": "The connecting IP address."
          },
          "readonly": {
            "type": "boolean",
            "title": "Whether read-only or not",
            "description": "Whether read-only or not."
          },
          "lang_code": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Language code",
            "description": "Language code."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Synonyms for record creation date and time, access date and time",
            "description": "Synonyms for record creation date and time, access date and time."
          }
        },
        "required": [
          "type",
          "member",
          "citizen",
          "id",
          "channel",
          "external_user",
          "href",
          "referrer",
          "ip",
          "readonly",
          "lang_code",
          "created_at"
        ],
        "description": "Customer information, but based on access criteria, not people.\n\n`IHubCustomer` is an entity that literally embodies the information of\nthose who participated in the market as customers. `IHubCustomer` issues\na new record for each access, even if it is the same person.\n\nThe first purpose is to track the customer inflow path in detail, and the\nsecond is to prevent cases where the same person enters as a non-member,\ndiligently puts {@link IHubSale items} in the\n{@link IHubCartCommodity shopping cart}, and only then does\n{@link IHubCitizen real name authentication} or\n{@link IHubMember membership registration/login} at the moment of payment.\nLastly, the same person may access {@link IHubExternalUser external service}\nto make a purchase, create multiple accounts to make a purchase, be a non-member\nand then only authenticate their real name to make a purchase, and sometimes\nbecome a member and act as a {@link IHubSeller seller} or\n{@link IHubAdministrator administrator}, etc. This is to accurately track the\nactivities that a person performs on the exchange in various ways.\n\nTherefore, `IHubCustomer` can have multiple records with the same\n{@link IHubCitizen} or {@link IHubMember} and {@link IHubExternalUser}. Also,\nif a customer signs up for membership after authenticating their real name or\nsigns up for our service after being an external service user, all related\nrecords are changed at once. This makes it possible to identify and track\ncustomers very systematically."
      },
      "IHubMember": {
        "type": "object",
        "properties": {
          "citizen": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubCitizen"
              }
            ],
            "title": "Citizen Information",
            "description": "Citizen Information.\n\nLimited to members who have completed identity verification."
          },
          "administrator": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubAdministrator"
              }
            ],
            "title": "If this member is also registered as an administrator",
            "description": "If this member is also registered as an administrator."
          },
          "seller": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubSeller"
              }
            ],
            "title": "If this member is also registered as a seller",
            "description": "If this member is also registered as a seller."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "const": "member",
            "title": "Identifier of the Discriminated Union type",
            "description": "Identifier of the Discriminated Union type."
          },
          "emails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubMemberEmail"
            },
            "minItems": 1,
            "title": "Email list",
            "description": "Email list."
          },
          "nickname": {
            "type": "string",
            "title": "nickname",
            "description": "nickname."
          },
          "profile_background_color": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "const": "primary"
              },
              {
                "const": "gray"
              },
              {
                "const": "inspired_red"
              },
              {
                "const": "apricot"
              },
              {
                "const": "yellow"
              },
              {
                "const": "green"
              },
              {
                "const": "blue"
              },
              {
                "const": "violet"
              },
              {
                "const": "pink"
              }
            ],
            "title": "Profile background color",
            "description": "Profile background color."
          },
          "account": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IStudioAccount.IInvert"
              }
            ],
            "title": "Studio account",
            "description": "Studio account."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          }
        },
        "required": [
          "citizen",
          "administrator",
          "seller",
          "id",
          "type",
          "emails",
          "nickname",
          "profile_background_color",
          "account",
          "created_at"
        ],
        "description": "General member account.\n\n`IHubMember` is an entity that represents a case where a\n{@link IHubCustomer customer} registers as a general member in this system.\n\nNote that if the value of {@link IHubMember.seller} or\n{@link IHubMember.administrator} is not `null`, it means that the member also\nregisters and acts as a seller and administrator.\n\nConversely, if you want a structure that reversely references member and\ncustomer information from administrators and sellers, use the structure\nbelow instead.\n\n- {@link IHubAdministrator.IInvert}\n- {@link IHubSeller.IInvert}"
      },
      "IHubCitizen": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          },
          "mobile": {
            "type": "string",
            "pattern": "^[0-9]*$",
            "title": "Mobile phone number",
            "description": "Mobile phone number."
          },
          "name": {
            "type": "string",
            "title": "Real name or equivalent name",
            "description": "Real name or equivalent name."
          }
        },
        "required": [
          "id",
          "created_at",
          "mobile",
          "name"
        ],
        "description": "Citizen authentication information.\n\n{@link IHubCitizen} is an entity that records the user's real name and\nmobile phone input information.\n\nFor reference, in Korea, real name authentication is mandatory for\ne-commerce participants, so the {@link name} attribute is important. However,\nthe situation is different overseas, so in reality, the {@link mobile} attribute\nis the most important, and individual user identification is also based on this\n{@link mobile} attribute.\n\nOf course, real name and mobile phone authentication information are encrypted\nand stored."
      },
      "IHubAdministrator": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Administrator membership registration date and time",
            "description": "Administrator membership registration date and time."
          }
        },
        "required": [
          "id",
          "created_at"
        ],
        "description": "Administrator.\n\n`IHubAdministrator` is an entity that literally means an administrator,\nand refers to a person who has registered as a {@link IHubMember member}\nin this system and performs management activities such as\n{@link IHubSaleAudit review}.\n\nNote that `IHubAdministrator` is different from\n{@link IHubExternalUser external user} or {@link IHubCustomer} that can perform\nnon-member activities, but only those who have registered as a\n{@link IHubMember member} can perform management activities. And\n{@link IHubCitizen real-name authentication} is also required."
      },
      "IHubSeller": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          }
        },
        "required": [
          "id",
          "created_at"
        ],
        "description": "Seller information.\n\n`IHubSeller` is an entity that literally means a seller, and refers to\na person who registers {@link IHubMember} in this system, registers\n{@link IHubSale API listings}, and conducts {@link IHubOrder sales} activities.\n\nNote that `IHubSeller` is different from {@link IHubExternalUser external users}\nand {@link IHubCustomer}, which allows non-member activities, and only those\nwho register as {@link IHubMember members} can conduct sales activities.\nAnd {@link IHubCitizen real-name authentication} is also required."
      },
      "IHubMemberEmail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "value": {
            "type": "string",
            "format": "email",
            "title": "Email address",
            "description": "Email address."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          }
        },
        "required": [
          "id",
          "value",
          "created_at"
        ],
        "description": "Member's email address.\n\nThis hub system allows one {@link IHubMember member} to have\nmultiple email accounts.\n\nThis is because market participants are corporate entities and there is\nroom for them to work as freelancers for multiple companies."
      },
      "IStudioAccount.IInvert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "code": {
            "type": "string",
            "title": "Identifier code",
            "description": "Identifier code."
          },
          "created_at": {
            "type": "string",
            "title": "Account creation date and time",
            "description": "Account creation date and time."
          }
        },
        "required": [
          "id",
          "code",
          "created_at"
        ],
        "description": "Back-reference information for an account.\n\nInformation that does not have owner information for the account,\ni.e. information that is back-referenced from the owner."
      },
      "IHubChannel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Primary key"
          },
          "code": {
            "type": "string",
            "description": "Separator code"
          },
          "name": {
            "type": "string",
            "description": "Channel name"
          },
          "exclusive": {
            "type": "boolean",
            "description": "Exclusivity\n\nIf this value is True, the channel is disconnected and customer information is not shared."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Record creation date and time"
          }
        },
        "required": [
          "id",
          "code",
          "name",
          "exclusive",
          "created_at"
        ],
        "description": "Hub channel information.\n\n`IHubChannel` is a concept that visualizes distribution channels\nin the API brokerage market. In this system, a different channel means\na different site or application. Therefore, Wrtn Generative Hub\n(https://hub.wrtn.com, tentative name) is also a channel.\n\nThe basic code is `wrtn`. Of course, there is only one channel for\nGenerative Hub at present, but it is prepared in advance for future scalability.\nLike {@link IHubExternalUser}, it is a concept designed in advance for possible\npartnerships in the future. For reference, if Wrtn launches another site\n(application) with a different brand name in addition to Generative Hub,\nor if Wrtn uses (<iframe> ) If you are launching a simple hub site to distribute\nto your partners, you will also need a new channel."
      },
      "IHubExternalUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "citizen": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubCitizen"
              }
            ],
            "title": "Citizen authentication information",
            "description": "Citizen authentication information."
          },
          "application": {
            "type": "string",
            "title": "Identifier code of the external service",
            "description": "Identifier code of the external service."
          },
          "uid": {
            "type": "string",
            "title": "User identifier key",
            "description": "User identifier key."
          },
          "nickname": {
            "type": "string",
            "title": "User nickname on external services",
            "description": "User nickname on external services."
          },
          "data": {
            "title": "Additional information from external services",
            "description": "Additional information from external services."
          },
          "content": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubExternalUserContent"
              }
            ],
            "title": "External user information details",
            "description": "External user information details.\n\nUsed only when received from WRTN SSO."
          },
          "member_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "title": "Member ID",
            "description": "Member ID.\n\nIf you are not registered or logged in as an external user,\nthis property value is `null`."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Record creation date and time",
            "description": "Record creation date and time.\n\nThe date and time when an external user first accessed this service."
          }
        },
        "required": [
          "id",
          "citizen",
          "application",
          "uid",
          "nickname",
          "data",
          "content",
          "member_id",
          "created_at"
        ],
        "description": "External user information.\n\n`IHubExternalUser` is an entity for when this system connects to an external\nservice and needs to accept their users as {@link IHubCustomer customers}\nof this service.\n\nFor reference, customers who access from an external service must have this\nrecord, and the external service user is identified through the two properties\n{@link application} and {@link uid}.\n\nIf a customer who accessed from an external service completes\n{@link IHubCitizen real-name authentication} from this service, the external\nservice user starts with the real-name authentication completed whenever he or\nshe re-accesses this service and issues a new customer authentication token.\nThis is the same when signing up for {@link IHubMember} membership.\n\nAnd {@link IHubExternalUser.ICreate.password} is the password issued by the\nexternal service system to the user (so-called permanent user authentication token),\nand is never the actual user password. However, this is to determine whether\na customer who entered the same {@link application} and {@link uid} as\nthe current external system user is a valid external system user or a violation.\n\nIn addition, additional information received from an external service can be\nrecorded in the {@link data} field in JSON format."
      },
      "IHubExternalUserContent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Primary key",
            "description": "Primary key."
          },
          "jobs": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "List of user job information. {@link IHubExternalUserContent.JobType}"
          },
          "gender": {
            "oneOf": [
              {
                "const": "m"
              },
              {
                "const": "f"
              },
              {
                "const": "none"
              }
            ],
            "title": "User gender information",
            "description": "User gender information.\n\n`m` : male\n`f` : female\n`none` : gender not disclosed"
          },
          "birthYear": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "User's year of birth",
            "description": "User's year of birth."
          },
          "interests": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "title": "List of user interests",
            "description": "List of user interests."
          },
          "provider": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "WRTN User Account Provider",
            "description": "WRTN User Account Provider.\n\nex) \"google\", \"kakao\", \"naver\""
          },
          "purposes": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "title": "Purpose of user access",
            "description": "Purpose of user access."
          }
        },
        "required": [
          "id",
          "jobs",
          "gender",
          "birthYear",
          "interests",
          "provider",
          "purposes"
        ],
        "description": "External user information details.\n\nAn object containing user information provided by WRTN SSO."
      },
      "IWrtnSsoUser": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "title": "WRTN User ID",
            "description": "WRTN User ID."
          },
          "name": {
            "type": "string",
            "title": "WRTN username",
            "description": "WRTN username."
          },
          "wrtnUid": {
            "type": "string",
            "title": "WRTN uid",
            "description": "WRTN uid."
          },
          "email": {
            "type": "string",
            "title": "WRTN Email",
            "description": "WRTN Email."
          },
          "birthYear": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "WRTN user's year of birth",
            "description": "WRTN user's year of birth."
          },
          "gender": {
            "type": "string",
            "title": "WRTN user gender",
            "description": "WRTN user gender."
          },
          "interests": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "WRTN user interest list",
            "description": "WRTN user interest list."
          },
          "provider": {
            "type": "string",
            "title": "WRTN User Account Provider",
            "description": "WRTN User Account Provider.\n\nex) \"google\", \"kakao\", \"naver\""
          },
          "job": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "List of WRTN user occupations",
            "description": "List of WRTN user occupations."
          },
          "purpose": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "WRTN User Purpose",
            "description": "WRTN User Purpose."
          },
          "deviceToken": {
            "type": "string",
            "title": "WRTN User Device Token",
            "description": "WRTN User Device Token."
          }
        },
        "required": [
          "_id",
          "name",
          "email"
        ],
        "description": "Wrtn SSO User information.\n\n`IWrtnSsoUser` is a structure representing the user information from the\nexternal Wrtn SSO system."
      },
      "IWrtnSsoUser.IAuthorization": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "title": "Access token",
            "description": "Access token."
          }
        },
        "required": [
          "token"
        ],
        "description": "Authorization request information."
      },
      "IWrtnSsoUser.IUpdate": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "title": "Access token",
            "description": "Access token."
          },
          "job": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Job information",
            "description": "Job information."
          },
          "gender": {
            "oneOf": [
              {
                "const": "m"
              },
              {
                "const": "f"
              },
              {
                "const": "none"
              }
            ],
            "title": "Gender",
            "description": "Gender.\n\nWritten as \"m\" | \"f\" | \"none\"."
          },
          "nickname": {
            "type": "string",
            "title": "nickname",
            "description": "nickname."
          }
        },
        "required": [
          "token",
          "job"
        ],
        "description": "Modify SSO and Ecosystem User information."
      },
      "IHubMemberElite": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "const": "elite",
            "title": "Identifier of the Discriminated Union type",
            "description": "Identifier of the Discriminated Union type."
          },
          "member": {
            "$ref": "#/components/schemas/IHubMember.IInvert",
            "title": "Information about members who have been promoted to elite members",
            "description": "Information about members who have been promoted to elite members."
          },
          "administrator": {
            "$ref": "#/components/schemas/IHubAdministrator.IInvert",
            "title": "Information about the promoted manager",
            "description": "Information about the promoted manager."
          },
          "reason": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Reason for promotion",
            "description": "Reason for promotion.\n\nIf `null`, it means the administrator did not enter a reason for promotion."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Promotion date and time",
            "description": "Promotion date and time."
          },
          "deleted_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Date of deletion",
            "description": "Date of deletion."
          }
        },
        "required": [
          "id",
          "type",
          "member",
          "administrator",
          "reason",
          "created_at",
          "deleted_at"
        ],
        "description": "Elite member among general member accounts.\n\n`IHubMemberElite` is an entity added to this system when\n{@link IHubMember customer} is promoted to elite member.\n\nNote that only administrators can promote elite members."
      },
      "IHubMember.IInvert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "const": "member",
            "title": "Identifier of the Discriminated Union type",
            "description": "Identifier of the Discriminated Union type."
          },
          "emails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubMemberEmail"
            },
            "minItems": 1,
            "title": "Email list",
            "description": "Email list."
          },
          "nickname": {
            "type": "string",
            "title": "nickname",
            "description": "nickname."
          },
          "profile_background_color": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "const": "primary"
              },
              {
                "const": "gray"
              },
              {
                "const": "inspired_red"
              },
              {
                "const": "apricot"
              },
              {
                "const": "yellow"
              },
              {
                "const": "green"
              },
              {
                "const": "blue"
              },
              {
                "const": "violet"
              },
              {
                "const": "pink"
              }
            ],
            "title": "Profile background color",
            "description": "Profile background color."
          },
          "account": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IStudioAccount.IInvert"
              }
            ],
            "title": "Studio account",
            "description": "Studio account."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          }
        },
        "required": [
          "id",
          "type",
          "emails",
          "nickname",
          "profile_background_color",
          "account",
          "created_at"
        ],
        "description": "General member reverse reference information.\n\nThis information is used in the reverse reference information of\nadministrators and sellers.\n\n- {@link IHubAdministrator.IInvert}\n- {@link IHubSeller.IInvert}"
      },
      "IHubAdministrator.IInvert": {
        "type": "object",
        "properties": {
          "type": {
            "const": "administrator",
            "title": "Discriminator for the discriminated union type",
            "description": "Discriminator for the discriminated union type."
          },
          "member": {
            "$ref": "#/components/schemas/IHubMember.IInvert",
            "title": "General Member Information",
            "description": "General Member Information.\n\nTo register as an administrator member, you must first register\nas a general member."
          },
          "customer": {
            "$ref": "#/components/schemas/IHubCustomer.IInvert",
            "title": "Customer information",
            "description": "Customer information.\n\nThis system manages customers by connection unit.\n\nThat is, connection information for the current administrator member."
          },
          "citizen": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubCitizen"
              }
            ],
            "title": "Citizen authentication information",
            "description": "Citizen authentication information.\n\nAdministrators must complete citizen authentication."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Administrator membership registration date and time",
            "description": "Administrator membership registration date and time."
          }
        },
        "required": [
          "type",
          "member",
          "customer",
          "citizen",
          "id",
          "created_at"
        ],
        "description": "Administrator's reverse reference information.\n\nA data structure that lists administrator information in reverse order,\n{@link IHubCustomer.member} -> {@link IHubMember.administrator}. Starting\nwith the administrator as the top-level object,\nit reversely references citizen, general member, and customer information."
      },
      "IHubCustomer.IInvert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "channel": {
            "$ref": "#/components/schemas/IHubChannel",
            "title": "Channel affiliation information",
            "description": "Channel affiliation information.\n\nWhich channel is the customer?"
          },
          "external_user": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubExternalUser"
              }
            ],
            "title": "External user information",
            "description": "External user information.\n\nApplies to customers who access from external services."
          },
          "href": {
            "type": "string",
            "format": "uri",
            "title": "The connection address",
            "description": "The connection address.\n\nSame value as {@link window.location.href}."
          },
          "referrer": {
            "oneOf": [
              {
                "type": "string",
                "format": "uri"
              },
              {
                "type": "string",
                "maxLength": 0
              }
            ],
            "title": "Referrer URL",
            "description": "Referrer URL.\n\nSame value as {@link window.document.referrer}."
          },
          "ip": {
            "oneOf": [
              {
                "type": "string",
                "format": "ipv4"
              },
              {
                "type": "string",
                "format": "ipv6"
              }
            ],
            "title": "The connecting IP address",
            "description": "The connecting IP address."
          },
          "readonly": {
            "type": "boolean",
            "title": "Whether read-only or not",
            "description": "Whether read-only or not."
          },
          "lang_code": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Language code",
            "description": "Language code."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Synonyms for record creation date and time, access date and time",
            "description": "Synonyms for record creation date and time, access date and time."
          }
        },
        "required": [
          "id",
          "channel",
          "external_user",
          "href",
          "referrer",
          "ip",
          "readonly",
          "lang_code",
          "created_at"
        ],
        "description": "Customer's reverse reference information.\n\nThis information is used in the reverse reference information of\nthe administrator and seller.\n\n- {@link IHubAdministrator.IInvert}\n- {@link IHubSeller.IInvert}"
      },
      "IHubMemberElite.ICreate": {
        "type": "object",
        "properties": {
          "member_id": {
            "type": "string",
            "format": "uuid",
            "title": "{@link IHubMember.id} of the member you wish to promote to Elite Membership",
            "description": "{@link IHubMember.id} of the member you wish to promote to Elite Membership."
          },
          "reason": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Reason for promotion to elite membership",
            "description": "Reason for promotion to elite membership.\n\nCan be null."
          }
        },
        "required": [
          "member_id",
          "reason"
        ],
        "description": "Elite member input information."
      },
      "IHubMemberVillain": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "const": "villain",
            "title": "Identifier of the Discriminated Union type",
            "description": "Identifier of the Discriminated Union type."
          },
          "member": {
            "$ref": "#/components/schemas/IHubMember.IInvert",
            "title": "Disinformation about members registered as villain members",
            "description": "Disinformation about members registered as villain members."
          },
          "administrator": {
            "$ref": "#/components/schemas/IHubAdministrator.IInvert",
            "title": "The registered administrator's reverse information",
            "description": "The registered administrator's reverse information."
          },
          "reason": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Reason for registration",
            "description": "Reason for registration.\n\nIf `null`, it means that the administrator did not enter a reason\nwhen registering."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Registration date and time",
            "description": "Registration date and time."
          },
          "deleted_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Date of deletion",
            "description": "Date of deletion."
          }
        },
        "required": [
          "id",
          "type",
          "member",
          "administrator",
          "reason",
          "created_at",
          "deleted_at"
        ],
        "description": "Villain member among general member accounts.\n\n`IHubMemberVillain` is an entity added when {@link IHubMember customer}\nregisters as a blacklist member in this system.\n\nNote that only administrators can register as villain members."
      },
      "IHubMemberVillain.ICreate": {
        "type": "object",
        "properties": {
          "member_id": {
            "type": "string",
            "format": "uuid",
            "title": "{@link IHubMember.id} of the member to be promoted to Villain Member",
            "description": "{@link IHubMember.id} of the member to be promoted to Villain Member."
          },
          "reason": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Reason for promotion to villain member",
            "description": "Reason for promotion to villain member.\n\nCan be null."
          }
        },
        "required": [
          "member_id",
          "reason"
        ],
        "description": "Villain member input information."
      },
      "IPageIAdminCustomerAggregate.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAdminCustomerAggregate.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IPage.IPagination": {
        "type": "object",
        "properties": {
          "current": {
            "type": "integer",
            "title": "Current page number",
            "description": "Current page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          },
          "records": {
            "type": "integer",
            "title": "Total records in the database",
            "description": "Total records in the database."
          },
          "pages": {
            "type": "integer",
            "title": "Total pages",
            "description": "Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."
          }
        },
        "required": [
          "current",
          "limit",
          "records",
          "pages"
        ],
        "description": "Page information."
      },
      "IAdminCustomerAggregate.ISummary": {
        "type": "object",
        "properties": {
          "villain": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubMemberVillain"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "villain": "#/components/schemas/IHubMemberVillain"
              }
            },
            "title": "Villain member information",
            "description": "Villain member information."
          },
          "elite": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubMemberElite"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "elite": "#/components/schemas/IHubMemberElite"
              }
            },
            "title": "Elite Member Information",
            "description": "Elite Member Information."
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "member": {
            "$ref": "#/components/schemas/IHubMember",
            "title": "General member information",
            "description": "General member information."
          }
        },
        "required": [
          "villain",
          "elite",
          "id",
          "member"
        ],
        "description": "Summary information."
      },
      "IAdminCustomerAggregate.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IAdminCustomerAggregate.IRequest.ISearch",
            "title": "Search information",
            "description": "Search information."
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-member.created_at"
                },
                {
                  "const": "-member.nickname"
                },
                {
                  "const": "+member.created_at"
                },
                {
                  "const": "+member.nickname"
                }
              ]
            },
            "title": "Sort criteria",
            "description": "Sort criteria."
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        }
      },
      "IAdminCustomerAggregate.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "channel_codes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "email": {
            "type": "string"
          },
          "nickname": {
            "type": "string"
          },
          "member": {
            "type": "object",
            "properties": {
              "type": {
                "oneOf": [
                  {
                    "const": "members"
                  },
                  {
                    "const": "sellers"
                  }
                ]
              },
              "from": {
                "type": "string",
                "format": "date"
              },
              "to": {
                "type": "string",
                "format": "date"
              },
              "access_type": {
                "oneOf": [
                  {
                    "const": "elite"
                  },
                  {
                    "const": "villain"
                  },
                  {
                    "const": "none"
                  }
                ]
              }
            }
          }
        }
      },
      "IHubMember.ILogin": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email address",
            "description": "Email address."
          },
          "password": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "pattern": "^[A-Za-z0-9@$!%*#?&^]{8,15}$"
              }
            ],
            "title": "Password",
            "description": "Password."
          }
        },
        "required": [
          "email",
          "password"
        ],
        "description": "Login information."
      },
      "IHubCoupon": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "designer": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IHubAdministrator.IInvert"
              },
              {
                "$ref": "#/components/schemas/IHubSeller.IInvert"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "administrator": "#/components/schemas/IHubAdministrator.IInvert",
                "seller": "#/components/schemas/IHubSeller.IInvert"
              }
            },
            "title": "The person who designed the discount coupon",
            "description": "The person who designed the discount coupon.\n\nEach administrator and seller can design a discount coupon."
          },
          "discount": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IHubCouponDiscount.IAmount"
              },
              {
                "$ref": "#/components/schemas/IHubCouponDiscount.IPercent"
              }
            ],
            "discriminator": {
              "propertyName": "unit",
              "mapping": {
                "amount": "#/components/schemas/IHubCouponDiscount.IAmount",
                "percent": "#/components/schemas/IHubCouponDiscount.IPercent"
              }
            },
            "title": "Discount information",
            "description": "Discount information."
          },
          "restriction": {
            "$ref": "#/components/schemas/IHubCouponRestriction",
            "title": "Constraint information",
            "description": "Constraint information."
          },
          "inventory": {
            "$ref": "#/components/schemas/IHubCouponInventory",
            "title": "Inventory information",
            "description": "Inventory information."
          },
          "criterias": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IHubCouponCriteriaOfChannel"
                },
                {
                  "$ref": "#/components/schemas/IHubCouponCriteriaOfSection"
                },
                {
                  "$ref": "#/components/schemas/IHubCouponCriteriaOfSeller"
                },
                {
                  "$ref": "#/components/schemas/IHubCouponCriteriaOfSale"
                },
                {
                  "$ref": "#/components/schemas/IHubCouponCriteriaOfFunnel"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "channel": "#/components/schemas/IHubCouponCriteriaOfChannel",
                  "section": "#/components/schemas/IHubCouponCriteriaOfSection",
                  "seller": "#/components/schemas/IHubCouponCriteriaOfSeller",
                  "sale": "#/components/schemas/IHubCouponCriteriaOfSale",
                  "funnel": "#/components/schemas/IHubCouponCriteriaOfFunnel"
                }
              }
            },
            "title": "List of conditions for discount coupons",
            "description": "List of conditions for discount coupons."
          },
          "name": {
            "type": "string",
            "title": "Representative name of discount coupon",
            "description": "Representative name of discount coupon."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          },
          "opened_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Issuance start date and time",
            "description": "Issuance start date and time."
          },
          "closed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Issuance End Date",
            "description": "Issuance End Date.\n\nTickets cannot be issued after this point.\n\nHowever, previously issued tickets can still be used until their\n{@link expired_at expiration date}."
          }
        },
        "required": [
          "id",
          "designer",
          "discount",
          "restriction",
          "inventory",
          "criterias",
          "name",
          "created_at",
          "opened_at",
          "closed_at"
        ],
        "description": "Discount coupon.\n\n`IHubCoupon` is an entity that embodies a discount coupon on the exchange.\n\nHowever, `IHubCoupon` only contains the specification information\nfor the discount coupon.\n\nPlease note that this is a different concept from {@link IHubCouponTickeet},\nwhich means issuing a discount coupon, or {@link IHubCouponTicketPayment},\nwhich means paying it.\n\nIn addition, discount coupons are applied to {@link IHubOrder order} units,\nbut each has its own unique {@link IHubCouponCriteria constraints}. For example,\na coupon with {@link IHubCouponCriteriaOfSeller seller constraints} can only be\nused for {@link IHubSale listings} registered by the corresponding\n{@link IHubSeller seller}, or cannot be used. There are also restrictions such as\na minimum amount limit for using a discount coupon, and a maximum discount amount.\n\nIn addition, you can set whether the discount coupon is issued publicly or only\nto those who know a specific issuance code. In addition, there are restrictions\nsuch as an expiration date for the issued discount coupon, or that it is issued\nonly to customers who come in through a specific path.\n\nFor more information, please refer to the properties and sub-entities below."
      },
      "IHubSeller.IInvert": {
        "type": "object",
        "properties": {
          "type": {
            "const": "seller",
            "title": "Discriminator for the discriminated union type",
            "description": "Discriminator for the discriminated union type."
          },
          "member": {
            "$ref": "#/components/schemas/IHubMember.IInvert",
            "title": "General Member Information",
            "description": "General Member Information.\n\nTo sign up as a seller member, you must first sign up as a general member."
          },
          "customer": {
            "$ref": "#/components/schemas/IHubCustomer.IInvert",
            "title": "Customer information",
            "description": "Customer information.\n\nThis system manages customers by connection unit.\n\nThat is, connection information for current seller members."
          },
          "citizen": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubCitizen"
              }
            ],
            "title": "Citizen authentication information",
            "description": "Citizen authentication information.\n\nSellers must complete citizen authentication."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          }
        },
        "required": [
          "type",
          "member",
          "customer",
          "citizen",
          "id",
          "created_at"
        ],
        "description": "Seller's reverse reference information.\n\nA data structure that lists seller information in reverse order, {@link IHubCustomer.member} -> {@link IHubMember.seller}. Starting with the administrator as the top-level object,\nit reversely references citizen, general member, and customer information."
      },
      "IHubCouponDiscount.IAmount": {
        "type": "object",
        "properties": {
          "unit": {
            "const": "amount",
            "title": "Discount Unit: Total",
            "description": "Discount Unit: Total."
          },
          "value": {
            "type": "number",
            "title": "Discount amount",
            "description": "Discount amount."
          },
          "threshold": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number",
                "exclusiveMinimum": true,
                "minimum": 0
              }
            ],
            "title": "Minimum purchase amount for discount",
            "description": "Minimum purchase amount for discount.\n\nIf this value is set, the discount coupon will not be applied to orders that fall below this value."
          }
        },
        "required": [
          "unit",
          "value",
          "threshold"
        ],
        "description": "Total discount."
      },
      "IHubCouponDiscount.IPercent": {
        "type": "object",
        "properties": {
          "unit": {
            "const": "percent",
            "title": "Discount Unit: Percentage",
            "description": "Discount Unit: Percentage."
          },
          "value": {
            "type": "number",
            "minimum": 0,
            "maximum": 100,
            "title": "Discount percentage",
            "description": "Discount percentage."
          },
          "threshold": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number",
                "exclusiveMinimum": true,
                "minimum": 0
              }
            ],
            "title": "Minimum purchase amount for discount",
            "description": "Minimum purchase amount for discount.\n\nIf this value is set, the discount coupon will not be applied to orders that fall below this value."
          },
          "limit": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number",
                "exclusiveMinimum": true,
                "minimum": 0
              }
            ],
            "title": "Maximum amount that can be discounted",
            "description": "Maximum amount that can be discounted.\n\nIf you set this value, no matter how much you order, it will not be discounted more than that amount."
          }
        },
        "required": [
          "unit",
          "value",
          "threshold",
          "limit"
        ],
        "description": "Percentage discount."
      },
      "IHubCouponRestriction": {
        "type": "object",
        "properties": {
          "access": {
            "oneOf": [
              {
                "const": "public"
              },
              {
                "const": "private"
              }
            ],
            "description": "Can discount coupons be viewed publicly?\n\n- `public`: Coupons available for ordering can be viewed in bulk\n- `private`: Unable to view in bulk\n- Randomly assigned by the seller or administrator\n- Can only be issued through a one-time link"
          },
          "exclusive": {
            "type": "boolean",
            "title": "Exclusivity",
            "description": "Exclusivity.\n\nAn exclusive discount coupon refers to a discount coupon that has\nan exclusive relationship with other discount coupons and can\nonly be used alone. In other words, when an exclusive discount coupon\nis used, no other discount coupons can be used for the same\n{@link IHubOrder order} or {@link IHubOrderGood product}."
          },
          "volume": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Issuance quantity limit",
            "description": "Issuance quantity limit.\n\nIf there is a limit on the issuance quantity, it is impossible to issue\ntickets exceeding this value.\n\nThat is, the concept of first-come-first-served N coupons is created."
          },
          "volume_per_citizen": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Limit the issuance quantity per person",
            "description": "Limit the issuance quantity per person.\n\nAs a limit on the total issuance quantity per person, it is common\nto assign 1 to limit duplicate issuance to the same citizen, or use\nthe `null` value to not impose a limit.\n\nOf course, you can limit the total issuance quantity to the same citizen\nby assigning a value of N."
          },
          "expired_in": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Expiration date",
            "description": "Expiration date.\n\nThe concept is that after receiving a discount coupon ticket,\nit expires after N days.\n\nTherefore, customers should consume the ticket within N days\nafter it is issued."
          },
          "expired_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Expiration date",
            "description": "Expiration date.\n\nThe concept of expiration after YYYY-MM-DD has passed after\nthe discount coupon ticket is issued.\n\nCan be double-constrained with {@link expired_in}."
          }
        },
        "required": [
          "access",
          "exclusive",
          "volume",
          "volume_per_citizen",
          "expired_in",
          "expired_at"
        ],
        "description": "Constraints of discount coupons."
      },
      "IHubCouponInventory": {
        "type": "object",
        "properties": {
          "volume": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Remaining quantity",
            "description": "Remaining quantity."
          },
          "volume_per_citizen": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Remaining quantity per person",
            "description": "Remaining quantity per person."
          }
        },
        "required": [
          "volume",
          "volume_per_citizen"
        ],
        "description": "Remaining stock information for discount coupons."
      },
      "IHubCouponCriteriaOfChannel": {
        "type": "object",
        "properties": {
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubCouponCriteriaOfChannel.IChannelTo"
            },
            "title": "List of target channels and categories",
            "description": "List of target channels and categories."
          },
          "type": {
            "const": "channel",
            "title": "Detailed type of condition",
            "description": "Detailed type of condition.\n\nServes as identifier for discriminated union."
          },
          "direction": {
            "oneOf": [
              {
                "const": "include"
              },
              {
                "const": "exclude"
              }
            ],
            "title": "Direction in which constraints are applied",
            "description": "Direction in which constraints are applied.\n\n- include: inclusion conditions\n- exclude: exclusion conditions"
          }
        },
        "required": [
          "channels",
          "type",
          "direction"
        ],
        "description": "Conditions for the channel of the discount coupon.\n\n`IHubCouponCriteriaOfChannel` is a subtype entity of\n{@link IHubCouponCriteriaBase}, and is used to set conditions for a specific\n{@link IHubChannel channel} or a {@link IHubChannelCategory category} of the\nchannel.\n\nIf the hub_coupon_criterias.direction value is \"include\", the coupon can be\nused only for the corresponding channel (or category), and if it is \"exclude\",\nthe coupon cannot be used. And if there are multiple\n`hub_coupon_criteria_of_channels` records in a coupon, then the condition is set\nfor each group. For the target channels and categories, the coupon can be applied\nor not applied."
      },
      "IHubCouponCriteriaOfChannel.IChannelTo": {
        "type": "object",
        "properties": {
          "channel": {
            "$ref": "#/components/schemas/IHubChannel",
            "title": "Target channel information",
            "description": "Target channel information."
          },
          "categories": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IHubChannelCategory.IInvert"
                },
                "minItems": 1
              }
            ],
            "title": "Target category list information",
            "description": "Target category list information.\n\nIf this value is `null`, all categories are the target."
          }
        },
        "required": [
          "channel",
          "categories"
        ],
        "description": "Applicable channel and category information."
      },
      "IHubChannelCategory.IInvert": {
        "type": "object",
        "properties": {
          "parent": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubChannelCategory.IInvert"
              }
            ],
            "title": "Parent category",
            "description": "Parent category."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Primary key"
          },
          "parent_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "title": "{@link IHubChannelCategory.id} of the parent category",
            "description": "{@link IHubChannelCategory.id} of the parent category."
          },
          "name": {
            "type": "string",
            "title": "Channel category name",
            "description": "Channel category name."
          },
          "background_color": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "const": "inspired_red"
              },
              {
                "const": "apricot"
              },
              {
                "const": "yellow"
              },
              {
                "const": "green"
              },
              {
                "const": "blue"
              },
              {
                "const": "violet"
              },
              {
                "const": "pink"
              },
              {
                "const": "black"
              }
            ],
            "title": "Category background color",
            "description": "Category background color."
          },
          "background_image_url": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Category background image",
            "description": "Category background image."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          }
        },
        "required": [
          "parent",
          "id",
          "parent_id",
          "name",
          "background_color",
          "background_image_url",
          "created_at"
        ],
        "description": "Channel category reverse information."
      },
      "IHubCouponCriteriaOfSection": {
        "type": "object",
        "properties": {
          "sections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSection"
            },
            "minItems": 1,
            "title": "Section List",
            "description": "Section List.\n\nA list of sections to include or exclude."
          },
          "type": {
            "const": "section",
            "title": "Detailed type of condition",
            "description": "Detailed type of condition.\n\nServes as identifier for discriminated union."
          },
          "direction": {
            "oneOf": [
              {
                "const": "include"
              },
              {
                "const": "exclude"
              }
            ],
            "title": "Direction in which constraints are applied",
            "description": "Direction in which constraints are applied.\n\n- include: inclusion conditions\n- exclude: exclusion conditions"
          }
        },
        "required": [
          "sections",
          "type",
          "direction"
        ],
        "description": "Conditions for a section of a discount coupon.\n\n`IHubCouponCriteriaOfSection` is a subtype entity of\n{@link IHubCouponCriteriaBase}, and is used to set conditions for a specific\n{@link IHubSection}.\n\nIf the {@link direction} value is \"include\", the coupon can only be used for\nthat section, and if it is \"exclude\", the coupon cannot be used."
      },
      "IHubSection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Primary key"
          },
          "code": {
            "type": "string",
            "description": "Separator code"
          },
          "name": {
            "type": "string",
            "description": "Section Name"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Record creation date and time"
          }
        },
        "required": [
          "id",
          "code",
          "name",
          "created_at"
        ],
        "description": "Section information.\n\n`IHubSection` is an entity designed to express section information in the\nmarket.\n\nIf we compare the section mentioned here to a mart, it means a spatially\nseparated area within the store, such as \"fruit corner\" or \"meat corner\".\nCurrently, the only section that exists in Luton's Generative Hub is\n\"API Market\", but it is a concept designed in advance for future expansion.\n\nAnd unlike {@link IHubChannelCategory}, which can simultaneously classify one\n{@link IHubSale listing}, a section can only classify one listing.\n\n> The basic code is `generative`"
      },
      "IHubCouponCriteriaOfSeller": {
        "type": "object",
        "properties": {
          "sellers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSeller"
            },
            "minItems": 1,
            "title": "List of sellers",
            "description": "List of sellers.\n\nA list of sellers to include or exclude."
          },
          "type": {
            "const": "seller",
            "title": "Detailed type of condition",
            "description": "Detailed type of condition.\n\nServes as identifier for discriminated union."
          },
          "direction": {
            "oneOf": [
              {
                "const": "include"
              },
              {
                "const": "exclude"
              }
            ],
            "title": "Direction in which constraints are applied",
            "description": "Direction in which constraints are applied.\n\n- include: inclusion conditions\n- exclude: exclusion conditions"
          }
        },
        "required": [
          "sellers",
          "type",
          "direction"
        ],
        "description": "Conditions for the seller of the discount coupon.\n\n`IHubCouponCriteriaOfSeller` is a subtype entity of\n{@link IHubCouponCriteriaBase}, and is used to set conditions\nfor a specific {@link IHubSeller}.\n\nIf the {@link direction} value is \"include\", the coupon can only be\nused for the seller, and if it is \"exclude\", the coupon cannot be used."
      },
      "IHubCouponCriteriaOfSale": {
        "type": "object",
        "properties": {
          "sales": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSale.ISummary"
            },
            "minItems": 1,
            "title": "List of properties",
            "description": "List of properties.\n\nA list of properties to include or exclude."
          },
          "type": {
            "const": "sale",
            "title": "Detailed type of condition",
            "description": "Detailed type of condition.\n\nServes as identifier for discriminated union."
          },
          "direction": {
            "oneOf": [
              {
                "const": "include"
              },
              {
                "const": "exclude"
              }
            ],
            "title": "Direction in which constraints are applied",
            "description": "Direction in which constraints are applied.\n\n- include: inclusion conditions\n- exclude: exclusion conditions"
          }
        },
        "required": [
          "sales",
          "type",
          "direction"
        ],
        "description": "Conditions for the sale of the discount coupon.\n\n`IHubCouponCriteriaOfSale` is a subtype entity of\n{@link IHubCouponCriteriaBase}, and is used to set conditions for\na specific {@link IHubSale}.\n\nIf the {@link direction} value is \"include\", the coupon can only be\nused for the sale, and if it is \"exclude\", the coupon cannot be used."
      },
      "IHubSale.ISummary": {
        "type": "object",
        "properties": {
          "seller": {
            "$ref": "#/components/schemas/IHubSeller.IInvert",
            "title": "The seller who wrote this listing",
            "description": "The seller who wrote this listing."
          },
          "section": {
            "$ref": "#/components/schemas/IHubSection",
            "title": "The belonging section",
            "description": "The belonging section."
          },
          "audit": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubSaleAudit.IInvert"
              }
            ],
            "title": "Audit information",
            "description": "Audit information.\n\nIf this value is `null` or the internal attribute value\n{@link IHubSaleAudit.approved_at} is `null`, the customer cannot view or\nbrowse/purchase it at all. Only the seller and the administrator are aware\nof the existence of the listing."
          },
          "bookmarked_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "The point in time when you added it to your bookmarks",
            "description": "The point in time when you added it to your bookmarks."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "The ID of the property",
            "description": "The ID of the property."
          },
          "snapshot_id": {
            "type": "string",
            "format": "uuid",
            "title": "The ID of the snapshot",
            "description": "The ID of the snapshot."
          },
          "latest": {
            "type": "boolean",
            "title": "Last snapshot",
            "description": "Last snapshot.\n\nIs this snapshot the last snapshot of the property?\n\nHowever, the criteria for \"last\" vary depending on the perspective of\nthe user viewing this property.\n\n- Customer perspective: The most recently approved property\n- Seller/Administrator: The most recently created property"
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleChannel"
            },
            "title": "Channel/Category List",
            "description": "Channel/Category List.\n\nA list of channels and categories in which this item is sold."
          },
          "aggregate": {
            "$ref": "#/components/schemas/IHubSaleAggregate",
            "title": "Aggregate/performance information for this listing (or snapshot)",
            "description": "Aggregate/performance information for this listing (or snapshot)."
          },
          "content": {
            "$ref": "#/components/schemas/IHubSaleContent.IInvert",
            "title": "Content information",
            "description": "Content information.\n\nDescriptive information including the language code.\n\nIf you want to see other language written contents, call the below API function.\n\n- {@link HubApi.functional.hub.customers.sales.contents}\n- {@link HubApi.functional.hub.customers.sales.snapshots.contents}"
          },
          "units": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleUnit.ISummary"
            },
            "minItems": 1,
            "title": "Unit List",
            "description": "Unit List.\n\nA record representing the products currently being sold, containing\ninformation about the {@link IHubSaleUnitOption options} that can be\nset for each product, and the {@link IHubSaleUnitStock stock} that\ncan be configured by selecting options."
          },
          "version": {
            "type": "string",
            "title": "Version name",
            "description": "Version name.\n\nYou can set a different value than {@link ISwaggerInfo.version}.\n\nThat is, the version name in the server spec (Swagger document) and\nthe version name in the product may be different."
          },
          "activated_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Activation time of the snapshot",
            "description": "Activation time of the snapshot.\n\nThe time this snapshot was first activated after it was approved for review."
          },
          "expired_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "The time when the APIs of the current listing (snapshot) are stopped",
            "description": "The time when the APIs of the current listing (snapshot) are stopped.\n\nSince the transaction target is an API, the seller should not\nimmediately delete the listing just because it has stopped selling.\nIt should guarantee a minimum period of use, so that customers using\nthe API will respond to this.\n\nTherefore, when the listing is stopped, it is made to disappear after\na certain grace period.\n\nOf course, if it is a listing that has never been sold, it does not apply."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          },
          "paused_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Temporary suspension of sales",
            "description": "Temporary suspension of sales.\n\nThe seller has temporarily suspended API sales for some reason.\n\nCustomers can still view the listing on the listing and details page,\nbut the listing will be labeled as \"This listing is suspended by the\nseller.\""
          },
          "suspended_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Temporary suspension of sales",
            "description": "Temporary suspension of sales.\n\nThe seller has suspended sales for some reason.\n\nCustomers will not be able to view the listing or details page at all.\nAt first glance, it looks similar to a soft delete, but the difference is\nthat the seller and the administrator can still view it, and the sale can\nbe resumed at any time.\n\nAlso, even if the seller has suspended, previous buyers of the listing\ncan still use the API. The time of suspension of the API can be found in\nthe {@link IHubSaleSnapshot.expired_at} property."
          },
          "opened_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Sales start date",
            "description": "Sales start date."
          },
          "closed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "The sale end date",
            "description": "The sale end date.\n\nIf this value is NULL, the sale will continue forever."
          }
        },
        "required": [
          "seller",
          "section",
          "audit",
          "bookmarked_at",
          "id",
          "snapshot_id",
          "latest",
          "channels",
          "aggregate",
          "content",
          "units",
          "version",
          "activated_at",
          "expired_at",
          "created_at",
          "paused_at",
          "suspended_at",
          "opened_at",
          "closed_at"
        ],
        "description": "Summary information about the property."
      },
      "IHubSaleAudit.IInvert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "administrator": {
            "$ref": "#/components/schemas/IHubAdministrator.IInvert",
            "title": "The administrator who initiated the review",
            "description": "The administrator who initiated the review."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          },
          "rejected_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Date of rejection",
            "description": "Date of rejection.\n\nThe date of the most recent rejection is recorded."
          },
          "approved_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Date and time of review approval",
            "description": "Date and time of review approval."
          }
        },
        "required": [
          "id",
          "administrator",
          "created_at",
          "rejected_at",
          "approved_at"
        ],
        "description": "Back reference information for the review article.\n\nBack reference information from the listing, only the rejection and\napproval dates are recorded."
      },
      "IHubSaleChannel": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubChannelCategory"
            },
            "title": "List of sale categories",
            "description": "List of sale categories.\n\nIf the length of this attribute value is 0, the item is \"unclassified\"\nfor the category, and can be sold in all categories of the channel\nit belongs to."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Primary key"
          },
          "code": {
            "type": "string",
            "description": "Separator code"
          },
          "name": {
            "type": "string",
            "description": "Channel name"
          },
          "exclusive": {
            "type": "boolean",
            "description": "Exclusivity\n\nIf this value is True, the channel is disconnected and customer information is not shared."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Record creation date and time"
          }
        },
        "required": [
          "categories",
          "id",
          "code",
          "name",
          "exclusive",
          "created_at"
        ],
        "description": "Sales channel/category information for the item.\n\n`IHubSaleChannel` is an entity that visualizes the channel/category\ninformation through which the item is sold."
      },
      "IHubChannelCategory": {
        "type": "object",
        "properties": {
          "parent": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubChannelCategory.IInvert"
              }
            ],
            "title": "Disinformation on the parent category",
            "description": "Disinformation on the parent category."
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubChannelCategory.IHierarchical"
            },
            "title": "List of child categories",
            "description": "List of child categories."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Primary key"
          },
          "parent_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "title": "{@link IHubChannelCategory.id} of the parent category",
            "description": "{@link IHubChannelCategory.id} of the parent category."
          },
          "name": {
            "type": "string",
            "title": "Channel category name",
            "description": "Channel category name."
          },
          "background_color": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "const": "inspired_red"
              },
              {
                "const": "apricot"
              },
              {
                "const": "yellow"
              },
              {
                "const": "green"
              },
              {
                "const": "blue"
              },
              {
                "const": "violet"
              },
              {
                "const": "pink"
              },
              {
                "const": "black"
              }
            ],
            "title": "Category background color",
            "description": "Category background color."
          },
          "background_image_url": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Category background image",
            "description": "Category background image."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          }
        },
        "required": [
          "parent",
          "children",
          "id",
          "parent_id",
          "name",
          "background_color",
          "background_image_url",
          "created_at"
        ],
        "description": "Channel category information.\n\n`IHubChannelCategory` is a concept that means a classification category\nwithin a specific channel, and it is exactly the same as the concept that\nis usually referred to as \"category\" in the exchange.\n\nAnd `IHubChannelCategory` means a \"corner\", which is an independent\nspatial information in the offline market, and unlike {@link IHubSection},\nwhere simultaneous classification of {@link IHubSale listings} is impossible,\none listing can be classified into multiple categories at the same time.\n\nFor example, beef and grapes can belong to the fruit corner and the meat corner,\nrespectively, but they do not belong to any of the categories, and can form\nindependent M:N relationships with various categories according to the\ncharacteristics of each product.\n\nProduct | Corner       | Classification\n--------|--------------|-----------------------------------\nBeef    | Meat Corner  | Frozen Food, Meat, Specialty Food\nGrape   | Fruit Corner | Fresh food, convenience food\n\nIn addition, the categories have a 1: N recursive structure, so a\nhierarchical expression is possible as shown below. Also, you can set\ndifferent categories for each {@link IHubChannel channel}, so you can\nfreely set the category classification you want for each channel.\n\n- Grocery > Meat > Frozen\n- Electronics > Laptop > 15-inch\n- Miscellaneous goods > Wallets\n\nAlso, since the API supports (or plans to support) a merge function\nbetween multiple categories, there will be no particular burden in\nconstantly editing the categories."
      },
      "IHubChannelCategory.IHierarchical": {
        "type": "object",
        "properties": {
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubChannelCategory.IHierarchical"
            },
            "title": "List of child categories",
            "description": "List of child categories."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Primary key"
          },
          "parent_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "title": "{@link IHubChannelCategory.id} of the parent category",
            "description": "{@link IHubChannelCategory.id} of the parent category."
          },
          "name": {
            "type": "string",
            "title": "Channel category name",
            "description": "Channel category name."
          },
          "background_color": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "const": "inspired_red"
              },
              {
                "const": "apricot"
              },
              {
                "const": "yellow"
              },
              {
                "const": "green"
              },
              {
                "const": "blue"
              },
              {
                "const": "violet"
              },
              {
                "const": "pink"
              },
              {
                "const": "black"
              }
            ],
            "title": "Category background color",
            "description": "Category background color."
          },
          "background_image_url": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Category background image",
            "description": "Category background image."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          }
        },
        "required": [
          "children",
          "id",
          "parent_id",
          "name",
          "background_color",
          "background_image_url",
          "created_at"
        ],
        "description": "Hierarchical information."
      },
      "IHubSaleAggregate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Listing ID\n{@link IHubSale.id}"
          },
          "good": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubSaleGoodAggregate"
              }
            ],
            "title": "Aggregated information about ordered products",
            "description": "Aggregated information about ordered products."
          },
          "inquiry": {
            "$ref": "#/components/schemas/IHubSaleInquiryAggregate",
            "title": "Aggregate information about the inquiry",
            "description": "Aggregate information about the inquiry."
          },
          "issue": {
            "$ref": "#/components/schemas/IHubSaleIssueAggregate",
            "title": "Aggregate information about the issue",
            "description": "Aggregate information about the issue."
          },
          "view": {
            "$ref": "#/components/schemas/IHubSaleViewCountAggregate",
            "title": "Property search statistics",
            "description": "Property search statistics."
          },
          "fork": {
            "$ref": "#/components/schemas/IHubSaleForkAggregate",
            "description": "Download statistics for the listing"
          },
          "bookmark": {
            "$ref": "#/components/schemas/IHubSaleBookmarkAggregate",
            "description": "Bookmark statistics for listings"
          }
        },
        "required": [
          "id",
          "good",
          "inquiry",
          "issue",
          "view",
          "fork",
          "bookmark"
        ],
        "description": "Aggregated information about the listing."
      },
      "IHubSaleGoodAggregate": {
        "type": "object",
        "properties": {
          "date": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string",
                "format": "date"
              }
            ],
            "title": "date",
            "description": "date."
          },
          "latency": {
            "type": "number",
            "title": "Product delay time",
            "description": "Product delay time."
          },
          "knock_count": {
            "type": "integer",
            "title": "Knock count",
            "description": "Knock count.\n\n{@link IHubOrder order request} was made as {@link IHubOrderGood product},\n\nincluding the number of cases that have not yet been {@link IHubOrder.published_at published}.\n\n- (not published) = (knock) - (publish)"
          },
          "publish_count": {
            "type": "integer",
            "title": "Number of sales",
            "description": "Number of sales.\n\nThe number of times an item has been confirmed as a {@link IHubOrderGood order item}."
          },
          "failed_count": {
            "type": "integer",
            "title": "Number of failures",
            "description": "Number of failures."
          },
          "success_count": {
            "type": "integer",
            "title": "Number of successes",
            "description": "Number of successes."
          },
          "total_call_count": {
            "type": "integer",
            "title": "Number of API calls",
            "description": "Number of API calls."
          },
          "fixed": {
            "type": "number",
            "minimum": 0,
            "title": "Total fixed cost sales",
            "description": "Total fixed cost sales."
          },
          "variable": {
            "type": "number",
            "minimum": 0,
            "title": "Variable cost total sales",
            "description": "Variable cost total sales."
          }
        },
        "required": [
          "date",
          "latency",
          "knock_count",
          "publish_count",
          "failed_count",
          "success_count",
          "total_call_count",
          "fixed",
          "variable"
        ],
        "description": "Aggregated information about the ordered items for sale."
      },
      "IHubSaleInquiryAggregate": {
        "type": "object",
        "properties": {
          "question": {
            "$ref": "#/components/schemas/IHubSaleInquiryAggregate.IQuestion",
            "title": "Question aggregate information",
            "description": "Question aggregate information."
          },
          "review": {
            "$ref": "#/components/schemas/IHubSaleInquiryAggregate.IReview",
            "title": "Review aggregation information",
            "description": "Review aggregation information."
          }
        },
        "required": [
          "question",
          "review"
        ],
        "description": "Aggregated information on property related inquiries."
      },
      "IHubSaleInquiryAggregate.IQuestion": {
        "type": "object",
        "properties": {
          "hit": {
            "type": "integer",
            "title": "Views",
            "description": "Views."
          },
          "count": {
            "type": "integer",
            "title": "Number of questions",
            "description": "Number of questions."
          },
          "answer_count": {
            "type": "integer",
            "title": "Number of replies",
            "description": "Number of replies."
          }
        },
        "required": [
          "hit",
          "count",
          "answer_count"
        ],
        "description": "Question aggregate information."
      },
      "IHubSaleInquiryAggregate.IReview": {
        "type": "object",
        "properties": {
          "hit": {
            "type": "integer",
            "title": "Views",
            "description": "Views."
          },
          "count": {
            "type": "integer",
            "title": "Number of reviews",
            "description": "Number of reviews."
          },
          "answer_count": {
            "type": "integer",
            "title": "Number of replies",
            "description": "Number of replies."
          },
          "statistics": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubSaleInquiryAggregate.IStatistics"
              }
            ],
            "title": "Rating statistics",
            "description": "Rating statistics."
          },
          "intervals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleInquiryAggregate.IInterval"
            },
            "minItems": 0,
            "maxItems": 11,
            "title": "Statistical information by rating range",
            "description": "Statistical information by rating range."
          }
        },
        "required": [
          "hit",
          "count",
          "answer_count",
          "statistics",
          "intervals"
        ],
        "description": "Review aggregation information."
      },
      "IHubSaleInquiryAggregate.IStatistics": {
        "type": "object",
        "properties": {
          "average": {
            "type": "number",
            "title": "average",
            "description": "average."
          },
          "stdev": {
            "type": "number",
            "title": "Standard deviation",
            "description": "Standard deviation."
          }
        },
        "required": [
          "average",
          "stdev"
        ],
        "description": "Rating statistics."
      },
      "IHubSaleInquiryAggregate.IInterval": {
        "type": "object",
        "properties": {
          "score": {
            "type": "number",
            "title": "Section",
            "description": "Section."
          },
          "count": {
            "type": "number",
            "title": "Number",
            "description": "Number."
          }
        },
        "required": [
          "score",
          "count"
        ],
        "description": "Statistical information by rating range."
      },
      "IHubSaleIssueAggregate": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "title": "Number of issue posts",
            "description": "Number of issue posts."
          },
          "closed_count": {
            "type": "number",
            "title": "Number of issues resolved",
            "description": "Number of issues resolved."
          },
          "opened_count": {
            "type": "number",
            "title": "Number of open issues",
            "description": "Number of open issues."
          },
          "fee": {
            "$ref": "#/components/schemas/IHubSaleIssueAggregate.IFee",
            "title": "Statistical information about overpayments",
            "description": "Statistical information about overpayments."
          }
        },
        "required": [
          "count",
          "closed_count",
          "opened_count",
          "fee"
        ],
        "description": "Aggregated information on property-related issues."
      },
      "IHubSaleIssueAggregate.IFee": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "title": "Number of billing statements submitted",
            "description": "Number of billing statements submitted."
          },
          "approved_count": {
            "type": "number",
            "title": "Number of accepted charges",
            "description": "Number of accepted charges."
          },
          "payment": {
            "type": "number",
            "title": "Total amount paid",
            "description": "Total amount paid."
          }
        },
        "required": [
          "count",
          "approved_count",
          "payment"
        ],
        "description": "Statistical information about overpayments."
      },
      "IHubSaleViewCountAggregate": {
        "type": "object",
        "properties": {
          "date": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string",
                "format": "date"
              }
            ],
            "title": "date",
            "description": "date."
          },
          "view_count": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "type": "number",
                "minimum": 0
              }
            ],
            "title": "Number of views",
            "description": "Number of views."
          },
          "viewer_count": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "type": "number",
                "minimum": 0
              }
            ],
            "title": "Number of views",
            "description": "Number of views."
          },
          "total_view_count": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "type": "number",
                "minimum": 0
              }
            ],
            "title": "Total views",
            "description": "Total views."
          }
        },
        "required": [
          "date",
          "view_count",
          "viewer_count",
          "total_view_count"
        ],
        "description": "Aggregate information on the number of listing views."
      },
      "IHubSaleForkAggregate": {
        "type": "object",
        "properties": {
          "fork_count": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "type": "number",
                "minimum": 0
              }
            ]
          },
          "total_fork_count": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "type": "number",
                "minimum": 0
              }
            ]
          }
        },
        "required": [
          "fork_count",
          "total_fork_count"
        ],
        "description": "Aggregate download information for this property."
      },
      "IHubSaleBookmarkAggregate": {
        "type": "object",
        "properties": {
          "bookmark_count": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "type": "number",
                "minimum": 0
              }
            ],
            "title": "Number of bookmarks",
            "description": "Number of bookmarks."
          },
          "total_bookmark_count": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "type": "number",
                "minimum": 0
              }
            ],
            "title": "Total number of bookmarks",
            "description": "Total number of bookmarks."
          }
        },
        "required": [
          "bookmark_count",
          "total_bookmark_count"
        ]
      },
      "IHubSaleContent.IInvert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "lang_code": {
            "type": "string",
            "title": "Language code",
            "description": "Language code."
          },
          "original": {
            "type": "boolean",
            "title": "Whether the language is original or not",
            "description": "Whether the language is original or not."
          },
          "title": {
            "type": "string",
            "title": "title",
            "description": "title."
          },
          "summary": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "A brief explanation",
            "description": "A brief explanation."
          },
          "version_description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Version Description",
            "description": "Version Description.\n\nYou can record information about the version description."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "A list of search tag values",
            "description": "A list of search tag values."
          },
          "icons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile"
            },
            "title": "List of representative product images",
            "description": "List of representative product images."
          }
        },
        "required": [
          "id",
          "lang_code",
          "original",
          "title",
          "summary",
          "version_description",
          "tags",
          "icons"
        ]
      },
      "IAttachmentFile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of attachment file",
            "description": "Creation time of attachment file."
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "File name, except extension",
            "description": "File name, except extension.\n\nPossible to make empy string like `.gitignore` case."
          },
          "extension": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "minLength": 1,
                "maxLength": 8
              }
            ],
            "title": "Extension",
            "description": "Extension.\n\nPossible to omit like `README` case."
          },
          "url": {
            "type": "string",
            "format": "uri",
            "title": "URL path of the real file",
            "description": "URL path of the real file."
          }
        },
        "required": [
          "id",
          "created_at",
          "name",
          "extension",
          "url"
        ],
        "description": "Attachment File.\n\nEvery attachment files that are managed in current system.\n\nFor reference, it is possible to omit one of file {@link name}\nor {@link extension} like `.gitignore` or `README` case, but not\npossible to omit both of them."
      },
      "IHubSaleUnit.ISummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "name": {
            "type": "string",
            "title": "The representative name of the unit",
            "description": "The representative name of the unit."
          },
          "primary": {
            "type": "boolean",
            "title": "Whether it is a main unit or not",
            "description": "Whether it is a main unit or not.\n\nIt is a simple notational attribute, and has no meaning beyond labeling."
          },
          "required": {
            "type": "boolean",
            "title": "Whether this unit is mandatory",
            "description": "Whether this unit is mandatory.\n\nIf this unit is mandatory, the customer cannot purchase it without\nexcluding it."
          },
          "purposes": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "const": "app"
                    },
                    {
                      "const": "agent"
                    }
                  ]
                },
                "uniqueItems": true
              }
            ],
            "title": "Purpose of extracting released units",
            "description": "Purpose of extracting released units.\n\nRefer to {@link IStudioRepositoryReleaseNode.Purpose}."
          },
          "connector_icons": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uri"
                },
                "uniqueItems": true
              }
            ],
            "title": "List of connector icons",
            "description": "List of connector icons.\n\nThe connector icon represents the icons of external services that\nthis property is linked to."
          },
          "migrated": {
            "type": "boolean",
            "title": "Whether the tool has been transferred from Studio v1.0",
            "description": "Whether the tool has been transferred from Studio v1.0."
          }
        },
        "required": [
          "id",
          "name",
          "primary",
          "required",
          "purposes",
          "connector_icons",
          "migrated"
        ],
        "description": "Summary information about the listing unit."
      },
      "IHubCouponCriteriaOfFunnel": {
        "type": "object",
        "properties": {
          "funnels": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IHubCouponCriteriaOfFunnel.IPathFunnel"
                },
                {
                  "$ref": "#/components/schemas/IHubCouponCriteriaOfFunnel.IReferrerFunnel"
                },
                {
                  "$ref": "#/components/schemas/IHubCouponCriteriaOfFunnel.IVariableFunnel"
                }
              ],
              "discriminator": {
                "propertyName": "kind",
                "mapping": {
                  "url": "#/components/schemas/IHubCouponCriteriaOfFunnel.IPathFunnel",
                  "referrer": "#/components/schemas/IHubCouponCriteriaOfFunnel.IReferrerFunnel",
                  "variable": "#/components/schemas/IHubCouponCriteriaOfFunnel.IVariableFunnel"
                }
              }
            },
            "minItems": 1,
            "title": "A list of individual conditions for each inflow path",
            "description": "A list of individual conditions for each inflow path."
          },
          "type": {
            "const": "funnel",
            "title": "Detailed type of condition",
            "description": "Detailed type of condition.\n\nServes as identifier for discriminated union."
          },
          "direction": {
            "oneOf": [
              {
                "const": "include"
              },
              {
                "const": "exclude"
              }
            ],
            "title": "Direction in which constraints are applied",
            "description": "Direction in which constraints are applied.\n\n- include: inclusion conditions\n- exclude: exclusion conditions"
          }
        },
        "required": [
          "funnels",
          "type",
          "direction"
        ],
        "description": "Limiting the inflow path of discount coupons.\n\n{@link IHubCouponCriteriaOfFunnel} is a subtype entity of\n{@link IHubCouponCriteria}, and is used when you want to issue or exclude\n{@link IHubCoupon discount coupons} only to customers who come from\na specific path.\n\nAnd limiting the inflow path is possible in three ways as follows. First is\n{@link IHubCustomer.referrer}, and in addition, by parsing\n{@link IHubCustomer.href}, which records the customer's access address,\nrestrictions can be applied to specific URLs or variable units."
      },
      "IHubCouponCriteriaOfFunnel.IPathFunnel": {
        "type": "object",
        "properties": {
          "kind": {
            "const": "url",
            "title": "Type of inflow path",
            "description": "Type of inflow path.\n\n- url: URL path address accessed"
          },
          "value": {
            "type": "string",
            "format": "uri",
            "title": "Path value",
            "description": "Path value."
          }
        },
        "required": [
          "kind",
          "value"
        ],
        "description": "Restricting inflow paths through Path values."
      },
      "IHubCouponCriteriaOfFunnel.IReferrerFunnel": {
        "type": "object",
        "properties": {
          "kind": {
            "const": "referrer",
            "title": "Type of inflow path",
            "description": "Type of inflow path.\n\n- referrer: Referrer address of the inflow before accessing this site."
          },
          "value": {
            "type": "string",
            "format": "uri",
            "title": "Inflow path value",
            "description": "Inflow path value."
          }
        },
        "required": [
          "kind",
          "value"
        ],
        "description": "Restricting inflow paths through Referrer address values."
      },
      "IHubCouponCriteriaOfFunnel.IVariableFunnel": {
        "type": "object",
        "properties": {
          "kind": {
            "const": "variable",
            "title": "Type of inflow path",
            "description": "Type of inflow path.\n\n- variable: URL query"
          },
          "key": {
            "type": "string",
            "title": "Key value in URL query",
            "description": "Key value in URL query."
          },
          "value": {
            "type": "string",
            "title": "The value in the URL query",
            "description": "The value in the URL query."
          }
        },
        "required": [
          "kind",
          "key",
          "value"
        ],
        "description": "Limiting inflow paths through variables."
      },
      "IHubCoupon.ICreate": {
        "type": "object",
        "properties": {
          "criterias": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IHubCouponCriteriaOfChannel.ICreate"
                },
                {
                  "$ref": "#/components/schemas/IHubCouponCriteriaOfSection.ICreate"
                },
                {
                  "$ref": "#/components/schemas/IHubCouponCriteriaOfSeller.ICreate"
                },
                {
                  "$ref": "#/components/schemas/IHubCouponCriteriaOfSale.ICreate"
                },
                {
                  "$ref": "#/components/schemas/IHubCouponCriteriaOfFunnel.ICreate"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "channel": "#/components/schemas/IHubCouponCriteriaOfChannel.ICreate",
                  "section": "#/components/schemas/IHubCouponCriteriaOfSection.ICreate",
                  "seller": "#/components/schemas/IHubCouponCriteriaOfSeller.ICreate",
                  "sale": "#/components/schemas/IHubCouponCriteriaOfSale.ICreate",
                  "funnel": "#/components/schemas/IHubCouponCriteriaOfFunnel.ICreate"
                }
              }
            },
            "title": "List of restrictions on discount coupons",
            "description": "List of restrictions on discount coupons."
          },
          "discount": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IHubCouponDiscount.IAmount"
              },
              {
                "$ref": "#/components/schemas/IHubCouponDiscount.IPercent"
              }
            ],
            "discriminator": {
              "propertyName": "unit",
              "mapping": {
                "amount": "#/components/schemas/IHubCouponDiscount.IAmount",
                "percent": "#/components/schemas/IHubCouponDiscount.IPercent"
              }
            },
            "title": "Discount information",
            "description": "Discount information."
          },
          "restriction": {
            "$ref": "#/components/schemas/IHubCouponRestriction",
            "title": "Constraint information",
            "description": "Constraint information."
          },
          "name": {
            "type": "string",
            "title": "Representative name of discount coupon",
            "description": "Representative name of discount coupon."
          },
          "opened_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          },
          "closed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Issuance End Date",
            "description": "Issuance End Date.\n\nTickets cannot be issued after this point.\n\nHowever, previously issued tickets can still be used until their\n{@link expired_at expiration date}."
          }
        },
        "required": [
          "criterias",
          "discount",
          "restriction",
          "name",
          "opened_at",
          "closed_at"
        ],
        "description": "Enter discount coupon information."
      },
      "IHubCouponCriteriaOfChannel.ICreate": {
        "type": "object",
        "properties": {
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubCouponCriteriaOfChannel.IChannelTo.ICreate"
            },
            "title": "List of target channels and categories",
            "description": "List of target channels and categories."
          },
          "type": {
            "const": "channel",
            "title": "Detailed type of condition",
            "description": "Detailed type of condition.\n\nServes as identifier for discriminated union."
          },
          "direction": {
            "oneOf": [
              {
                "const": "include"
              },
              {
                "const": "exclude"
              }
            ],
            "title": "Direction in which constraints are applied",
            "description": "Direction in which constraints are applied.\n\n- include: inclusion conditions\n- exclude: exclusion conditions"
          }
        },
        "required": [
          "channels",
          "type",
          "direction"
        ],
        "description": "Input information on the conditions for the channel of the discount coupon."
      },
      "IHubCouponCriteriaOfChannel.IChannelTo.ICreate": {
        "type": "object",
        "properties": {
          "channel_code": {
            "type": "string",
            "title": "{@link IHubChannel.code} of the target channel",
            "description": "{@link IHubChannel.code} of the target channel."
          },
          "category_ids": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            ],
            "title": "{@link IHubChannelCategory.id} list of target categories",
            "description": "{@link IHubChannelCategory.id} list of target categories.\n\nIf this value is `null`, all categories are the target."
          }
        },
        "required": [
          "channel_code",
          "category_ids"
        ],
        "description": "Input information for the target channel and category."
      },
      "IHubCouponCriteriaOfSection.ICreate": {
        "type": "object",
        "properties": {
          "section_codes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "title": "A list of {@link IHubSection.code} target sections",
            "description": "A list of {@link IHubSection.code} target sections."
          },
          "type": {
            "const": "section",
            "title": "Detailed type of condition",
            "description": "Detailed type of condition.\n\nServes as identifier for discriminated union."
          },
          "direction": {
            "oneOf": [
              {
                "const": "include"
              },
              {
                "const": "exclude"
              }
            ],
            "title": "Direction in which constraints are applied",
            "description": "Direction in which constraints are applied.\n\n- include: inclusion conditions\n- exclude: exclusion conditions"
          }
        },
        "required": [
          "section_codes",
          "type",
          "direction"
        ]
      },
      "IHubCouponCriteriaOfSeller.ICreate": {
        "type": "object",
        "properties": {
          "seller_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "minItems": 1,
            "title": "{@link IHubSeller.id} list of target sellers",
            "description": "{@link IHubSeller.id} list of target sellers."
          },
          "type": {
            "const": "seller",
            "title": "Detailed type of condition",
            "description": "Detailed type of condition.\n\nServes as identifier for discriminated union."
          },
          "direction": {
            "oneOf": [
              {
                "const": "include"
              },
              {
                "const": "exclude"
              }
            ],
            "title": "Direction in which constraints are applied",
            "description": "Direction in which constraints are applied.\n\n- include: inclusion conditions\n- exclude: exclusion conditions"
          }
        },
        "required": [
          "seller_ids",
          "type",
          "direction"
        ]
      },
      "IHubCouponCriteriaOfSale.ICreate": {
        "type": "object",
        "properties": {
          "sale_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "minItems": 1,
            "title": "{@link IHubSale.id} list of target listings",
            "description": "{@link IHubSale.id} list of target listings."
          },
          "type": {
            "const": "sale",
            "title": "Detailed type of condition",
            "description": "Detailed type of condition.\n\nServes as identifier for discriminated union."
          },
          "direction": {
            "oneOf": [
              {
                "const": "include"
              },
              {
                "const": "exclude"
              }
            ],
            "title": "Direction in which constraints are applied",
            "description": "Direction in which constraints are applied.\n\n- include: inclusion conditions\n- exclude: exclusion conditions"
          }
        },
        "required": [
          "sale_ids",
          "type",
          "direction"
        ]
      },
      "IHubCouponCriteriaOfFunnel.ICreate": {
        "type": "object",
        "properties": {
          "funnels": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IHubCouponCriteriaOfFunnel.IPathFunnel"
                },
                {
                  "$ref": "#/components/schemas/IHubCouponCriteriaOfFunnel.IReferrerFunnel"
                },
                {
                  "$ref": "#/components/schemas/IHubCouponCriteriaOfFunnel.IVariableFunnel"
                }
              ],
              "discriminator": {
                "propertyName": "kind",
                "mapping": {
                  "url": "#/components/schemas/IHubCouponCriteriaOfFunnel.IPathFunnel",
                  "referrer": "#/components/schemas/IHubCouponCriteriaOfFunnel.IReferrerFunnel",
                  "variable": "#/components/schemas/IHubCouponCriteriaOfFunnel.IVariableFunnel"
                }
              }
            },
            "minItems": 1,
            "title": "A list of individual conditions for each inflow path",
            "description": "A list of individual conditions for each inflow path."
          },
          "type": {
            "const": "funnel",
            "title": "Detailed type of condition",
            "description": "Detailed type of condition.\n\nServes as identifier for discriminated union."
          },
          "direction": {
            "oneOf": [
              {
                "const": "include"
              },
              {
                "const": "exclude"
              }
            ],
            "title": "Direction in which constraints are applied",
            "description": "Direction in which constraints are applied.\n\n- include: inclusion conditions\n- exclude: exclusion conditions"
          }
        },
        "required": [
          "funnels",
          "type",
          "direction"
        ]
      },
      "IPageIHubCoupon": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubCoupon"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubCoupon.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IHubCoupon.IRequest.ISearch",
            "title": "Search information",
            "description": "Search information."
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-coupon.name"
                },
                {
                  "const": "-coupon.value"
                },
                {
                  "const": "-coupon.unit"
                },
                {
                  "const": "-coupon.created_at"
                },
                {
                  "const": "-coupon.opened_at"
                },
                {
                  "const": "-coupon.closed_at"
                },
                {
                  "const": "+coupon.name"
                },
                {
                  "const": "+coupon.value"
                },
                {
                  "const": "+coupon.unit"
                },
                {
                  "const": "+coupon.created_at"
                },
                {
                  "const": "+coupon.opened_at"
                },
                {
                  "const": "+coupon.closed_at"
                }
              ]
            },
            "title": "Sort criteria",
            "description": "Sort criteria."
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Page request information."
      },
      "IHubCoupon.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "The name of the discount coupon",
            "description": "The name of the discount coupon."
          }
        },
        "description": "Search information."
      },
      "IPageIHubDepositDonation": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubDepositDonation"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubDepositDonation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Primary key"
          },
          "administrator": {
            "$ref": "#/components/schemas/IHubAdministrator.IInvert",
            "title": "Information about the administrator who managed the deposit contribution",
            "description": "Information about the administrator who managed the deposit contribution."
          },
          "citizen": {
            "$ref": "#/components/schemas/IHubCitizen",
            "description": "Citizens who received deposit {@link IHubCitizen}"
          },
          "value": {
            "type": "number",
            "minimum": 0,
            "title": "The amount of deposit/withdrawal",
            "description": "The amount of deposit/withdrawal.\n\nMust be a positive number, and whether or not a deposit/withdrawal is made can be seen in {@link IHubDeposit.direction}.\n\nIf you want to express the deposit/withdrawal values as positive/negative numbers, you can also multiply this field value by the {@link IHubDeposit.direction} value."
          },
          "reason": {
            "type": "string",
            "description": "Reasons for granting deposit"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Record creation date and time"
          }
        },
        "required": [
          "id",
          "administrator",
          "citizen",
          "value",
          "reason",
          "created_at"
        ],
        "description": "Deposit Donation.\n{@link IHubDepositDonation} is an entity that embodies the case where\nan administrator directly donates a deposit to a specific customer citizen.\n\nIt is designed assuming that the customer will directly deliver the deposit\nin person, rather than through our payment system.\n\nIn some cases, it is also possible to sign a postpaid contract with a specific\ncompany and provide the company with an appropriate amount of deposit every\nmonth."
      },
      "IHubDepositDonation.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IHubDepositDonation.IRequest.ISearch",
            "description": "Search Conditions"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-created_at"
                },
                {
                  "const": "+created_at"
                },
                {
                  "const": "-value"
                },
                {
                  "const": "+value"
                }
              ]
            },
            "description": "Sorting Conditions"
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Deposit contribution history inquiry and page information"
      },
      "IHubDepositDonation.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "mobile": {
            "type": "string",
            "pattern": "^[0-9]*$"
          },
          "minimum": {
            "type": "number",
            "minimum": 0
          },
          "maximum": {
            "type": "number",
            "minimum": 0
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IHubDepositDonation.ICreate": {
        "type": "object",
        "properties": {
          "citizen_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the citizen who will receive the deposit"
          },
          "value": {
            "type": "number",
            "minimum": 0,
            "title": "The amount of deposit/withdrawal",
            "description": "The amount of deposit/withdrawal.\n\nMust be a positive number, and whether or not a deposit/withdrawal is made can be seen in {@link IHubDeposit.direction}.\n\nIf you want to express the deposit/withdrawal values as positive/negative numbers, you can also multiply this field value by the {@link IHubDeposit.direction} value."
          },
          "reason": {
            "type": "string",
            "description": "Reasons for granting deposit"
          }
        },
        "required": [
          "citizen_id",
          "value",
          "reason"
        ],
        "description": "Deposit contribution creation information"
      },
      "IPageIHubDeposit": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubDeposit"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubDeposit": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "basic"
          },
          "code": {
            "type": "string",
            "description": "Identifier Code"
          },
          "source": {
            "type": "string",
            "title": "The source table that causes deposits and withdrawals of deposits",
            "description": "The source table that causes deposits and withdrawals of deposits."
          },
          "direction": {
            "oneOf": [
              {
                "const": -1
              },
              {
                "const": 1
              }
            ],
            "description": "Deposit and withdrawal direction\n\n1: Deposit -1: Deduct"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Create a record"
          }
        },
        "required": [
          "id",
          "code",
          "source",
          "direction",
          "created_at"
        ],
        "description": "This is an entity that visualizes the specifications for deposit and\nwithdrawal in the exchange.\n\n{@link IHubDeposit} is not {@link IHubDepositHistory}, which means the deposit\nand withdrawal history of the deposit, but is simply metadata that specifies\nthe specifications for the scenario in which the deposit is deposited and\nwithdrawn. Please note that this gen-hub cannot pay cash immediately at the\ntime of the customer's purchase of the goods (the time of the API call) due to\nthe nature of the API as a transaction object.\n\nInstead, this system charges the customer with a deposit and deducts it\nevery time the API is called."
      },
      "IHubDeposit.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IHubDeposit.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-deposit.source"
                },
                {
                  "const": "-deposit.code"
                },
                {
                  "const": "-deposit.direction"
                },
                {
                  "const": "+deposit.source"
                },
                {
                  "const": "+deposit.code"
                },
                {
                  "const": "+deposit.direction"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "View deposit list and page information"
      },
      "IHubDeposit.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "direction": {
            "oneOf": [
              {
                "const": -1
              },
              {
                "const": 1
              }
            ]
          }
        }
      },
      "IHubDeposit.ICreate": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Identifier Code"
          },
          "source": {
            "type": "string",
            "title": "The source table that causes deposits and withdrawals of deposits",
            "description": "The source table that causes deposits and withdrawals of deposits."
          },
          "direction": {
            "oneOf": [
              {
                "const": -1
              },
              {
                "const": 1
              }
            ],
            "description": "Deposit and withdrawal direction\n\n1: Deposit -1: Deduct"
          }
        },
        "required": [
          "code",
          "source",
          "direction"
        ],
        "description": "Deposit creation information."
      },
      "ISwagger": {
        "type": "object",
        "properties": {
          "openapi": {
            "type": "string",
            "pattern": "^(3\\.1\\.[+-]?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)$",
            "title": "OpenAPI version number",
            "description": "OpenAPI version number."
          },
          "servers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenApi.IServer"
            },
            "title": "List of servers that provide the API",
            "description": "List of servers that provide the API."
          },
          "info": {
            "$ref": "#/components/schemas/OpenApi.IDocument.IInfo",
            "title": "Information about the API",
            "description": "Information about the API."
          },
          "components": {
            "$ref": "#/components/schemas/OpenApi.IComponentsISwaggerSchema",
            "title": "An object to hold reusable data structures",
            "description": "An object to hold reusable data structures.\n\nIt stores both DTO schemas and security schemes.\n\nFor reference, `nestia` defines every object and alias types as reusable DTO\nschemas. The alias type means that defined by `type` keyword in TypeScript."
          },
          "paths": {
            "$ref": "#/components/schemas/RecordstringOpenApi.IPathISwaggerSchemaISwaggerOperation",
            "title": "The available paths and operations for the API",
            "description": "The available paths and operations for the API.\n\nThe 1st key is the path, and the 2nd key is the HTTP method."
          },
          "webhooks": {
            "$ref": "#/components/schemas/RecordstringOpenApi.IPathISwaggerSchemaISwaggerOperation",
            "title": "An object to hold Webhooks",
            "description": "An object to hold Webhooks.\n\nIts structure is same with {@link paths}, so that the 1st key is the path,\nand the 2nd key is the HTTP method."
          },
          "security": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordstringArraystring"
            },
            "title": "A declaration of which security mechanisms can be used across the API",
            "description": "A declaration of which security mechanisms can be used across the API.\n\nWhen this property be configured, it would be overwritten in every API routes.\n\nFor reference, key means the name of security scheme and value means the `scopes`.\nThe `scopes` can be used only when target security scheme is `oauth2` type,\nespecially for {@link ISwaggerSecurityScheme.IOAuth2.IFlow.scopes} property."
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenApi.IDocument.ITag"
            },
            "title": "List of tag names with description",
            "description": "List of tag names with description.\n\nIt is possible to omit this property or skip some tag name even if\nthe tag name is used in the API routes. In that case, the tag name\nwould be displayed (in Swagger-UI) without description."
          },
          "x-samchon-emended": {
            "const": true,
            "title": "Flag for indicating this document is emended by `@samchon/openapi`",
            "description": "Flag for indicating this document is emended by `@samchon/openapi`."
          }
        },
        "required": [
          "openapi",
          "components",
          "x-samchon-emended"
        ],
        "description": "Swagger Document.\n\n`ISwagger` is based on {@link OpenApi.IDocument}, and it is a data structure\nrepresenting content of `swagger.json` file following OpenAPI v3.1 specification,\nbut emended a little bit by [`@samchon/openapi`](https://github.com/samchon/openapi).\n\nThe difference with `ISwagger` and {@link OpenApi.IDocument} is that `ISwagger`\nhas more plugin properties especiallly for LLM (OpenAI) Function Calling. Below\nis the plugin properties newly added to `ISwagger`:\n\n- {@link ISwaggerOperation.x -wrtn-icon}\n- {@link ISwaggerSchema.IString.x -wrtn-secret-key}\n- {@link ISwaggerSchema.IString.x -wrtn-secret-scopes}\n\nFor reference, here is the entire list of difference between OpenAPI v3.1 and\nemended {@link OpenApi.IDocument}.\n\n- Operation\n  - Merged {@link OpenApiV3_1.IPath.parameters} to {@link OpenApi.IOperation.parameters}\n  - Resolved {@link OpenApi.IJsonSchema.IReference references} of {@link OpenApiV3_1.IOperation} mebers\n- JSON Schema\n  - Decompose mixed type: {@link OpenApiV3_1.IJsonSchema.IMixed}\n  - Resolve nullable property: {@link OpenApiV3_1.IJsonSchema.__ISignificant.nullable}\n  - Array type utilizes only single {@link OpenAPI.IJsonSchema.IArray.items}\n  - Tuple type utilizes only {@link OpenApi.IJsonSchema.ITuple.prefixItems}\n  - Merge {@link OpenApiV3_1.IJsonSchema.IAnyOf} to {@link OpenApi.IJsonSchema.IOneOf}\n  - Merge {@link OpenApiV3_1.IJsonSchema.IRecursiveReference} to {@link OpenApi.IJsonSchema.IReference}\n  - Merge {@link OpenApiV3_1.IJsonSchema.IAllOf} to {@link OpenApi.IJsonSchema.IObject}"
      },
      "OpenApi.IServer": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "title": "A URL to the target host",
            "description": "A URL to the target host."
          },
          "description": {
            "type": "string",
            "title": "An optional string describing the target server",
            "description": "An optional string describing the target server."
          },
          "variables": {
            "$ref": "#/components/schemas/RecordstringOpenApi.IServer.IVariable",
            "title": "A map between a variable name and its value",
            "description": "A map between a variable name and its value.\n\nWhen the server {@link url} is a type of template, this property\nwould be utilized to fill the template with actual values."
          }
        },
        "required": [
          "url"
        ],
        "description": "The remote server that provides the API."
      },
      "RecordstringOpenApi.IServer.IVariable": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "$ref": "#/components/schemas/OpenApi.IServer.IVariable"
        }
      },
      "OpenApi.IServer.IVariable": {
        "type": "object",
        "properties": {
          "default": {
            "type": "string",
            "title": "Default value to use for substitution",
            "description": "Default value to use for substitution."
          },
          "enum": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "List of available values for the variable",
            "description": "List of available values for the variable."
          },
          "description": {
            "type": "string",
            "title": "An optional description for the server variable",
            "description": "An optional description for the server variable."
          }
        },
        "required": [
          "default"
        ],
        "description": "A variable for the server URL template."
      },
      "OpenApi.IDocument.IInfo": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "title": "The title of the API",
            "description": "The title of the API."
          },
          "summary": {
            "type": "string",
            "title": "A short summary of the API",
            "description": "A short summary of the API."
          },
          "description": {
            "type": "string",
            "title": "A full description of the API",
            "description": "A full description of the API."
          },
          "termsOfService": {
            "type": "string",
            "title": "A URL to the Terms of Service for the API",
            "description": "A URL to the Terms of Service for the API."
          },
          "contact": {
            "$ref": "#/components/schemas/OpenApi.IDocument.IContact",
            "title": "The contact information for the exposed API",
            "description": "The contact information for the exposed API."
          },
          "license": {
            "$ref": "#/components/schemas/OpenApi.IDocument.ILicense",
            "title": "The license information for the exposed API",
            "description": "The license information for the exposed API."
          },
          "version": {
            "type": "string",
            "title": "Version of the API",
            "description": "Version of the API."
          }
        },
        "required": [
          "title",
          "version"
        ],
        "description": "Information about the API."
      },
      "OpenApi.IDocument.IContact": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "The identifying name of the contact person/organization",
            "description": "The identifying name of the contact person/organization."
          },
          "url": {
            "type": "string",
            "title": "The URL pointing to the contact information",
            "description": "The URL pointing to the contact information."
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "The email address of the contact person/organization",
            "description": "The email address of the contact person/organization."
          }
        },
        "description": "Contact information for the exposed API."
      },
      "OpenApi.IDocument.ILicense": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "The license name used for the API",
            "description": "The license name used for the API."
          },
          "identifier": {
            "type": "string",
            "title": "Identifier for the license used for the API",
            "description": "Identifier for the license used for the API.\n\nexample: MIT"
          },
          "url": {
            "type": "string",
            "title": "A URL to the license used for the API",
            "description": "A URL to the license used for the API."
          }
        },
        "required": [
          "name"
        ],
        "description": "License information for the exposed API."
      },
      "OpenApi.IComponentsISwaggerSchema": {
        "type": "object",
        "properties": {
          "schemas": {
            "$ref": "#/components/schemas/RecordstringISwaggerSchema",
            "title": "An object to hold reusable DTO schemas",
            "description": "An object to hold reusable DTO schemas.\n\nIn other words, a collection of named JSON schemas."
          },
          "securitySchemes": {
            "$ref": "#/components/schemas/RecordstringOpenApi.ISecurityScheme",
            "title": "An object to hold reusable security schemes",
            "description": "An object to hold reusable security schemes.\n\nIn other words, a collection of named security schemes."
          }
        },
        "description": "Reusable components in OpenAPI.\n\nA storage of reusable components in OpenAPI document.\n\nIn other words, it is a storage of named DTO schemas and security schemes."
      },
      "RecordstringISwaggerSchema": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/ISwaggerSchema.IConstant"
            },
            {
              "$ref": "#/components/schemas/ISwaggerSchema.IBoolean"
            },
            {
              "$ref": "#/components/schemas/ISwaggerSchema.IInteger"
            },
            {
              "$ref": "#/components/schemas/ISwaggerSchema.INumber"
            },
            {
              "$ref": "#/components/schemas/ISwaggerSchema.IString"
            },
            {
              "$ref": "#/components/schemas/ISwaggerSchema.IArray"
            },
            {
              "$ref": "#/components/schemas/ISwaggerSchema.ITuple"
            },
            {
              "$ref": "#/components/schemas/ISwaggerSchema.IObject"
            },
            {
              "$ref": "#/components/schemas/ISwaggerSchema.IReferencestring"
            },
            {
              "$ref": "#/components/schemas/ISwaggerSchema.IOneOf"
            },
            {
              "$ref": "#/components/schemas/ISwaggerSchema.INull"
            },
            {
              "$ref": "#/components/schemas/ISwaggerSchema.IUnknown"
            }
          ]
        }
      },
      "ISwaggerSchema.IConstant": {
        "type": "object",
        "properties": {
          "const": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              }
            ],
            "title": "The constant value",
            "description": "The constant value."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          },
          "x-wrtn-placeholder": {
            "type": "string",
            "title": "Placeholder value for frontend application",
            "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
          },
          "x-wrtn-prerequisite": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfJMesPath"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfFunction"
              }
            ],
            "title": "Prerequisite API endpoint for the schema",
            "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
          }
        },
        "required": [
          "const"
        ],
        "description": "Constant value type."
      },
      "Recordstringany": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {}
      },
      "ISwaggerSchemaPlugin.IPrerequisiteOfJMesPath": {
        "type": "object",
        "properties": {
          "jmesPath": {
            "type": "string",
            "title": "Function returning transformed values using JMESPath expression",
            "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
          },
          "method": {
            "oneOf": [
              {
                "const": "delete"
              },
              {
                "const": "get"
              },
              {
                "const": "patch"
              },
              {
                "const": "post"
              },
              {
                "const": "put"
              }
            ],
            "title": "HTTP method to call the endpoint",
            "description": "HTTP method to call the endpoint."
          },
          "path": {
            "type": "string",
            "title": "Path of the endpoint",
            "description": "Path of the endpoint."
          }
        },
        "required": [
          "jmesPath",
          "method",
          "path"
        ],
        "description": "Prerequisite by JMESPath expression."
      },
      "ISwaggerSchemaPlugin.IPrerequisiteOfFunction": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "title": "Transform function returning label",
            "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
          },
          "value": {
            "type": "string",
            "title": "Transform function returning target value",
            "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
          },
          "array": {
            "type": "string",
            "title": "Transform function returning array instance",
            "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
          },
          "method": {
            "oneOf": [
              {
                "const": "delete"
              },
              {
                "const": "get"
              },
              {
                "const": "patch"
              },
              {
                "const": "post"
              },
              {
                "const": "put"
              }
            ],
            "title": "HTTP method to call the endpoint",
            "description": "HTTP method to call the endpoint."
          },
          "path": {
            "type": "string",
            "title": "Path of the endpoint",
            "description": "Path of the endpoint."
          }
        },
        "required": [
          "label",
          "value",
          "method",
          "path"
        ],
        "description": "Prerequisite by JS function."
      },
      "ISwaggerSchema.IBoolean": {
        "type": "object",
        "properties": {
          "default": {
            "type": "boolean",
            "title": "The default value",
            "description": "The default value."
          },
          "type": {
            "const": "boolean",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          },
          "x-wrtn-placeholder": {
            "type": "string",
            "title": "Placeholder value for frontend application",
            "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
          },
          "x-wrtn-prerequisite": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfJMesPath"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfFunction"
              }
            ],
            "title": "Prerequisite API endpoint for the schema",
            "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
          }
        },
        "required": [
          "type"
        ],
        "description": "Boolean type info."
      },
      "ISwaggerSchema.IInteger": {
        "type": "object",
        "properties": {
          "default": {
            "type": "integer",
            "title": "Default value",
            "description": "Default value."
          },
          "minimum": {
            "type": "integer",
            "title": "Minimum value restriction",
            "description": "Minimum value restriction."
          },
          "maximum": {
            "type": "integer",
            "title": "Maximum value restriction",
            "description": "Maximum value restriction."
          },
          "exclusiveMinimum": {
            "type": "boolean",
            "title": "Exclusive minimum value restriction",
            "description": "Exclusive minimum value restriction.\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined the `exclusiveMinimum` value as `number`, {@link OpenApi}\nforcibly converts it to `boolean` type, and assign the numeric value to\nthe {@link minimum} property."
          },
          "exclusiveMaximum": {
            "type": "boolean",
            "title": "Exclusive maximum value restriction",
            "description": "Exclusive maximum value restriction.\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined the `exclusiveMaximum` value as `number`, {@link OpenApi}\nforcibly converts it to `boolean` type, and assign the numeric value to\nthe {@link maximum} property."
          },
          "multipleOf": {
            "type": "integer",
            "exclusiveMinimum": true,
            "minimum": 0,
            "title": "Multiple of value restriction",
            "description": "Multiple of value restriction."
          },
          "type": {
            "const": "integer",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          },
          "x-wrtn-placeholder": {
            "type": "string",
            "title": "Placeholder value for frontend application",
            "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
          },
          "x-wrtn-prerequisite": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfJMesPath"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfFunction"
              }
            ],
            "title": "Prerequisite API endpoint for the schema",
            "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
          }
        },
        "required": [
          "type"
        ],
        "description": "Integer type info."
      },
      "ISwaggerSchema.INumber": {
        "type": "object",
        "properties": {
          "default": {
            "type": "number",
            "title": "Default value",
            "description": "Default value."
          },
          "minimum": {
            "type": "number",
            "title": "Minimum value restriction",
            "description": "Minimum value restriction."
          },
          "maximum": {
            "type": "number",
            "title": "Maximum value restriction",
            "description": "Maximum value restriction."
          },
          "exclusiveMinimum": {
            "type": "boolean",
            "title": "Exclusive minimum value restriction",
            "description": "Exclusive minimum value restriction.\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined the `exclusiveMinimum` value as `number`, {@link OpenAiComposer}\nforcibly converts it to `boolean` type, and assign the numeric value to\nthe {@link minimum} property."
          },
          "exclusiveMaximum": {
            "type": "boolean",
            "title": "Exclusive maximum value restriction",
            "description": "Exclusive maximum value restriction.\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined the `exclusiveMaximum` value as `number`, {@link OpenAiComposer}\nforcibly converts it to `boolean` type, and assign the numeric value to\nthe {@link maximum} property."
          },
          "multipleOf": {
            "type": "number",
            "exclusiveMinimum": true,
            "minimum": 0,
            "title": "Multiple of value restriction",
            "description": "Multiple of value restriction."
          },
          "type": {
            "const": "number",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          },
          "x-wrtn-placeholder": {
            "type": "string",
            "title": "Placeholder value for frontend application",
            "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
          },
          "x-wrtn-prerequisite": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfJMesPath"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfFunction"
              }
            ],
            "title": "Prerequisite API endpoint for the schema",
            "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
          }
        },
        "required": [
          "type"
        ],
        "description": "Number (double) type info."
      },
      "ISwaggerSchema.IString": {
        "type": "object",
        "properties": {
          "x-wrtn-secret-key": {
            "type": "string",
            "title": "Secret key for the schema",
            "description": "Secret key for the schema.\n\n`x-wrtn-secret-key` is a property means a secret key that is required\nfor the target API endpoint calling. If the secret key is not filled,\nthe API call would be failed."
          },
          "x-wrtn-secret-scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Secret scopes for the schema",
            "description": "Secret scopes for the schema.\n\n`x-wrtn-secret-scopes` is a property means a list of secret scopes that\nare required for the target API endpoint calling. If the secret scopes\nare not satisfied, the API call would be failed."
          },
          "default": {
            "type": "string",
            "title": "Default value",
            "description": "Default value."
          },
          "format": {
            "type": "string",
            "title": "Format restriction",
            "description": "Format restriction."
          },
          "pattern": {
            "type": "string",
            "title": "Pattern restriction",
            "description": "Pattern restriction."
          },
          "contentMediaType": {
            "type": "string",
            "title": "Content media type restriction",
            "description": "Content media type restriction."
          },
          "minLength": {
            "type": "integer",
            "title": "Minimum length restriction",
            "description": "Minimum length restriction."
          },
          "maxLength": {
            "type": "integer",
            "title": "Maximum length restriction",
            "description": "Maximum length restriction."
          },
          "type": {
            "const": "string",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          },
          "x-wrtn-placeholder": {
            "type": "string",
            "title": "Placeholder value for frontend application",
            "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
          },
          "x-wrtn-prerequisite": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfJMesPath"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfFunction"
              }
            ],
            "title": "Prerequisite API endpoint for the schema",
            "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
          }
        },
        "required": [
          "type"
        ],
        "description": "String type info."
      },
      "ISwaggerSchema.IArray": {
        "type": "object",
        "properties": {
          "items": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IConstant"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IString"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.ITuple"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IOneOf"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INull"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IUnknown"
              }
            ],
            "title": "Items type info",
            "description": "Items type info.\n\nThe `items` means the type of the array elements. In other words, it is\nthe type schema info of the `T` in the TypeScript array type `Array<T>`."
          },
          "uniqueItems": {
            "type": "boolean",
            "title": "Unique items restriction",
            "description": "Unique items restriction.\n\nIf this property value is `true`, target array must have unique items."
          },
          "minItems": {
            "type": "integer",
            "title": "Minimum items restriction",
            "description": "Minimum items restriction.\n\nRestriction of minumum number of items in the array."
          },
          "maxItems": {
            "type": "integer",
            "title": "Maximum items restriction",
            "description": "Maximum items restriction.\n\nRestriction of maximum number of items in the array."
          },
          "type": {
            "const": "array",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          },
          "x-wrtn-placeholder": {
            "type": "string",
            "title": "Placeholder value for frontend application",
            "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
          },
          "x-wrtn-prerequisite": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfJMesPath"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfFunction"
              }
            ],
            "title": "Prerequisite API endpoint for the schema",
            "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
          }
        },
        "required": [
          "items",
          "type"
        ],
        "description": "Array type info."
      },
      "ISwaggerSchema.ITuple": {
        "type": "object",
        "properties": {
          "prefixItems": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ISwaggerSchema.IConstant"
                },
                {
                  "$ref": "#/components/schemas/ISwaggerSchema.IBoolean"
                },
                {
                  "$ref": "#/components/schemas/ISwaggerSchema.IInteger"
                },
                {
                  "$ref": "#/components/schemas/ISwaggerSchema.INumber"
                },
                {
                  "$ref": "#/components/schemas/ISwaggerSchema.IString"
                },
                {
                  "$ref": "#/components/schemas/ISwaggerSchema.IArray"
                },
                {
                  "$ref": "#/components/schemas/ISwaggerSchema.ITuple"
                },
                {
                  "$ref": "#/components/schemas/ISwaggerSchema.IObject"
                },
                {
                  "$ref": "#/components/schemas/ISwaggerSchema.IReferencestring"
                },
                {
                  "$ref": "#/components/schemas/ISwaggerSchema.IOneOf"
                },
                {
                  "$ref": "#/components/schemas/ISwaggerSchema.INull"
                },
                {
                  "$ref": "#/components/schemas/ISwaggerSchema.IUnknown"
                }
              ]
            },
            "title": "Prefix items",
            "description": "Prefix items.\n\nThe `prefixItems` means the type schema info of the prefix items in the\ntuple type. In the TypeScript, it is expressed as `[T1, T2]`.\n\nIf you want to express `[T1, T2, ...TO[]]` type, you can configure the\n`...TO[]` through the {@link additionalItems} property."
          },
          "additionalItems": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IConstant"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IString"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.ITuple"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IOneOf"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INull"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IUnknown"
              }
            ],
            "title": "Additional items",
            "description": "Additional items.\n\nThe `additionalItems` means the type schema info of the additional items\nafter the {@link prefixItems}. In the TypeScript, if there's a type\n`[T1, T2, ...TO[]]`, the `...TO[]` is represented by the `additionalItems`.\n\nBy the way, if you configure the `additionalItems` as `true`, it means\nthe additional items are not restricted. They can be any type, so that\nit is equivalent to the TypeScript type `[T1, T2, ...any[]]`.\n\nOtherwise configure the `additionalItems` as the {@link IJsonSchema},\nit means the additional items must follow the type schema info.\nTherefore, it is equivalent to the TypeScript type `[T1, T2, ...TO[]]`."
          },
          "uniqueItems": {
            "type": "boolean",
            "title": "Unique items restriction",
            "description": "Unique items restriction.\n\nIf this property value is `true`, target tuple must have unique items."
          },
          "minItems": {
            "type": "integer",
            "title": "Minimum items restriction",
            "description": "Minimum items restriction.\n\nRestriction of minumum number of items in the tuple."
          },
          "maxItems": {
            "type": "integer",
            "title": "Maximum items restriction",
            "description": "Maximum items restriction.\n\nRestriction of maximum number of items in the tuple."
          },
          "type": {
            "const": "array",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          },
          "x-wrtn-placeholder": {
            "type": "string",
            "title": "Placeholder value for frontend application",
            "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
          },
          "x-wrtn-prerequisite": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfJMesPath"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfFunction"
              }
            ],
            "title": "Prerequisite API endpoint for the schema",
            "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
          }
        },
        "required": [
          "prefixItems",
          "type"
        ],
        "description": "Tuple type info."
      },
      "ISwaggerSchema.IObject": {
        "type": "object",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/RecordstringISwaggerSchema",
            "title": "Properties of the object",
            "description": "Properties of the object.\n\nThe `properties` means a list of key-value pairs of the object's\nregular properties. The key is the name of the regular property,\nand the value is the type schema info.\n\nIf you need additional properties that is represented by dynamic key,\nyou can use the {@link additionalProperties} instead."
          },
          "additionalProperties": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IConstant"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IString"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.ITuple"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IOneOf"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INull"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IUnknown"
              }
            ],
            "title": "Additional properties' info",
            "description": "Additional properties' info.\n\nThe `additionalProperties` means the type schema info of the additional\nproperties that are not listed in the {@link properties}.\n\nIf the value is `true`, it means that the additional properties are not\nrestricted. They can be any type. Otherwise, if the value is\n{@link IOpenAiSchema} type, it means that the additional properties must\nfollow the type schema info.\n\n- `true`: `Record<string, any>`\n- `IOpenAiSchema`: `Record<string, T>`"
          },
          "required": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "List of key values of the required properties",
            "description": "List of key values of the required properties.\n\nThe `required` means a list of the key values of the required\n{@link properties}. If some property key is not listed in the `required`\nlist, it means that property is optional. Otherwise some property key\nexists in the `required` list, it means that the property must be filled.\n\nBelow is an example of the {@link properties} and `required`.\n\n```typescript\ninterface SomeObject {\n  id: string;\n  email: string;\n  name?: string;\n}\n```\n\nAs you can see, `id` and `email` {@link properties} are {@link required},\nso that they are listed in the `required` list.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": { \"type\": \"string\" },\n    \"email\": { \"type\": \"string\" },\n    \"name\": { \"type\": \"string\" }\n  },\n  \"required\": [\"id\", \"email\"]\n}\n```"
          },
          "type": {
            "const": "object",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          },
          "x-wrtn-placeholder": {
            "type": "string",
            "title": "Placeholder value for frontend application",
            "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
          },
          "x-wrtn-prerequisite": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfJMesPath"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfFunction"
              }
            ],
            "title": "Prerequisite API endpoint for the schema",
            "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
          }
        },
        "required": [
          "type"
        ],
        "description": "Object type info."
      },
      "ISwaggerSchema.IReferencestring": {
        "type": "object",
        "properties": {
          "$ref": {
            "type": "string",
            "title": "Reference to the named schema",
            "description": "Reference to the named schema.\n\nThe `ref` is a reference to the named schema. Format of the `$ref` is\nfollowing the JSON Pointer specification. In the OpenAPI, the `$ref`\nstarts with `#/components/schemas/` which means the type is stored in\nthe {@link OpenApi.IComponents.schemas} object.\n\n- `#/components/schemas/SomeObject`\n- `#/components/schemas/AnotherObject`"
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          },
          "x-wrtn-placeholder": {
            "type": "string",
            "title": "Placeholder value for frontend application",
            "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
          },
          "x-wrtn-prerequisite": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfJMesPath"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfFunction"
              }
            ],
            "title": "Prerequisite API endpoint for the schema",
            "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
          }
        },
        "required": [
          "$ref"
        ],
        "description": "Reference type directing named schema."
      },
      "ISwaggerSchema.IOneOf": {
        "type": "object",
        "properties": {
          "oneOf": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ISwaggerSchema.IConstant"
                },
                {
                  "$ref": "#/components/schemas/ISwaggerSchema.IBoolean"
                },
                {
                  "$ref": "#/components/schemas/ISwaggerSchema.IInteger"
                },
                {
                  "$ref": "#/components/schemas/ISwaggerSchema.INumber"
                },
                {
                  "$ref": "#/components/schemas/ISwaggerSchema.IString"
                },
                {
                  "$ref": "#/components/schemas/ISwaggerSchema.IArray"
                },
                {
                  "$ref": "#/components/schemas/ISwaggerSchema.ITuple"
                },
                {
                  "$ref": "#/components/schemas/ISwaggerSchema.IObject"
                },
                {
                  "$ref": "#/components/schemas/ISwaggerSchema.IReferencestring"
                },
                {
                  "$ref": "#/components/schemas/ISwaggerSchema.INull"
                },
                {
                  "$ref": "#/components/schemas/ISwaggerSchema.IUnknown"
                }
              ]
            },
            "title": "List of the union types",
            "description": "List of the union types."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "discriminator": {
            "$ref": "#/components/schemas/OpenApi.IJsonSchema.IOneOf.IDiscriminator",
            "title": "Discriminator info of the union type",
            "description": "Discriminator info of the union type."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          },
          "x-wrtn-placeholder": {
            "type": "string",
            "title": "Placeholder value for frontend application",
            "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
          },
          "x-wrtn-prerequisite": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfJMesPath"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfFunction"
              }
            ],
            "title": "Prerequisite API endpoint for the schema",
            "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
          }
        },
        "required": [
          "oneOf"
        ],
        "description": "Union type.\n\nIOneOf` represents an union type of the TypeScript (`A | B | C`).\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined `anyOf` instead of the `oneOf`, {@link OpenApi} forcibly\nconverts it to `oneOf` type."
      },
      "ISwaggerSchema.INull": {
        "type": "object",
        "properties": {
          "default": {
            "type": "null",
            "title": "Default value",
            "description": "Default value."
          },
          "type": {
            "const": "null",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          },
          "x-wrtn-placeholder": {
            "type": "string",
            "title": "Placeholder value for frontend application",
            "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
          },
          "x-wrtn-prerequisite": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfJMesPath"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfFunction"
              }
            ],
            "title": "Prerequisite API endpoint for the schema",
            "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
          }
        },
        "required": [
          "type"
        ],
        "description": "Null type."
      },
      "ISwaggerSchema.IUnknown": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          },
          "x-wrtn-placeholder": {
            "type": "string",
            "title": "Placeholder value for frontend application",
            "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
          },
          "x-wrtn-prerequisite": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfJMesPath"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfFunction"
              }
            ],
            "title": "Prerequisite API endpoint for the schema",
            "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
          }
        },
        "description": "Unknown, `any` type."
      },
      "OpenApi.IJsonSchema.IOneOf.IDiscriminator": {
        "type": "object",
        "properties": {
          "propertyName": {
            "type": "string",
            "title": "Property name for the discriminator",
            "description": "Property name for the discriminator."
          },
          "mapping": {
            "$ref": "#/components/schemas/Recordstringstring",
            "title": "Mapping of the discriminator value to the schema name",
            "description": "Mapping of the discriminator value to the schema name.\n\nThis property is valid only for {@link IReference} typed\n{@link IOneOf.oneof} elements. Therefore, `key` of `mapping` is\nthe discriminator value, and `value` of `mapping` is the\nschema name like `#/components/schemas/SomeObject`."
          }
        },
        "required": [
          "propertyName"
        ],
        "description": "Discriminator info of the union type."
      },
      "Recordstringstring": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "type": "string"
        }
      },
      "RecordstringOpenApi.ISecurityScheme": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/OpenApi.ISecurityScheme.IApiKey"
            },
            {
              "$ref": "#/components/schemas/OpenApi.ISecurityScheme.IHttpBasic"
            },
            {
              "$ref": "#/components/schemas/OpenApi.ISecurityScheme.IHttpBearer"
            },
            {
              "$ref": "#/components/schemas/OpenApi.ISecurityScheme.IOAuth2"
            },
            {
              "$ref": "#/components/schemas/OpenApi.ISecurityScheme.IOpenId"
            }
          ]
        }
      },
      "OpenApi.ISecurityScheme.IApiKey": {
        "type": "object",
        "properties": {
          "type": {
            "const": "apiKey"
          },
          "in": {
            "oneOf": [
              {
                "const": "query"
              },
              {
                "const": "cookie"
              },
              {
                "const": "header"
              }
            ]
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "description": "Normal API key type."
      },
      "OpenApi.ISecurityScheme.IHttpBasic": {
        "type": "object",
        "properties": {
          "type": {
            "const": "http"
          },
          "scheme": {
            "const": "basic"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "scheme"
        ],
        "description": "HTTP basic authentication type."
      },
      "OpenApi.ISecurityScheme.IHttpBearer": {
        "type": "object",
        "properties": {
          "type": {
            "const": "http"
          },
          "scheme": {
            "const": "bearer"
          },
          "bearerFormat": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "scheme"
        ],
        "description": "HTTP bearer authentication type."
      },
      "OpenApi.ISecurityScheme.IOAuth2": {
        "type": "object",
        "properties": {
          "type": {
            "const": "oauth2"
          },
          "flows": {
            "$ref": "#/components/schemas/OpenApi.ISecurityScheme.IOAuth2.IFlowSet"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "flows"
        ],
        "description": "OAuth2 authentication type."
      },
      "OpenApi.ISecurityScheme.IOAuth2.IFlowSet": {
        "type": "object",
        "properties": {
          "authorizationCode": {
            "$ref": "#/components/schemas/OpenApi.ISecurityScheme.IOAuth2.IFlow"
          },
          "implicit": {
            "$ref": "#/components/schemas/OmitOpenApi.ISecurityScheme.IOAuth2.IFlowtokenUrl"
          },
          "password": {
            "$ref": "#/components/schemas/OmitOpenApi.ISecurityScheme.IOAuth2.IFlowauthorizationUrl"
          },
          "clientCredentials": {
            "$ref": "#/components/schemas/OmitOpenApi.ISecurityScheme.IOAuth2.IFlowauthorizationUrl"
          }
        }
      },
      "OpenApi.ISecurityScheme.IOAuth2.IFlow": {
        "type": "object",
        "properties": {
          "authorizationUrl": {
            "type": "string"
          },
          "tokenUrl": {
            "type": "string"
          },
          "refreshUrl": {
            "type": "string"
          },
          "scopes": {
            "$ref": "#/components/schemas/Recordstringstring"
          }
        }
      },
      "OmitOpenApi.ISecurityScheme.IOAuth2.IFlowtokenUrl": {
        "type": "object",
        "properties": {
          "authorizationUrl": {
            "type": "string"
          },
          "refreshUrl": {
            "type": "string"
          },
          "scopes": {
            "$ref": "#/components/schemas/Recordstringstring"
          }
        },
        "description": "Construct a type with the properties of T except for those in type K."
      },
      "OmitOpenApi.ISecurityScheme.IOAuth2.IFlowauthorizationUrl": {
        "type": "object",
        "properties": {
          "tokenUrl": {
            "type": "string"
          },
          "refreshUrl": {
            "type": "string"
          },
          "scopes": {
            "$ref": "#/components/schemas/Recordstringstring"
          }
        },
        "description": "Construct a type with the properties of T except for those in type K."
      },
      "OpenApi.ISecurityScheme.IOpenId": {
        "type": "object",
        "properties": {
          "type": {
            "const": "openIdConnect"
          },
          "openIdConnectUrl": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "openIdConnectUrl"
        ]
      },
      "RecordstringOpenApi.IPathISwaggerSchemaISwaggerOperation": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "$ref": "#/components/schemas/OpenApi.IPathISwaggerSchemaISwaggerOperation"
        }
      },
      "OpenApi.IPathISwaggerSchemaISwaggerOperation": {
        "type": "object",
        "properties": {
          "servers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenApi.IServer"
            },
            "title": "Servers that provide the path operations",
            "description": "Servers that provide the path operations."
          },
          "summary": {
            "type": "string",
            "title": "Summary of the path",
            "description": "Summary of the path."
          },
          "description": {
            "type": "string",
            "title": "Description of the path",
            "description": "Description of the path."
          },
          "delete": {
            "$ref": "#/components/schemas/ISwaggerOperation"
          },
          "get": {
            "$ref": "#/components/schemas/ISwaggerOperation"
          },
          "head": {
            "$ref": "#/components/schemas/ISwaggerOperation"
          },
          "patch": {
            "$ref": "#/components/schemas/ISwaggerOperation"
          },
          "post": {
            "$ref": "#/components/schemas/ISwaggerOperation"
          },
          "put": {
            "$ref": "#/components/schemas/ISwaggerOperation"
          },
          "options": {
            "$ref": "#/components/schemas/ISwaggerOperation"
          },
          "trace": {
            "$ref": "#/components/schemas/ISwaggerOperation"
          }
        },
        "description": "Path item.\n\n`OpenApi.IPath` represents a path item of emended OpenAPI v3.1,\ncollecting multiple method operations in a single path."
      },
      "ISwaggerOperation": {
        "type": "object",
        "properties": {
          "x-wrtn-icon": {
            "type": "string",
            "format": "uri",
            "title": "Icon URL",
            "description": "Icon URL.\n\n`x-wrtn-icon` is a property means an icon URL representing the target API."
          },
          "x-wrtn-standalone": {
            "type": "boolean",
            "title": "Whether standalone API or not",
            "description": "Whether standalone API or not.\n\n`x-wrtn-standalone` is a property means whether the target API is standalone\nso that it can be called without any other APIs or not."
          },
          "operationId": {
            "type": "string",
            "title": "Unique string used to identify the operation",
            "description": "Unique string used to identify the operation."
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenApi.IOperation.IParameterISwaggerSchema"
            },
            "title": "List of parameters that are applicable for this operation",
            "description": "List of parameters that are applicable for this operation."
          },
          "requestBody": {
            "$ref": "#/components/schemas/OpenApi.IOperation.IRequestBodyISwaggerSchema",
            "title": "The request body applicable for this operation",
            "description": "The request body applicable for this operation."
          },
          "responses": {
            "$ref": "#/components/schemas/RecordstringOpenApi.IOperation.IResponseISwaggerSchema",
            "description": "The list of possible responses as they are returned from executing this\noperation. Its key is the HTTP status code, and the value is the metadata of\nthe response in the HTTP status code."
          },
          "servers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenApi.IServer"
            },
            "title": "A list of servers providing this API operation",
            "description": "A list of servers providing this API operation."
          },
          "summary": {
            "type": "string",
            "title": "A short summary of what the operation does",
            "description": "A short summary of what the operation does."
          },
          "description": {
            "type": "string",
            "title": "A verbose explanation of the operation behavior",
            "description": "A verbose explanation of the operation behavior."
          },
          "security": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordstringArraystring"
            },
            "title": "List of securities and their scopes that are required for execution",
            "description": "List of securities and their scopes that are required for execution.\n\nWhen this property be configured, the Restful API operation requires\nthe matched security value for exection. Its key means security key\nmatched with {@link OpenApi.IDocument.security}.\n\nThe value means scopes required for the security key when the security\ntype is {@link OpenApi.ISecurityScheme.IOAuth2}. Otherwise the target\nsecurity type is not {@link OpenApi.ISecurityScheme.IOAuth2}, the value\nwould be empty array."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Tags for API documentation control",
            "description": "Tags for API documentation control."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Flag for indicating this operation is deprecated",
            "description": "Flag for indicating this operation is deprecated."
          }
        },
        "description": "Remote operation info.\n\n`ISwaggerOperation` represents an Restful API operation provided by the\nremote server."
      },
      "OpenApi.IOperation.IParameterISwaggerSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Representative name of the parameter",
            "description": "Representative name of the parameter.\n\nIn the most case, the `name` is equivalent to parameter variable name.\nTherefore, the `name` must be filled with the significant variable name\nof the parameter.\n\nBy the way, only when the {@link in} property is `path`, the `name`\ncan be omitted. In that case, the `name` is automatically deduced from\nthe URL path's positional template argument analyzing."
          },
          "in": {
            "oneOf": [
              {
                "const": "query"
              },
              {
                "const": "cookie"
              },
              {
                "const": "header"
              },
              {
                "const": "path"
              }
            ],
            "title": "Location of the parameter",
            "description": "Location of the parameter.\n\nThe `in` property is a string that determines the location of the parameter.\n\n- `path`: parameter is part of the path of the URL.\n- `query`: parameter is part of the query string.\n- `header`: parameter is part of the header.\n- `cookie`: parameter is part of the cookie."
          },
          "schema": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IConstant"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IString"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.ITuple"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IOneOf"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INull"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IUnknown"
              }
            ],
            "title": "Type info of the parameter",
            "description": "Type info of the parameter."
          },
          "required": {
            "type": "boolean",
            "title": "Whether the parameter is required for execution or not",
            "description": "Whether the parameter is required for execution or not.\n\nIf the parameter is required, the value must be filled. Otherwise,\nit is possible to skip the parameter when executing the APi operation.\n\nFor reference, the `required` property must be always `true` when the\n{@link in} property is `path`. Otherwise, the `required` property can\nbe anything of them; `true`, `false` and `undefined`."
          },
          "title": {
            "type": "string",
            "title": "Short title of the parameter",
            "description": "Short title of the parameter."
          },
          "description": {
            "type": "string",
            "title": "Verbose explanation of the parameter",
            "description": "Verbose explanation of the parameter."
          },
          "example": {
            "title": "Example value of the parameter",
            "description": "Example value of the parameter."
          },
          "examples": {
            "$ref": "#/components/schemas/RecordstringOpenApi.IExample",
            "title": "Collection of example values of the parameter with keys",
            "description": "Collection of example values of the parameter with keys."
          }
        },
        "required": [
          "in",
          "schema"
        ],
        "description": "Parameter of the operation."
      },
      "RecordstringOpenApi.IExample": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "$ref": "#/components/schemas/OpenApi.IExample"
        }
      },
      "OpenApi.IExample": {
        "type": "object",
        "properties": {
          "summary": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "value": {},
          "externalValue": {
            "type": "string"
          }
        },
        "description": "Example of the operation parameter or response."
      },
      "OpenApi.IOperation.IRequestBodyISwaggerSchema": {
        "type": "object",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/OpenApi.IOperation.IContentISwaggerSchema"
          },
          "description": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "x-nestia-encrypted": {
            "type": "boolean"
          }
        },
        "description": "Request body of the operation."
      },
      "OpenApi.IOperation.IContentISwaggerSchema": {
        "type": "object",
        "properties": {
          "text/plain": {
            "$ref": "#/components/schemas/OpenApi.IOperation.IMediaTypeISwaggerSchema"
          },
          "application/json": {
            "$ref": "#/components/schemas/OpenApi.IOperation.IMediaTypeISwaggerSchema"
          },
          "application/x-www-form-url-encoded": {
            "$ref": "#/components/schemas/OpenApi.IOperation.IMediaTypeISwaggerSchema"
          },
          "multipart/form-data": {
            "$ref": "#/components/schemas/OpenApi.IOperation.IMediaTypeISwaggerSchema"
          },
          "*/*": {
            "$ref": "#/components/schemas/OpenApi.IOperation.IMediaTypeISwaggerSchema"
          }
        },
        "description": "List of content types supported in request/response body.",
        "additionalProperties": {
          "$ref": "#/components/schemas/OpenApi.IOperation.IMediaTypeISwaggerSchema"
        }
      },
      "OpenApi.IOperation.IMediaTypeISwaggerSchema": {
        "type": "object",
        "properties": {
          "schema": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IConstant"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IString"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.ITuple"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IOneOf"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INull"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IUnknown"
              }
            ]
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/RecordstringOpenApi.IExample"
          }
        },
        "description": "Media type of a request/response body."
      },
      "RecordstringOpenApi.IOperation.IResponseISwaggerSchema": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "$ref": "#/components/schemas/OpenApi.IOperation.IResponseISwaggerSchema"
        }
      },
      "OpenApi.IOperation.IResponseISwaggerSchema": {
        "type": "object",
        "properties": {
          "headers": {
            "$ref": "#/components/schemas/RecordstringOpenApi.IOperation.IParameterISwaggerSchema"
          },
          "content": {
            "$ref": "#/components/schemas/OpenApi.IOperation.IContentISwaggerSchema"
          },
          "description": {
            "type": "string"
          },
          "x-nestia-encrypted": {
            "type": "boolean"
          }
        },
        "description": "Response of the operation."
      },
      "RecordstringOpenApi.IOperation.IParameterISwaggerSchema": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "$ref": "#/components/schemas/OpenApi.IOperation.IParameterISwaggerSchema"
        }
      },
      "RecordstringArraystring": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "OpenApi.IDocument.ITag": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "The name of the tag",
            "description": "The name of the tag."
          },
          "description": {
            "type": "string",
            "title": "An optional string describing the tag",
            "description": "An optional string describing the tag."
          }
        },
        "required": [
          "name"
        ],
        "description": "OpenAPI tag information.\n\nIt is possible to skip composing this structure, even if some\ntag names are regsitered in the API routes ({@link OpenApi.IOperation.tags}).\nIn that case, the tag name would be displayed in Swagger-UI without\ndescription.\n\nHowever, if you want to describe the tag name, you can compose this\nstructure and describe the tag name in the {@link description} property."
      },
      "ISwaggerTranslation.IUrlRequest": {
        "type": "object",
        "properties": {
          "type": {
            "const": "url"
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "language": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "url",
          "language"
        ]
      },
      "ISwaggerTranslation.IDocumentRequest": {
        "type": "object",
        "properties": {
          "type": {
            "const": "document"
          },
          "document": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwagger"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IDocument"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IDocument"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IDocument"
              }
            ]
          },
          "language": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "document",
          "language"
        ]
      },
      "SwaggerV2.IDocument": {
        "type": "object",
        "properties": {
          "swagger": {
            "oneOf": [
              {
                "type": "string",
                "pattern": "^(2\\.0\\.[+-]?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)$"
              },
              {
                "const": "2.0"
              }
            ]
          },
          "info": {
            "$ref": "#/components/schemas/SwaggerV2.IDocument.IInfo"
          },
          "host": {
            "type": "string"
          },
          "basePath": {
            "type": "string"
          },
          "consumes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "produces": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "definitions": {
            "$ref": "#/components/schemas/RecordstringSwaggerV2.IJsonSchema"
          },
          "parameters": {
            "$ref": "#/components/schemas/RecordstringSwaggerV2.IOperation.IParameter"
          },
          "responses": {
            "$ref": "#/components/schemas/RecordstringSwaggerV2.IOperation.IResponse"
          },
          "securityDefinitions": {
            "$ref": "#/components/schemas/RecordstringSwaggerV2.ISecurityDefinition"
          },
          "security": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordstringArraystring"
            }
          },
          "paths": {
            "$ref": "#/components/schemas/RecordstringSwaggerV2.IPath"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SwaggerV2.IDocument.ITag"
            }
          }
        },
        "required": [
          "swagger"
        ]
      },
      "SwaggerV2.IDocument.IInfo": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "termsOfService": {
            "type": "string"
          },
          "contact": {
            "$ref": "#/components/schemas/SwaggerV2.IDocument.IContact"
          },
          "license": {
            "$ref": "#/components/schemas/SwaggerV2.IDocument.ILicense"
          },
          "version": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "version"
        ]
      },
      "SwaggerV2.IDocument.IContact": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "SwaggerV2.IDocument.ILicense": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "RecordstringSwaggerV2.IJsonSchema": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IBoolean"
            },
            {
              "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IInteger"
            },
            {
              "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.INumber"
            },
            {
              "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IString"
            },
            {
              "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IArray"
            },
            {
              "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IObject"
            },
            {
              "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IReferencestring"
            },
            {
              "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IUnknown"
            },
            {
              "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.INullOnly"
            },
            {
              "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IAnyOf"
            },
            {
              "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IOneOf"
            }
          ]
        }
      },
      "SwaggerV2.IJsonSchema.IBoolean": {
        "type": "object",
        "properties": {
          "default": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "enum": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "type": {
            "const": "boolean"
          },
          "x-nullable": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "type": "array",
            "items": {}
          }
        },
        "required": [
          "type"
        ]
      },
      "SwaggerV2.IJsonSchema.IInteger": {
        "type": "object",
        "properties": {
          "default": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "enum": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "number"
                }
              ]
            }
          },
          "minimum": {
            "type": "integer"
          },
          "maximum": {
            "type": "integer"
          },
          "exclusiveMinimum": {
            "type": "boolean"
          },
          "exclusiveMaximum": {
            "type": "boolean"
          },
          "multipleOf": {
            "type": "integer",
            "exclusiveMinimum": true,
            "minimum": 0
          },
          "type": {
            "const": "integer"
          },
          "x-nullable": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "type": "array",
            "items": {}
          }
        },
        "required": [
          "type"
        ]
      },
      "SwaggerV2.IJsonSchema.INumber": {
        "type": "object",
        "properties": {
          "default": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ]
          },
          "enum": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "number"
                }
              ]
            }
          },
          "minimum": {
            "type": "number"
          },
          "maximum": {
            "type": "number"
          },
          "exclusiveMinimum": {
            "type": "boolean"
          },
          "exclusiveMaximum": {
            "type": "boolean"
          },
          "multipleOf": {
            "type": "number",
            "exclusiveMinimum": true,
            "minimum": 0
          },
          "type": {
            "const": "number"
          },
          "x-nullable": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "type": "array",
            "items": {}
          }
        },
        "required": [
          "type"
        ]
      },
      "SwaggerV2.IJsonSchema.IString": {
        "type": "object",
        "properties": {
          "default": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ]
          },
          "enum": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string"
                }
              ]
            }
          },
          "format": {
            "type": "string"
          },
          "pattern": {
            "type": "string"
          },
          "minLength": {
            "type": "integer"
          },
          "maxLength": {
            "type": "integer"
          },
          "type": {
            "const": "string"
          },
          "x-nullable": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "type": "array",
            "items": {}
          }
        },
        "required": [
          "type"
        ]
      },
      "SwaggerV2.IJsonSchema.IArray": {
        "type": "object",
        "properties": {
          "items": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IString"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IUnknown"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.INullOnly"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IAnyOf"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IOneOf"
              }
            ]
          },
          "uniqueItems": {
            "type": "boolean"
          },
          "minItems": {
            "type": "integer"
          },
          "maxItems": {
            "type": "integer"
          },
          "type": {
            "const": "array"
          },
          "x-nullable": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "type": "array",
            "items": {}
          }
        },
        "required": [
          "items",
          "type"
        ]
      },
      "SwaggerV2.IJsonSchema.IObject": {
        "type": "object",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/RecordstringSwaggerV2.IJsonSchema"
          },
          "required": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "additionalProperties": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IString"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IUnknown"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.INullOnly"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IAnyOf"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IOneOf"
              }
            ]
          },
          "maxProperties": {
            "type": "number"
          },
          "minProperties": {
            "type": "number"
          },
          "type": {
            "const": "object"
          },
          "x-nullable": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "type": "array",
            "items": {}
          }
        },
        "required": [
          "type"
        ]
      },
      "SwaggerV2.IJsonSchema.IReferencestring": {
        "type": "object",
        "properties": {
          "$ref": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "type": "array",
            "items": {}
          }
        },
        "required": [
          "$ref"
        ]
      },
      "SwaggerV2.IJsonSchema.IUnknown": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "type": "array",
            "items": {}
          }
        }
      },
      "SwaggerV2.IJsonSchema.INullOnly": {
        "type": "object",
        "properties": {
          "type": {
            "const": "null"
          },
          "default": {
            "type": "null"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "type": "array",
            "items": {}
          }
        },
        "required": [
          "type"
        ]
      },
      "SwaggerV2.IJsonSchema.IAnyOf": {
        "type": "object",
        "properties": {
          "x-anyOf": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IBoolean"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IInteger"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.INumber"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IString"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IArray"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IObject"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IReferencestring"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IUnknown"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.INullOnly"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IAnyOf"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IOneOf"
                }
              ]
            }
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "type": "array",
            "items": {}
          }
        },
        "required": [
          "x-anyOf"
        ]
      },
      "SwaggerV2.IJsonSchema.IOneOf": {
        "type": "object",
        "properties": {
          "x-oneOf": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IBoolean"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IInteger"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.INumber"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IString"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IArray"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IObject"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IReferencestring"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IUnknown"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.INullOnly"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IAnyOf"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IOneOf"
                }
              ]
            }
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "type": "array",
            "items": {}
          }
        },
        "required": [
          "x-oneOf"
        ]
      },
      "RecordstringSwaggerV2.IOperation.IParameter": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/IBooleannamestringinstringdescriptionstringundefined"
            },
            {
              "$ref": "#/components/schemas/IIntegernamestringinstringdescriptionstringundefined"
            },
            {
              "$ref": "#/components/schemas/INumbernamestringinstringdescriptionstringundefined"
            },
            {
              "$ref": "#/components/schemas/IStringnamestringinstringdescriptionstringundefined"
            },
            {
              "$ref": "#/components/schemas/IArraynamestringinstringdescriptionstringundefined"
            },
            {
              "$ref": "#/components/schemas/IObjectnamestringinstringdescriptionstringundefined"
            },
            {
              "$ref": "#/components/schemas/IReferencestringnamestringinstringdescriptionstringundefined"
            },
            {
              "$ref": "#/components/schemas/IUnknownnamestringinstringdescriptionstringundefined"
            },
            {
              "$ref": "#/components/schemas/INullOnlynamestringinstringdescriptionstringundefined"
            },
            {
              "$ref": "#/components/schemas/IAnyOfnamestringinstringdescriptionstringundefined"
            },
            {
              "$ref": "#/components/schemas/IOneOfnamestringinstringdescriptionstringundefined"
            },
            {
              "$ref": "#/components/schemas/SwaggerV2.IOperation.IBodyParameter"
            }
          ]
        }
      },
      "IBooleannamestringinstringdescriptionstringundefined": {
        "type": "object",
        "properties": {
          "default": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "enum": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "type": {
            "const": "boolean"
          },
          "x-nullable": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "type": "array",
            "items": {}
          },
          "name": {
            "type": "string"
          },
          "in": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "name",
          "in"
        ]
      },
      "IIntegernamestringinstringdescriptionstringundefined": {
        "type": "object",
        "properties": {
          "default": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "enum": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "number"
                }
              ]
            }
          },
          "minimum": {
            "type": "integer"
          },
          "maximum": {
            "type": "integer"
          },
          "exclusiveMinimum": {
            "type": "boolean"
          },
          "exclusiveMaximum": {
            "type": "boolean"
          },
          "multipleOf": {
            "type": "integer",
            "exclusiveMinimum": true,
            "minimum": 0
          },
          "type": {
            "const": "integer"
          },
          "x-nullable": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "type": "array",
            "items": {}
          },
          "name": {
            "type": "string"
          },
          "in": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "name",
          "in"
        ]
      },
      "INumbernamestringinstringdescriptionstringundefined": {
        "type": "object",
        "properties": {
          "default": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ]
          },
          "enum": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "number"
                }
              ]
            }
          },
          "minimum": {
            "type": "number"
          },
          "maximum": {
            "type": "number"
          },
          "exclusiveMinimum": {
            "type": "boolean"
          },
          "exclusiveMaximum": {
            "type": "boolean"
          },
          "multipleOf": {
            "type": "number",
            "exclusiveMinimum": true,
            "minimum": 0
          },
          "type": {
            "const": "number"
          },
          "x-nullable": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "type": "array",
            "items": {}
          },
          "name": {
            "type": "string"
          },
          "in": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "name",
          "in"
        ]
      },
      "IStringnamestringinstringdescriptionstringundefined": {
        "type": "object",
        "properties": {
          "default": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ]
          },
          "enum": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string"
                }
              ]
            }
          },
          "format": {
            "type": "string"
          },
          "pattern": {
            "type": "string"
          },
          "minLength": {
            "type": "integer"
          },
          "maxLength": {
            "type": "integer"
          },
          "type": {
            "const": "string"
          },
          "x-nullable": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "type": "array",
            "items": {}
          },
          "name": {
            "type": "string"
          },
          "in": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "name",
          "in"
        ]
      },
      "IArraynamestringinstringdescriptionstringundefined": {
        "type": "object",
        "properties": {
          "items": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IString"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IUnknown"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.INullOnly"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IAnyOf"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IOneOf"
              }
            ]
          },
          "uniqueItems": {
            "type": "boolean"
          },
          "minItems": {
            "type": "integer"
          },
          "maxItems": {
            "type": "integer"
          },
          "type": {
            "const": "array"
          },
          "x-nullable": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "type": "array",
            "items": {}
          },
          "name": {
            "type": "string"
          },
          "in": {
            "type": "string"
          }
        },
        "required": [
          "items",
          "type",
          "name",
          "in"
        ]
      },
      "IObjectnamestringinstringdescriptionstringundefined": {
        "type": "object",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/RecordstringSwaggerV2.IJsonSchema"
          },
          "required": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "additionalProperties": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IString"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IUnknown"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.INullOnly"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IAnyOf"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IOneOf"
              }
            ]
          },
          "maxProperties": {
            "type": "number"
          },
          "minProperties": {
            "type": "number"
          },
          "type": {
            "const": "object"
          },
          "x-nullable": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "type": "array",
            "items": {}
          },
          "name": {
            "type": "string"
          },
          "in": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "name",
          "in"
        ]
      },
      "IReferencestringnamestringinstringdescriptionstringundefined": {
        "type": "object",
        "properties": {
          "$ref": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "type": "array",
            "items": {}
          },
          "name": {
            "type": "string"
          },
          "in": {
            "type": "string"
          }
        },
        "required": [
          "$ref",
          "name",
          "in"
        ]
      },
      "IUnknownnamestringinstringdescriptionstringundefined": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "type": "array",
            "items": {}
          },
          "name": {
            "type": "string"
          },
          "in": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "in"
        ]
      },
      "INullOnlynamestringinstringdescriptionstringundefined": {
        "type": "object",
        "properties": {
          "type": {
            "const": "null"
          },
          "default": {
            "type": "null"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "type": "array",
            "items": {}
          },
          "name": {
            "type": "string"
          },
          "in": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "name",
          "in"
        ]
      },
      "IAnyOfnamestringinstringdescriptionstringundefined": {
        "type": "object",
        "properties": {
          "x-anyOf": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IBoolean"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IInteger"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.INumber"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IString"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IArray"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IObject"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IReferencestring"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IUnknown"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.INullOnly"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IAnyOf"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IOneOf"
                }
              ]
            }
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "type": "array",
            "items": {}
          },
          "name": {
            "type": "string"
          },
          "in": {
            "type": "string"
          }
        },
        "required": [
          "x-anyOf",
          "name",
          "in"
        ]
      },
      "IOneOfnamestringinstringdescriptionstringundefined": {
        "type": "object",
        "properties": {
          "x-oneOf": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IBoolean"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IInteger"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.INumber"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IString"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IArray"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IObject"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IReferencestring"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IUnknown"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.INullOnly"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IAnyOf"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IOneOf"
                }
              ]
            }
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "type": "array",
            "items": {}
          },
          "name": {
            "type": "string"
          },
          "in": {
            "type": "string"
          }
        },
        "required": [
          "x-oneOf",
          "name",
          "in"
        ]
      },
      "SwaggerV2.IOperation.IBodyParameter": {
        "type": "object",
        "properties": {
          "schema": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IString"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IUnknown"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.INullOnly"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IAnyOf"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IOneOf"
              }
            ]
          },
          "name": {
            "type": "string"
          },
          "in": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          }
        },
        "required": [
          "schema",
          "name",
          "in"
        ]
      },
      "RecordstringSwaggerV2.IOperation.IResponse": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "$ref": "#/components/schemas/SwaggerV2.IOperation.IResponse"
        }
      },
      "SwaggerV2.IOperation.IResponse": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "headers": {
            "$ref": "#/components/schemas/RecordstringSwaggerV2.IJsonSchema"
          },
          "schema": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IString"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IUnknown"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.INullOnly"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IAnyOf"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IOneOf"
              }
            ]
          },
          "example": {}
        }
      },
      "RecordstringSwaggerV2.ISecurityDefinition": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/SwaggerV2.ISecurityDefinition.IApiKey"
            },
            {
              "$ref": "#/components/schemas/SwaggerV2.ISecurityDefinition.IBasic"
            },
            {
              "$ref": "#/components/schemas/SwaggerV2.ISecurityDefinition.IOauth2Implicit"
            },
            {
              "$ref": "#/components/schemas/SwaggerV2.ISecurityDefinition.IOauth2AccessCode"
            },
            {
              "$ref": "#/components/schemas/SwaggerV2.ISecurityDefinition.IOauth2Password"
            },
            {
              "$ref": "#/components/schemas/SwaggerV2.ISecurityDefinition.IOauth2Application"
            }
          ]
        }
      },
      "SwaggerV2.ISecurityDefinition.IApiKey": {
        "type": "object",
        "properties": {
          "type": {
            "const": "apiKey"
          },
          "in": {
            "oneOf": [
              {
                "const": "query"
              },
              {
                "const": "cookie"
              },
              {
                "const": "header"
              }
            ]
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type"
        ]
      },
      "SwaggerV2.ISecurityDefinition.IBasic": {
        "type": "object",
        "properties": {
          "type": {
            "const": "basic"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type"
        ]
      },
      "SwaggerV2.ISecurityDefinition.IOauth2Implicit": {
        "type": "object",
        "properties": {
          "type": {
            "const": "oauth2"
          },
          "flow": {
            "const": "implicit"
          },
          "authorizationUrl": {
            "type": "string"
          },
          "scopes": {
            "$ref": "#/components/schemas/Recordstringstring"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "flow"
        ]
      },
      "SwaggerV2.ISecurityDefinition.IOauth2AccessCode": {
        "type": "object",
        "properties": {
          "type": {
            "const": "oauth2"
          },
          "flow": {
            "const": "accessCode"
          },
          "authorizationUrl": {
            "type": "string"
          },
          "tokenUrl": {
            "type": "string"
          },
          "scopes": {
            "$ref": "#/components/schemas/Recordstringstring"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "flow"
        ]
      },
      "SwaggerV2.ISecurityDefinition.IOauth2Password": {
        "type": "object",
        "properties": {
          "type": {
            "const": "oauth2"
          },
          "flow": {
            "const": "password"
          },
          "tokenUrl": {
            "type": "string"
          },
          "scopes": {
            "$ref": "#/components/schemas/Recordstringstring"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "flow"
        ]
      },
      "SwaggerV2.ISecurityDefinition.IOauth2Application": {
        "type": "object",
        "properties": {
          "type": {
            "const": "oauth2"
          },
          "flow": {
            "const": "application"
          },
          "tokenUrl": {
            "type": "string"
          },
          "scopes": {
            "$ref": "#/components/schemas/Recordstringstring"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "flow"
        ]
      },
      "RecordstringSwaggerV2.IPath": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "$ref": "#/components/schemas/SwaggerV2.IPath"
        }
      },
      "SwaggerV2.IPath": {
        "type": "object",
        "properties": {
          "parameters": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IBooleannamestringinstringdescriptionstringundefined"
                },
                {
                  "$ref": "#/components/schemas/IIntegernamestringinstringdescriptionstringundefined"
                },
                {
                  "$ref": "#/components/schemas/INumbernamestringinstringdescriptionstringundefined"
                },
                {
                  "$ref": "#/components/schemas/IStringnamestringinstringdescriptionstringundefined"
                },
                {
                  "$ref": "#/components/schemas/IArraynamestringinstringdescriptionstringundefined"
                },
                {
                  "$ref": "#/components/schemas/IObjectnamestringinstringdescriptionstringundefined"
                },
                {
                  "$ref": "#/components/schemas/IReferencestringnamestringinstringdescriptionstringundefined"
                },
                {
                  "$ref": "#/components/schemas/IUnknownnamestringinstringdescriptionstringundefined"
                },
                {
                  "$ref": "#/components/schemas/INullOnlynamestringinstringdescriptionstringundefined"
                },
                {
                  "$ref": "#/components/schemas/IAnyOfnamestringinstringdescriptionstringundefined"
                },
                {
                  "$ref": "#/components/schemas/IOneOfnamestringinstringdescriptionstringundefined"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IOperation.IBodyParameter"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IReference#/parameters/string"
                }
              ]
            }
          },
          "delete": {
            "$ref": "#/components/schemas/SwaggerV2.IOperation"
          },
          "get": {
            "$ref": "#/components/schemas/SwaggerV2.IOperation"
          },
          "head": {
            "$ref": "#/components/schemas/SwaggerV2.IOperation"
          },
          "patch": {
            "$ref": "#/components/schemas/SwaggerV2.IOperation"
          },
          "post": {
            "$ref": "#/components/schemas/SwaggerV2.IOperation"
          },
          "put": {
            "$ref": "#/components/schemas/SwaggerV2.IOperation"
          },
          "options": {
            "$ref": "#/components/schemas/SwaggerV2.IOperation"
          },
          "trace": {
            "$ref": "#/components/schemas/SwaggerV2.IOperation"
          }
        }
      },
      "SwaggerV2.IJsonSchema.IReference#/parameters/string": {
        "type": "object",
        "properties": {
          "$ref": {
            "type": "string",
            "pattern": "^(#\\/parameters\\/(.*))"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "type": "array",
            "items": {}
          }
        },
        "required": [
          "$ref"
        ]
      },
      "SwaggerV2.IOperation": {
        "type": "object",
        "properties": {
          "operationId": {
            "type": "string"
          },
          "parameters": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IBooleannamestringinstringdescriptionstringundefined"
                },
                {
                  "$ref": "#/components/schemas/IIntegernamestringinstringdescriptionstringundefined"
                },
                {
                  "$ref": "#/components/schemas/INumbernamestringinstringdescriptionstringundefined"
                },
                {
                  "$ref": "#/components/schemas/IStringnamestringinstringdescriptionstringundefined"
                },
                {
                  "$ref": "#/components/schemas/IArraynamestringinstringdescriptionstringundefined"
                },
                {
                  "$ref": "#/components/schemas/IObjectnamestringinstringdescriptionstringundefined"
                },
                {
                  "$ref": "#/components/schemas/IReferencestringnamestringinstringdescriptionstringundefined"
                },
                {
                  "$ref": "#/components/schemas/IUnknownnamestringinstringdescriptionstringundefined"
                },
                {
                  "$ref": "#/components/schemas/INullOnlynamestringinstringdescriptionstringundefined"
                },
                {
                  "$ref": "#/components/schemas/IAnyOfnamestringinstringdescriptionstringundefined"
                },
                {
                  "$ref": "#/components/schemas/IOneOfnamestringinstringdescriptionstringundefined"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IOperation.IBodyParameter"
                },
                {
                  "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IReference#/definitions/parameters/string"
                }
              ]
            }
          },
          "responses": {
            "$ref": "#/components/schemas/RecordstringIResponseIReference#/definitions/responses/string"
          },
          "summary": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "security": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordstringArraystring"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "deprecated": {
            "type": "boolean"
          }
        }
      },
      "SwaggerV2.IJsonSchema.IReference#/definitions/parameters/string": {
        "type": "object",
        "properties": {
          "$ref": {
            "type": "string",
            "pattern": "^(#\\/definitions\\/parameters\\/(.*))"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "type": "array",
            "items": {}
          }
        },
        "required": [
          "$ref"
        ]
      },
      "RecordstringIResponseIReference#/definitions/responses/string": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/SwaggerV2.IOperation.IResponse"
            },
            {
              "$ref": "#/components/schemas/SwaggerV2.IJsonSchema.IReference#/definitions/responses/string"
            }
          ]
        }
      },
      "SwaggerV2.IJsonSchema.IReference#/definitions/responses/string": {
        "type": "object",
        "properties": {
          "$ref": {
            "type": "string",
            "pattern": "^(#\\/definitions\\/responses\\/(.*))"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "type": "array",
            "items": {}
          }
        },
        "required": [
          "$ref"
        ]
      },
      "SwaggerV2.IDocument.ITag": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "OpenApiV3.IDocument": {
        "type": "object",
        "properties": {
          "openapi": {
            "oneOf": [
              {
                "type": "string",
                "pattern": "^(3\\.0\\.[+-]?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)$"
              },
              {
                "const": "3.0"
              }
            ]
          },
          "servers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenApiV3.IServer"
            }
          },
          "info": {
            "$ref": "#/components/schemas/OpenApiV3.IDocument.IInfo"
          },
          "components": {
            "$ref": "#/components/schemas/OpenApiV3.IComponents"
          },
          "paths": {
            "$ref": "#/components/schemas/RecordstringOpenApiV3.IPath"
          },
          "security": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordstringArraystring"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenApiV3.IDocument.ITag"
            }
          }
        },
        "required": [
          "openapi"
        ]
      },
      "OpenApiV3.IServer": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "variables": {
            "$ref": "#/components/schemas/RecordstringOpenApiV3.IServer.IVariable"
          }
        },
        "required": [
          "url"
        ]
      },
      "RecordstringOpenApiV3.IServer.IVariable": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "$ref": "#/components/schemas/OpenApiV3.IServer.IVariable"
        }
      },
      "OpenApiV3.IServer.IVariable": {
        "type": "object",
        "properties": {
          "default": {
            "type": "string"
          },
          "enum": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "default"
        ]
      },
      "OpenApiV3.IDocument.IInfo": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "termsOfService": {
            "type": "string"
          },
          "contact": {
            "$ref": "#/components/schemas/OpenApiV3.IDocument.IContact"
          },
          "license": {
            "$ref": "#/components/schemas/OpenApiV3.IDocument.ILicense"
          },
          "version": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "version"
        ]
      },
      "OpenApiV3.IDocument.IContact": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "OpenApiV3.IDocument.ILicense": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "OpenApiV3.IComponents": {
        "type": "object",
        "properties": {
          "schemas": {
            "$ref": "#/components/schemas/RecordstringOpenApiV3.IJsonSchema"
          },
          "responses": {
            "$ref": "#/components/schemas/RecordstringOpenApiV3.IOperation.IResponse"
          },
          "parameters": {
            "$ref": "#/components/schemas/RecordstringOpenApiV3.IOperation.IParameter"
          },
          "requestBodies": {
            "$ref": "#/components/schemas/RecordstringOpenApiV3.IOperation.IRequestBody"
          },
          "securitySchemes": {
            "$ref": "#/components/schemas/RecordstringOpenApiV3.ISecurityScheme"
          },
          "headers": {
            "$ref": "#/components/schemas/RecordstringOmitOpenApiV3.IOperation.IParameterin"
          },
          "examples": {
            "$ref": "#/components/schemas/RecordstringOpenApiV3.IExample"
          }
        }
      },
      "RecordstringOpenApiV3.IJsonSchema": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IBoolean"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IInteger"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.INumber"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IString"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IArray"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IObject"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IReferencestring"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IUnknown"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.INullOnly"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IAllOf"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IAnyOf"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IOneOf"
            }
          ]
        }
      },
      "OpenApiV3.IJsonSchema.IBoolean": {
        "type": "object",
        "properties": {
          "default": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "enum": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "type": {
            "const": "boolean"
          },
          "nullable": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "type"
        ]
      },
      "OpenApiV3.IJsonSchema.IInteger": {
        "type": "object",
        "properties": {
          "default": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "enum": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "number"
                }
              ]
            }
          },
          "minimum": {
            "type": "integer"
          },
          "maximum": {
            "type": "integer"
          },
          "exclusiveMinimum": {
            "type": "boolean"
          },
          "exclusiveMaximum": {
            "type": "boolean"
          },
          "multipleOf": {
            "type": "integer",
            "exclusiveMinimum": true,
            "minimum": 0
          },
          "type": {
            "const": "integer"
          },
          "nullable": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "type"
        ]
      },
      "OpenApiV3.IJsonSchema.INumber": {
        "type": "object",
        "properties": {
          "default": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ]
          },
          "enum": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "number"
                }
              ]
            }
          },
          "minimum": {
            "type": "number"
          },
          "maximum": {
            "type": "number"
          },
          "exclusiveMinimum": {
            "type": "boolean"
          },
          "exclusiveMaximum": {
            "type": "boolean"
          },
          "multipleOf": {
            "type": "number",
            "exclusiveMinimum": true,
            "minimum": 0
          },
          "type": {
            "const": "number"
          },
          "nullable": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "type"
        ]
      },
      "OpenApiV3.IJsonSchema.IString": {
        "type": "object",
        "properties": {
          "default": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ]
          },
          "enum": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string"
                }
              ]
            }
          },
          "format": {
            "type": "string"
          },
          "pattern": {
            "type": "string"
          },
          "minLength": {
            "type": "integer"
          },
          "maxLength": {
            "type": "integer"
          },
          "type": {
            "const": "string"
          },
          "nullable": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "type"
        ]
      },
      "OpenApiV3.IJsonSchema.IArray": {
        "type": "object",
        "properties": {
          "items": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IString"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IUnknown"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.INullOnly"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IAllOf"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IAnyOf"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IOneOf"
              }
            ]
          },
          "uniqueItems": {
            "type": "boolean"
          },
          "minItems": {
            "type": "integer"
          },
          "maxItems": {
            "type": "integer"
          },
          "type": {
            "const": "array"
          },
          "nullable": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "items",
          "type"
        ]
      },
      "OpenApiV3.IJsonSchema.IObject": {
        "type": "object",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/RecordstringOpenApiV3.IJsonSchema"
          },
          "required": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "additionalProperties": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IString"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IUnknown"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.INullOnly"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IAllOf"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IAnyOf"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IOneOf"
              }
            ]
          },
          "maxProperties": {
            "type": "number"
          },
          "minProperties": {
            "type": "number"
          },
          "type": {
            "const": "object"
          },
          "nullable": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "type"
        ]
      },
      "OpenApiV3.IJsonSchema.IReferencestring": {
        "type": "object",
        "properties": {
          "$ref": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "$ref"
        ]
      },
      "OpenApiV3.IJsonSchema.IUnknown": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        }
      },
      "OpenApiV3.IJsonSchema.INullOnly": {
        "type": "object",
        "properties": {
          "type": {
            "const": "null"
          },
          "default": {
            "type": "null"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "type"
        ]
      },
      "OpenApiV3.IJsonSchema.IAllOf": {
        "type": "object",
        "properties": {
          "allOf": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IBoolean"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IInteger"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.INumber"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IString"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IArray"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IObject"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IReferencestring"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IUnknown"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.INullOnly"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IAllOf"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IAnyOf"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IOneOf"
                }
              ]
            }
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "allOf"
        ]
      },
      "OpenApiV3.IJsonSchema.IAnyOf": {
        "type": "object",
        "properties": {
          "anyOf": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IBoolean"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IInteger"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.INumber"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IString"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IArray"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IObject"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IReferencestring"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IUnknown"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.INullOnly"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IAllOf"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IAnyOf"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IOneOf"
                }
              ]
            }
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "anyOf"
        ]
      },
      "OpenApiV3.IJsonSchema.IOneOf": {
        "type": "object",
        "properties": {
          "oneOf": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IBoolean"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IInteger"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.INumber"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IString"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IArray"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IObject"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IReferencestring"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IUnknown"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.INullOnly"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IAllOf"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IAnyOf"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IOneOf"
                }
              ]
            }
          },
          "discriminator": {
            "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IOneOf.IDiscriminator"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "oneOf"
        ]
      },
      "OpenApiV3.IJsonSchema.IOneOf.IDiscriminator": {
        "type": "object",
        "properties": {
          "propertyName": {
            "type": "string"
          },
          "mapping": {
            "$ref": "#/components/schemas/Recordstringstring"
          }
        },
        "required": [
          "propertyName"
        ]
      },
      "RecordstringOpenApiV3.IOperation.IResponse": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "$ref": "#/components/schemas/OpenApiV3.IOperation.IResponse"
        }
      },
      "OpenApiV3.IOperation.IResponse": {
        "type": "object",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/RecordstringOpenApiV3.IOperation.IMediaType"
          },
          "headers": {
            "$ref": "#/components/schemas/RecordstringOmitIParameterinIReference#/components/headers/string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "RecordstringOpenApiV3.IOperation.IMediaType": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "$ref": "#/components/schemas/OpenApiV3.IOperation.IMediaType"
        }
      },
      "OpenApiV3.IOperation.IMediaType": {
        "type": "object",
        "properties": {
          "schema": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IString"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IUnknown"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.INullOnly"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IAllOf"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IAnyOf"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IOneOf"
              }
            ]
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/RecordstringIExampleIReference#/components/examples/string"
          }
        }
      },
      "RecordstringIExampleIReference#/components/examples/string": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/OpenApiV3.IExample"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IReference#/components/examples/string"
            }
          ]
        }
      },
      "OpenApiV3.IExample": {
        "type": "object",
        "properties": {
          "summary": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "value": {},
          "externalValue": {
            "type": "string"
          }
        }
      },
      "OpenApiV3.IJsonSchema.IReference#/components/examples/string": {
        "type": "object",
        "properties": {
          "$ref": {
            "type": "string",
            "pattern": "^(#\\/components\\/examples\\/(.*))"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "$ref"
        ]
      },
      "RecordstringOmitIParameterinIReference#/components/headers/string": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/OmitOpenApiV3.IOperation.IParameterin"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IReference#/components/headers/string"
            }
          ]
        }
      },
      "OmitOpenApiV3.IOperation.IParameterin": {
        "type": "object",
        "properties": {
          "schema": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IString"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IUnknown"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.INullOnly"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IAllOf"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IAnyOf"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IOneOf"
              }
            ]
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/RecordstringIExampleIReference#/components/examples/string"
          }
        },
        "required": [
          "schema"
        ],
        "description": "Construct a type with the properties of T except for those in type K."
      },
      "OpenApiV3.IJsonSchema.IReference#/components/headers/string": {
        "type": "object",
        "properties": {
          "$ref": {
            "type": "string",
            "pattern": "^(#\\/components\\/headers\\/(.*))"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "$ref"
        ]
      },
      "RecordstringOpenApiV3.IOperation.IParameter": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "$ref": "#/components/schemas/OpenApiV3.IOperation.IParameter"
        }
      },
      "OpenApiV3.IOperation.IParameter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "in": {
            "oneOf": [
              {
                "const": "query"
              },
              {
                "const": "cookie"
              },
              {
                "const": "header"
              },
              {
                "const": "path"
              }
            ]
          },
          "schema": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IString"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IUnknown"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.INullOnly"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IAllOf"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IAnyOf"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IOneOf"
              }
            ]
          },
          "required": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/RecordstringIExampleIReference#/components/examples/string"
          }
        },
        "required": [
          "in",
          "schema"
        ]
      },
      "RecordstringOpenApiV3.IOperation.IRequestBody": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "$ref": "#/components/schemas/OpenApiV3.IOperation.IRequestBody"
        }
      },
      "OpenApiV3.IOperation.IRequestBody": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "content": {
            "$ref": "#/components/schemas/RecordstringOpenApiV3.IOperation.IMediaType"
          }
        }
      },
      "RecordstringOpenApiV3.ISecurityScheme": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/OpenApiV3.ISecurityScheme.IApiKey"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3.ISecurityScheme.IHttpBasic"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3.ISecurityScheme.IHttpBearer"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3.ISecurityScheme.IOAuth2"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3.ISecurityScheme.IOpenId"
            }
          ]
        }
      },
      "OpenApiV3.ISecurityScheme.IApiKey": {
        "type": "object",
        "properties": {
          "type": {
            "const": "apiKey"
          },
          "in": {
            "oneOf": [
              {
                "const": "query"
              },
              {
                "const": "cookie"
              },
              {
                "const": "header"
              }
            ]
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type"
        ]
      },
      "OpenApiV3.ISecurityScheme.IHttpBasic": {
        "type": "object",
        "properties": {
          "type": {
            "const": "http"
          },
          "scheme": {
            "const": "basic"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "scheme"
        ]
      },
      "OpenApiV3.ISecurityScheme.IHttpBearer": {
        "type": "object",
        "properties": {
          "type": {
            "const": "http"
          },
          "scheme": {
            "const": "bearer"
          },
          "bearerFormat": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "scheme"
        ]
      },
      "OpenApiV3.ISecurityScheme.IOAuth2": {
        "type": "object",
        "properties": {
          "type": {
            "const": "oauth2"
          },
          "flows": {
            "$ref": "#/components/schemas/OpenApiV3.ISecurityScheme.IOAuth2.IFlowSet"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "flows"
        ]
      },
      "OpenApiV3.ISecurityScheme.IOAuth2.IFlowSet": {
        "type": "object",
        "properties": {
          "authorizationCode": {
            "$ref": "#/components/schemas/OpenApiV3.ISecurityScheme.IOAuth2.IFlow"
          },
          "implicit": {
            "$ref": "#/components/schemas/OmitOpenApiV3.ISecurityScheme.IOAuth2.IFlowtokenUrl"
          },
          "password": {
            "$ref": "#/components/schemas/OmitOpenApiV3.ISecurityScheme.IOAuth2.IFlowauthorizationUrl"
          },
          "clientCredentials": {
            "$ref": "#/components/schemas/OmitOpenApiV3.ISecurityScheme.IOAuth2.IFlowauthorizationUrl"
          }
        }
      },
      "OpenApiV3.ISecurityScheme.IOAuth2.IFlow": {
        "type": "object",
        "properties": {
          "authorizationUrl": {
            "type": "string"
          },
          "tokenUrl": {
            "type": "string"
          },
          "refreshUrl": {
            "type": "string"
          },
          "scopes": {
            "$ref": "#/components/schemas/Recordstringstring"
          }
        }
      },
      "OmitOpenApiV3.ISecurityScheme.IOAuth2.IFlowtokenUrl": {
        "type": "object",
        "properties": {
          "authorizationUrl": {
            "type": "string"
          },
          "refreshUrl": {
            "type": "string"
          },
          "scopes": {
            "$ref": "#/components/schemas/Recordstringstring"
          }
        },
        "description": "Construct a type with the properties of T except for those in type K."
      },
      "OmitOpenApiV3.ISecurityScheme.IOAuth2.IFlowauthorizationUrl": {
        "type": "object",
        "properties": {
          "tokenUrl": {
            "type": "string"
          },
          "refreshUrl": {
            "type": "string"
          },
          "scopes": {
            "$ref": "#/components/schemas/Recordstringstring"
          }
        },
        "description": "Construct a type with the properties of T except for those in type K."
      },
      "OpenApiV3.ISecurityScheme.IOpenId": {
        "type": "object",
        "properties": {
          "type": {
            "const": "openIdConnect"
          },
          "openIdConnectUrl": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "openIdConnectUrl"
        ]
      },
      "RecordstringOmitOpenApiV3.IOperation.IParameterin": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "$ref": "#/components/schemas/OmitOpenApiV3.IOperation.IParameterin"
        }
      },
      "RecordstringOpenApiV3.IExample": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "$ref": "#/components/schemas/OpenApiV3.IExample"
        }
      },
      "RecordstringOpenApiV3.IPath": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "$ref": "#/components/schemas/OpenApiV3.IPath"
        }
      },
      "OpenApiV3.IPath": {
        "type": "object",
        "properties": {
          "parameters": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/OpenApiV3.IOperation.IParameter"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IReference#/components/headers/string"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IReference#/components/parameters/string"
                }
              ]
            }
          },
          "servers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenApiV3.IServer"
            }
          },
          "summary": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "delete": {
            "$ref": "#/components/schemas/OpenApiV3.IOperation"
          },
          "get": {
            "$ref": "#/components/schemas/OpenApiV3.IOperation"
          },
          "head": {
            "$ref": "#/components/schemas/OpenApiV3.IOperation"
          },
          "patch": {
            "$ref": "#/components/schemas/OpenApiV3.IOperation"
          },
          "post": {
            "$ref": "#/components/schemas/OpenApiV3.IOperation"
          },
          "put": {
            "$ref": "#/components/schemas/OpenApiV3.IOperation"
          },
          "options": {
            "$ref": "#/components/schemas/OpenApiV3.IOperation"
          },
          "trace": {
            "$ref": "#/components/schemas/OpenApiV3.IOperation"
          }
        }
      },
      "OpenApiV3.IJsonSchema.IReference#/components/parameters/string": {
        "type": "object",
        "properties": {
          "$ref": {
            "type": "string",
            "pattern": "^(#\\/components\\/parameters\\/(.*))"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "$ref"
        ]
      },
      "OpenApiV3.IOperation": {
        "type": "object",
        "properties": {
          "operationId": {
            "type": "string"
          },
          "parameters": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/OpenApiV3.IOperation.IParameter"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IReference#/components/headers/string"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IReference#/components/parameters/string"
                }
              ]
            }
          },
          "requestBody": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/OpenApiV3.IOperation.IRequestBody"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IReference#/components/requestBodies/string"
              }
            ]
          },
          "responses": {
            "$ref": "#/components/schemas/RecordstringIResponseIReference#/components/responses/string"
          },
          "servers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenApiV3.IServer"
            }
          },
          "summary": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "security": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordstringArraystring"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "deprecated": {
            "type": "boolean"
          }
        }
      },
      "OpenApiV3.IJsonSchema.IReference#/components/requestBodies/string": {
        "type": "object",
        "properties": {
          "$ref": {
            "type": "string",
            "pattern": "^(#\\/components\\/requestBodies\\/(.*))"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "$ref"
        ]
      },
      "RecordstringIResponseIReference#/components/responses/string": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/OpenApiV3.IOperation.IResponse"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3.IJsonSchema.IReference#/components/responses/string"
            }
          ]
        }
      },
      "OpenApiV3.IJsonSchema.IReference#/components/responses/string": {
        "type": "object",
        "properties": {
          "$ref": {
            "type": "string",
            "pattern": "^(#\\/components\\/responses\\/(.*))"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "$ref"
        ]
      },
      "OpenApiV3.IDocument.ITag": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "OpenApiV3_1.IDocument": {
        "type": "object",
        "properties": {
          "openapi": {
            "type": "string",
            "pattern": "^(3\\.1\\.[+-]?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)$"
          },
          "servers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenApiV3_1.IServer"
            }
          },
          "info": {
            "$ref": "#/components/schemas/OpenApiV3_1.IDocument.IInfo"
          },
          "components": {
            "$ref": "#/components/schemas/OpenApiV3_1.IComponents"
          },
          "paths": {
            "$ref": "#/components/schemas/RecordstringOpenApiV3_1.IPath"
          },
          "webhooks": {
            "$ref": "#/components/schemas/RecordstringIPathIReference#/components/pathItems/string"
          },
          "security": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordstringArraystring"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenApiV3_1.IDocument.ITag"
            }
          }
        },
        "required": [
          "openapi"
        ]
      },
      "OpenApiV3_1.IServer": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "variables": {
            "$ref": "#/components/schemas/RecordstringOpenApiV3_1.IServer.IVariable"
          }
        },
        "required": [
          "url"
        ]
      },
      "RecordstringOpenApiV3_1.IServer.IVariable": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "$ref": "#/components/schemas/OpenApiV3_1.IServer.IVariable"
        }
      },
      "OpenApiV3_1.IServer.IVariable": {
        "type": "object",
        "properties": {
          "default": {
            "type": "string"
          },
          "enum": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "default"
        ]
      },
      "OpenApiV3_1.IDocument.IInfo": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "termsOfService": {
            "type": "string"
          },
          "contact": {
            "$ref": "#/components/schemas/OpenApiV3_1.IDocument.IContact"
          },
          "license": {
            "$ref": "#/components/schemas/OpenApiV3_1.IDocument.ILicense"
          },
          "version": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "version"
        ]
      },
      "OpenApiV3_1.IDocument.IContact": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "OpenApiV3_1.IDocument.ILicense": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "OpenApiV3_1.IComponents": {
        "type": "object",
        "properties": {
          "schemas": {
            "$ref": "#/components/schemas/RecordstringOpenApiV3_1.IJsonSchema"
          },
          "pathItems": {
            "$ref": "#/components/schemas/RecordstringOpenApiV3_1.IPath"
          },
          "responses": {
            "$ref": "#/components/schemas/RecordstringOpenApiV3_1.IOperation.IResponse"
          },
          "parameters": {
            "$ref": "#/components/schemas/RecordstringOpenApiV3_1.IOperation.IParameter"
          },
          "requestBodies": {
            "$ref": "#/components/schemas/RecordstringOpenApiV3_1.IOperation.IRequestBody"
          },
          "securitySchemes": {
            "$ref": "#/components/schemas/RecordstringOpenApiV3_1.ISecurityScheme"
          },
          "headers": {
            "$ref": "#/components/schemas/RecordstringOmitOpenApiV3_1.IOperation.IParameterin"
          },
          "examples": {
            "$ref": "#/components/schemas/RecordstringOpenApiV3_1.IExample"
          }
        }
      },
      "RecordstringOpenApiV3_1.IJsonSchema": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IMixed"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IConstant"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IBoolean"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IInteger"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INumber"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IString"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IArray"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IObject"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IReferencestring"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IUnknown"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INull"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAllOf"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAnyOf"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IOneOf"
            }
          ]
        }
      },
      "OpenApiV3_1.IJsonSchema.IMixed": {
        "type": "object",
        "properties": {
          "type": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "string"
                },
                {
                  "const": "number"
                },
                {
                  "const": "boolean"
                },
                {
                  "const": "object"
                },
                {
                  "const": "array"
                },
                {
                  "const": "integer"
                },
                {
                  "const": "null"
                }
              ]
            }
          },
          "default": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {}
              }
            ]
          },
          "enum": {
            "type": "array",
            "items": {}
          },
          "const": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          },
          "nullable": {
            "type": "boolean"
          },
          "minimum": {
            "type": "number"
          },
          "maximum": {
            "type": "number"
          },
          "exclusiveMinimum": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "exclusiveMaximum": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "multipleOf": {
            "type": "number",
            "exclusiveMinimum": true,
            "minimum": 0
          },
          "format": {
            "type": "string"
          },
          "pattern": {
            "type": "string"
          },
          "maxLength": {
            "type": "integer"
          },
          "contentMediaType": {
            "type": "string"
          },
          "minLength": {
            "type": "integer"
          },
          "minItems": {
            "type": "integer"
          },
          "items": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IMixed"
                    },
                    {
                      "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IConstant"
                    },
                    {
                      "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IBoolean"
                    },
                    {
                      "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IInteger"
                    },
                    {
                      "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INumber"
                    },
                    {
                      "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IString"
                    },
                    {
                      "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IArray"
                    },
                    {
                      "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IObject"
                    },
                    {
                      "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IReferencestring"
                    },
                    {
                      "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IUnknown"
                    },
                    {
                      "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INull"
                    },
                    {
                      "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAllOf"
                    },
                    {
                      "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAnyOf"
                    },
                    {
                      "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IOneOf"
                    }
                  ]
                }
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IMixed"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IConstant"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IString"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IUnknown"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INull"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAllOf"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAnyOf"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IOneOf"
              }
            ]
          },
          "uniqueItems": {
            "type": "boolean"
          },
          "maxItems": {
            "type": "integer"
          },
          "prefixItems": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IMixed"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IConstant"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IBoolean"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IInteger"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INumber"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IString"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IArray"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IObject"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IReferencestring"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IUnknown"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INull"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAllOf"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAnyOf"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IOneOf"
                }
              ]
            }
          },
          "additionalItems": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IMixed"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IConstant"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IString"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IUnknown"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INull"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAllOf"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAnyOf"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IOneOf"
              }
            ]
          },
          "properties": {
            "$ref": "#/components/schemas/RecordstringOpenApiV3_1.IJsonSchema"
          },
          "additionalProperties": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IMixed"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IConstant"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IString"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IUnknown"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INull"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAllOf"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAnyOf"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IOneOf"
              }
            ]
          },
          "required": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "maxProperties": {
            "type": "number"
          },
          "minProperties": {
            "type": "number"
          },
          "oneOf": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IMixed"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IConstant"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IBoolean"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IInteger"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INumber"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IString"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IArray"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IObject"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IReferencestring"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IUnknown"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INull"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAllOf"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAnyOf"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IOneOf"
                }
              ]
            }
          },
          "discriminator": {
            "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator"
          },
          "anyOf": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IMixed"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IConstant"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IBoolean"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IInteger"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INumber"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IString"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IArray"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IObject"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IReferencestring"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IUnknown"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INull"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAllOf"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAnyOf"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IOneOf"
                }
              ]
            }
          },
          "allOf": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IMixed"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IConstant"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IBoolean"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IInteger"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INumber"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IString"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IArray"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IObject"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IReferencestring"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IUnknown"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INull"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAllOf"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAnyOf"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IOneOf"
                }
              ]
            }
          },
          "$ref": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "const",
          "oneOf",
          "anyOf",
          "allOf",
          "$ref"
        ]
      },
      "OpenApiV3_1.IJsonSchema.IConstant": {
        "type": "object",
        "properties": {
          "const": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "const"
        ]
      },
      "OpenApiV3_1.IJsonSchema.IBoolean": {
        "type": "object",
        "properties": {
          "default": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "enum": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "type": {
            "const": "boolean"
          },
          "nullable": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "type"
        ]
      },
      "OpenApiV3_1.IJsonSchema.IInteger": {
        "type": "object",
        "properties": {
          "default": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "enum": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "number"
                }
              ]
            }
          },
          "minimum": {
            "type": "integer"
          },
          "maximum": {
            "type": "integer"
          },
          "exclusiveMinimum": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "exclusiveMaximum": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "multipleOf": {
            "type": "integer",
            "exclusiveMinimum": true,
            "minimum": 0
          },
          "type": {
            "const": "integer"
          },
          "nullable": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "type"
        ]
      },
      "OpenApiV3_1.IJsonSchema.INumber": {
        "type": "object",
        "properties": {
          "default": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ]
          },
          "enum": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "number"
                }
              ]
            }
          },
          "minimum": {
            "type": "number"
          },
          "maximum": {
            "type": "number"
          },
          "exclusiveMinimum": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "exclusiveMaximum": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "multipleOf": {
            "type": "number",
            "exclusiveMinimum": true,
            "minimum": 0
          },
          "type": {
            "const": "number"
          },
          "nullable": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "type"
        ]
      },
      "OpenApiV3_1.IJsonSchema.IString": {
        "type": "object",
        "properties": {
          "contentMediaType": {
            "type": "string"
          },
          "default": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ]
          },
          "enum": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string"
                }
              ]
            }
          },
          "format": {
            "type": "string"
          },
          "pattern": {
            "type": "string"
          },
          "minLength": {
            "type": "integer"
          },
          "maxLength": {
            "type": "integer"
          },
          "type": {
            "const": "string"
          },
          "nullable": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "type"
        ]
      },
      "OpenApiV3_1.IJsonSchema.IArray": {
        "type": "object",
        "properties": {
          "items": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IMixed"
                    },
                    {
                      "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IConstant"
                    },
                    {
                      "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IBoolean"
                    },
                    {
                      "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IInteger"
                    },
                    {
                      "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INumber"
                    },
                    {
                      "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IString"
                    },
                    {
                      "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IArray"
                    },
                    {
                      "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IObject"
                    },
                    {
                      "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IReferencestring"
                    },
                    {
                      "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IUnknown"
                    },
                    {
                      "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INull"
                    },
                    {
                      "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAllOf"
                    },
                    {
                      "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAnyOf"
                    },
                    {
                      "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IOneOf"
                    }
                  ]
                }
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IMixed"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IConstant"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IString"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IUnknown"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INull"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAllOf"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAnyOf"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IOneOf"
              }
            ]
          },
          "prefixItems": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IMixed"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IConstant"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IBoolean"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IInteger"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INumber"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IString"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IArray"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IObject"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IReferencestring"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IUnknown"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INull"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAllOf"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAnyOf"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IOneOf"
                }
              ]
            }
          },
          "uniqueItems": {
            "type": "boolean"
          },
          "additionalItems": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IMixed"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IConstant"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IString"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IUnknown"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INull"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAllOf"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAnyOf"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IOneOf"
              }
            ]
          },
          "minItems": {
            "type": "integer"
          },
          "maxItems": {
            "type": "integer"
          },
          "type": {
            "const": "array"
          },
          "nullable": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "type"
        ]
      },
      "OpenApiV3_1.IJsonSchema.IObject": {
        "type": "object",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/RecordstringOpenApiV3_1.IJsonSchema"
          },
          "required": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "additionalProperties": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IMixed"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IConstant"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IString"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IUnknown"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INull"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAllOf"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAnyOf"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IOneOf"
              }
            ]
          },
          "maxProperties": {
            "type": "number"
          },
          "minProperties": {
            "type": "number"
          },
          "type": {
            "const": "object"
          },
          "nullable": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "type"
        ]
      },
      "OpenApiV3_1.IJsonSchema.IReferencestring": {
        "type": "object",
        "properties": {
          "$ref": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "$ref"
        ]
      },
      "OpenApiV3_1.IJsonSchema.IUnknown": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        }
      },
      "OpenApiV3_1.IJsonSchema.INull": {
        "type": "object",
        "properties": {
          "default": {
            "type": "null"
          },
          "type": {
            "const": "null"
          },
          "nullable": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "type"
        ]
      },
      "OpenApiV3_1.IJsonSchema.IAllOf": {
        "type": "object",
        "properties": {
          "allOf": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IMixed"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IConstant"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IBoolean"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IInteger"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INumber"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IString"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IArray"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IObject"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IReferencestring"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IUnknown"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INull"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAllOf"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAnyOf"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IOneOf"
                }
              ]
            }
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "allOf"
        ]
      },
      "OpenApiV3_1.IJsonSchema.IAnyOf": {
        "type": "object",
        "properties": {
          "anyOf": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IMixed"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IConstant"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IBoolean"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IInteger"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INumber"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IString"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IArray"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IObject"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IReferencestring"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IUnknown"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INull"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAllOf"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAnyOf"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IOneOf"
                }
              ]
            }
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "anyOf"
        ]
      },
      "OpenApiV3_1.IJsonSchema.IOneOf": {
        "type": "object",
        "properties": {
          "oneOf": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IMixed"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IConstant"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IBoolean"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IInteger"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INumber"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IString"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IArray"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IObject"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IReferencestring"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IUnknown"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INull"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAllOf"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAnyOf"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IOneOf"
                }
              ]
            }
          },
          "discriminator": {
            "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "oneOf"
        ]
      },
      "OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator": {
        "type": "object",
        "properties": {
          "propertyName": {
            "type": "string"
          },
          "mapping": {
            "$ref": "#/components/schemas/Recordstringstring"
          }
        },
        "required": [
          "propertyName"
        ]
      },
      "RecordstringOpenApiV3_1.IPath": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "$ref": "#/components/schemas/OpenApiV3_1.IPath"
        }
      },
      "OpenApiV3_1.IPath": {
        "type": "object",
        "properties": {
          "parameters": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IOperation.IParameter"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IReference#/components/headers/string"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IReference#/components/parameters/string"
                }
              ]
            }
          },
          "servers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenApiV3_1.IServer"
            }
          },
          "summary": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "delete": {
            "$ref": "#/components/schemas/OpenApiV3_1.IOperation"
          },
          "get": {
            "$ref": "#/components/schemas/OpenApiV3_1.IOperation"
          },
          "head": {
            "$ref": "#/components/schemas/OpenApiV3_1.IOperation"
          },
          "patch": {
            "$ref": "#/components/schemas/OpenApiV3_1.IOperation"
          },
          "post": {
            "$ref": "#/components/schemas/OpenApiV3_1.IOperation"
          },
          "put": {
            "$ref": "#/components/schemas/OpenApiV3_1.IOperation"
          },
          "options": {
            "$ref": "#/components/schemas/OpenApiV3_1.IOperation"
          },
          "trace": {
            "$ref": "#/components/schemas/OpenApiV3_1.IOperation"
          }
        }
      },
      "OpenApiV3_1.IOperation.IParameter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "in": {
            "oneOf": [
              {
                "const": "query"
              },
              {
                "const": "cookie"
              },
              {
                "const": "header"
              },
              {
                "const": "path"
              }
            ]
          },
          "schema": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IMixed"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IConstant"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IString"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IUnknown"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INull"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAllOf"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAnyOf"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IOneOf"
              }
            ]
          },
          "required": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/RecordstringIExampleIReference#/components/examples/string.o1"
          }
        },
        "required": [
          "in",
          "schema"
        ]
      },
      "RecordstringIExampleIReference#/components/examples/string.o1": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/OpenApiV3_1.IExample"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IReference#/components/examples/string"
            }
          ]
        }
      },
      "OpenApiV3_1.IExample": {
        "type": "object",
        "properties": {
          "summary": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "value": {},
          "externalValue": {
            "type": "string"
          }
        }
      },
      "OpenApiV3_1.IJsonSchema.IReference#/components/examples/string": {
        "type": "object",
        "properties": {
          "$ref": {
            "type": "string",
            "pattern": "^(#\\/components\\/examples\\/(.*))"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "$ref"
        ]
      },
      "OpenApiV3_1.IJsonSchema.IReference#/components/headers/string": {
        "type": "object",
        "properties": {
          "$ref": {
            "type": "string",
            "pattern": "^(#\\/components\\/headers\\/(.*))"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "$ref"
        ]
      },
      "OpenApiV3_1.IJsonSchema.IReference#/components/parameters/string": {
        "type": "object",
        "properties": {
          "$ref": {
            "type": "string",
            "pattern": "^(#\\/components\\/parameters\\/(.*))"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "$ref"
        ]
      },
      "OpenApiV3_1.IOperation": {
        "type": "object",
        "properties": {
          "operationId": {
            "type": "string"
          },
          "parameters": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IOperation.IParameter"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IReference#/components/headers/string"
                },
                {
                  "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IReference#/components/parameters/string"
                }
              ]
            }
          },
          "requestBody": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IOperation.IRequestBody"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IReference#/components/requestBodies/string"
              }
            ]
          },
          "responses": {
            "$ref": "#/components/schemas/RecordstringIResponseIReference#/components/responses/string.o1"
          },
          "servers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenApiV3_1.IServer"
            }
          },
          "summary": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "security": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordstringArraystring"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "deprecated": {
            "type": "boolean"
          }
        }
      },
      "OpenApiV3_1.IOperation.IRequestBody": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "content": {
            "$ref": "#/components/schemas/RecordstringOpenApiV3_1.IOperation.IMediaType"
          }
        }
      },
      "RecordstringOpenApiV3_1.IOperation.IMediaType": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "$ref": "#/components/schemas/OpenApiV3_1.IOperation.IMediaType"
        }
      },
      "OpenApiV3_1.IOperation.IMediaType": {
        "type": "object",
        "properties": {
          "schema": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IMixed"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IConstant"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IString"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IUnknown"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INull"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAllOf"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAnyOf"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IOneOf"
              }
            ]
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/RecordstringIExampleIReference#/components/examples/string.o1"
          }
        }
      },
      "OpenApiV3_1.IJsonSchema.IReference#/components/requestBodies/string": {
        "type": "object",
        "properties": {
          "$ref": {
            "type": "string",
            "pattern": "^(#\\/components\\/requestBodies\\/(.*))"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "$ref"
        ]
      },
      "RecordstringIResponseIReference#/components/responses/string.o1": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/OpenApiV3_1.IOperation.IResponse"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IReference#/components/responses/string"
            }
          ]
        }
      },
      "OpenApiV3_1.IOperation.IResponse": {
        "type": "object",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/RecordstringOpenApiV3_1.IOperation.IMediaType"
          },
          "headers": {
            "$ref": "#/components/schemas/RecordstringIReference#/components/headers/stringOmitIParameterin"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "RecordstringIReference#/components/headers/stringOmitIParameterin": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IReference#/components/headers/string"
            },
            {
              "$ref": "#/components/schemas/OmitOpenApiV3_1.IOperation.IParameterin"
            }
          ]
        }
      },
      "OmitOpenApiV3_1.IOperation.IParameterin": {
        "type": "object",
        "properties": {
          "schema": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IMixed"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IConstant"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IString"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IUnknown"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.INull"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAllOf"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IAnyOf"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IOneOf"
              }
            ]
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/RecordstringIExampleIReference#/components/examples/string.o1"
          }
        },
        "required": [
          "schema"
        ],
        "description": "Construct a type with the properties of T except for those in type K."
      },
      "OpenApiV3_1.IJsonSchema.IReference#/components/responses/string": {
        "type": "object",
        "properties": {
          "$ref": {
            "type": "string",
            "pattern": "^(#\\/components\\/responses\\/(.*))"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "$ref"
        ]
      },
      "RecordstringOpenApiV3_1.IOperation.IResponse": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "$ref": "#/components/schemas/OpenApiV3_1.IOperation.IResponse"
        }
      },
      "RecordstringOpenApiV3_1.IOperation.IParameter": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "$ref": "#/components/schemas/OpenApiV3_1.IOperation.IParameter"
        }
      },
      "RecordstringOpenApiV3_1.IOperation.IRequestBody": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "$ref": "#/components/schemas/OpenApiV3_1.IOperation.IRequestBody"
        }
      },
      "RecordstringOpenApiV3_1.ISecurityScheme": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/OpenApiV3_1.ISecurityScheme.IApiKey"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3_1.ISecurityScheme.IHttpBasic"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3_1.ISecurityScheme.IHttpBearer"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3_1.ISecurityScheme.IOAuth2"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3_1.ISecurityScheme.IOpenId"
            }
          ]
        }
      },
      "OpenApiV3_1.ISecurityScheme.IApiKey": {
        "type": "object",
        "properties": {
          "type": {
            "const": "apiKey"
          },
          "in": {
            "oneOf": [
              {
                "const": "query"
              },
              {
                "const": "cookie"
              },
              {
                "const": "header"
              }
            ]
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type"
        ]
      },
      "OpenApiV3_1.ISecurityScheme.IHttpBasic": {
        "type": "object",
        "properties": {
          "type": {
            "const": "http"
          },
          "scheme": {
            "const": "basic"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "scheme"
        ]
      },
      "OpenApiV3_1.ISecurityScheme.IHttpBearer": {
        "type": "object",
        "properties": {
          "type": {
            "const": "http"
          },
          "scheme": {
            "const": "bearer"
          },
          "bearerFormat": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "scheme"
        ]
      },
      "OpenApiV3_1.ISecurityScheme.IOAuth2": {
        "type": "object",
        "properties": {
          "type": {
            "const": "oauth2"
          },
          "flows": {
            "$ref": "#/components/schemas/OpenApiV3_1.ISecurityScheme.IOAuth2.IFlowSet"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "flows"
        ]
      },
      "OpenApiV3_1.ISecurityScheme.IOAuth2.IFlowSet": {
        "type": "object",
        "properties": {
          "authorizationCode": {
            "$ref": "#/components/schemas/OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow"
          },
          "implicit": {
            "$ref": "#/components/schemas/OmitOpenApiV3_1.ISecurityScheme.IOAuth2.IFlowtokenUrl"
          },
          "password": {
            "$ref": "#/components/schemas/OmitOpenApiV3_1.ISecurityScheme.IOAuth2.IFlowauthorizationUrl"
          },
          "clientCredentials": {
            "$ref": "#/components/schemas/OmitOpenApiV3_1.ISecurityScheme.IOAuth2.IFlowauthorizationUrl"
          }
        }
      },
      "OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow": {
        "type": "object",
        "properties": {
          "authorizationUrl": {
            "type": "string"
          },
          "tokenUrl": {
            "type": "string"
          },
          "refreshUrl": {
            "type": "string"
          },
          "scopes": {
            "$ref": "#/components/schemas/Recordstringstring"
          }
        }
      },
      "OmitOpenApiV3_1.ISecurityScheme.IOAuth2.IFlowtokenUrl": {
        "type": "object",
        "properties": {
          "authorizationUrl": {
            "type": "string"
          },
          "refreshUrl": {
            "type": "string"
          },
          "scopes": {
            "$ref": "#/components/schemas/Recordstringstring"
          }
        },
        "description": "Construct a type with the properties of T except for those in type K."
      },
      "OmitOpenApiV3_1.ISecurityScheme.IOAuth2.IFlowauthorizationUrl": {
        "type": "object",
        "properties": {
          "tokenUrl": {
            "type": "string"
          },
          "refreshUrl": {
            "type": "string"
          },
          "scopes": {
            "$ref": "#/components/schemas/Recordstringstring"
          }
        },
        "description": "Construct a type with the properties of T except for those in type K."
      },
      "OpenApiV3_1.ISecurityScheme.IOpenId": {
        "type": "object",
        "properties": {
          "type": {
            "const": "openIdConnect"
          },
          "openIdConnectUrl": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "openIdConnectUrl"
        ]
      },
      "RecordstringOmitOpenApiV3_1.IOperation.IParameterin": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "$ref": "#/components/schemas/OmitOpenApiV3_1.IOperation.IParameterin"
        }
      },
      "RecordstringOpenApiV3_1.IExample": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "$ref": "#/components/schemas/OpenApiV3_1.IExample"
        }
      },
      "RecordstringIPathIReference#/components/pathItems/string": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/OpenApiV3_1.IPath"
            },
            {
              "$ref": "#/components/schemas/OpenApiV3_1.IJsonSchema.IReference#/components/pathItems/string"
            }
          ]
        }
      },
      "OpenApiV3_1.IJsonSchema.IReference#/components/pathItems/string": {
        "type": "object",
        "properties": {
          "$ref": {
            "type": "string",
            "pattern": "^(#\\/components\\/pathItems\\/(.*))"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          },
          "example": {},
          "examples": {
            "$ref": "#/components/schemas/Recordstringany"
          }
        },
        "required": [
          "$ref"
        ]
      },
      "OpenApiV3_1.IDocument.ITag": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "ISwaggerTranslation": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "title": "URL containing the translated Swagger file",
            "description": "URL containing the translated Swagger file."
          },
          "language": {
            "type": "string",
            "title": "Target language of the translation",
            "description": "Target language of the translation."
          }
        },
        "required": [
          "url",
          "language"
        ],
        "description": "Swagger Translation."
      },
      "IPageIHubOrderGoodIssueComment": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubOrderGoodIssueComment"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubOrderGoodIssueComment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary key",
            "description": "Primary key."
          },
          "writer": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IHubCustomer"
              },
              {
                "$ref": "#/components/schemas/IHubSeller.IInvert"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "customer": "#/components/schemas/IHubCustomer",
                "seller": "#/components/schemas/IHubSeller.IInvert"
              }
            },
            "title": "Author",
            "description": "Author.\n\nWritten by {@link IHubCustomer} or {@link IHubSeller}"
          },
          "parent_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "title": "Parent comment's ID",
            "description": "Parent comment's ID."
          },
          "snapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IBbsArticleComment.ISnapshot"
            },
            "minItems": 1,
            "title": "List of snapshot contents",
            "description": "List of snapshot contents.\n\nIt is created for the first time when a comment being created, and is\naccumulated every time the comment is modified."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of comment",
            "description": "Creation time of comment."
          }
        },
        "required": [
          "id",
          "writer",
          "parent_id",
          "snapshots",
          "created_at"
        ],
        "description": "Comments on an article about an issue related to a purchased product.\n\nA subtype entity of {@link IBbsArticleComment}, used when customers and\nsellers communicate with each other about an issue written about an\nordered product.\n\nNote that comments can still be written even after the issue has been closed."
      },
      "IBbsArticleComment.ISnapshot": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of snapshot record",
            "description": "Creation time of snapshot record.\n\nIn other words, creation time or update time or comment."
          },
          "format": {
            "oneOf": [
              {
                "const": "txt"
              },
              {
                "const": "html"
              },
              {
                "const": "md"
              }
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "body": {
            "type": "string",
            "title": "Content body of comment",
            "description": "Content body of comment."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "required": [
          "id",
          "created_at",
          "format",
          "body",
          "files"
        ],
        "description": "Snapshot of comment.\n\n`IBbsArticleComment.ISnapshot` is a snapshot entity that contains\nthe contents of the comment.\n\nAs mentioned in {@link IBbsArticleComment}, designed to keep evidence\nand prevent fraud."
      },
      "IAttachmentFile.ICreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "File name, except extension",
            "description": "File name, except extension.\n\nPossible to make empy string like `.gitignore` case."
          },
          "extension": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "minLength": 1,
                "maxLength": 8
              }
            ],
            "title": "Extension",
            "description": "Extension.\n\nPossible to omit like `README` case."
          },
          "url": {
            "type": "string",
            "format": "uri",
            "title": "URL path of the real file",
            "description": "URL path of the real file."
          }
        },
        "required": [
          "name",
          "extension",
          "url"
        ]
      },
      "IHubOrderGoodIssueComment.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IBbsArticleComment.IRequest.ISearch",
            "title": "Search information",
            "description": "Search information."
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-created_at"
                },
                {
                  "const": "+created_at"
                }
              ]
            },
            "title": "Sort criteria",
            "description": "Sort criteria."
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        }
      },
      "IBbsArticleComment.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string"
          }
        }
      },
      "IPageIHubOrderGoodIssue.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubOrderGoodIssue.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubOrderGoodIssue.ISummary": {
        "type": "object",
        "properties": {
          "writer": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IHubCustomer"
              },
              {
                "$ref": "#/components/schemas/IHubSeller.IInvert"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "customer": "#/components/schemas/IHubCustomer",
                "seller": "#/components/schemas/IHubSeller.IInvert"
              }
            }
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "title": {
            "type": "string",
            "title": "Title of the last snapshot",
            "description": "Title of the last snapshot."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the article",
            "description": "Creation time of the article."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Modification time of the article",
            "description": "Modification time of the article.\n\nIn other words, the time when the last snapshot was created."
          }
        },
        "required": [
          "writer",
          "id",
          "title",
          "created_at",
          "updated_at"
        ]
      },
      "IHubOrderGoodIssue.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IHubOrderGoodIssue.IRequest.ISearch",
            "title": "Search information",
            "description": "Search information."
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-created_at"
                },
                {
                  "const": "+created_at"
                },
                {
                  "const": "-nickname"
                },
                {
                  "const": "-updated_at"
                },
                {
                  "const": "-title"
                },
                {
                  "const": "-fee_amount"
                },
                {
                  "const": "-fee_count"
                },
                {
                  "const": "+nickname"
                },
                {
                  "const": "+updated_at"
                },
                {
                  "const": "+title"
                },
                {
                  "const": "+fee_amount"
                },
                {
                  "const": "+fee_count"
                }
              ]
            },
            "title": "Sort criteria",
            "description": "Sort criteria."
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Search issue posts and page information."
      },
      "IHubOrderGoodIssue.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "title_or_content": {
            "type": "string"
          }
        },
        "description": "Search information."
      },
      "IHubOrderGoodIssue": {
        "type": "object",
        "properties": {
          "writer": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IHubCustomer"
              },
              {
                "$ref": "#/components/schemas/IHubSeller.IInvert"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "customer": "#/components/schemas/IHubCustomer",
                "seller": "#/components/schemas/IHubSeller.IInvert"
              }
            },
            "title": "Author",
            "description": "Author.\n\nWritten by {@link IHubCustomer} or {@link IHubSeller}."
          },
          "fees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubOrderGoodIssueFee"
            },
            "title": "List of proposed fees",
            "description": "List of proposed fees."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "snapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IBbsArticle.ISnapshot"
            },
            "minItems": 1,
            "title": "List of snapshot contents",
            "description": "List of snapshot contents.\n\nIt is created for the first time when an article is created, and is\naccumulated every time the article is modified."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of article",
            "description": "Creation time of article."
          }
        },
        "required": [
          "writer",
          "fees",
          "id",
          "snapshots",
          "created_at"
        ],
        "description": "Purchased product related issue article.\n\n{@link IHubOrderGoodIssue} is a bulletin board where customers and sellers\ncan raise issues with each other regarding products that customers have ordered\nand paid for.\n\nCustomers and sellers can write issue posts by topic for products and continue\ndiscussions in the comments.\n\nIn addition, among the types of issues, customers can request additional work\nsuch as custom production or modification from sellers. In this case, sellers\ncan charge customers a fee and claim reasonable costs for the additional work.\n\nLastly, the customer or seller who wrote the issue can close it (closed_at)\nafter completing it. However, even after closing the issue, comments can continue\nto be written on the issue, and it is also possible for sellers to charge a fee."
      },
      "IHubOrderGoodIssueFee": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary key",
            "description": "Primary key."
          },
          "value": {
            "type": "number",
            "minimum": 0,
            "title": "Amount of the attorney's fee",
            "description": "Amount of the attorney's fee."
          },
          "accept": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubOrderGoodIssueFeeAccept"
              }
            ],
            "description": "{@link IHubOrderGoodIssueFeeAccept}\nValue exists only if the issue fee is accepted."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The time at which the fee was charged",
            "description": "The time at which the fee was charged."
          }
        },
        "required": [
          "id",
          "value",
          "accept",
          "created_at"
        ],
        "description": "Offering a fee for resolving an issue.\n\n{@link IHubOrderGoodIssueFee} refers to the fee that the seller offers\nto the customer when resolving an issue regarding a product ordered by the customer.\nThis usually occurs when the customer requests additional work such as\ncustomization or modification through the issue.\n\nThe customer may pay the fee in response, refuse it, or, in some cases,\nnegotiate the price.\n\nIf the seller wants to adjust the price in response, the current record can be\ndeleted and a new fee record can be reissued."
      },
      "IHubOrderGoodIssueFeeAccept": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Primary key"
          },
          "customer": {
            "$ref": "#/components/schemas/IHubCustomer",
            "description": "{@link IHubCustomer}\n\nCustomer who has been billed a fee."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          },
          "published_at": {
            "type": "string",
            "format": "date-time",
            "title": "Effective date and time of acceptance of the fee",
            "description": "Effective date and time of acceptance of the fee."
          },
          "canceled_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Date of cancellation of the fee",
            "description": "Date of cancellation of the fee.\n\nCancellation is not possible after the effective date."
          }
        },
        "required": [
          "id",
          "customer",
          "created_at",
          "published_at"
        ],
        "description": "This is an entity that embodies the act of a customer accepting and\naccepting the issue fee charged by the seller.\n\nNote that the moment the customer accepts the fee and the moment it takes\neffect can be different.\n\nIn other words, it is possible to accept the fee at this point and have\nthe deposit withdrawn, but postpone the effect of this, so that the seller\ncan start work in the future, or to leave room for a change of mind\nin the future."
      },
      "IBbsArticle.ISnapshot": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of snapshot record",
            "description": "Creation time of snapshot record.\n\nIn other words, creation time or update time or article."
          },
          "format": {
            "oneOf": [
              {
                "const": "txt"
              },
              {
                "const": "html"
              },
              {
                "const": "md"
              }
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "title": {
            "type": "string",
            "title": "Title of article",
            "description": "Title of article."
          },
          "body": {
            "type": "string",
            "title": "Content body of article",
            "description": "Content body of article."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "required": [
          "id",
          "created_at",
          "format",
          "title",
          "body",
          "files"
        ],
        "description": "Snapshot of article.\n\n`IBbsArticle.ISnapshot` is a snapshot entity that contains the contents of\nthe article, as mentioned in {@link IBbsArticle}, the contents of the article\nare separated from the article record to keep evidence and prevent fraud."
      },
      "IPageIHubSaleSnapshot.IInvert": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleSnapshot.IInvert"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubSaleSnapshot.IInvert": {
        "type": "object",
        "properties": {
          "section": {
            "$ref": "#/components/schemas/IHubSection",
            "title": "Information about the belonging section",
            "description": "Information about the belonging section."
          },
          "seller": {
            "$ref": "#/components/schemas/IHubSeller.IInvert",
            "title": "The seller who listed the item",
            "description": "The seller who listed the item."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "The ID of the property",
            "description": "The ID of the property."
          },
          "snapshot_id": {
            "type": "string",
            "format": "uuid",
            "title": "The ID of the snapshot",
            "description": "The ID of the snapshot."
          },
          "latest": {
            "type": "boolean",
            "title": "Last snapshot",
            "description": "Last snapshot.\n\nIs this snapshot the last snapshot of the property?\n\nHowever, the criteria for \"last\" vary depending on the perspective of\nthe user viewing this property.\n\n- Customer perspective: The most recently approved property\n- Seller/Administrator: The most recently created property"
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleChannel"
            },
            "title": "Channel/Category List",
            "description": "Channel/Category List.\n\nA list of channels and categories in which this item is sold."
          },
          "aggregate": {
            "$ref": "#/components/schemas/IHubSaleAggregate",
            "title": "Aggregate/performance information for this listing (or snapshot)",
            "description": "Aggregate/performance information for this listing (or snapshot)."
          },
          "content": {
            "$ref": "#/components/schemas/IHubSaleContent.IInvert",
            "title": "Content information",
            "description": "Content information.\n\nDescriptive information including the language code.\n\nIf you want to see other language written contents, call the below API function.\n\n- {@link HubApi.functional.hub.customers.sales.contents}\n- {@link HubApi.functional.hub.customers.sales.snapshots.contents}"
          },
          "units": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleUnit.IInvert"
            },
            "minItems": 1,
            "title": "Unit List",
            "description": "Unit List.\n\nA record representing the products currently being sold, containing\ninformation about the {@link IHubSaleUnitOption options} that can be\nset for each product, and the {@link IHubSaleUnitStock stock} that\ncan be configured by selecting options."
          },
          "version": {
            "type": "string",
            "title": "Version name",
            "description": "Version name.\n\nYou can set a different value than {@link ISwaggerInfo.version}.\n\nThat is, the version name in the server spec (Swagger document) and\nthe version name in the product may be different."
          },
          "activated_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Activation time of the snapshot",
            "description": "Activation time of the snapshot.\n\nThe time this snapshot was first activated after it was approved for review."
          },
          "expired_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "The time when the APIs of the current listing (snapshot) are stopped",
            "description": "The time when the APIs of the current listing (snapshot) are stopped.\n\nSince the transaction target is an API, the seller should not\nimmediately delete the listing just because it has stopped selling.\nIt should guarantee a minimum period of use, so that customers using\nthe API will respond to this.\n\nTherefore, when the listing is stopped, it is made to disappear after\na certain grace period.\n\nOf course, if it is a listing that has never been sold, it does not apply."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          },
          "paused_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Temporary suspension of sales",
            "description": "Temporary suspension of sales.\n\nThe seller has temporarily suspended API sales for some reason.\n\nCustomers can still view the listing on the listing and details page,\nbut the listing will be labeled as \"This listing is suspended by the\nseller.\""
          },
          "suspended_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Temporary suspension of sales",
            "description": "Temporary suspension of sales.\n\nThe seller has suspended sales for some reason.\n\nCustomers will not be able to view the listing or details page at all.\nAt first glance, it looks similar to a soft delete, but the difference is\nthat the seller and the administrator can still view it, and the sale can\nbe resumed at any time.\n\nAlso, even if the seller has suspended, previous buyers of the listing\ncan still use the API. The time of suspension of the API can be found in\nthe {@link IHubSaleSnapshot.expired_at} property."
          },
          "opened_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Sales start date",
            "description": "Sales start date."
          },
          "closed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "The sale end date",
            "description": "The sale end date.\n\nIf this value is NULL, the sale will continue forever."
          }
        },
        "required": [
          "section",
          "seller",
          "id",
          "snapshot_id",
          "latest",
          "channels",
          "aggregate",
          "content",
          "units",
          "version",
          "activated_at",
          "expired_at",
          "created_at",
          "paused_at",
          "suspended_at",
          "opened_at",
          "closed_at"
        ],
        "description": "Reverse reference information of the listing snapshot.\n\n`IHubSaleSnapshot.IInvert` is a data structure interface that\nvisualizes the reverse reference information of the listing snapshot\nfrom the perspective of {@link IHubCartCommodity}, and therefore, in terms\nof DB concept, it corresponds to {@link IHubCartCommodityStock}.\n\nTherefore, `IHubSaleSnapshot.IInvert` does not have all {@link IHubSaleUnit},\n{@link IHubSaleUnitStock}, and {@link IHubSaleUnitStockPrice} records of\nthe listing snapshot, but only has elements that are in the\n{@link IHubCartCommodity shopping cart}."
      },
      "IHubSaleUnit.IInvert": {
        "type": "object",
        "properties": {
          "stock": {
            "$ref": "#/components/schemas/IHubSaleUnitStock.IInvert",
            "title": "Stock purchased (to be purchased)",
            "description": "Stock purchased (to be purchased)."
          },
          "release": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IStudioRepositoryRelease.IForSale"
              }
            ],
            "title": "Release information for the bundle",
            "description": "Release information for the bundle."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "name": {
            "type": "string",
            "title": "The representative name of the unit",
            "description": "The representative name of the unit."
          },
          "primary": {
            "type": "boolean",
            "title": "Whether it is a main unit or not",
            "description": "Whether it is a main unit or not.\n\nIt is a simple notational attribute, and has no meaning beyond labeling."
          },
          "required": {
            "type": "boolean",
            "title": "Whether this unit is mandatory",
            "description": "Whether this unit is mandatory.\n\nIf this unit is mandatory, the customer cannot purchase it without\nexcluding it."
          },
          "purposes": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "const": "app"
                    },
                    {
                      "const": "agent"
                    }
                  ]
                },
                "uniqueItems": true
              }
            ],
            "title": "Purpose of extracting released units",
            "description": "Purpose of extracting released units.\n\nRefer to {@link IStudioRepositoryReleaseNode.Purpose}."
          },
          "connector_icons": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uri"
                },
                "uniqueItems": true
              }
            ],
            "title": "List of connector icons",
            "description": "List of connector icons.\n\nThe connector icon represents the icons of external services that\nthis property is linked to."
          },
          "migrated": {
            "type": "boolean",
            "title": "Whether the tool has been transferred from Studio v1.0",
            "description": "Whether the tool has been transferred from Studio v1.0."
          }
        },
        "required": [
          "stock",
          "release",
          "id",
          "name",
          "primary",
          "required",
          "purposes",
          "connector_icons",
          "migrated"
        ],
        "description": "Reverse reference information of the sale unit.\n\n`IHubSaleUnit.IInvert` is a data structure interface that visualizes\nthe reverse reference information of the sale unit from the perspective of\n{@link IHubCartCommodity}, and therefore, in terms of DB concept, it is a\nstructure corresponding to {@link IHubCartCommodityStock}.\n\nTherefore, `IHubSaleUnit.IInvert` does not have all {@link IHubSaleUnitStock}\nrecords of the sale unit, but only has elements that are in the\n{@link IHubCartCommodity shopping cart}."
      },
      "IHubSaleUnitStock.IInvert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "name": {
            "type": "string",
            "title": "Representative name of the stock",
            "description": "Representative name of the stock."
          },
          "choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleUnitStockChoice.IInvert"
            },
            "title": "Selection information for this stock",
            "description": "Selection information for this stock.\n\nWhat options and candidate values were selected by each customer."
          },
          "price": {
            "$ref": "#/components/schemas/IHubSaleUnitStockPrice.IInvert",
            "title": "Pricing information for this stock",
            "description": "Pricing information for this stock."
          }
        },
        "required": [
          "id",
          "name",
          "choices",
          "price"
        ],
        "description": "Stock order reference information."
      },
      "IHubSaleUnitStockChoice.IInvert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "option": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IHubSaleUnitSelectableOption.IInvert"
              },
              {
                "$ref": "#/components/schemas/IHubSaleUnitDescriptiveOption.IInvert"
              }
            ],
            "title": "Information about the attribution options",
            "description": "Information about the attribution options."
          },
          "candidate": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubSaleUnitOptionCandidate"
              }
            ],
            "title": "Information about the candidate values selected by the customer",
            "description": "Information about the candidate values selected by the customer."
          },
          "value": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              }
            ],
            "title": "Customer descriptive information",
            "description": "Customer descriptive information."
          }
        },
        "required": [
          "id",
          "option",
          "candidate",
          "value"
        ],
        "description": "Reverse reference information for final stock selection."
      },
      "IHubSaleUnitSelectableOption.IInvert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "name": {
            "type": "string",
            "title": "Representative name of the option",
            "description": "Representative name of the option."
          },
          "type": {
            "const": "select",
            "title": "Type of option",
            "description": "Type of option."
          },
          "variable": {
            "type": "boolean",
            "title": "Variable",
            "description": "Variable.\n\nIf this attribute value is `true`, this option will change the\n{@link IHubSaleUnitStock final stock} that the customer purchases,\ndepending on what the customer selects as the\n{@link IHubSaleUnitOptionCandidate candidate value}.\n\nOn the other hand, if this value is `false`, whatever the customer selects\nas the {@link IHubSaleUnitOptionCandidate candidate value}, it will not\naffect the {@link IHubSaleUnitStock final stock}. It is just simple\ninformation for the seller to refer to."
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "variable"
        ]
      },
      "IHubSaleUnitDescriptiveOption.IInvert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "oneOf": [
              {
                "const": "string"
              },
              {
                "const": "number"
              },
              {
                "const": "boolean"
              }
            ],
            "title": "The type of the descriptive option",
            "description": "The type of the descriptive option.\n\nWhat format should it be entered in?"
          },
          "name": {
            "type": "string",
            "title": "Representative name for descriptive options",
            "description": "Representative name for descriptive options."
          }
        },
        "required": [
          "id",
          "type",
          "name"
        ],
        "description": "Back reference information for descriptive options."
      },
      "IHubSaleUnitOptionCandidate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "name": {
            "type": "string",
            "title": "Representative name of the candidate value",
            "description": "Representative name of the candidate value."
          }
        },
        "required": [
          "id",
          "name"
        ],
        "description": "Selectable candidate values in the option.\n\n`IHubSaleUnitOptionCandidate` is an entity that represents individual\ncandidate values that can be selected from\n{@link IHubSaleUnitSelectableOption \"select\" type options}.\n\n- Case\n  - Option) RAM: 8GB, 16GB, 32GB\n  - Option) GPU: RTX 3060, RTX 4080, TESLA\n  - Option) License type: Personal, Commercial, Education\n\nHowever, if the type of the attributable option is not \"select\"\n({@link IHubSaleUnitDescriptiveOption}),\n\nthis entity is not needed."
      },
      "IHubSaleUnitStockPrice.IInvert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "threshold": {
            "type": "integer",
            "title": "Threshold, fixed amount {@link fixed} number of free API calls you can make",
            "description": "Threshold, fixed amount {@link fixed} number of free API calls you can make."
          },
          "fixed": {
            "$ref": "#/components/schemas/IHubOrderPrice.ISummary",
            "title": "Fixed costs",
            "description": "Fixed costs."
          },
          "variable": {
            "$ref": "#/components/schemas/IHubOrderPrice.ISummary",
            "title": "Variable costs",
            "description": "Variable costs."
          }
        },
        "required": [
          "id",
          "threshold",
          "fixed",
          "variable"
        ],
        "description": "Order reference information for stock price."
      },
      "IHubOrderPrice.ISummary": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "minimum": 0,
            "title": "Nominal total payment",
            "description": "Nominal total payment."
          },
          "deposit": {
            "type": "number",
            "minimum": 0,
            "title": "Fixed cost deposit payment amount",
            "description": "Fixed cost deposit payment amount."
          },
          "ticket": {
            "type": "number",
            "minimum": 0,
            "title": "Fixed cost discount coupon ticket payment amount",
            "description": "Fixed cost discount coupon ticket payment amount."
          }
        },
        "required": [
          "value",
          "deposit",
          "ticket"
        ],
        "description": "Summary information on the fixed cost portion of the order price."
      },
      "IStudioRepositoryRelease.IForSale": {
        "type": "object",
        "properties": {
          "repository": {
            "$ref": "#/components/schemas/IStudioRepository.IStandalone"
          },
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioRepositoryReleaseNode"
            },
            "minItems": 1,
            "title": "A list of individual nodes (functions) that make up the distribution",
            "description": "A list of individual nodes (functions) that make up the distribution."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "customer": {
            "$ref": "#/components/schemas/IHubCustomer",
            "title": "Information about the customer who made the release",
            "description": "Information about the customer who made the release."
          },
          "commit": {
            "$ref": "#/components/schemas/IStudioRepositoryCommit",
            "title": "The commit to be released",
            "description": "The commit to be released."
          },
          "components": {
            "$ref": "#/components/schemas/ISwaggerComponents",
            "title": "A collection of named types",
            "description": "A collection of named types."
          },
          "document": {
            "$ref": "#/components/schemas/IStudioRepositoryReleaseDocument",
            "title": "Documentation for the release",
            "description": "Documentation for the release."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "title": "List of search tags",
            "description": "List of search tags."
          },
          "version": {
            "type": "string",
            "title": "Version name",
            "description": "Version name."
          },
          "program_url": {
            "type": "string",
            "format": "uri",
            "title": "URL of the built program",
            "description": "URL of the built program."
          },
          "debug_url": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uri"
              }
            ],
            "title": "URL for debugging",
            "description": "URL for debugging."
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubChannelCategory"
            },
            "title": "List of classification categories",
            "description": "List of classification categories."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The creation date and time of the release record",
            "description": "The creation date and time of the release record."
          },
          "opened_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Distribution start date and time",
            "description": "Distribution start date and time."
          }
        },
        "required": [
          "repository",
          "nodes",
          "id",
          "customer",
          "commit",
          "components",
          "document",
          "tags",
          "version",
          "program_url",
          "debug_url",
          "categories",
          "created_at",
          "opened_at"
        ]
      },
      "IStudioRepository.IStandalone": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "account": {
            "$ref": "#/components/schemas/IStudioAccount.ISummary",
            "title": "Your account information",
            "description": "Your account information."
          },
          "code": {
            "type": "string",
            "title": "The identifier code of the repository",
            "description": "The identifier code of the repository."
          },
          "disclosure": {
            "oneOf": [
              {
                "const": "public"
              },
              {
                "const": "protected"
              },
              {
                "const": "private"
              }
            ],
            "title": "The visibility level of the repository",
            "description": "The visibility level of the repository.\n\n- `public`: A public repository that can be viewed by all members.\n- `protected`: A protected repository that can be viewed only by staff.\n- `private`: A private repository that can be viewed only by those who have been granted permission."
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Repository title",
            "description": "Repository title."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Detailed description of the repository",
            "description": "Detailed description of the repository."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "title": "List of search tag values",
            "description": "List of search tag values."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the repository was created",
            "description": "The date and time the repository was created."
          }
        },
        "required": [
          "id",
          "account",
          "code",
          "disclosure",
          "title",
          "description",
          "tags",
          "created_at"
        ],
        "description": "Repository-only information."
      },
      "IStudioAccount.ISummary": {
        "type": "object",
        "properties": {
          "owner": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IHubMember"
              },
              {
                "$ref": "#/components/schemas/IStudioEnterprise.IInvertFromAccount"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "member": "#/components/schemas/IHubMember",
                "enterprise": "#/components/schemas/IStudioEnterprise.IInvertFromAccount"
              }
            },
            "title": "Owner information",
            "description": "Owner information."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "code": {
            "type": "string",
            "title": "Identifier code",
            "description": "Identifier code."
          },
          "created_at": {
            "type": "string",
            "title": "Account creation date and time",
            "description": "Account creation date and time."
          }
        },
        "required": [
          "owner",
          "id",
          "code",
          "created_at"
        ],
        "description": "Summary information about your account."
      },
      "IStudioEnterprise.IInvertFromAccount": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "const": "enterprise",
            "title": "Identifier of the Discriminated Union type",
            "description": "Identifier of the Discriminated Union type."
          },
          "name": {
            "type": "string",
            "title": "Company name",
            "description": "Company name."
          },
          "created_at": {
            "type": "string",
            "title": "Account creation date and time",
            "description": "Account creation date and time."
          }
        },
        "required": [
          "id",
          "type",
          "name",
          "created_at"
        ],
        "description": "Corporate reference information from accounts."
      },
      "IStudioRepositoryReleaseNode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "release_id": {
            "type": "string",
            "format": "uuid",
            "title": "{@link IStudioRepositoryRelease.id} of the parent release",
            "description": "{@link IStudioRepositoryRelease.id} of the parent release."
          },
          "type": {
            "const": "release",
            "title": "Discriminator of connectors",
            "description": "Discriminator of connectors."
          },
          "bucket": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IStudioRepositoryDirectory.ISummary"
              },
              {
                "$ref": "#/components/schemas/IStudioRepositoryFile.ISummary"
              },
              {
                "$ref": "#/components/schemas/IStudioWorkflow.ISummary"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "directory": "#/components/schemas/IStudioRepositoryDirectory.ISummary",
                "file": "#/components/schemas/IStudioRepositoryFile.ISummary",
                "workflow": "#/components/schemas/IStudioWorkflow.ISummary"
              }
            },
            "title": "Reference information for the target bucket",
            "description": "Reference information for the target bucket."
          },
          "accessor": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Accessor for the node (function) to be released",
            "description": "Accessor for the node (function) to be released."
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioRepositoryReleaseNode.IParameter"
            },
            "title": "A list of type information for the function's parameters",
            "description": "A list of type information for the function's parameters."
          },
          "output": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IConstant"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IString"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.ITuple"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IOneOf"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INull"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IUnknown"
              }
            ],
            "title": "Return type information",
            "description": "Return type information.\n\n`null` if the return type is `void` (or `Promise<void>`)."
          },
          "async": {
            "type": "boolean",
            "title": "Whether the function is asynchronous",
            "description": "Whether the function is asynchronous."
          },
          "purpose": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "const": "app"
              },
              {
                "const": "agent"
              }
            ],
            "title": "Purpose of extracting the release",
            "description": "Purpose of extracting the release."
          },
          "summary": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Summary statement",
            "description": "Summary statement."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Detailed description",
            "description": "Detailed description."
          }
        },
        "required": [
          "id",
          "release_id",
          "type",
          "bucket",
          "accessor",
          "parameters",
          "output",
          "async",
          "purpose",
          "summary",
          "description"
        ],
        "description": "Information about individual nodes that make up the distribution program of the\nrepository.\n\n`IStudioRepositoryReleaseNode` is an entity that embodies programming nodes that\nthe user has specified and exported within the program distributed from the repository.\n\nFor reference, the types of nodes that can be exported include user-defined functions\nand workflow documents.\n\nOf course, {@link IStudioWorkflow workflow document} also results in a single function\nas a build result, so ultimately, a node means a \"reusable function\" exported from\nthis repository.\n\nIn addition, each exported node has its own endpoint on the Rest API. Therefore,\neach node in the repository can be used by `importing` in other programs,\nbut it is also possible to call it externally through the Rest API. And it is also\npossible to register and sell it as a {@link IHubSale listing} of Generative Hub."
      },
      "IStudioRepositoryDirectory.ISummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "snapshot_id": {
            "type": "string",
            "format": "uuid",
            "title": "Snapshot ID",
            "description": "Snapshot ID."
          },
          "type": {
            "const": "directory",
            "title": "Type of bucket",
            "description": "Type of bucket."
          },
          "commit_id": {
            "type": "string",
            "format": "uuid",
            "title": "The commit ID of the last modified snapshot",
            "description": "The commit ID of the last modified snapshot."
          },
          "migration": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IStudioRepositoryBucketMigration"
              }
            ],
            "title": "Information migrated from Studio 1.0",
            "description": "Information migrated from Studio 1.0."
          },
          "path": {
            "type": "string",
            "title": "The full path to the bucket",
            "description": "The full path to the bucket."
          },
          "location": {
            "type": "string",
            "title": "Path to the bucket's belonging folder",
            "description": "Path to the bucket's belonging folder."
          },
          "name": {
            "type": "string",
            "title": "The file name in the bucket",
            "description": "The file name in the bucket."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The initial creation time of the bucket",
            "description": "The initial creation time of the bucket.\n\nThat is, the same as the time of the commit that initially created the bucket."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "The last modified date of the bucket",
            "description": "The last modified date of the bucket.\n\nThat is, the date and time of the commit that last modified the bucket."
          }
        },
        "required": [
          "id",
          "snapshot_id",
          "type",
          "commit_id",
          "migration",
          "path",
          "location",
          "name",
          "created_at",
          "updated_at"
        ],
        "description": "Summary information about a folder in your repository."
      },
      "IStudioRepositoryBucketMigration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "uid": {
            "type": "string",
            "title": "ID of the WRTN user who created the Studio1.0 tool & chatbot",
            "description": "ID of the WRTN user who created the Studio1.0 tool & chatbot."
          },
          "tool_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Studio1.0 tool ID",
            "description": "Studio1.0 tool ID."
          },
          "chat_bot_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Studio1.0 Chatbot ID",
            "description": "Studio1.0 Chatbot ID."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          }
        },
        "required": [
          "id",
          "uid",
          "tool_id",
          "chat_bot_id",
          "created_at"
        ],
        "description": "Bucket migration information for WRTN users who created Studio1.0 tools & chatbots."
      },
      "IStudioRepositoryFile.ISummary": {
        "type": "object",
        "properties": {
          "extension": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "maxLength": 8
              }
            ],
            "title": "The extension of the file",
            "description": "The extension of the file."
          },
          "url": {
            "type": "string",
            "format": "uri",
            "title": "The URL address where the file is actually located",
            "description": "The URL address where the file is actually located."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "snapshot_id": {
            "type": "string",
            "format": "uuid",
            "title": "Snapshot ID",
            "description": "Snapshot ID."
          },
          "type": {
            "const": "file",
            "title": "Type of bucket",
            "description": "Type of bucket."
          },
          "commit_id": {
            "type": "string",
            "format": "uuid",
            "title": "The commit ID of the last modified snapshot",
            "description": "The commit ID of the last modified snapshot."
          },
          "migration": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IStudioRepositoryBucketMigration"
              }
            ],
            "title": "Information migrated from Studio 1.0",
            "description": "Information migrated from Studio 1.0."
          },
          "path": {
            "type": "string",
            "title": "The full path to the bucket",
            "description": "The full path to the bucket."
          },
          "location": {
            "type": "string",
            "title": "Path to the bucket's belonging folder",
            "description": "Path to the bucket's belonging folder."
          },
          "name": {
            "type": "string",
            "title": "The file name in the bucket",
            "description": "The file name in the bucket."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The initial creation time of the bucket",
            "description": "The initial creation time of the bucket.\n\nThat is, the same as the time of the commit that initially created the bucket."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "The last modified date of the bucket",
            "description": "The last modified date of the bucket.\n\nThat is, the date and time of the commit that last modified the bucket."
          }
        },
        "required": [
          "extension",
          "url",
          "id",
          "snapshot_id",
          "type",
          "commit_id",
          "migration",
          "path",
          "location",
          "name",
          "created_at",
          "updated_at"
        ],
        "description": "Summary information of the repository file.\n\nDue to the nature of the file, there is no difference between the detailed information\nand the summary."
      },
      "IStudioWorkflow.ISummary": {
        "type": "object",
        "properties": {
          "extension": {
            "const": "workflow",
            "title": "The extension is fixed to \"workflow\"",
            "description": "The extension is fixed to \"workflow\"."
          },
          "valid": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "boolean"
              }
            ],
            "title": "Validity",
            "description": "Validity.\n\nIndicates whether the workflow is executable.\n\nAt least the compile or execute function must be executed to check its validity,\nand until then, the value of this property is `null`.\n\nOf course, if it is a released workflow, this value must be `true`."
          },
          "icon": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uri"
              }
            ],
            "title": "URL of the representative icon",
            "description": "URL of the representative icon."
          },
          "thumbnail": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uri"
              }
            ],
            "title": "Workflow thumbnail image",
            "description": "Workflow thumbnail image.\n\nThis corresponds to the minimap or thumbnail image in the workflow editor."
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Workflow title",
            "description": "Workflow title."
          },
          "summary": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "A brief description of the workflow functions",
            "description": "A brief description of the workflow functions."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Detailed description of the workflow function",
            "description": "Detailed description of the workflow function."
          },
          "is_chatbot": {
            "type": "boolean",
            "title": "Whether it is a chatbot workflow",
            "description": "Whether it is a chatbot workflow."
          },
          "connector_icons": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "title": "List of icons for the connectors used",
            "description": "List of icons for the connectors used."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "snapshot_id": {
            "type": "string",
            "format": "uuid",
            "title": "Snapshot ID",
            "description": "Snapshot ID."
          },
          "type": {
            "const": "workflow",
            "title": "Type of bucket",
            "description": "Type of bucket."
          },
          "commit_id": {
            "type": "string",
            "format": "uuid",
            "title": "The commit ID of the last modified snapshot",
            "description": "The commit ID of the last modified snapshot."
          },
          "migration": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IStudioRepositoryBucketMigration"
              }
            ],
            "title": "Information migrated from Studio 1.0",
            "description": "Information migrated from Studio 1.0."
          },
          "path": {
            "type": "string",
            "title": "The full path to the bucket",
            "description": "The full path to the bucket."
          },
          "location": {
            "type": "string",
            "title": "Path to the bucket's belonging folder",
            "description": "Path to the bucket's belonging folder."
          },
          "name": {
            "type": "string",
            "title": "The file name in the bucket",
            "description": "The file name in the bucket."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The initial creation time of the bucket",
            "description": "The initial creation time of the bucket.\n\nThat is, the same as the time of the commit that initially created the bucket."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "The last modified date of the bucket",
            "description": "The last modified date of the bucket.\n\nThat is, the date and time of the commit that last modified the bucket."
          }
        },
        "required": [
          "extension",
          "valid",
          "icon",
          "thumbnail",
          "title",
          "summary",
          "description",
          "is_chatbot",
          "connector_icons",
          "id",
          "snapshot_id",
          "type",
          "commit_id",
          "migration",
          "path",
          "location",
          "name",
          "created_at",
          "updated_at"
        ],
        "description": "Summary information about the workflow."
      },
      "IStudioRepositoryReleaseNode.IParameter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Parameter name",
            "description": "Parameter name."
          },
          "required": {
            "type": "boolean",
            "title": "Whether required or not",
            "description": "Whether required or not."
          },
          "schema": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IConstant"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IString"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.ITuple"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IOneOf"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INull"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IUnknown"
              }
            ],
            "title": "Parameter type information",
            "description": "Parameter type information."
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "The title of the parameter",
            "description": "The title of the parameter."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Detailed description of the parameters",
            "description": "Detailed description of the parameters."
          }
        },
        "required": [
          "name",
          "required",
          "schema",
          "title",
          "description"
        ],
        "description": "Parameter information."
      },
      "IStudioRepositoryCommit": {
        "type": "object",
        "properties": {
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "A detailed description of the commit",
            "description": "A detailed description of the commit."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "parent_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "title": "The ID of the original commit",
            "description": "The ID of the original commit.\n\nIf the initial commit has no base, the value `null` is assigned."
          },
          "customer": {
            "$ref": "#/components/schemas/IHubCustomer",
            "title": "Customers who have committed",
            "description": "Customers who have committed."
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "The title of the commit",
            "description": "The title of the commit."
          },
          "latest": {
            "type": "boolean",
            "title": "Whether it is the most recent commit",
            "description": "Whether it is the most recent commit."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The commit creation date and time",
            "description": "The commit creation date and time."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Commit modification date and time",
            "description": "Commit modification date and time."
          },
          "archived_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Commit record confirmation date and time",
            "description": "Commit record confirmation date and time.\n\nAll changes in the commit are recorded on the server, confirming and finalizing it.\n\nAfter the commit is recorded, no modification or deletion is possible."
          }
        },
        "required": [
          "description",
          "id",
          "parent_id",
          "customer",
          "title",
          "latest",
          "created_at",
          "updated_at",
          "archived_at"
        ],
        "description": "Repository commit information.\n\nThe act of editing each of the {@link IStudioRepositoryBucket buckets} that make up the\n{@link IStudioRepository repository} and recording its history is called a \"commit.\"\nAnd `IStudioRepositoryCommit` is an entity that visualizes the commit action performed by\nthe {@link IHubCustomer customer} who has write permission to the repository.\n\nThat is, the creation of this commit record means that at least one bucket has been modified,\nand thus snapshot records for them have been newly created.\n\nHowever, issuing a commit does not mean that the commit is complete. If the\n{@link IStudioRepositoryCommit.archived_at} property, which indicates the time of its\nrecord confirmation, is `null`, the {@link IStudioRepositoryBucket buckets} can be\ncontinuously modified, and even the commit currently being modified can be canceled and\ndeleted."
      },
      "ISwaggerComponents": {
        "type": "object",
        "properties": {
          "schemas": {
            "$ref": "#/components/schemas/RecordstringISwaggerSchema",
            "title": "An object to hold reusable DTO schemas",
            "description": "An object to hold reusable DTO schemas.\n\nIn other words, a collection of named JSON schemas."
          },
          "securitySchemes": {
            "$ref": "#/components/schemas/RecordstringOpenApi.ISecurityScheme",
            "title": "An object to hold reusable security schemes",
            "description": "An object to hold reusable security schemes.\n\nIn other words, a collection of named security schemes."
          }
        },
        "description": "Reusable components in Swagger.\n\n`ISwaggerComponents` is a data structure representing content of `components` object\nin `swagger.json` file generated by Nestia. Note that, this is not an universal\nstructure, but a dedicated structure only for Nestia."
      },
      "IStudioRepositoryReleaseDocument": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "title": {
            "type": "string",
            "title": "title",
            "description": "title."
          },
          "format": {
            "oneOf": [
              {
                "const": "txt"
              },
              {
                "const": "html"
              },
              {
                "const": "md"
              }
            ],
            "title": "Format of the body content",
            "description": "Format of the body content."
          },
          "body": {
            "type": "string",
            "title": "Descriptive text section",
            "description": "Descriptive text section."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachments",
            "description": "List of attachments."
          }
        },
        "required": [
          "id",
          "title",
          "format",
          "body",
          "files"
        ],
        "description": "Document of the repository distribution program.\n\n`IStudioRepositoryReleaseDocument` is an entity that visualizes a document written\nfor a program distributed from a repository. It is responsible for the title, body,\nand descriptive information such as attached files or thumbnail images.\n\nFor reference, the title or body contents described in\n{@link IStudioRepositoryRelease distribution program} have a considerable impact\non the hit rate of LLM (Large Language Model). In addition, the distribution program\noriginally allows each {@link IStudioRepositoryReleaseNode node} to be reused or\na bundle of them to be registered as a {@link IHubSale listing} and sold, and the\ndescriptive part at this time tends to have a great impact on the customer's\npurchasing decision.\n\nThis is why a new deployment record must be issued and the version must be changed,\neven though the document has no internal node or connector configuration information\nchanged at all from the previous release, and even the target\n{@link IStudioRepositoryCommit commit} is completely the same, and only the title or\ndescription text has changed.\n\nThat is, because the content of the description is considered as important as the changes\nin the internal files and nodes, the distribution program and the description content\nstructure are fixed to 1:1, not 1:N."
      },
      "IPage.IRequest": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Page request data"
      },
      "IHubSaleUnitSwaggerAccessor": {
        "type": "object",
        "properties": {
          "unit_id": {
            "type": "string",
            "format": "uuid",
            "title": "{@link IHubSaleUnit.id} of the target unit",
            "description": "{@link IHubSaleUnit.id} of the target unit."
          }
        },
        "required": [
          "unit_id"
        ],
        "description": "Access information for a specific unit's swagger from the listing."
      },
      "IHttpOpenAiApplication": {
        "type": "object",
        "properties": {
          "openapi": {
            "const": "3.0.3",
            "title": "Version of OpenAPI",
            "description": "Version of OpenAPI.\n\nLLM function call schema is based on OpenAPI 3.0.3 specification."
          },
          "functions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHttpLlmFunctionILlmSchemaOpenApi.IOperationOpenApi.IJsonSchemaIHttpMigrateRouteOpenApi.IJsonSchemaOpenApi.IOperationOpenApi.IJsonSchema"
            },
            "title": "List of function metadata",
            "description": "List of function metadata.\n\nList of function metadata that can be used for the LLM function call.\n\nWhen you want to execute the function with LLM constructed arguments,\nyou can do it through {@link LlmFetcher.execute} function."
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHttpLlmApplication.IErrorISwaggerOperationISwaggerMigrateRoute"
            },
            "title": "List of errors occurred during the composition",
            "description": "List of errors occurred during the composition."
          },
          "options": {
            "$ref": "#/components/schemas/IHttpLlmApplication.IOptionsIOpenAiSchema",
            "title": "Options for the application",
            "description": "Options for the application.\n\nAdjusted options when composing the application through\n{@link HttpLlm.application} function."
          }
        },
        "required": [
          "openapi",
          "functions",
          "errors",
          "options"
        ],
        "description": "Application of OpenAI (LLM) function call from OpenAPI document.\n\n`IHttpOpenAiApplication` is a data structure representing a collection of\n{@link IOpenAiFunction LLM function calling schemas} composed from the\n{@link ISwagger OpenAPI document} and its {@link ISwaggerOperation operation}\nmetadata. It also contains {@link IHttpOpenAiApplication.errors failed operations}, and\nadjusted {@link IHttpOpenAiApplication.options options} during the\n`IHttpOpenAiApplication` construction.\n\nAbout the {@link ISwaggerOperation API operations}, they are converted to\n{@link IOpenAiFunction} type which represents LLM function calling schema.\nBy the way, if tehre're some recursive types which can't escape the\n{@link ISwaggerSchema.IReference} type, the operation would be failed and\npushed into the {@link IHttpOpenAiApplication.errors}. Otherwise not, the operation\nwould be successfully converted to {@link IOpenAiFunction} and its type schemas\nare downgraded to {@link OpenApiV3.IJsonSchema} and converted to {@link ILlmSchema}.\n\nAbout the options, if you've configured {@link IHttpOpenAiApplication.options.keyword}\n(as `true`), number of {@link IOpenAiFunction.parameters} are always 1 and the first\nparameter type is always {@link ILlmSchema.IObject}. Otherwise, the parameters would\nbe multiple, and the sequence of the parameters are following below rules.\n\n- `pathParameters`: Path parameters of {@link IHttpMigrateRoute.parameters}\n- `query`: Query parameter of {@link IHttpMigrateRoute.query}\n- `body`: Body parameter of {@link IHttpMigrateRoute.body}\n\n```typescript\n// KEYWORD TRUE\n{\n  ...pathParameters,\n  query,\n  body,\n}\n\n// KEYWORD FALSE\n[\n  ...pathParameters,\n  ...(query ? [query] : []),\n  ...(body ? [body] : []),\n]\n```\n\nBy the way, there can be some parameters (or their nested properties) which must be\ncomposed by Human, not by LLM. File uploading feature or some sensitive information\nlike secrety key (password) are the examples. In that case, you can separate the\nfunction parameters to both LLM and Human sides by configuring the\n{@link IHttpOpenAiApplication.IOptions.separate} property. The separated parameters are\nassigned to the {@link IOpenAiFunction.separated} property.\n\nFor reference, the actual function call execution is not by LLM, but by you.\nWhen the LLM selects the proper function and fills the arguments, you just call\nthe function by {@link HttpLlm.execute} with the LLM prepared arguments. And then\ninforms the return value to the LLM by system prompt. The LLM will continue the next\nconversation based on the return value.\n\nAdditionally, if you've configured {@link IHttpOpenAiApplication.IOptions.separate},\nso that the parameters are separated to Human and LLM sides, you can merge these\nhumand and LLM sides' parameters into one through {@link HttpLlm.mergeParameters}\nbefore the actual LLM function call execution."
      },
      "IHttpLlmFunctionILlmSchemaOpenApi.IOperationOpenApi.IJsonSchemaIHttpMigrateRouteOpenApi.IJsonSchemaOpenApi.IOperationOpenApi.IJsonSchema": {
        "type": "object",
        "properties": {
          "method": {
            "oneOf": [
              {
                "const": "delete"
              },
              {
                "const": "get"
              },
              {
                "const": "patch"
              },
              {
                "const": "post"
              },
              {
                "const": "put"
              }
            ],
            "title": "HTTP method of the endpoint",
            "description": "HTTP method of the endpoint."
          },
          "path": {
            "type": "string",
            "title": "Path of the endpoint",
            "description": "Path of the endpoint."
          },
          "name": {
            "type": "string",
            "title": "Representative name of the function",
            "description": "Representative name of the function.\n\nThe `name` is a repsentative name identifying the function in the\n{@link IHttpLlmApplication}. The `name` value is just composed by joining the\n{@link IHttpMigrateRoute.accessor} by underscore `_` character.\n\nHere is the composition rule of the  {@link IHttpMigrateRoute.accessor}:\n\n> The `accessor` is composed with the following rules. At first,\n> namespaces are composed by static directory names in the {@link path}.\n> Parametric symbols represented by `:param` or `{param}` cannot be\n> a part of the namespace.\n>\n> Instead, they would be a part of the function name. The function\n> name is composed with the {@link method HTTP method} and parametric\n> symbols like `getByParam` or `postByParam`. If there are multiple\n> path parameters, they would be concatenated by `And` like\n> `getByParam1AndParam2`.\n>\n> For refefence, if the {@link operation}'s {@link method} is `delete`,\n> the function name would be replaced to `erase` instead of `delete`.\n> It is the reason why the `delete` is a reserved keyword in many\n> programming languages.\n>\n> - Example 1\n>   - path: `POST /shopping/sellers/sales`\n>   - accessor: `shopping.sellers.sales.post`\n> - Example 2\n>   - endpoint: `GET /shoppings/sellers/sales/:saleId/reviews/:reviewId/comments/:id\n>   - accessor: `shoppings.sellers.sales.reviews.getBySaleIdAndReviewIdAndCommentId`"
          },
          "strict": {
            "const": true,
            "title": "Whether the function schema types are strict or not",
            "description": "Whether the function schema types are strict or not.\n\nNewly added specification to \"OpenAI\" at 2024-08-07."
          },
          "parameters": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ILlmSchema.IBoolean"
                },
                {
                  "$ref": "#/components/schemas/ILlmSchema.IInteger"
                },
                {
                  "$ref": "#/components/schemas/ILlmSchema.INumber"
                },
                {
                  "$ref": "#/components/schemas/ILlmSchema.IString"
                },
                {
                  "$ref": "#/components/schemas/ILlmSchema.IUnknown"
                },
                {
                  "$ref": "#/components/schemas/ILlmSchema.INullOnly"
                },
                {
                  "$ref": "#/components/schemas/ILlmSchema.IArrayILlmSchema"
                },
                {
                  "$ref": "#/components/schemas/ILlmSchema.IObjectILlmSchema"
                },
                {
                  "$ref": "#/components/schemas/ILlmSchema.IOneOfILlmSchema"
                }
              ]
            },
            "title": "List of parameter types",
            "description": "List of parameter types.\n\nIf you've configured {@link IHttpLlmApplication.IOptions.keyword} as `true`,\nnumber of {@link IHttpLlmFunction.parameters} are always 1 and the first\nparameter's type is always {@link ILlmSchema.IObject}. The\nproperties' rule is:\n\n- `pathParameters`: Path parameters of {@link IHttpMigrateRoute.parameters}\n- `query`: Query parameter of {@link IHttpMigrateRoute.query}\n- `body`: Body parameter of {@link IHttpMigrateRoute.body}\n\n```typescript\n{\n  ...pathParameters,\n  query,\n  body,\n}\n```\n\nOtherwise, the parameters would be multiple, and the sequence of the\nparameters are following below rules:\n\n```typescript\n[\n  ...pathParameters,\n  ...(query ? [query] : []),\n  ...(body ? [body] : []),\n]\n```"
          },
          "separated": {
            "$ref": "#/components/schemas/IHttpLlmFunction.ISeparatedILlmSchema",
            "title": "Collection of separated parameters",
            "description": "Collection of separated parameters.\n\nFilled only when {@link IHttpLlmApplication.IOptions.separate} is configured."
          },
          "output": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ILlmSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.IString"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.IUnknown"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.INullOnly"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.IArrayILlmSchema"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.IObjectILlmSchema"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.IOneOfILlmSchema"
              }
            ],
            "title": "Expected return type",
            "description": "Expected return type.\n\nIf the target operation returns nothing (`void`), the `output`\nwould be `undefined`."
          },
          "description": {
            "type": "string",
            "title": "Description of the function",
            "description": "Description of the function.\n\n`IHttpLlmFunction.description` is composed by below rule:\n\n1. Starts from the {@link OpenApi.IOperation.summary} paragraph.\n2. The next paragraphs are filled with the\n   {@link OpenApi.IOperation.description}. By the way, if the first\n   paragraph of {@link OpenApi.IOperation.description} is same with the\n   {@link OpenApi.IOperation.summary}, it would not be duplicated.\n3. Parameters' descriptions are added with `@param` tag.\n4. {@link OpenApi.IOperation.security Security requirements} are added\n   with `@security` tag.\n5. Tag names are added with `@tag` tag.\n6. If {@link OpenApi.IOperation.deprecated}, `@deprecated` tag is added.\n\nFor reference, the `description` is very important property to teach\nthe purpose of the function to the LLM (Language Large Model), and\nLLM actually determines which function to call by the description.\n\nAlso, when the LLM conversates with the user, the `description` is\nused to explain the function to the user. Therefore, the `description`\nproperty has the highest priroity, and you have to consider it."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the function is deprecated or not",
            "description": "Whether the function is deprecated or not.\n\nIf the `deprecated` is `true`, the function is not recommended to use.\n\nLLM (Large Language Model) may not use the deprecated function."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Category tags for the function",
            "description": "Category tags for the function.\n\nSame with {@link OpenApi.IOperation.tags} indicating the category of the function."
          }
        },
        "required": [
          "method",
          "path",
          "name",
          "strict",
          "parameters"
        ],
        "description": "LLM function calling schema from HTTP (OpenAPI) operation.\n\n`IHttpLlmFunction` is a data structure representing a function converted\nfrom the {@link OpenApi.IOperation OpenAPI operation}, used for the LLM\n(Large Language Model) function calling. It's a typical RPC (Remote Procedure Call)\nstructure containing the function {@link name}, {@link parameters}, and\n{@link output return type}.\n\nIf you provide this `IHttpLlmFunction` data to the LLM provider like \"OpenAI\",\nthe \"OpenAI\" will compose a function arguments by analyzing conversations with\nthe user. With the LLM composed arguments, you can execute the function through\n{@link LlmFetcher.execute} and get the result.\n\nFor reference, different between `IHttpLlmFunction` and its origin source\n{@link OpenApi.IOperation} is, `IHttpLlmFunction` has converted every type schema\ninformations from {@link OpenApi.IJsonSchema} to {@link ILlmSchema} to escape\n{@link OpenApi.IJsonSchema.IReference reference types}, and downgrade the version\nof the JSON schema to OpenAPI 3.0. It's because LLM function call feature cannot\nunderstand both reference types and OpenAPI 3.1 specification.\n\nAdditionally, if you've composed `IHttpLlmFunction` with\n{@link IHttpLlmApplication.IOptions.keyword} configuration as `true`, number of\n{@link IHttpLlmFunction.parameters} are always 1 and the first parameter's\ntype is always {@link ILlmSchema.IObject}. The properties' rule is:\n\n- `pathParameters`: Path parameters of {@link OpenApi.IOperation.parameters}\n- `query`: Query parameter of {@link IHttpMigrateRoute.query}\n- `body`: Body parameter of {@link IHttpMigrateRoute.body}\n\n```typescript\n{\n  ...pathParameters,\n  query,\n  body,\n}\n```\n\nOtherwise, the parameters would be multiple, and the sequence of the parameters\nare following below rules:\n\n```typescript\n[\n  ...pathParameters,\n  ...(query ? [query] : []),\n  ...(body ? [body] : []),\n]\n```"
      },
      "ILlmSchema.IBoolean": {
        "type": "object",
        "properties": {
          "default": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "boolean"
              }
            ],
            "title": "Default value",
            "description": "Default value."
          },
          "enum": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "title": "Enumeration values",
            "description": "Enumeration values."
          },
          "type": {
            "const": "boolean",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "nullable": {
            "type": "boolean",
            "title": "Whether to allow `null` value or not",
            "description": "Whether to allow `null` value or not."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          }
        },
        "required": [
          "type"
        ],
        "description": "Boolean type schema info."
      },
      "ILlmSchema.IInteger": {
        "type": "object",
        "properties": {
          "default": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Default value",
            "description": "Default value."
          },
          "enum": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "number"
                }
              ]
            },
            "title": "Enumeration values",
            "description": "Enumeration values."
          },
          "minimum": {
            "type": "integer",
            "title": "Minimum value restriction",
            "description": "Minimum value restriction."
          },
          "maximum": {
            "type": "integer",
            "title": "Maximum value restriction",
            "description": "Maximum value restriction."
          },
          "exclusiveMinimum": {
            "type": "boolean",
            "title": "Exclusive minimum value restriction",
            "description": "Exclusive minimum value restriction.\n\nFor reference, even though your Swagger document has defined the\n`exclusiveMinimum` value as `number`, it has been forcibly converted\nto `boolean` type, and assigns the numeric value to the\n{@link minimum} property in the {@link OpenApi} conversion."
          },
          "exclusiveMaximum": {
            "type": "boolean",
            "title": "Exclusive maximum value restriction",
            "description": "Exclusive maximum value restriction.\n\nFor reference, even though your Swagger document has defined the\n`exclusiveMaximum` value as `number`, it has been forcibly converted\nto `boolean` type, and assigns the numeric value to the\n{@link maximum} property in the {@link OpenApi} conversion."
          },
          "multipleOf": {
            "type": "integer",
            "exclusiveMinimum": true,
            "minimum": 0,
            "title": "Multiple of value restriction",
            "description": "Multiple of value restriction."
          },
          "type": {
            "const": "integer",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "nullable": {
            "type": "boolean",
            "title": "Whether to allow `null` value or not",
            "description": "Whether to allow `null` value or not."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          }
        },
        "required": [
          "type"
        ],
        "description": "Integer type schema info."
      },
      "ILlmSchema.INumber": {
        "type": "object",
        "properties": {
          "default": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "Default value",
            "description": "Default value."
          },
          "enum": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "number"
                }
              ]
            },
            "title": "Enumeration values",
            "description": "Enumeration values."
          },
          "minimum": {
            "type": "number",
            "title": "Minimum value restriction",
            "description": "Minimum value restriction."
          },
          "maximum": {
            "type": "number",
            "title": "Maximum value restriction",
            "description": "Maximum value restriction."
          },
          "exclusiveMinimum": {
            "type": "boolean",
            "title": "Exclusive minimum value restriction",
            "description": "Exclusive minimum value restriction.\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined the `exclusiveMinimum` value as `number`, {@link OpenAiComposer}\nforcibly converts it to `boolean` type, and assign the numeric value to\nthe {@link minimum} property."
          },
          "exclusiveMaximum": {
            "type": "boolean",
            "title": "Exclusive maximum value restriction",
            "description": "Exclusive maximum value restriction.\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined the `exclusiveMaximum` value as `number`, {@link OpenAiComposer}\nforcibly converts it to `boolean` type, and assign the numeric value to\nthe {@link maximum} property."
          },
          "multipleOf": {
            "type": "number",
            "exclusiveMinimum": true,
            "minimum": 0,
            "title": "Multiple of value restriction",
            "description": "Multiple of value restriction."
          },
          "type": {
            "const": "number",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "nullable": {
            "type": "boolean",
            "title": "Whether to allow `null` value or not",
            "description": "Whether to allow `null` value or not."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          }
        },
        "required": [
          "type"
        ],
        "description": "Number type schema info."
      },
      "ILlmSchema.IString": {
        "type": "object",
        "properties": {
          "default": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Default value",
            "description": "Default value."
          },
          "enum": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string"
                }
              ]
            },
            "title": "Enumeration values",
            "description": "Enumeration values."
          },
          "format": {
            "type": "string",
            "title": "Format restriction",
            "description": "Format restriction."
          },
          "pattern": {
            "type": "string",
            "title": "Pattern restriction",
            "description": "Pattern restriction."
          },
          "minLength": {
            "type": "integer",
            "title": "Minimum length restriction",
            "description": "Minimum length restriction."
          },
          "maxLength": {
            "type": "integer",
            "title": "Maximum length restriction",
            "description": "Maximum length restriction."
          },
          "contentMediaType": {
            "type": "string",
            "title": "Content media type restriction",
            "description": "Content media type restriction."
          },
          "type": {
            "const": "string",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "nullable": {
            "type": "boolean",
            "title": "Whether to allow `null` value or not",
            "description": "Whether to allow `null` value or not."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          }
        },
        "required": [
          "type"
        ],
        "description": "String type schema info."
      },
      "ILlmSchema.IUnknown": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          }
        },
        "description": "Unknown type schema info.\n\nIt means the type of the value is `any`."
      },
      "ILlmSchema.INullOnly": {
        "type": "object",
        "properties": {
          "type": {
            "const": "null",
            "title": "Type is always `null`",
            "description": "Type is always `null`."
          },
          "default": {
            "type": "null",
            "title": "Default value",
            "description": "Default value."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          }
        },
        "required": [
          "type"
        ],
        "description": "Null only type schema info."
      },
      "ILlmSchema.IArrayILlmSchema": {
        "type": "object",
        "properties": {
          "items": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ILlmSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.IString"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.IUnknown"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.INullOnly"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.IArrayILlmSchema"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.IObjectILlmSchema"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.IOneOfILlmSchema"
              }
            ],
            "title": "Items type schema info",
            "description": "Items type schema info.\n\nThe `items` means the type of the array elements. In other words, it is\nthe type schema info of the `T` in the TypeScript array type `Array<T>`."
          },
          "uniqueItems": {
            "type": "boolean",
            "title": "Unique items restriction",
            "description": "Unique items restriction.\n\nIf this property value is `true`, target array must have unique items."
          },
          "minItems": {
            "type": "integer",
            "title": "Minimum items restriction",
            "description": "Minimum items restriction.\n\nRestriction of minumum number of items in the array."
          },
          "maxItems": {
            "type": "integer",
            "title": "Maximum items restriction",
            "description": "Maximum items restriction.\n\nRestriction of maximum number of items in the array."
          },
          "type": {
            "const": "array",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "nullable": {
            "type": "boolean",
            "title": "Whether to allow `null` value or not",
            "description": "Whether to allow `null` value or not."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          }
        },
        "required": [
          "items",
          "type"
        ],
        "description": "Array type schema info."
      },
      "ILlmSchema.IObjectILlmSchema": {
        "type": "object",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/RecordstringILlmSchema",
            "title": "Properties of the object",
            "description": "Properties of the object.\n\nThe `properties` means a list of key-value pairs of the object's\nregular properties. The key is the name of the regular property,\nand the value is the type schema info.\n\nIf you need additional properties that is represented by dynamic key,\nyou can use the {@link additionalProperties} instead."
          },
          "required": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "List of key values of the required properties",
            "description": "List of key values of the required properties.\n\nThe `required` means a list of the key values of the required\n{@link properties}. If some property key is not listed in the `required`\nlist, it means that property is optional. Otherwise some property key\nexists in the `required` list, it means that the property must be filled.\n\nBelow is an example of the {@link properties} and `required`.\n\n```typescript\ninterface SomeObject {\n  id: string;\n  email: string;\n  name?: string;\n}\n```\n\nAs you can see, `id` and `email` {@link properties} are {@link required},\nso that they are listed in the `required` list.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": { \"type\": \"string\" },\n    \"email\": { \"type\": \"string\" },\n    \"name\": { \"type\": \"string\" }\n  },\n  \"required\": [\"id\", \"email\"]\n}\n```"
          },
          "additionalProperties": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.IString"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.IUnknown"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.INullOnly"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.IArrayILlmSchema"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.IObjectILlmSchema"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.IOneOfILlmSchema"
              }
            ],
            "title": "Additional properties' info",
            "description": "Additional properties' info.\n\nThe `additionalProperties` means the type schema info of the additional\nproperties that are not listed in the {@link properties}.\n\nIf the value is `true`, it means that the additional properties are not\nrestricted. They can be any type. Otherwise, if the value is\n{@link ILlmSchema} type, it means that the additional properties must\nfollow the type schema info.\n\n- `true`: `Record<string, any>`\n- `ILlmSchema`: `Record<string, T>`"
          },
          "type": {
            "const": "object",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "nullable": {
            "type": "boolean",
            "title": "Whether to allow `null` value or not",
            "description": "Whether to allow `null` value or not."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          }
        },
        "required": [
          "type"
        ],
        "description": "Object type schema info."
      },
      "RecordstringILlmSchema": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/ILlmSchema.IBoolean"
            },
            {
              "$ref": "#/components/schemas/ILlmSchema.IInteger"
            },
            {
              "$ref": "#/components/schemas/ILlmSchema.INumber"
            },
            {
              "$ref": "#/components/schemas/ILlmSchema.IString"
            },
            {
              "$ref": "#/components/schemas/ILlmSchema.IUnknown"
            },
            {
              "$ref": "#/components/schemas/ILlmSchema.INullOnly"
            },
            {
              "$ref": "#/components/schemas/ILlmSchema.IArrayILlmSchema"
            },
            {
              "$ref": "#/components/schemas/ILlmSchema.IObjectILlmSchema"
            },
            {
              "$ref": "#/components/schemas/ILlmSchema.IOneOfILlmSchema"
            }
          ]
        }
      },
      "ILlmSchema.IOneOfILlmSchema": {
        "type": "object",
        "properties": {
          "oneOf": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ILlmSchema.IBoolean"
                },
                {
                  "$ref": "#/components/schemas/ILlmSchema.IInteger"
                },
                {
                  "$ref": "#/components/schemas/ILlmSchema.INumber"
                },
                {
                  "$ref": "#/components/schemas/ILlmSchema.IString"
                },
                {
                  "$ref": "#/components/schemas/ILlmSchema.IUnknown"
                },
                {
                  "$ref": "#/components/schemas/ILlmSchema.INullOnly"
                },
                {
                  "$ref": "#/components/schemas/ILlmSchema.IArrayILlmSchema"
                },
                {
                  "$ref": "#/components/schemas/ILlmSchema.IObjectILlmSchema"
                }
              ]
            },
            "title": "List of the union types",
            "description": "List of the union types."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          }
        },
        "required": [
          "oneOf"
        ],
        "description": "One of type schema info.\n\n`IOneOf` represents an union type of the TypeScript (`A | B | C`).\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined `anyOf` instead of the `oneOf`, it has been forcibly converted\nto `oneOf` type by {@link OpenApi.convert OpenAPI conversion}."
      },
      "IHttpLlmFunction.ISeparatedILlmSchema": {
        "type": "object",
        "properties": {
          "llm": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHttpLlmFunction.ISeparatedParameterILlmSchema"
            },
            "title": "Parameters that would be composed by the LLM",
            "description": "Parameters that would be composed by the LLM."
          },
          "human": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHttpLlmFunction.ISeparatedParameterILlmSchema"
            },
            "title": "Parameters that would be composed by the human",
            "description": "Parameters that would be composed by the human."
          }
        },
        "required": [
          "llm",
          "human"
        ],
        "description": "Collection of separated parameters."
      },
      "IHttpLlmFunction.ISeparatedParameterILlmSchema": {
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "title": "Index of the parameter",
            "description": "Index of the parameter."
          },
          "schema": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ILlmSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.IString"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.IUnknown"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.INullOnly"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.IArrayILlmSchema"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.IObjectILlmSchema"
              },
              {
                "$ref": "#/components/schemas/ILlmSchema.IOneOfILlmSchema"
              }
            ],
            "title": "Type schema info of the parameter",
            "description": "Type schema info of the parameter."
          }
        },
        "required": [
          "index",
          "schema"
        ],
        "description": "Separated parameter."
      },
      "IHttpLlmApplication.IErrorISwaggerOperationISwaggerMigrateRoute": {
        "type": "object",
        "properties": {
          "method": {
            "oneOf": [
              {
                "const": "delete"
              },
              {
                "const": "get"
              },
              {
                "const": "head"
              },
              {
                "const": "patch"
              },
              {
                "const": "post"
              },
              {
                "const": "put"
              }
            ],
            "title": "HTTP method of the endpoint",
            "description": "HTTP method of the endpoint."
          },
          "path": {
            "type": "string",
            "title": "Path of the endpoint",
            "description": "Path of the endpoint."
          },
          "messages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Error messsages",
            "description": "Error messsages."
          }
        },
        "required": [
          "method",
          "path",
          "messages"
        ],
        "description": "Error occurred in the composition."
      },
      "IHttpLlmApplication.IOptionsIOpenAiSchema": {
        "type": "object",
        "properties": {
          "keyword": {
            "type": "boolean",
            "title": "Whether the parameters are keyworded or not",
            "description": "Whether the parameters are keyworded or not.\n\nIf this property value is `true`, length of the\n{@link IHttpLlmApplication.IFunction.parameters} is always 1, and type of\nthe pararameter is always {@link ILlmSchema.IObject} type.\n\nOtherwise, the parameters would be multiple, and the sequence of the parameters\nare following below rules.\n\n```typescript\n// KEYWORD TRUE\n{\n  ...pathParameters,\n  query,\n  body,\n}\n\n// KEYWORD FALSE\n[\n  ...pathParameters,\n  ...(query ? [query] : []),\n  ...(body ? [body] : []),\n]\n```"
          },
          "recursive": {
            "oneOf": [
              {
                "const": false
              },
              {
                "type": "number"
              }
            ],
            "title": "Whether to allow recursive types or not",
            "description": "Whether to allow recursive types or not.\n\nIf allow, then how many times to repeat the recursive types.\n\nBy the way, if the model is \"chatgpt\", the recursive types are always\nallowed without any limitation, due to it supports the reference type."
          },
          "separate": {
            "type": "null",
            "title": "Separator function for the parameters",
            "description": "Separator function for the parameters.\n\nWhen composing parameter arguments through LLM function call,\nthere can be a case that some parameters must be composed by Human,\nor LLM cannot understand the parameter. For example, if the\nparameter type has configured\n{@link ILlmSchema.IString.contentMediaType} which indicates file\nuploading, it must be composed by Human, not by LLM\n(Large Language Model).\n\nIn that case, if you configure this property with a function that\npredicating whether the schema value must be composed by Human or\nnot, the parameters would be separated into two parts.\n\n- {@link IHttpLlmFunction.separated.llm}\n- {@link IHttpLlmFunction.separated.Human}\n\nWhen writing the function, note that returning value `true` means\nto be a Human composing the value, and `false` means to LLM\ncomposing the value. Also, when predicating the schema, it would\nbetter to utilize the {@link LlmTypeChecker} features."
          }
        },
        "required": [
          "keyword",
          "recursive",
          "separate"
        ],
        "description": "Options for composing the LLM application."
      },
      "IHubSaleUnitOpenAiSchemaAccessor": {
        "type": "object",
        "properties": {
          "unit_id": {
            "type": "string",
            "format": "uuid",
            "title": "{@link IHubSaleUnit.id} of the target unit",
            "description": "{@link IHubSaleUnit.id} of the target unit."
          },
          "keyword": {
            "type": "boolean",
            "title": "Whether the parameters are keyworded or not",
            "description": "Whether the parameters are keyworded or not.\n\nIf this property value is `true`, length of the\n{@link IOpenAiDocument.IFunction.parameters} is always 1, and type of the\npararameter is always {@link IOpenAiSchema.IObject} type. Also, its\nproperties are following below rules:\n\n- `pathParameters`: Path parameters of {@link ISwaggerMigrateRoute.parameters}\n- `query`: Query parameter of {@link ISwaggerMigrateRoute.query}\n- `body`: Body parameter of {@link ISwaggerMigrateRoute.body}\n\n```typescript\n{\n  ...pathParameters,\n  query,\n  body,\n}\n```\n\nOtherwise (this property value is `false`), length of the\n{@link IOpenAiDocument.IFunction.parameters} is variable, and sequence of the\nparameters are following below rules.\n\n```typescript\n[\n  ...pathParameters,\n  ...(query ? [query] : []),\n  ...(body ? [body] : []),\n]\n```"
          }
        },
        "required": [
          "unit_id",
          "keyword"
        ],
        "description": "Accessor information for a specific unit's OpenAI schema from the listing."
      },
      "IPageIHubOrderGood.IInvert": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubOrderGood.IInvert"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubOrderGood.IInvert": {
        "type": "object",
        "properties": {
          "order": {
            "$ref": "#/components/schemas/IHubOrder.IInvert",
            "title": "Reverse reference information for the order",
            "description": "Reverse reference information for the order."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary key",
            "description": "Primary key."
          },
          "commodity": {
            "$ref": "#/components/schemas/IHubCartCommodity",
            "description": "장바구니의 {@link IHubCartCommodity}"
          },
          "price": {
            "$ref": "#/components/schemas/IHubOrderPrice.ISummary",
            "title": "Product pricing information",
            "description": "Product pricing information."
          },
          "opened_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "The time of commencement of the order contract",
            "description": "The time of commencement of the order contract.\n\nUnlike the time of confirmation of the order, the effective date\ncan be postponed later than that. And the effective date of the contract\ncan be continuously edited until it arrives.\n\nAlso, the monthly fixed fee is calculated based on the commencement date.\n\nPlease note that after the customer purchases the seller's API, the\nprocess of reviewing and developing it is necessary, so the effective date\nof the original contract cannot help but be postponed later than the\norder confirmation."
          },
          "closed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "The termination date of the contract",
            "description": "The termination date of the contract.\n\nHowever, the termination date of the contract cannot be immediate. From\nthe time of contract initiation, it can only be cancelled after a period\nof at least 1 month has passed. And if the contract has already been\ninitiated, it can also only be terminated in 1-month units."
          }
        },
        "required": [
          "order",
          "id",
          "commodity",
          "price",
          "opened_at",
          "closed_at"
        ],
        "description": "Backreference information for individual product information."
      },
      "IHubOrder.IInvert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Primary key"
          },
          "customer": {
            "$ref": "#/components/schemas/IHubCustomer",
            "description": "Orderer"
          },
          "publish": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubOrderPublish"
              }
            ],
            "title": "Confirmation information for your order",
            "description": "Confirmation information for your order."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Record creation date and time"
          },
          "cancelled_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Order cancellation date",
            "description": "Order cancellation date.\n\nCancellation is only possible before it takes effect."
          }
        },
        "required": [
          "id",
          "customer",
          "publish",
          "created_at",
          "cancelled_at"
        ],
        "description": "Order information dereference information."
      },
      "IHubOrderPublish": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          }
        },
        "required": [
          "id",
          "created_at"
        ],
        "description": "Confirmation information of the order.\n\n`IHubOrderPublish` is an entity that visualizes the confirmation\ninformation of the order. Therefore, the existence of this entity means\nthat the {@link IHubCustomer customer}'s {@link IHubOrder requested order}\nhas been established as a contract and confirmed.\n\nHowever, even if the contract is confirmed, it does not start immediately.\nWhen confirming the contract, (or each ordered product) can set the\n{@link IHubOrderGood.opened_at opening time} of the contract. This is designed\nso that the opening time of the contract can be postponed because the customer\nneeds to analyze and develop the API after purchasing the seller's API.\n\nHowever, even if the opening time of the contract is later, the fixed cost\nfor the first month is converted to a deposit status when the contract takes\neffect. Of course, the order contract can be canceled and refunded before\nthe opening time of the contract."
      },
      "IHubCartCommodity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary key",
            "description": "Primary key."
          },
          "sale": {
            "$ref": "#/components/schemas/IHubSaleSnapshot.IInvert",
            "title": "Product listing snapshot information",
            "description": "Product listing snapshot information.\n\nContains listing information based on ordered products or shopping cart items,\nso any units or stock not included in the order are removed."
          },
          "pseudo": {
            "type": "boolean",
            "title": "Fictional or not",
            "description": "Fictional or not.\n\nA fictional cart item is a cart item that literally does not exist.\n\nIt is mainly used when calculating the discount effect by\n{@link IShoppingCoupon discount coupon} for individual {@link IHubSale items}.\nIt is also used to calculate the discount effect when a new item is added to\nan already configured cart.\n\nIt is never used in any other cases, and is never used at the order level."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          }
        },
        "required": [
          "id",
          "sale",
          "pseudo",
          "created_at"
        ],
        "description": "Items in cart\n\nAn entity that visualizes a snapshot of an item that a customer has in\nmind to purchase and has placed in their cart.\n\n{@link IHubCartCommodity} is an entity that visualizes a snapshot of an item\nthat a customer has in mind to purchase and has placed in their cart.\n\nAnd if the customer actually orders this in the future, the unit will change\nfrom {@link IHubCartCommodity} to {@link IHubOrderGood}.\n\nAnd when placing an item snapshot in their cart, the customer will inevitably\nselect a specific unit or final stock within the item snapshot. Information\nabout this unit and stock is recorded in the sub-entity\n{@link IHubCartCommodityStock}."
      },
      "IHubOrderGood.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IHubOrderGood.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-seller.created_at"
                },
                {
                  "const": "-seller.goods.payments.real"
                },
                {
                  "const": "-seller.goods.published_count"
                },
                {
                  "const": "-seller.reviews.average"
                },
                {
                  "const": "-seller.reviews.count"
                },
                {
                  "const": "-goods.publish_count"
                },
                {
                  "const": "-goods.payments"
                },
                {
                  "const": "-reviews.average"
                },
                {
                  "const": "-reviews.count"
                },
                {
                  "const": "-sale.created_at"
                },
                {
                  "const": "-sale.opened_at"
                },
                {
                  "const": "-sale.closed_at"
                },
                {
                  "const": "-sale.view_count"
                },
                {
                  "const": "+seller.created_at"
                },
                {
                  "const": "+seller.goods.payments.real"
                },
                {
                  "const": "+seller.goods.published_count"
                },
                {
                  "const": "+seller.reviews.average"
                },
                {
                  "const": "+seller.reviews.count"
                },
                {
                  "const": "+goods.publish_count"
                },
                {
                  "const": "+goods.payments"
                },
                {
                  "const": "+reviews.average"
                },
                {
                  "const": "+reviews.count"
                },
                {
                  "const": "+sale.created_at"
                },
                {
                  "const": "+sale.opened_at"
                },
                {
                  "const": "+sale.closed_at"
                },
                {
                  "const": "+sale.view_count"
                },
                {
                  "const": "-order.created_at"
                },
                {
                  "const": "-order.publish.created_at"
                },
                {
                  "const": "+order.created_at"
                },
                {
                  "const": "+order.publish.created_at"
                },
                {
                  "const": "-good.opened_at"
                },
                {
                  "const": "-good.closed_at"
                },
                {
                  "const": "+good.opened_at"
                },
                {
                  "const": "+good.closed_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        }
      },
      "IHubOrderGood.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "order": {
            "$ref": "#/components/schemas/OmitIHubOrder.IRequest.ISearchsale"
          },
          "sale": {
            "$ref": "#/components/schemas/IHubSale.IRequest.ISearch"
          }
        }
      },
      "OmitIHubOrder.IRequest.ISearchsale": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          },
          "published": {
            "type": "boolean"
          },
          "expired": {
            "type": "boolean"
          }
        },
        "description": "Construct a type with the properties of T except for those in type K."
      },
      "IHubSale.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "channel_codes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "channel_category_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "show_paused": {
            "type": "boolean"
          },
          "show_suspended": {
            "oneOf": [
              {
                "const": "only"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "section_codes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "title_or_content": {
            "type": "string"
          },
          "title_or_content_tag": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "seller": {
            "$ref": "#/components/schemas/IHubSeller.IRequest.ISearch"
          },
          "review": {
            "$ref": "#/components/schemas/IHubSaleReview.IInvertSearch"
          },
          "audit": {
            "type": "object",
            "properties": {
              "state": {
                "oneOf": [
                  {
                    "const": "none"
                  },
                  {
                    "const": "approved"
                  },
                  {
                    "const": "rejected"
                  },
                  {
                    "const": "agenda"
                  }
                ]
              }
            }
          },
          "connector": {
            "type": "object",
            "properties": {
              "ids": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "type": {
                "oneOf": [
                  {
                    "const": "all"
                  },
                  {
                    "const": "workflow"
                  },
                  {
                    "const": "api"
                  }
                ]
              }
            }
          },
          "app_type": {
            "oneOf": [
              {
                "const": "all"
              },
              {
                "const": "app"
              },
              {
                "const": "agent"
              },
              {
                "const": "migrated"
              },
              {
                "const": "migrated_tool"
              },
              {
                "const": "migrated_chatbot"
              },
              {
                "const": "wrtn_release"
              }
            ]
          },
          "show_bookmarked": {
            "oneOf": [
              {
                "const": "only"
              },
              {
                "type": "boolean"
              }
            ]
          }
        },
        "description": "Search information."
      },
      "IHubSeller.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "mobile": {
            "type": "string",
            "pattern": "^[0-9]*$"
          },
          "name": {
            "type": "string"
          },
          "show_wrtn": {
            "type": "boolean",
            "title": "Search only for `studio@wrtn.io` accounts",
            "description": "Search only for `studio@wrtn.io` accounts."
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "nickname": {
            "type": "string"
          }
        }
      },
      "IHubSaleReview.IInvertSearch": {
        "type": "object",
        "properties": {
          "score": {
            "$ref": "#/components/schemas/IHubSaleReview.IInvertSearch.IScoreRange"
          },
          "count": {
            "$ref": "#/components/schemas/IHubSaleReview.IInvertSearch.ICountRange"
          }
        },
        "description": "Search review information for listing snapshots."
      },
      "IHubSaleReview.IInvertSearch.IScoreRange": {
        "type": "object",
        "properties": {
          "minimum": {
            "type": "number",
            "minimum": 0,
            "maximum": 100
          },
          "maximum": {
            "type": "number",
            "minimum": 0,
            "maximum": 100
          }
        }
      },
      "IHubSaleReview.IInvertSearch.ICountRange": {
        "type": "object",
        "properties": {
          "minimum": {
            "type": "integer"
          },
          "maximum": {
            "type": "integer"
          }
        }
      },
      "IPageIHubOrder": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubOrder"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubOrder": {
        "type": "object",
        "properties": {
          "goods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubOrderGood"
            },
            "minItems": 1,
            "title": "Information about the individual products that make up your order",
            "description": "Information about the individual products that make up your order."
          },
          "price": {
            "$ref": "#/components/schemas/IHubOrderPrice.ISummary",
            "title": "Order price information",
            "description": "Order price information.\n\nMostly {@link IHubSaleUnitStockPrice.fixed fixed cost},\nbut may sometimes include a {@link IHubCoupon discount coupon} that\naffects variable cost."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Primary key"
          },
          "customer": {
            "$ref": "#/components/schemas/IHubCustomer",
            "description": "Orderer"
          },
          "publish": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubOrderPublish"
              }
            ],
            "title": "Confirmation information for your order",
            "description": "Confirmation information for your order."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Record creation date and time"
          },
          "cancelled_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Order cancellation date",
            "description": "Order cancellation date.\n\nCancellation is only possible before it takes effect."
          }
        },
        "required": [
          "goods",
          "price",
          "id",
          "customer",
          "publish",
          "created_at",
          "cancelled_at"
        ],
        "description": "This is an entity that visualizes order request information.\n\n`IHubOrder` is an entity that visualizes the customer's order \"request\"\ninformation. Therefore, this entity is different from {@link IHubOrderPublish},\nwhich indicates the order confirmation stage, so be careful about this.\nIn other words, the existence of an `IHubOrder` record does not mean that\nthe order is complete.\n\nIn addition, as soon as a customer places an order, all of the targeted\n{@link IHubCartCommodity shopping cart raw materials} are upgraded to\norder products, and {@link IHubOrderGood} records are created under\n{@link IHubOrder}.\n\nOf course, not all product raw materials in the target shopping cart become\norder products, and only those selected by the customer become\n{@link IHubOrderGood}."
      },
      "IHubOrderGood": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary key",
            "description": "Primary key."
          },
          "commodity": {
            "$ref": "#/components/schemas/IHubCartCommodity",
            "description": "장바구니의 {@link IHubCartCommodity}"
          },
          "price": {
            "$ref": "#/components/schemas/IHubOrderPrice.ISummary",
            "title": "Product pricing information",
            "description": "Product pricing information."
          },
          "opened_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "The time of commencement of the order contract",
            "description": "The time of commencement of the order contract.\n\nUnlike the time of confirmation of the order, the effective date\ncan be postponed later than that. And the effective date of the contract\ncan be continuously edited until it arrives.\n\nAlso, the monthly fixed fee is calculated based on the commencement date.\n\nPlease note that after the customer purchases the seller's API, the\nprocess of reviewing and developing it is necessary, so the effective date\nof the original contract cannot help but be postponed later than the\norder confirmation."
          },
          "closed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "The termination date of the contract",
            "description": "The termination date of the contract.\n\nHowever, the termination date of the contract cannot be immediate. From\nthe time of contract initiation, it can only be cancelled after a period\nof at least 1 month has passed. And if the contract has already been\ninitiated, it can also only be terminated in 1-month units."
          }
        },
        "required": [
          "id",
          "commodity",
          "price",
          "opened_at",
          "closed_at"
        ],
        "description": "Individual product information that constitutes an order.\n\n{@link IHubOrderGood} is an entity that represents each product\nordered by a customer, and the record is created when\n{@link IHubCartCommodity product raw materials} in the shopping cart are\nupgraded to products due to a customer's order request.\n\nAnd {@link IHubOrderGood} is a concept that corresponds to the\nsnapshot unit of the product, whether it is {@link IHubCartCommodity} or not.\n\nIn addition, {@link IHubOrderGood} is the most basic unit for the process\nafter the order, that is, after-sales service (A/S). For example, the unit\nwhere a customer issues an issue for an ordered product or requests a refund\nis {@link IHubOrderGood}."
      },
      "IHubOrder.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IHubOrder.IRequest.ISearch",
            "description": "Search Conditions"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-order.created_at"
                },
                {
                  "const": "-order.publish.created_at"
                },
                {
                  "const": "+order.created_at"
                },
                {
                  "const": "+order.publish.created_at"
                }
              ]
            },
            "description": "Sorting Conditions"
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "View order information list or page information."
      },
      "IHubOrder.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          },
          "sale": {
            "$ref": "#/components/schemas/IHubSale.IRequest.ISearch"
          },
          "published": {
            "type": "boolean"
          },
          "expired": {
            "type": "boolean"
          }
        }
      },
      "IHubPushMessage.ICsvUpload": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary"
          }
        },
        "required": [
          "file"
        ],
        "description": "CSV upload information of metadata records."
      },
      "IHubPushMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "content": {
            "$ref": "#/components/schemas/IHubPushMessageContent",
            "title": "Content of the push message",
            "description": "Content of the push message."
          },
          "code": {
            "type": "string",
            "title": "Identifier code of the push message",
            "description": "Identifier code of the push message."
          },
          "source": {
            "type": "string",
            "title": "Source table name occuring the push message event",
            "description": "Source table name occuring the push message event."
          },
          "target": {
            "oneOf": [
              {
                "const": "administrator"
              },
              {
                "const": "customer"
              },
              {
                "const": "seller"
              }
            ],
            "title": "Target actor kind to receive",
            "description": "Target actor kind to receive."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of push message metadata",
            "description": "Creation time of push message metadata."
          }
        },
        "required": [
          "id",
          "content",
          "code",
          "source",
          "target",
          "created_at"
        ],
        "description": "Push message metadata."
      },
      "IHubPushMessageContent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "title": {
            "type": "string",
            "title": "Title of the push message",
            "description": "Title of the push message."
          },
          "body": {
            "type": "string",
            "title": "Body of the push message",
            "description": "Body of the push message."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time or update timme of the push message content",
            "description": "Creation time or update timme of the push message content."
          }
        },
        "required": [
          "id",
          "title",
          "body",
          "created_at"
        ],
        "description": "Content of the push message."
      },
      "IHubPushMessage.ICreate": {
        "type": "object",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/IHubPushMessageContent.ICreate",
            "title": "Content of the push message",
            "description": "Content of the push message."
          },
          "code": {
            "type": "string",
            "title": "Identifier code of the push message",
            "description": "Identifier code of the push message."
          },
          "source": {
            "type": "string",
            "title": "Source table name occuring the push message event",
            "description": "Source table name occuring the push message event."
          },
          "target": {
            "oneOf": [
              {
                "const": "administrator"
              },
              {
                "const": "customer"
              },
              {
                "const": "seller"
              }
            ],
            "title": "Target actor kind to receive",
            "description": "Target actor kind to receive."
          }
        },
        "required": [
          "content",
          "code",
          "source",
          "target"
        ],
        "description": "Creation information of the push message metadata."
      },
      "IHubPushMessageContent.ICreate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "title": "Title of the push message",
            "description": "Title of the push message."
          },
          "body": {
            "type": "string",
            "title": "Body of the push message",
            "description": "Body of the push message."
          }
        },
        "required": [
          "title",
          "body"
        ],
        "description": "Creation information of the push message content."
      },
      "IPageIHubPushMessage": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubPushMessage"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubPushMessage.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IHubPushMessage.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-message.code"
                },
                {
                  "const": "-message.source"
                },
                {
                  "const": "-message.created_at"
                },
                {
                  "const": "-content.title"
                },
                {
                  "const": "+message.code"
                },
                {
                  "const": "+message.source"
                },
                {
                  "const": "+message.created_at"
                },
                {
                  "const": "+content.title"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Request of pagination and sorting."
      },
      "IHubPushMessage.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "target": {
            "oneOf": [
              {
                "const": "administrator"
              },
              {
                "const": "customer"
              },
              {
                "const": "seller"
              }
            ]
          },
          "content": {
            "$ref": "#/components/schemas/IHubPushMessageContent.ISearch"
          }
        }
      },
      "IHubPushMessageContent.ISearch": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "title_or_body": {
            "type": "string"
          }
        }
      },
      "IPageIHubPushMessageHistory": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubPushMessageHistory"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubPushMessageHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "message": {
            "$ref": "#/components/schemas/IHubPushMessage",
            "title": "Metadata information",
            "description": "Metadata information."
          },
          "source_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source record occured the push message history",
            "description": "Source record occured the push message history."
          },
          "variables": {
            "$ref": "#/components/schemas/Recordstringstring",
            "title": "Variables binded to the push message content",
            "description": "Variables binded to the push message content."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the history",
            "description": "Creation time of the history."
          },
          "read_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Read time of the history",
            "description": "Read time of the history."
          }
        },
        "required": [
          "id",
          "message",
          "source_id",
          "variables",
          "created_at",
          "read_at"
        ],
        "description": "History of push message issuance."
      },
      "IHubPushMessageHistory.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IHubPushMessageHistory.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-history.created_at"
                },
                {
                  "const": "+history.created_at"
                },
                {
                  "const": "-history.read_at"
                },
                {
                  "const": "+history.read_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        }
      },
      "IHubPushMessageHistory.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          },
          "message": {
            "$ref": "#/components/schemas/PickIHubPushMessage.IRequest.ISearchcodesource"
          }
        }
      },
      "PickIHubPushMessage.IRequest.ISearchcodesource": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "source": {
            "type": "string"
          }
        },
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "IPageIHubSaleAuditComment": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleAuditComment"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubSaleAuditComment": {
        "type": "object",
        "properties": {
          "writer": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IHubAdministrator.IInvert"
              },
              {
                "$ref": "#/components/schemas/IHubSeller.IInvert"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "administrator": "#/components/schemas/IHubAdministrator.IInvert",
                "seller": "#/components/schemas/IHubSeller.IInvert"
              }
            },
            "title": "Commenter",
            "description": "Commenter.\n\nComments on the review article can be written by the administrator and\nseller respectively.\n\nOf course, the seller must be a party to the relevant listing."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "parent_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "title": "Parent comment's ID",
            "description": "Parent comment's ID."
          },
          "snapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IBbsArticleComment.ISnapshot"
            },
            "minItems": 1,
            "title": "List of snapshot contents",
            "description": "List of snapshot contents.\n\nIt is created for the first time when a comment being created, and is\naccumulated every time the comment is modified."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of comment",
            "description": "Creation time of comment."
          }
        },
        "required": [
          "writer",
          "id",
          "parent_id",
          "snapshots",
          "created_at"
        ],
        "description": "Comments on the review article.\n\n`IHubSaleAuditComment` is a subtype entity of {@link IBbsArticleComment},\nand is used when the administrator and {@link IHubSeller seller} communicate\nwith each other regarding the {@link IHubSaleAudit review} initiated by\n{@link IHubAdministrator administrator}.\n\nThis also applies after the review is completed, and even for a review case\nthat has been {@link IHubSaleAuditRejection rejected} processed, the seller\ncan request a re-review as a comment. Of course, most sellers will follow the\nadministrator's guide before requesting a re-review and perform their own\n{@link IHubSaleAuditEmension edit}."
      },
      "IHubSaleAuditComment.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IHubSaleAuditComment.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-created_at"
                },
                {
                  "const": "+created_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Page and search request information for review comments."
      },
      "IHubSaleAuditComment.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string"
          }
        },
        "description": "Search criteria information for review comments."
      },
      "IHubSaleAuditComment.ICreate": {
        "type": "object",
        "properties": {
          "format": {
            "oneOf": [
              {
                "const": "txt"
              },
              {
                "const": "html"
              },
              {
                "const": "md"
              }
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "body": {
            "type": "string",
            "title": "Content body of comment",
            "description": "Content body of comment."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "required": [
          "format",
          "body",
          "files"
        ],
        "description": "Comment input information."
      },
      "IHubSaleAudit": {
        "type": "object",
        "properties": {
          "administrator": {
            "$ref": "#/components/schemas/IHubAdministrator.IInvert",
            "title": "The administrator who initiated the review",
            "description": "The administrator who initiated the review."
          },
          "emendations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleAuditEmendation"
            },
            "title": "List of revisions",
            "description": "List of revisions."
          },
          "rejections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleAuditRejection"
            },
            "title": "List of rejected applications",
            "description": "List of rejected applications."
          },
          "approval": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubSaleAuditApproval"
              }
            ],
            "title": "Review approval details",
            "description": "Review approval details."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "snapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IBbsArticle.ISnapshot"
            },
            "minItems": 1,
            "title": "List of snapshot contents",
            "description": "List of snapshot contents.\n\nIt is created for the first time when an article is created, and is\naccumulated every time the article is modified."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of article",
            "description": "Creation time of article."
          }
        },
        "required": [
          "administrator",
          "emendations",
          "rejections",
          "approval",
          "id",
          "snapshots",
          "created_at"
        ],
        "description": "Listing audit information.\n\nWhenever a {@link IHubSale seller} registers and modifies a\n{@link IHubSale listing} (whenever a new {@link IHubSaleSnapshot snapshot}\nrecord is created), it requires a {@link IHubAdministrator administrator}\naudit, and if it fails, the sale itself is impossible. `IHubSaleAudit` is\nan entity that embodies the audit of this listing snapshot.\n\nAnd the administrator can write the audit matters as a kind of article, and the\nseller and the administrator can continuously communicate about the audit\nprocess or its results through {@link IHubSaleAuditComment comments}. Therefore,\nthis `IHubSaleAudit` is designed as a subtype entity of {@link IBbsArticle}.\n\nIn addition, this audit article records all the modifications whenever the\nadministrator modifies it, so that both the seller and the administrator\ncan view it. Due to the nature of electronic commerce where money is involved,\nthe potential for disputes is always prevalent, and this is because the review\nprocess is no exception. This is to prevent the administrator or seller from\nmanipulating the situation by changing their claims and editing articles in the\nevent of a dispute.\n\nIn addition, it is possible for the administrator to\n{@link IHubSaleAuditRejection reject} the review and then reverse it and\n{@link IHubSaleAuditApproval approve} it, but it is impossible to reverse and\nreject the review that has already been approved. This is because the sale of\nthe item has already begun the moment the review is approved."
      },
      "IHubSaleAuditEmendation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "emender": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IHubAdministrator.IInvert"
              },
              {
                "$ref": "#/components/schemas/IHubSeller.IInvert"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "administrator": "#/components/schemas/IHubAdministrator.IInvert",
                "seller": "#/components/schemas/IHubSeller.IInvert"
              }
            },
            "title": "The entity that performed the revision",
            "description": "The entity that performed the revision.\n\nRevision can be performed by both the administrator and the sales party."
          },
          "source_snapshot_id": {
            "type": "string",
            "format": "uuid",
            "title": "{@link IHubSaleAuditSnapshot.id} of the original snapshot to be reviewed",
            "description": "{@link IHubSaleAuditSnapshot.id} of the original snapshot to be reviewed.\n\nThe snapshot to be reviewed does not necessarily have to be the snapshot\nat the time of the start of the review. It is possible to review additional\nresults from another review, and it is also possible to go back to\na previous review and review again."
          },
          "emended_snapshot_id": {
            "type": "string",
            "format": "uuid",
            "description": "{@link IHubSaleAuditSnapshot.id} of the newly created snapshot as a result\nof the revision."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Reason for revision",
            "description": "Reason for revision.\n\nA proper description of why the revision was made and what was changed."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          }
        },
        "required": [
          "id",
          "emender",
          "source_snapshot_id",
          "emended_snapshot_id",
          "description",
          "created_at"
        ],
        "description": "Information on the revision of the listing review.\n\nThis exchange requires the review of {@link IHubSale listings} registered or\nmodified by {@link IHubSeller sellers} by {@link IHubAdministrator administrator}.\nDuring the review, the administrator and the seller can exchange\n{@link IHubSaleAuditComment comments} and revise and modify the listing.\n\nThis entity `IHubSaleAuditEmendation` is an entity that visualizes this\nrevision, and has information on which {@link IHubSaleSnapshot snapshot} the\nadministrator or seller revised, and what the newly created snapshot is\nas a result.\n\nThe revision target does not necessarily have to be the most recent snapshot,\nand in some cases, it is possible to roll back or branch by revising a previous\nsnapshot. Of course, the snapshot to be revised must be related to the\ncurrent audit, and revisions cannot be made to snapshots that have passed\nthe previous audit.\n\nIn addition, revisions can only be made while the audit is in progress,\nand once the audit is {@link IHubSaleAuditApproval approved}, no further\nrevisions are possible. However, if the administrator\n{@link IHubSaleAuditRejection rejected} the audit, the seller can revise\nand reinforce it themselves, and request a re-review from the administrator."
      },
      "IHubSaleAuditRejection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "administrator": {
            "$ref": "#/components/schemas/IHubAdministrator.IInvert",
            "title": "The administrator who rejected the review",
            "description": "The administrator who rejected the review."
          },
          "reversible": {
            "type": "boolean",
            "title": "Whether or not to reverse",
            "description": "Whether or not to reverse.\n\nWhether to confirm the current rejection and not to reverse it.\n\nHowever, this is only an expression of intent to the judge that the\ncurrent rejection is confirmed and that there will be no future reversal\nand approval. In reality, it is possible to express intent in this way and\nthen later reverse and approve it."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Date and time of rejection",
            "description": "Date and time of rejection."
          }
        },
        "required": [
          "id",
          "administrator",
          "reversible",
          "created_at"
        ],
        "description": "Rejection for listing snapshot review.\n\n`IHubSaleAuditRejection` is an entity that represents the history of\n{@link IHubAdministrator administrator} rejecting\n{@link IHubSaleAudit listing review}.\n\nNote that the administrator who\n{@link IHubSaleAudit.administrator initiated the review} and the administrator\nwho processes the rejection may be different people. Also, if\n{@link IHubSeller seller} requests a re-review in the comments, the administrator\ncan repeat the rejection process."
      },
      "IHubSaleAuditApproval": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "snapshot_id": {
            "type": "string",
            "format": "uuid",
            "title": "{@link IHubSaleSnapshot.id} of the snapshot to be approved",
            "description": "{@link IHubSaleSnapshot.id} of the snapshot to be approved."
          },
          "administrator": {
            "$ref": "#/components/schemas/IHubAdministrator.IInvert",
            "title": "Approving Administrator",
            "description": "Approving Administrator.\n\nThe approving administrator may be different from the\n{@link IHubSaleAudit.administrator initiating administrator} of\nthis audit."
          },
          "fee_ratio": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "title": "Commission rate",
            "description": "Commission rate.\n\nThe administrator approves the listing review and can set the commission rate.\n\nOf course, there is room for the rate to be fixed under the new policy."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Approval date and time",
            "description": "Approval date and time."
          }
        },
        "required": [
          "id",
          "snapshot_id",
          "administrator",
          "fee_ratio",
          "created_at"
        ],
        "description": "Approval for listing review.\n\n`IHubSaleAuditApproval` is an entity that embodies the action of\n{@link IHubAdministrator administrator} approving\n{@link IHubSaleAudit listing review}.\n\nNote that the administrator who initiated the `IHubSaleAudit` review\nand the administrator who processes the approval can be different people.\nAlso, it is possible to {@link IHubSaleAuditRejection reject} the review\nand then reverse and approve it. However, it is impossible to reverse and\nreject an already approved review.\n\nThis is because the listing is actually sold upon approval."
      },
      "IHubSaleAudit.ICreate": {
        "type": "object",
        "properties": {
          "format": {
            "oneOf": [
              {
                "const": "txt"
              },
              {
                "const": "html"
              },
              {
                "const": "md"
              }
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "title": {
            "type": "string",
            "title": "Title of article",
            "description": "Title of article."
          },
          "body": {
            "type": "string",
            "title": "Content body of article",
            "description": "Content body of article."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "required": [
          "format",
          "title",
          "body",
          "files"
        ],
        "description": "Enter information for the review article."
      },
      "IHubSaleAuditApproval.ICreate": {
        "type": "object",
        "properties": {
          "fee_ratio": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "title": "Commission rate",
            "description": "Commission rate.\n\nThe administrator approves the listing review and can set the\ncommission rate.\n\nOf course, there is room for the rate to be fixed under the new policy."
          },
          "snapshot_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "title": "{@link hub_sale_snapshots id} of the snapshots to be audited",
            "description": "{@link hub_sale_snapshots id} of the snapshots to be audited.\n\nWhen approving an audit, it is not necessary to only approve the last\n{@link IHubSaleAuditEmendation emendation}. In some cases, the original\nsnapshot or a previous emendation can be approved and\n{@link IHubSaleSnapshot.activated_at activated}."
          }
        },
        "required": [
          "fee_ratio",
          "snapshot_id"
        ],
        "description": "Input information for property review approval."
      },
      "IHubSaleAuditRejection.ICreate": {
        "type": "object",
        "properties": {
          "reversible": {
            "type": "boolean",
            "title": "Whether or not to reverse",
            "description": "Whether or not to reverse.\n\nWhether to confirm the current rejection and not to reverse it.\n\nHowever, this is only an expression of intent to the judge that\nthe current rejection is confirmed and that there will be no future reversal\nand approval. In reality, it is possible to express intent in this way and\nthen later reverse and approve it."
          }
        },
        "required": [
          "reversible"
        ],
        "description": "Enter information for rejection of review."
      },
      "IHubSaleAuditEmendation.ICreate": {
        "type": "object",
        "properties": {
          "source_snapshot_id": {
            "type": "string",
            "format": "uuid",
            "title": "{@link IHubSaleAuditSnapshot.id} of the original snapshot to be reviewed",
            "description": "{@link IHubSaleAuditSnapshot.id} of the original snapshot to be reviewed.\n\nThe snapshot to be reviewed does not necessarily have to be the snapshot\nat the time of the start of the review. It is possible to review additional\nresults from another review, and it is also possible to go back to a\nprevious review and review again."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Reason for revision",
            "description": "Reason for revision.\n\nA proper description of why the revision was made and what was changed."
          },
          "data": {
            "$ref": "#/components/schemas/IHubSaleSnapshot.ICreate"
          }
        },
        "required": [
          "source_snapshot_id",
          "description",
          "data"
        ],
        "description": "Input information for editing."
      },
      "IHubSaleSnapshot.ICreate": {
        "type": "object",
        "properties": {
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleChannel.ICreate"
            },
            "minItems": 1,
            "title": "Channel/Category List",
            "description": "Channel/Category List.\n\nA list of channels and categories in which this item is sold."
          },
          "contents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleContent.ICreate"
            },
            "minItems": 1,
            "title": "Content information",
            "description": "Content information.\n\nDescriptive information written by the seller when listing the item.\n\nIf you want to support multiple languages, just assign the multiple\nlanguage values to the `title`, `description`, and `summary`\nproperties.\n\nNote that, icons and attachment files must be composed separately.\nIts because the some icons or files may contain the prohibited\nsigns or symbols in the national or cultural level. If not and every icons\nand files in each language content are the same, just copy and paste\ntheir URL addresses."
          },
          "units": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IHubSaleUnit.ICreate.IReleaseUnitCreate"
                },
                {
                  "$ref": "#/components/schemas/IHubSaleUnit.ICreate.IAPIUnitCreate"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "workflow": "#/components/schemas/IHubSaleUnit.ICreate.IReleaseUnitCreate",
                  "api": "#/components/schemas/IHubSaleUnit.ICreate.IAPIUnitCreate"
                }
              }
            },
            "minItems": 1,
            "title": "Unit list",
            "description": "Unit list."
          },
          "version": {
            "type": "string",
            "title": "Version name",
            "description": "Version name.\n\nYou can set a different value than {@link ISwaggerInfo.version}.\n\nThat is, the version name in the server spec (Swagger document)\nand the version name in the snapshot can be different."
          }
        },
        "required": [
          "channels",
          "contents",
          "units",
          "version"
        ],
        "description": "Input information for the listing snapshot."
      },
      "IHubSaleChannel.ICreate": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "title": "{@link IHubChannel.code} of the target channel",
            "description": "{@link IHubChannel.code} of the target channel."
          },
          "category_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "uniqueItems": true,
            "title": "{@link IHubChannelCategory.id} list of target categories",
            "description": "{@link IHubChannelCategory.id} list of target categories.\n\nIf this attribute value is set to an empty array, the item will be\nin the \"Unclassified\" state for the category, and will be available\nfor sale in all categories of the channel it is affiliated with."
          }
        },
        "required": [
          "code",
          "category_ids"
        ],
        "description": "Enter information about the channel/category in which you will sell the item."
      },
      "IHubSaleContent.ICreate": {
        "type": "object",
        "properties": {
          "lang_code": {
            "type": "string",
            "title": "Language code",
            "description": "Language code."
          },
          "original": {
            "type": "boolean",
            "title": "Whether the language is original or not",
            "description": "Whether the language is original or not."
          },
          "title": {
            "type": "string",
            "title": "title",
            "description": "title."
          },
          "summary": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "description": "Summary Information"
          },
          "body": {
            "type": "string",
            "title": "Description information in the text",
            "description": "Description information in the text."
          },
          "version_description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Version Description",
            "description": "Version Description.\n\nYou can record information about the version description."
          },
          "format": {
            "oneOf": [
              {
                "const": "txt"
              },
              {
                "const": "html"
              },
              {
                "const": "md"
              }
            ],
            "title": "Body format",
            "description": "Body format."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "title": "A list of search tag values",
            "description": "A list of search tag values."
          },
          "icons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of representative product images",
            "description": "List of representative product images."
          },
          "thumbnails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "Product thumbnail",
            "description": "Product thumbnail."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachments",
            "description": "List of attachments."
          }
        },
        "required": [
          "title",
          "summary",
          "body",
          "version_description",
          "format",
          "tags",
          "icons",
          "thumbnails",
          "files"
        ],
        "description": "Create information of a content with language code.\n\nFor reference, attachment files like icons and images are belonged to this\n`IHubSaleContent` entity. It's because the attachment files may contain the\nprohibited signs or symbols in the national or cultural level. If not and\nevery icons and files in each language content are the same, just keep saving\nto this entity copying and pasting their URL addresses."
      },
      "IHubSaleUnit.ICreate.IReleaseUnitCreate": {
        "type": "object",
        "properties": {
          "type": {
            "const": "workflow",
            "title": "Identifier of the Discriminated Union type",
            "description": "Identifier of the Discriminated Union type."
          },
          "account_code": {
            "type": "string",
            "description": "{@link IStudioAccount.code} for that release"
          },
          "repository_code": {
            "type": "string",
            "description": "{@link IStudioRepository.code} for that release"
          },
          "release_id": {
            "type": "string",
            "format": "uuid",
            "description": "{@link IStudioRepositoryRelease.id} for release"
          },
          "name": {
            "type": "string",
            "title": "The representative name of the unit",
            "description": "The representative name of the unit."
          },
          "primary": {
            "type": "boolean",
            "title": "Whether it is a main unit or not",
            "description": "Whether it is a main unit or not.\n\nIt is a simple notational attribute, and has no meaning beyond labeling."
          },
          "required": {
            "type": "boolean",
            "title": "Whether this unit is mandatory",
            "description": "Whether this unit is mandatory.\n\nIf this unit is mandatory, the customer cannot purchase it\nwithout excluding it."
          },
          "options": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IHubSaleUnitDescriptiveOption.ICreate"
                },
                {
                  "$ref": "#/components/schemas/IHubSaleUnitSelectableOption.ICreate"
                }
              ]
            },
            "title": "List of options",
            "description": "List of options."
          },
          "stocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleUnitStock.ICreate"
            },
            "minItems": 1,
            "title": "Stock list",
            "description": "Stock list."
          },
          "parent_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "title": "{@link IHubSaleUnit.id} of the parent unit",
            "description": "{@link IHubSaleUnit.id} of the parent unit.\n\nCustomers who purchased the above unit can also use this unit.\n\nIf you modify the listing and leave this value as `null`,\nit means that you will no longer provide new APIs to customers\nwho purchased the previous version of the unit."
          }
        },
        "required": [
          "type",
          "account_code",
          "repository_code",
          "release_id",
          "name",
          "primary",
          "required",
          "options",
          "stocks",
          "parent_id"
        ],
        "description": "Input information for Workflow unit.\n\n{@link IHubSaleUnit.IReleaseUnitCreate.release_id} is\n{@link IStudioRepositoryRelease.id}, and if the release ID exists, there\nis a Swagger document in {@link IStudioRepositoryRelease.stock}, so you\nneed to get the Swagger of the release through\n{@link StudioRepositoryReleaseController.swagger}."
      },
      "IHubSaleUnitDescriptiveOption.ICreate": {
        "type": "object",
        "properties": {
          "type": {
            "oneOf": [
              {
                "const": "string"
              },
              {
                "const": "number"
              },
              {
                "const": "boolean"
              }
            ],
            "title": "The type of the descriptive option",
            "description": "The type of the descriptive option.\n\nWhat format should it be entered in?"
          },
          "name": {
            "type": "string",
            "title": "Representative name for descriptive options",
            "description": "Representative name for descriptive options."
          }
        },
        "required": [
          "type",
          "name"
        ],
        "description": "Input information for descriptive options."
      },
      "IHubSaleUnitSelectableOption.ICreate": {
        "type": "object",
        "properties": {
          "type": {
            "const": "select",
            "title": "Type of option",
            "description": "Type of option."
          },
          "name": {
            "type": "string",
            "title": "Representative name of the option",
            "description": "Representative name of the option."
          },
          "variable": {
            "type": "boolean",
            "title": "Variable",
            "description": "Variable.\n\nIf this attribute value is `true`, this option will change the\n{@link IHubSaleUnitStock final stock} that the customer purchases,\ndepending on what the customer selects as the\n{@link IHubSaleUnitOptionCandidate candidate value}.\n\nOn the other hand, if this value is `false`, whatever the customer selects\nas the {@link IHubSaleUnitOptionCandidate candidate value}, it will not\naffect the {@link IHubSaleUnitStock final stock}. It is just simple\ninformation for the seller to refer to."
          },
          "candidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleUnitOptionCandidate.ICreate"
            },
            "title": "List of candidate values",
            "description": "List of candidate values.\n\nA list of values that the customer can select for this option."
          }
        },
        "required": [
          "type",
          "name",
          "variable",
          "candidates"
        ]
      },
      "IHubSaleUnitOptionCandidate.ICreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Representative name of the candidate value",
            "description": "Representative name of the candidate value."
          }
        },
        "required": [
          "name"
        ],
        "description": "Candidate value input information."
      },
      "IHubSaleUnitStock.ICreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Representative name of the stock",
            "description": "Representative name of the stock."
          },
          "choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleUnitStockChoice.ICreate"
            },
            "title": "Selection information for this stock",
            "description": "Selection information for this stock.\n\nWhat options and candidate values are selected to make up the composition."
          },
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleUnitStockPrice.ICreate"
            },
            "title": "List of price information for this stock",
            "description": "List of price information for this stock.\n\nA step-wise fixed/variable cost pricing model is used."
          }
        },
        "required": [
          "name",
          "choices",
          "prices"
        ],
        "description": "Input information for stock."
      },
      "IHubSaleUnitStockChoice.ICreate": {
        "type": "object",
        "properties": {
          "option_index": {
            "type": "integer",
            "title": "Array index number of the attribute options",
            "description": "Array index number of the attribute options."
          },
          "candidate_index": {
            "type": "integer",
            "title": "The array index number of the candidate value for attribution",
            "description": "The array index number of the candidate value for attribution."
          }
        },
        "required": [
          "option_index",
          "candidate_index"
        ]
      },
      "IHubSaleUnitStockPrice.ICreate": {
        "type": "object",
        "properties": {
          "threshold": {
            "type": "integer",
            "title": "Threshold, fixed amount {@link fixed} number of free API calls you can make",
            "description": "Threshold, fixed amount {@link fixed} number of free API calls you can make."
          },
          "fixed": {
            "type": "number",
            "minimum": 0,
            "title": "Fixed costs",
            "description": "Fixed costs."
          },
          "variable": {
            "type": "number",
            "minimum": 0,
            "title": "Variable Fee",
            "description": "Variable Fee.\n\nA fee charged per API call that exceeds {@link threshold}."
          }
        },
        "required": [
          "threshold",
          "fixed",
          "variable"
        ],
        "description": "Reverse reference information for stock price information."
      },
      "IHubSaleUnit.ICreate.IAPIUnitCreate": {
        "type": "object",
        "properties": {
          "type": {
            "const": "api",
            "title": "Identifier of the Discriminated Union type",
            "description": "Identifier of the Discriminated Union type."
          },
          "host": {
            "$ref": "#/components/schemas/IHubSaleUnitHost",
            "title": "Host information",
            "description": "Host information."
          },
          "swagger": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwagger"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IDocument"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IDocument"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IDocument"
              }
            ],
            "title": "Swagger document data",
            "description": "Swagger document data."
          },
          "name": {
            "type": "string",
            "title": "The representative name of the unit",
            "description": "The representative name of the unit."
          },
          "primary": {
            "type": "boolean",
            "title": "Whether it is a main unit or not",
            "description": "Whether it is a main unit or not.\n\nIt is a simple notational attribute, and has no meaning beyond labeling."
          },
          "required": {
            "type": "boolean",
            "title": "Whether this unit is mandatory",
            "description": "Whether this unit is mandatory.\n\nIf this unit is mandatory, the customer cannot purchase it\nwithout excluding it."
          },
          "options": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IHubSaleUnitDescriptiveOption.ICreate"
                },
                {
                  "$ref": "#/components/schemas/IHubSaleUnitSelectableOption.ICreate"
                }
              ]
            },
            "title": "List of options",
            "description": "List of options."
          },
          "stocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleUnitStock.ICreate"
            },
            "minItems": 1,
            "title": "Stock list",
            "description": "Stock list."
          },
          "parent_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "title": "{@link IHubSaleUnit.id} of the parent unit",
            "description": "{@link IHubSaleUnit.id} of the parent unit.\n\nCustomers who purchased the above unit can also use this unit.\n\nIf you modify the listing and leave this value as `null`,\nit means that you will no longer provide new APIs to customers\nwho purchased the previous version of the unit."
          }
        },
        "required": [
          "type",
          "host",
          "swagger",
          "name",
          "primary",
          "required",
          "options",
          "stocks",
          "parent_id"
        ]
      },
      "IHubSaleUnitHost": {
        "type": "object",
        "properties": {
          "real": {
            "type": "string",
            "format": "uri",
            "title": "The address of the actual server",
            "description": "The address of the actual server."
          },
          "dev": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uri"
              }
            ],
            "title": "Address of the test server for development",
            "description": "Address of the test server for development."
          }
        },
        "required": [
          "real",
          "dev"
        ],
        "description": "Host information of the unit.\n\nHost connection information of the server that constitutes each listing unit.\n\nIf {@link IHubCustomer customer} searches this information, the address\nof the middleware API of this hub system is written. Conversely, if\n{@link IHubSeller sales party} or {@link IHubAdministrator administrator}\nsearches this information, the commercial server API address registered by\nthe seller is written."
      },
      "IPageIHubSaleInquiryComment": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleInquiryComment"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubSaleInquiryComment": {
        "type": "object",
        "properties": {
          "writer": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IHubCustomer"
              },
              {
                "$ref": "#/components/schemas/IHubSeller.IInvert"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "customer": "#/components/schemas/IHubCustomer",
                "seller": "#/components/schemas/IHubSeller.IInvert"
              }
            },
            "title": "The author of the query comment",
            "description": "The author of the query comment.\n\nCan be {@link IHubCustomer} or {@link IHubSeller.IInvert}"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "parent_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "title": "Parent comment's ID",
            "description": "Parent comment's ID."
          },
          "snapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IBbsArticleComment.ISnapshot"
            },
            "minItems": 1,
            "title": "List of snapshot contents",
            "description": "List of snapshot contents.\n\nIt is created for the first time when a comment being created, and is\naccumulated every time the comment is modified."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of comment",
            "description": "Creation time of comment."
          }
        },
        "required": [
          "writer",
          "id",
          "parent_id",
          "snapshots",
          "created_at"
        ],
        "description": "Comments on the question.\n\nComments on the question can be freely written by anyone,\neven if they are not a party to the question."
      },
      "IHubSaleInquiryComment.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IHubSaleInquiryComment.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-created_at"
                },
                {
                  "const": "+created_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Search query comments and page request information."
      },
      "IHubSaleInquiryComment.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "nickname": {
            "type": "string"
          },
          "body": {
            "type": "string"
          }
        }
      },
      "IPageIHubSaleQuestion.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleQuestion.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubSaleQuestion.ISummary": {
        "type": "object",
        "properties": {
          "type": {
            "const": "question"
          },
          "secret": {
            "type": "boolean"
          },
          "customer": {
            "$ref": "#/components/schemas/IHubCustomer",
            "title": "Customers who write inquiries",
            "description": "Customers who write inquiries."
          },
          "answer": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubSaleInquiryAnswer.ISummary"
              }
            ],
            "description": "Attribution answer\n\nNULL if no answer."
          },
          "read_by_seller": {
            "type": "boolean",
            "title": "Whether the seller has viewed the inquiry article",
            "description": "Whether the seller has viewed the inquiry article."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "title": {
            "type": "string",
            "title": "Title of the last snapshot",
            "description": "Title of the last snapshot."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the article",
            "description": "Creation time of the article."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Modification time of the article",
            "description": "Modification time of the article.\n\nIn other words, the time when the last snapshot was created."
          }
        },
        "required": [
          "type",
          "secret",
          "customer",
          "answer",
          "read_by_seller",
          "id",
          "title",
          "created_at",
          "updated_at"
        ],
        "description": "Summary of questions about the listing snapshot."
      },
      "IHubSaleInquiryAnswer.ISummary": {
        "type": "object",
        "properties": {
          "seller": {
            "$ref": "#/components/schemas/IHubSeller.IInvert"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "title": {
            "type": "string",
            "title": "Title of the last snapshot",
            "description": "Title of the last snapshot."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the article",
            "description": "Creation time of the article."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Modification time of the article",
            "description": "Modification time of the article.\n\nIn other words, the time when the last snapshot was created."
          }
        },
        "required": [
          "seller",
          "id",
          "title",
          "created_at",
          "updated_at"
        ],
        "description": "Summary information of the reply."
      },
      "IHubSaleQuestion.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IHubSaleInquiry.IRequest.ISearch",
            "title": "Search condition",
            "description": "Search condition."
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-created_at"
                },
                {
                  "const": "+created_at"
                },
                {
                  "const": "-nickname"
                },
                {
                  "const": "-updated_at"
                },
                {
                  "const": "-title"
                },
                {
                  "const": "+nickname"
                },
                {
                  "const": "+updated_at"
                },
                {
                  "const": "+title"
                },
                {
                  "const": "-answered_at"
                },
                {
                  "const": "+answered_at"
                }
              ]
            },
            "title": "Sort condition",
            "description": "Sort condition."
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        }
      },
      "IHubSaleInquiry.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "mobile": {
            "type": "string"
          },
          "nickname": {
            "type": "string"
          },
          "answered": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "boolean"
              }
            ],
            "title": "Whether or not there is a response",
            "description": "Whether or not there is a response.\n\n- `true`: Search only for questions that have been answered\n- `false`: Search only for questions that have not been answered\n- `null`: both of them"
          },
          "title": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "title_or_body": {
            "type": "string"
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IHubSaleQuestion": {
        "type": "object",
        "properties": {
          "secret": {
            "type": "boolean",
            "title": "Whether the question is a secret article",
            "description": "Whether the question is a secret article."
          },
          "type": {
            "const": "question",
            "description": "Type of question article"
          },
          "customer": {
            "$ref": "#/components/schemas/IHubCustomer",
            "title": "Customer of the query article",
            "description": "Customer of the query article.\n\n{@link IHubCustomer}"
          },
          "answer": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubSaleInquiryAnswer"
              }
            ],
            "title": "Author of the question article answer",
            "description": "Author of the question article answer.\n\nNULL if no answer was written.\n\n{@link IHubSaleInquiryAnswer}"
          },
          "read_by_seller": {
            "type": "boolean",
            "title": "Whether the seller has viewed the inquiry article",
            "description": "Whether the seller has viewed the inquiry article."
          },
          "like_count": {
            "type": "number",
            "minimum": 0,
            "title": "Number of likes for this question",
            "description": "Number of likes for this question."
          },
          "liked_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "I like the question time",
            "description": "I like the question time."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "snapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IBbsArticle.ISnapshot"
            },
            "minItems": 1,
            "title": "List of snapshot contents",
            "description": "List of snapshot contents.\n\nIt is created for the first time when an article is created, and is\naccumulated every time the article is modified."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of article",
            "description": "Creation time of article."
          }
        },
        "required": [
          "secret",
          "type",
          "customer",
          "answer",
          "read_by_seller",
          "like_count",
          "liked_at",
          "id",
          "snapshots",
          "created_at"
        ],
        "description": "Questions about listing snapshots.\n\n{@link IHubSaleQuestion} is a subtype entity of {@link IHubSaleInquiry},\nused when a customer wants to ask something about a listing\n(a snapshot at that time) that a seller has registered.\n\nAnd like most exchanges, {@link IHubSaleQuestion} also provides a secret\nproperty, which allows you to write a \"secret\" question that can only be\nviewed by the customer who wrote the question and the seller."
      },
      "IHubSaleInquiryAnswer": {
        "type": "object",
        "properties": {
          "seller": {
            "$ref": "#/components/schemas/IHubSeller.IInvert",
            "title": "Author of the answer",
            "description": "Author of the answer."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "snapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IBbsArticle.ISnapshot"
            },
            "minItems": 1,
            "title": "List of snapshot contents",
            "description": "List of snapshot contents.\n\nIt is created for the first time when an article is created, and is\naccumulated every time the article is modified."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of article",
            "description": "Creation time of article."
          }
        },
        "required": [
          "seller",
          "id",
          "snapshots",
          "created_at"
        ],
        "description": "Answer to the inquiry in the listing snapshot.\n\n{@link IHubSaleInquiryAnswer} is an entity that embodies the official\nanswer written by the seller to the inquiry written by the customer.\nOf course, in addition to writing an official answer like this, the seller\ncan also communicate with the questioner and multiple customers through\ncomments in the attributed inquiry.\n\nComments cannot be written on the answer. You should encourage comments\nto be written on the inquiry."
      },
      "IPageIHubSaleReview.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleReview.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubSaleReview.ISummary": {
        "type": "object",
        "properties": {
          "type": {
            "const": "review"
          },
          "score": {
            "type": "number"
          },
          "customer": {
            "$ref": "#/components/schemas/IHubCustomer",
            "title": "Customers who write inquiries",
            "description": "Customers who write inquiries."
          },
          "answer": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubSaleInquiryAnswer.ISummary"
              }
            ],
            "description": "Attribution answer\n\nNULL if no answer."
          },
          "read_by_seller": {
            "type": "boolean",
            "title": "Whether the seller has viewed the inquiry article",
            "description": "Whether the seller has viewed the inquiry article."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "title": {
            "type": "string",
            "title": "Title of the last snapshot",
            "description": "Title of the last snapshot."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the article",
            "description": "Creation time of the article."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Modification time of the article",
            "description": "Modification time of the article.\n\nIn other words, the time when the last snapshot was created."
          }
        },
        "required": [
          "type",
          "score",
          "customer",
          "answer",
          "read_by_seller",
          "id",
          "title",
          "created_at",
          "updated_at"
        ],
        "description": "Summary of reviews for the listing snapshot."
      },
      "IHubSaleReview.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IHubSaleReview.IRequest.ISearch",
            "title": "Search condition",
            "description": "Search condition."
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-created_at"
                },
                {
                  "const": "+created_at"
                },
                {
                  "const": "-nickname"
                },
                {
                  "const": "-updated_at"
                },
                {
                  "const": "-title"
                },
                {
                  "const": "+nickname"
                },
                {
                  "const": "+updated_at"
                },
                {
                  "const": "+title"
                },
                {
                  "const": "-score"
                },
                {
                  "const": "-answered_at"
                },
                {
                  "const": "+score"
                },
                {
                  "const": "+answered_at"
                }
              ]
            },
            "title": "Sort condition",
            "description": "Sort condition."
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Information on requesting reviews for a listing snapshot."
      },
      "IHubSaleReview.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "mobile": {
            "type": "string"
          },
          "nickname": {
            "type": "string"
          },
          "answered": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "boolean"
              }
            ],
            "title": "Whether or not there is a response",
            "description": "Whether or not there is a response.\n\n- `true`: Search only for questions that have been answered\n- `false`: Search only for questions that have not been answered\n- `null`: both of them"
          },
          "title": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "title_or_body": {
            "type": "string"
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          },
          "minimum": {
            "type": "number",
            "minimum": 0,
            "maximum": 100
          },
          "maximum": {
            "type": "number",
            "minimum": 0,
            "maximum": 100
          }
        }
      },
      "IHubSaleReview": {
        "type": "object",
        "properties": {
          "type": {
            "const": "review",
            "description": "Type of question article"
          },
          "customer": {
            "$ref": "#/components/schemas/IHubCustomer",
            "title": "Customer of the query article",
            "description": "Customer of the query article.\n\n{@link IHubCustomer}"
          },
          "answer": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubSaleInquiryAnswer"
              }
            ],
            "title": "Author of the question article answer",
            "description": "Author of the question article answer.\n\nNULL if no answer was written.\n\n{@link IHubSaleInquiryAnswer}"
          },
          "read_by_seller": {
            "type": "boolean",
            "title": "Whether the seller has viewed the inquiry article",
            "description": "Whether the seller has viewed the inquiry article."
          },
          "like_count": {
            "type": "number",
            "minimum": 0,
            "title": "Number of likes for this question",
            "description": "Number of likes for this question."
          },
          "liked_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "I like the question time",
            "description": "I like the question time."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "snapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleReview.ISnapshot"
            },
            "minItems": 1,
            "title": "List of snapshot contents",
            "description": "List of snapshot contents.\n\nIt is created for the first time when an article is created, and is\naccumulated every time the article is modified."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of article",
            "description": "Creation time of article."
          }
        },
        "required": [
          "type",
          "customer",
          "answer",
          "read_by_seller",
          "like_count",
          "liked_at",
          "id",
          "snapshots",
          "created_at"
        ],
        "description": "Reviews for listing snapshots.\n\n{@link IHubSaleReview} is a subtype entity of {@link IHubSaleInquiry}, and is\nused when a customer purchases a listing (a snapshot at that time) registered\nby a seller as a product and wants to leave a review and evaluation for it.\n\nNote that {@link IHubSaleReview} and {@link IHubOrderGood} are algebraically\nN:1, but that does not mean that a customer can continue to write reviews\nfor the same product indefinitely."
      },
      "IHubSaleReview.ISnapshot": {
        "type": "object",
        "properties": {
          "score": {
            "type": "number",
            "minimum": 0,
            "maximum": 100,
            "description": "Review Rating Score"
          },
          "id": {
            "type": "string",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of snapshot record",
            "description": "Creation time of snapshot record.\n\nIn other words, creation time or update time or article."
          },
          "format": {
            "oneOf": [
              {
                "const": "txt"
              },
              {
                "const": "html"
              },
              {
                "const": "md"
              }
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "title": {
            "type": "string",
            "title": "Title of article",
            "description": "Title of article."
          },
          "body": {
            "type": "string",
            "title": "Content body of article",
            "description": "Content body of article."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "required": [
          "score",
          "id",
          "created_at",
          "format",
          "title",
          "body",
          "files"
        ]
      },
      "IPageIHubSale.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSale.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubSale.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IHubSale.IRequest.ISearch",
            "title": "Search information",
            "description": "Search information."
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-seller.created_at"
                },
                {
                  "const": "-seller.goods.payments.real"
                },
                {
                  "const": "-seller.goods.published_count"
                },
                {
                  "const": "-seller.reviews.average"
                },
                {
                  "const": "-seller.reviews.count"
                },
                {
                  "const": "-goods.publish_count"
                },
                {
                  "const": "-goods.payments"
                },
                {
                  "const": "-reviews.average"
                },
                {
                  "const": "-reviews.count"
                },
                {
                  "const": "-sale.created_at"
                },
                {
                  "const": "-sale.opened_at"
                },
                {
                  "const": "-sale.closed_at"
                },
                {
                  "const": "-sale.view_count"
                },
                {
                  "const": "+seller.created_at"
                },
                {
                  "const": "+seller.goods.payments.real"
                },
                {
                  "const": "+seller.goods.published_count"
                },
                {
                  "const": "+seller.reviews.average"
                },
                {
                  "const": "+seller.reviews.count"
                },
                {
                  "const": "+goods.publish_count"
                },
                {
                  "const": "+goods.payments"
                },
                {
                  "const": "+reviews.average"
                },
                {
                  "const": "+reviews.count"
                },
                {
                  "const": "+sale.created_at"
                },
                {
                  "const": "+sale.opened_at"
                },
                {
                  "const": "+sale.closed_at"
                },
                {
                  "const": "+sale.view_count"
                }
              ]
            },
            "title": "Sort criteria",
            "description": "Sort criteria."
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Information about property searches and page requests."
      },
      "IHubSale": {
        "type": "object",
        "properties": {
          "section": {
            "$ref": "#/components/schemas/IHubSection",
            "title": "Section of Attribution",
            "description": "Section of Attribution.\n\nIn which section is this listing sold?"
          },
          "seller": {
            "$ref": "#/components/schemas/IHubSeller.IInvert",
            "title": "The seller who listed the item",
            "description": "The seller who listed the item."
          },
          "audit": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubSaleAudit.IInvert"
              }
            ],
            "title": "Audit information",
            "description": "Audit information.\n\nIf this value is `null` or the internal attribute value\n{@link IHubSaleAudit.approved_at} is `null`, the customer cannot view or\nbrowse/purchase it at all. Only the seller and the administrator are aware\nof the existence of the listing."
          },
          "bookmarked_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "The point in time when you added it to your bookmarks",
            "description": "The point in time when you added it to your bookmarks."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "The ID of the property",
            "description": "The ID of the property."
          },
          "snapshot_id": {
            "type": "string",
            "format": "uuid",
            "title": "The ID of the snapshot",
            "description": "The ID of the snapshot."
          },
          "latest": {
            "type": "boolean",
            "title": "Last snapshot",
            "description": "Last snapshot.\n\nIs this snapshot the last snapshot of the property?\n\nHowever, the criteria for \"last\" vary depending on the perspective of\nthe user viewing this property.\n\n- Customer perspective: The most recently approved property\n- Seller/Administrator: The most recently created property"
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleChannel"
            },
            "title": "Channel/Category List",
            "description": "Channel/Category List.\n\nA list of channels and categories in which this item is sold."
          },
          "aggregate": {
            "$ref": "#/components/schemas/IHubSaleAggregate",
            "title": "Aggregate/performance information for this listing (or snapshot)",
            "description": "Aggregate/performance information for this listing (or snapshot)."
          },
          "content": {
            "$ref": "#/components/schemas/IHubSaleContent",
            "title": "Content information",
            "description": "Content information.\n\nDescriptive information including the language code.\n\nIf you want to see other language written contents, call the below API function.\n\n- {@link HubApi.functional.hub.customers.sales.contents}\n- {@link HubApi.functional.hub.customers.sales.snapshots.contents}"
          },
          "units": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleUnit"
            },
            "minItems": 1,
            "title": "Unit List",
            "description": "Unit List.\n\nA record representing the products currently being sold, containing\ninformation about the {@link IHubSaleUnitOption options} that can be\nset for each product, and the {@link IHubSaleUnitStock stock} that\ncan be configured by selecting options."
          },
          "version": {
            "type": "string",
            "title": "Version name",
            "description": "Version name.\n\nYou can set a different value than {@link ISwaggerInfo.version}.\n\nThat is, the version name in the server spec (Swagger document) and\nthe version name in the product may be different."
          },
          "activated_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Activation time of the snapshot",
            "description": "Activation time of the snapshot.\n\nThe time this snapshot was first activated after it was approved for review."
          },
          "expired_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "The time when the APIs of the current listing (snapshot) are stopped",
            "description": "The time when the APIs of the current listing (snapshot) are stopped.\n\nSince the transaction target is an API, the seller should not\nimmediately delete the listing just because it has stopped selling.\nIt should guarantee a minimum period of use, so that customers using\nthe API will respond to this.\n\nTherefore, when the listing is stopped, it is made to disappear after\na certain grace period.\n\nOf course, if it is a listing that has never been sold, it does not apply."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          },
          "paused_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Temporary suspension of sales",
            "description": "Temporary suspension of sales.\n\nThe seller has temporarily suspended API sales for some reason.\n\nCustomers can still view the listing on the listing and details page,\nbut the listing will be labeled as \"This listing is suspended by the\nseller.\""
          },
          "suspended_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Temporary suspension of sales",
            "description": "Temporary suspension of sales.\n\nThe seller has suspended sales for some reason.\n\nCustomers will not be able to view the listing or details page at all.\nAt first glance, it looks similar to a soft delete, but the difference is\nthat the seller and the administrator can still view it, and the sale can\nbe resumed at any time.\n\nAlso, even if the seller has suspended, previous buyers of the listing\ncan still use the API. The time of suspension of the API can be found in\nthe {@link IHubSaleSnapshot.expired_at} property."
          },
          "opened_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Sales start date",
            "description": "Sales start date."
          },
          "closed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "The sale end date",
            "description": "The sale end date.\n\nIf this value is NULL, the sale will continue forever."
          }
        },
        "required": [
          "section",
          "seller",
          "audit",
          "bookmarked_at",
          "id",
          "snapshot_id",
          "latest",
          "channels",
          "aggregate",
          "content",
          "units",
          "version",
          "activated_at",
          "expired_at",
          "created_at",
          "paused_at",
          "suspended_at",
          "opened_at",
          "closed_at"
        ],
        "description": "Listing information.\n\n`IHubSale` is an entity that embodies the \"API product sales (sales)\"\ninformation registered by {@link IHubSeller seller}.\n\nAnd the main information of the listing is recorded in the subordinate\n{@link IHubSaleSnapshot}, not this entity. Therefore, when a seller edits a\nlisting that has already been registered, the existing `IHubSale` record\nis not changed, but a new {@link IHubSaleSnapshot} record is created. This is\nto preserve the customer's purchase history at the time, even if the seller\nchanges the {@link IHubSaleUnitStock components} or\n{@link IHubSaleUnitStockPrice price} of a specific listing after\n{@link IHubOrderGood customer} purchased it. In addition, it is to support\nthe seller to perform so-called A/B tests, which measure the performance of\neach case by changing the components or prices, etc.\n\nAnd considering the case of bundled products or options, the product information\nis connected to the entities below. Since the structure of these is quite\ncomplicated, please read the descriptions written in this `IHubSale` and the\nentities below carefully.\n\n- {@link IHubSaleSnapshot}\n- {@link IHubSaleUnit}\n- {@link IHubSaleUnitOption}\n- {@link IHubSaleUnitOptionCandidate}\n- {@link IHubSaleUnitStock}\n\nIn addition, regarding the Swagger (OpenAPI) Documents, which are the sales\ntarget of this `IHubSale`, please read the documents below carefully to make\nsure you understand the composition principles.\n\n- {@link IHubSaleUnitSwagger}\n- {@link IHubSaleUnitHost}\n- {@link IHubSaleUnitRoute}\n- {@link ISwagger}\n- {@link ISwaggerInfo}\n- {@link ISwaggerOperation}\n- {@link ISwaggerComponents}\n- {@link ISwaggerSchema}\n- {@link ISwaggerSecurityScheme}"
      },
      "IHubSaleContent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "lang_code": {
            "type": "string",
            "title": "Language code",
            "description": "Language code."
          },
          "original": {
            "type": "boolean",
            "title": "Whether the language is original or not",
            "description": "Whether the language is original or not."
          },
          "title": {
            "type": "string",
            "title": "title",
            "description": "title."
          },
          "summary": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "description": "Summary Information"
          },
          "body": {
            "type": "string",
            "title": "Description information in the text",
            "description": "Description information in the text."
          },
          "version_description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Version Description",
            "description": "Version Description.\n\nYou can record information about the version description."
          },
          "format": {
            "oneOf": [
              {
                "const": "txt"
              },
              {
                "const": "html"
              },
              {
                "const": "md"
              }
            ],
            "title": "Body format",
            "description": "Body format."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "A list of search tag values",
            "description": "A list of search tag values."
          },
          "icons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile"
            },
            "title": "List of product representative icons",
            "description": "List of product representative icons."
          },
          "thumbnails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile"
            },
            "title": "Product thumbnail",
            "description": "Product thumbnail."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile"
            },
            "title": "List of attachments",
            "description": "List of attachments."
          }
        },
        "required": [
          "id",
          "lang_code",
          "original",
          "title",
          "summary",
          "body",
          "version_description",
          "format",
          "tags",
          "icons",
          "thumbnails",
          "files"
        ],
        "description": "Content information of the listing.\n\n`IHubSaleContent` is an entity that visualizes the main content of\nthe listing including the language code. In other words, the `IHubSaleContent`\nrecords can be multiple in one {@link IHubSaleSnapshot}, and each record\nrepresents the content of the {@link IHubSaleSnapshot} record, in a different\nlanguage.\n\nFor reference, attachment files like icons and images are belonged to this\n`IHubSaleContent` entity. It's because the attachment files may contain the\nprohibited signs or symbols in the national or cultural level. If every icons\nand files in each language content are the same, just keep saving to this entity\ncopying and pasting their URL addresses."
      },
      "IHubSaleUnit": {
        "type": "object",
        "properties": {
          "release": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IStudioRepositoryRelease.IForSale"
              }
            ],
            "title": "Reverse reference information for the release",
            "description": "Reverse reference information for the release."
          },
          "options": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IHubSaleUnitSelectableOption"
                },
                {
                  "$ref": "#/components/schemas/IHubSaleUnitDescriptiveOption"
                }
              ]
            },
            "title": "List of options",
            "description": "List of options."
          },
          "stocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleUnitStock"
            },
            "minItems": 1,
            "title": "Stock list",
            "description": "Stock list."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "name": {
            "type": "string",
            "title": "The representative name of the unit",
            "description": "The representative name of the unit."
          },
          "primary": {
            "type": "boolean",
            "title": "Whether it is a main unit or not",
            "description": "Whether it is a main unit or not.\n\nIt is a simple notational attribute, and has no meaning beyond labeling."
          },
          "required": {
            "type": "boolean",
            "title": "Whether this unit is mandatory",
            "description": "Whether this unit is mandatory.\n\nIf this unit is mandatory, the customer cannot purchase it without\nexcluding it."
          },
          "purposes": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "const": "app"
                    },
                    {
                      "const": "agent"
                    }
                  ]
                },
                "uniqueItems": true
              }
            ],
            "title": "Purpose of extracting released units",
            "description": "Purpose of extracting released units.\n\nRefer to {@link IStudioRepositoryReleaseNode.Purpose}."
          },
          "connector_icons": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uri"
                },
                "uniqueItems": true
              }
            ],
            "title": "List of connector icons",
            "description": "List of connector icons.\n\nThe connector icon represents the icons of external services that\nthis property is linked to."
          },
          "migrated": {
            "type": "boolean",
            "title": "Whether the tool has been transferred from Studio v1.0",
            "description": "Whether the tool has been transferred from Studio v1.0."
          }
        },
        "required": [
          "release",
          "options",
          "stocks",
          "id",
          "name",
          "primary",
          "required",
          "purposes",
          "connector_icons",
          "migrated"
        ],
        "description": "Information on individual units of a listing.\n\n`IHubSaleUnit` is an entity that embodies the \"individual product\"\ninformation handled by a listing. And the \"individual product\" mentioned here\nis a concept corresponding to an individual server unit in the hub system,\nthat is, a Swagger document.\n\nAs a side note, the reason why `IHubSaleUnit` is separated from\n{@link IHubSaleSnapshot} in a 1: N logarithmic relationship is because there\nare often cases where multiple products are sold from a single listing. This is\nthe case with the so-called \"bundled products\".\n\n- Bundled products in general products (laptop set)\n  - Body\n  - Keyboard\n  - Mouse\n  - Apple Care (free A/S rights)\n- Bundled products in hub system (writer AI set)\n  - Writing server\n  - Image creation server\n  - Logo/cover creation server\n\nAnd `IHubSaleUnit` does not mean the {@link IHubSaleUnitStock final stock}\nthat {@link IHubCustomer customer} will purchase in itself. The final stock\nis something that can be met only after selecting all of the given\n{@link IHubSaleUnitOption options} and its\n{@link IHubSaleUnitOptionCandidate candidate values}.\n\nFor example, even if you buy a laptop, the final stock is determined\nonly after selecting all of the options (CPU / RAM / SSD) in it."
      },
      "IHubSaleUnitSelectableOption": {
        "type": "object",
        "properties": {
          "candidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleUnitOptionCandidate"
            },
            "title": "List of candidate values",
            "description": "List of candidate values.\n\nA list of values that the customer can select for this option."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "name": {
            "type": "string",
            "title": "Representative name of the option",
            "description": "Representative name of the option."
          },
          "type": {
            "const": "select",
            "title": "Type of option",
            "description": "Type of option."
          },
          "variable": {
            "type": "boolean",
            "title": "Variable",
            "description": "Variable.\n\nIf this attribute value is `true`, this option will change the\n{@link IHubSaleUnitStock final stock} that the customer purchases,\ndepending on what the customer selects as the\n{@link IHubSaleUnitOptionCandidate candidate value}.\n\nOn the other hand, if this value is `false`, whatever the customer selects\nas the {@link IHubSaleUnitOptionCandidate candidate value}, it will not\naffect the {@link IHubSaleUnitStock final stock}. It is just simple\ninformation for the seller to refer to."
          }
        },
        "required": [
          "candidates",
          "id",
          "name",
          "type",
          "variable"
        ],
        "description": "Information on individual selectable options in the listing unit.\n\n`IHubSaleUnitSelectableOption` is a sub-entity of {@link IHubSaleUnit}\nthat visualizes individual products in the listing, and is an entity\ndesigned to visualize individual **selectable** option information of the unit.\n\n- Examples of selectable options\n- Computer performance: CPU, GPU, RAM, etc.\n- Image generation AI: Rendering quality, license type, theme, etc.\n\nAnd if the attribute value {@link IHubSaleUnitSelectableOption.variable}\nof this entity is `true`, this means that the {@link IHubSaleUnitStock final stock}\nto be purchased will vary depending on which\n{@link IHubSaleUnitOptionCandidate candidate value} the customer selects\nin this option.\n\nConversely, if the above value is `false`, then whatever\n{@link IHubSaleUnitOptionCandidate candidate value} the customer selects\nfrom the options seen will not affect the {@link IHubSaleUnitStock final stock}\nthat the customer will purchase. It is just simple information that the seller\nwill use for reference only."
      },
      "IHubSaleUnitDescriptiveOption": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "oneOf": [
              {
                "const": "string"
              },
              {
                "const": "number"
              },
              {
                "const": "boolean"
              }
            ],
            "title": "The type of the descriptive option",
            "description": "The type of the descriptive option.\n\nWhat format should it be entered in?"
          },
          "name": {
            "type": "string",
            "title": "Representative name for descriptive options",
            "description": "Representative name for descriptive options."
          }
        },
        "required": [
          "id",
          "type",
          "name"
        ],
        "description": "Descriptive Option.\n\n{@link IHubSaleUnitOption option} registered in\n{@link IHubSaleUnit listing unit} is descriptive,\n\nso whatever the customer writes about it has no effect on\n{@link IHubSaleUnitStock final stock}.\n\nThis information is only for reference by the seller."
      },
      "IHubSaleUnitStock": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "name": {
            "type": "string",
            "title": "Representative name of the stock",
            "description": "Representative name of the stock."
          },
          "choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleUnitStockChoice"
            },
            "title": "Selection information for this stock",
            "description": "Selection information for this stock.\n\nWhat options and candidate values are selected to make up the composition."
          },
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleUnitStockPrice"
            },
            "minItems": 1,
            "title": "List of price information for this stock",
            "description": "List of price information for this stock.\n\nA step-wise fixed/variable cost pricing model is used."
          }
        },
        "required": [
          "id",
          "name",
          "choices",
          "prices"
        ],
        "description": "The final stock information in the listing unit.\n\n`IHubSaleUnitStock` is a sub-entity of {@link IHubSaleUnit} that represents\nthe individual product catalog within the listing, and is a kind of final\nstock that is composed by selecting all of the\n{@link IHubSaleUnitSelectableOption.variable options (variable \"select\" type)}\nand their {@link IHubSAleUnitOptionCandidate candidate values} within the\nbelonging unit.\n\nIt is the \"goods\" themselves that the customer actually purchases.\n\n- Unit name) MacBook body\n- Options\n  - CPU: { i3, i5, i7, i9 }\n  - RAM: { 8GB, 16GB, 32GB, 64GB, 96GB }\n  - SSD: { 256GB, 512GB, 1TB }\n- Final number of stocks: 4 * 5 * 3 = 60\n\nFor reference, the total number of `IHubSaleUnitStock` records in the belonging\nunit can be obtained by Cartesian Sale. That is, the product of all the candidate\nvalues that each (variable \"select\" type) option can have is the total number of\nfinal stocks in the unit. Of course, if there is not a single variable \"select\"\ntype option, the final number of stocks in the unit is only 1."
      },
      "IHubSaleUnitStockChoice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "option_id": {
            "type": "string",
            "format": "uuid",
            "title": "{@link IHubSaleUnitOption.id} of the attribution option",
            "description": "{@link IHubSaleUnitOption.id} of the attribution option."
          },
          "candidate_id": {
            "type": "string",
            "format": "uuid",
            "title": "{@link IHubSaleUnitOptionCandidate.id} of the candidate value",
            "description": "{@link IHubSaleUnitOptionCandidate.id} of the candidate value."
          }
        },
        "required": [
          "id",
          "option_id",
          "candidate_id"
        ],
        "description": "Selection information for the final stock.\n\n`IHubSaleUnitStockChoice` is an entity that visualizes which\n{@link IHubSaleUnitStock stock} has selected for each\n{@link IHubSaleUnitSelectableOption.variable variable select type option},\nand which {@link IHubSaleUnitOptionCandidate candidate value} has been\nselected within it.\n\nOf course, if the attributed unit does not have any options, this entity\ncan also be ignored."
      },
      "IHubSaleUnitStockPrice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "threshold": {
            "type": "integer",
            "title": "Threshold, fixed amount {@link fixed} number of free API calls you can make",
            "description": "Threshold, fixed amount {@link fixed} number of free API calls you can make."
          },
          "fixed": {
            "type": "number",
            "minimum": 0,
            "title": "Fixed costs",
            "description": "Fixed costs."
          },
          "variable": {
            "type": "number",
            "minimum": 0,
            "title": "Variable Fee",
            "description": "Variable Fee.\n\nA fee charged per API call that exceeds {@link threshold}."
          }
        },
        "required": [
          "id",
          "threshold",
          "fixed",
          "variable"
        ],
        "description": "Stock price information.\n\n`IHubSaleUnitStockPrice` is an entity that visualizes the step\nprice information of stock. And the step price mentioned here means that\neach includes both fixed and variable costs, and there are multiple\nsuch sections.\n\nYou can easily understand what step price information is by looking\nat the example below.\n\n- Fixed cost 50,000 won, free up to 1,000 APIs, 100 won per excess\n- Fixed cost 100,000 won, free up to 2,500 APIs, 75 won per excess\n- Fixed cost 150,000 won, free up to 4,000 APIs, 50 won per excess"
      },
      "IPageIHubSaleSnapshot.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleSnapshot.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubSaleSnapshot.ISummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "The ID of the property",
            "description": "The ID of the property."
          },
          "snapshot_id": {
            "type": "string",
            "format": "uuid",
            "title": "The ID of the snapshot",
            "description": "The ID of the snapshot."
          },
          "latest": {
            "type": "boolean",
            "title": "Last snapshot",
            "description": "Last snapshot.\n\nIs this snapshot the last snapshot of the property?\n\nHowever, the criteria for \"last\" vary depending on the perspective of\nthe user viewing this property.\n\n- Customer perspective: The most recently approved property\n- Seller/Administrator: The most recently created property"
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleChannel"
            },
            "title": "Channel/Category List",
            "description": "Channel/Category List.\n\nA list of channels and categories in which this item is sold."
          },
          "aggregate": {
            "$ref": "#/components/schemas/IHubSaleAggregate",
            "title": "Aggregate/performance information for this listing (or snapshot)",
            "description": "Aggregate/performance information for this listing (or snapshot)."
          },
          "content": {
            "$ref": "#/components/schemas/IHubSaleContent.IInvert",
            "title": "Content information",
            "description": "Content information.\n\nDescriptive information including the language code.\n\nIf you want to see other language written contents, call the below API function.\n\n- {@link HubApi.functional.hub.customers.sales.contents}\n- {@link HubApi.functional.hub.customers.sales.snapshots.contents}"
          },
          "units": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleUnit.ISummary"
            },
            "minItems": 1,
            "title": "Unit List",
            "description": "Unit List.\n\nA record representing the products currently being sold, containing\ninformation about the {@link IHubSaleUnitOption options} that can be\nset for each product, and the {@link IHubSaleUnitStock stock} that\ncan be configured by selecting options."
          },
          "version": {
            "type": "string",
            "title": "Version name",
            "description": "Version name.\n\nYou can set a different value than {@link ISwaggerInfo.version}.\n\nThat is, the version name in the server spec (Swagger document) and\nthe version name in the product may be different."
          },
          "activated_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Activation time of the snapshot",
            "description": "Activation time of the snapshot.\n\nThe time this snapshot was first activated after it was approved for review."
          },
          "expired_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "The time when the APIs of the current listing (snapshot) are stopped",
            "description": "The time when the APIs of the current listing (snapshot) are stopped.\n\nSince the transaction target is an API, the seller should not\nimmediately delete the listing just because it has stopped selling.\nIt should guarantee a minimum period of use, so that customers using\nthe API will respond to this.\n\nTherefore, when the listing is stopped, it is made to disappear after\na certain grace period.\n\nOf course, if it is a listing that has never been sold, it does not apply."
          }
        },
        "required": [
          "id",
          "snapshot_id",
          "latest",
          "channels",
          "aggregate",
          "content",
          "units",
          "version",
          "activated_at",
          "expired_at"
        ],
        "description": "Summary information of the listing snapshot."
      },
      "IHubSaleSnapshot": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "The ID of the property",
            "description": "The ID of the property."
          },
          "snapshot_id": {
            "type": "string",
            "format": "uuid",
            "title": "The ID of the snapshot",
            "description": "The ID of the snapshot."
          },
          "latest": {
            "type": "boolean",
            "title": "Last snapshot",
            "description": "Last snapshot.\n\nIs this snapshot the last snapshot of the property?\n\nHowever, the criteria for \"last\" vary depending on the perspective of\nthe user viewing this property.\n\n- Customer perspective: The most recently approved property\n- Seller/Administrator: The most recently created property"
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleChannel"
            },
            "title": "Channel/Category List",
            "description": "Channel/Category List.\n\nA list of channels and categories in which this item is sold."
          },
          "aggregate": {
            "$ref": "#/components/schemas/IHubSaleAggregate",
            "title": "Aggregate/performance information for this listing (or snapshot)",
            "description": "Aggregate/performance information for this listing (or snapshot)."
          },
          "content": {
            "$ref": "#/components/schemas/IHubSaleContent",
            "title": "Content information",
            "description": "Content information.\n\nDescriptive information including the language code.\n\nIf you want to see other language written contents, call the below API function.\n\n- {@link HubApi.functional.hub.customers.sales.contents}\n- {@link HubApi.functional.hub.customers.sales.snapshots.contents}"
          },
          "units": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleUnit"
            },
            "minItems": 1,
            "title": "Unit List",
            "description": "Unit List.\n\nA record representing the products currently being sold, containing\ninformation about the {@link IHubSaleUnitOption options} that can be\nset for each product, and the {@link IHubSaleUnitStock stock} that\ncan be configured by selecting options."
          },
          "version": {
            "type": "string",
            "title": "Version name",
            "description": "Version name.\n\nYou can set a different value than {@link ISwaggerInfo.version}.\n\nThat is, the version name in the server spec (Swagger document) and\nthe version name in the product may be different."
          },
          "activated_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Activation time of the snapshot",
            "description": "Activation time of the snapshot.\n\nThe time this snapshot was first activated after it was approved for review."
          },
          "expired_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "The time when the APIs of the current listing (snapshot) are stopped",
            "description": "The time when the APIs of the current listing (snapshot) are stopped.\n\nSince the transaction target is an API, the seller should not\nimmediately delete the listing just because it has stopped selling.\nIt should guarantee a minimum period of use, so that customers using\nthe API will respond to this.\n\nTherefore, when the listing is stopped, it is made to disappear after\na certain grace period.\n\nOf course, if it is a listing that has never been sold, it does not apply."
          }
        },
        "required": [
          "id",
          "snapshot_id",
          "latest",
          "channels",
          "aggregate",
          "content",
          "units",
          "version",
          "activated_at",
          "expired_at"
        ],
        "description": "Snapshot information of the listing.\n\n`IHubSaleSnapshot` is an entity that embodies the snapshot of the listing,\nand its role is defined in the DB as follows.\n\n> {@link hub_sales IHubSale} is an entity that embodies the \"product sale\"\n> (sales) information registered by the seller. And the main information of\n> the listing is recorded in the subordinate `hub_sale_snapshots`, not the\n> main `hub_sales`. When the seller changes the listing that has already\n> been registered, the existing hub_sales record is not changed, but a new\n> snapshot record is created.\n>\n> This is to preserve the customer's purchase history at the time, even if the\n> {@link IHubSeller seller} changes the {@link IHubSaleUnitStock components}\n> or {@link IHubSaleUnitStockPrice price} of the listing after the customer\n> purchases the listing. It is also to support the seller to change the components\n> or prices, etc. and measure the performance for each case, so-called A/B testing.\n\nHowever, at the DTO level used by front-end developers,\n{@link IHubSale listing} and snapshots are not strictly distinguished this much,\nand listings and snapshots are usually combined and processed as\n{@link IHubSale} units.\n\nHowever, just because the DTO does not strictly distinguish between them\ndoes not mean that the snapshot concept is not important, so please be sure\nto fully understand the concept of \"snapshot.\""
      },
      "IPageIHubSaleAudit.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleAudit.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubSaleAudit.ISummary": {
        "type": "object",
        "properties": {
          "administrator": {
            "$ref": "#/components/schemas/IHubAdministrator.IInvert",
            "title": "The administrator who initiated the review",
            "description": "The administrator who initiated the review."
          },
          "rejected_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Date of rejection",
            "description": "Date of rejection.\n\nThe date of the most recent rejection is recorded."
          },
          "approved_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Date and time of review approval",
            "description": "Date and time of review approval."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "title": {
            "type": "string",
            "title": "Title of the last snapshot",
            "description": "Title of the last snapshot."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the article",
            "description": "Creation time of the article."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Modification time of the article",
            "description": "Modification time of the article.\n\nIn other words, the time when the last snapshot was created."
          }
        },
        "required": [
          "administrator",
          "rejected_at",
          "approved_at",
          "id",
          "title",
          "created_at",
          "updated_at"
        ]
      },
      "IHubSaleAudit.IRequest": {
        "type": "object",
        "properties": {
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-audit.created_at"
                },
                {
                  "const": "-audit_rejected_at"
                },
                {
                  "const": "-audit.approved_at"
                },
                {
                  "const": "+audit.created_at"
                },
                {
                  "const": "+audit_rejected_at"
                },
                {
                  "const": "+audit.approved_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        }
      },
      "IHubSaleCollection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "sales": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSale.ISummary"
            },
            "minItems": 1,
            "title": "A list of items for sale in that collection",
            "description": "A list of items for sale in that collection."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          },
          "title": {
            "type": "string",
            "title": "title",
            "description": "title."
          },
          "format": {
            "oneOf": [
              {
                "const": "txt"
              },
              {
                "const": "html"
              },
              {
                "const": "md"
              }
            ],
            "title": "Body format",
            "description": "Body format."
          },
          "body": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Description information in the text",
            "description": "Description information in the text."
          },
          "summary": {
            "type": "string",
            "description": "Summary Information"
          },
          "thumbnail": {
            "type": "string",
            "format": "url",
            "title": "List of representative product images",
            "description": "List of representative product images."
          },
          "background_color": {
            "oneOf": [
              {
                "const": "yellow"
              },
              {
                "const": "green"
              },
              {
                "const": "blue"
              },
              {
                "const": "violet"
              },
              {
                "const": "pink"
              },
              {
                "const": "orange"
              }
            ],
            "title": "Background color",
            "description": "Background color."
          },
          "sale_count": {
            "type": "number",
            "minimum": 1,
            "title": "Number of properties owned",
            "description": "Number of properties owned."
          }
        },
        "required": [
          "id",
          "sales",
          "created_at",
          "title",
          "format",
          "body",
          "summary",
          "thumbnail",
          "background_color",
          "sale_count"
        ],
        "description": "Information on managing sales items in the form of bundled products in `hub`.\n\n{@link IHubSale} is an interface that bundles {@link IHubSaleUnit} of items,\n\n`IHubSaleCollection` is an interface that bundles {@link IHubSale sales},\nwhich is the upper concept of {@link IHubSale}."
      },
      "IHubSaleCollection.ICreate": {
        "type": "object",
        "properties": {
          "sale_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "body": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Description information in the text",
            "description": "Description information in the text."
          },
          "format": {
            "oneOf": [
              {
                "const": "txt"
              },
              {
                "const": "html"
              },
              {
                "const": "md"
              }
            ],
            "title": "Body format",
            "description": "Body format."
          },
          "background_color": {
            "oneOf": [
              {
                "const": "yellow"
              },
              {
                "const": "green"
              },
              {
                "const": "blue"
              },
              {
                "const": "violet"
              },
              {
                "const": "pink"
              },
              {
                "const": "orange"
              }
            ],
            "title": "Background color",
            "description": "Background color."
          },
          "title": {
            "type": "string",
            "title": "title",
            "description": "title."
          },
          "thumbnail": {
            "type": "string",
            "format": "url",
            "title": "List of representative product images",
            "description": "List of representative product images."
          },
          "summary": {
            "type": "string",
            "description": "Summary Information"
          }
        },
        "required": [
          "sale_ids",
          "body",
          "format",
          "background_color",
          "title",
          "thumbnail",
          "summary"
        ]
      },
      "IPageIHubSaleCollection.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleCollection.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubSaleCollection.ISummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          },
          "title": {
            "type": "string",
            "title": "title",
            "description": "title."
          },
          "format": {
            "oneOf": [
              {
                "const": "txt"
              },
              {
                "const": "html"
              },
              {
                "const": "md"
              }
            ],
            "title": "Body format",
            "description": "Body format."
          },
          "body": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Description information in the text",
            "description": "Description information in the text."
          },
          "summary": {
            "type": "string",
            "description": "Summary Information"
          },
          "thumbnail": {
            "type": "string",
            "format": "url",
            "title": "List of representative product images",
            "description": "List of representative product images."
          },
          "background_color": {
            "oneOf": [
              {
                "const": "yellow"
              },
              {
                "const": "green"
              },
              {
                "const": "blue"
              },
              {
                "const": "violet"
              },
              {
                "const": "pink"
              },
              {
                "const": "orange"
              }
            ],
            "title": "Background color",
            "description": "Background color."
          },
          "sale_count": {
            "type": "number",
            "minimum": 1,
            "title": "Number of properties owned",
            "description": "Number of properties owned."
          }
        },
        "required": [
          "id",
          "created_at",
          "title",
          "format",
          "body",
          "summary",
          "thumbnail",
          "background_color",
          "sale_count"
        ]
      },
      "IHubSaleCollection.IRequest": {
        "type": "object",
        "properties": {
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-created_at"
                },
                {
                  "const": "+created_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        }
      },
      "IPageIHubSaleContent": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleContent"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubChannelCategory.IForAdmin": {
        "type": "object",
        "properties": {
          "name": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubChannelCategory.LangName"
            }
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Primary key"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          },
          "parent": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubChannelCategory.IInvert"
              }
            ],
            "title": "Disinformation on the parent category",
            "description": "Disinformation on the parent category."
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubChannelCategory.IHierarchical"
            },
            "title": "List of child categories",
            "description": "List of child categories."
          },
          "parent_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "title": "{@link IHubChannelCategory.id} of the parent category",
            "description": "{@link IHubChannelCategory.id} of the parent category."
          },
          "background_color": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "const": "inspired_red"
              },
              {
                "const": "apricot"
              },
              {
                "const": "yellow"
              },
              {
                "const": "green"
              },
              {
                "const": "blue"
              },
              {
                "const": "violet"
              },
              {
                "const": "pink"
              },
              {
                "const": "black"
              }
            ],
            "title": "Category background color",
            "description": "Category background color."
          },
          "background_image_url": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Category background image",
            "description": "Category background image."
          }
        },
        "required": [
          "name",
          "id",
          "created_at",
          "parent",
          "children",
          "parent_id",
          "background_color",
          "background_image_url"
        ]
      },
      "IHubChannelCategory.LangName": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "lang_code": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "lang_code"
        ]
      },
      "IHubChannelCategory.ICreate": {
        "type": "object",
        "properties": {
          "parent_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "title": "{@link IHubChannelCategory.id} of the parent category",
            "description": "{@link IHubChannelCategory.id} of the parent category."
          },
          "lang_names": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubChannelCategory.LangName"
            },
            "minItems": 1,
            "title": "Channel category name",
            "description": "Channel category name."
          },
          "background_color": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "const": "inspired_red"
              },
              {
                "const": "apricot"
              },
              {
                "const": "yellow"
              },
              {
                "const": "green"
              },
              {
                "const": "blue"
              },
              {
                "const": "violet"
              },
              {
                "const": "pink"
              },
              {
                "const": "black"
              }
            ],
            "title": "Category background color",
            "description": "Category background color."
          },
          "background_image_url": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Category background image",
            "description": "Category background image."
          }
        },
        "required": [
          "parent_id",
          "lang_names",
          "background_color",
          "background_image_url"
        ],
        "description": "Information on creating channel category information."
      },
      "PartialIHubChannelCategory.ICreate": {
        "type": "object",
        "properties": {
          "parent_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "title": "{@link IHubChannelCategory.id} of the parent category",
            "description": "{@link IHubChannelCategory.id} of the parent category."
          },
          "lang_names": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubChannelCategory.LangName"
            },
            "minItems": 1,
            "title": "Channel category name",
            "description": "Channel category name."
          },
          "background_color": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "const": "inspired_red"
              },
              {
                "const": "apricot"
              },
              {
                "const": "yellow"
              },
              {
                "const": "green"
              },
              {
                "const": "blue"
              },
              {
                "const": "violet"
              },
              {
                "const": "pink"
              },
              {
                "const": "black"
              }
            ],
            "title": "Category background color",
            "description": "Category background color."
          },
          "background_image_url": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Category background image",
            "description": "Category background image."
          }
        },
        "description": "Make all properties in T optional"
      },
      "IRecordMerge": {
        "type": "object",
        "properties": {
          "keep": {
            "type": "string",
            "format": "uuid",
            "title": "Target record to keep after merging",
            "description": "Target record to keep after merging.\n\nAfter merge process, {@link absorbed} records would be merged into\nthis {@link keep} record."
          },
          "absorbed": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "title": "To be absorbed to {@link keep} after merging",
            "description": "To be absorbed to {@link keep} after merging."
          }
        },
        "required": [
          "keep",
          "absorbed"
        ],
        "description": "Record Merge DTO.\n\n`IRecordMerge` is a structure for merging records.\n\nThe `merge` means that merging multiple {@link IRecordMerge.absorbed}\nrecords into {@link IRecordMerge.keep} instead of deleting\n{@link IRecordMerge.absorbed} records.\n\nIf there're some dependent tables of the target `table` having\nunique constraint on foriegn key column, such dependent tables\nalso perform the merge process, too.\n\nOf course, if there're another dependent tables under those\ndependents, they also perform the merge process recursively as well.\nSuch recursive merge process still works for self-recursive\n(tree-structured) tables."
      },
      "IHubChannel.ICreate": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Separator code"
          },
          "name": {
            "type": "string",
            "description": "Channel name"
          },
          "exclusive": {
            "type": "boolean",
            "description": "Exclusivity\n\nIf this value is `true`, the channel is isolated from other channels,\nand does not share any customer information."
          }
        },
        "required": [
          "code",
          "name",
          "exclusive"
        ],
        "description": "Input information for creating hierarchical information."
      },
      "IHubChannel.IUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Channel name"
          },
          "exclusive": {
            "type": "boolean",
            "description": "Exclusivity\n\nIf this value is `true`, the channel is isolated from other channels,\nand does not share any customer information."
          }
        },
        "required": [
          "name",
          "exclusive"
        ],
        "description": "Channel edit information."
      },
      "IPageIHubChannel": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubChannel"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubChannel.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IHubChannel.IRequest.ISearch",
            "description": "Search Conditions"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-channel.code"
                },
                {
                  "const": "-channel.name"
                },
                {
                  "const": "-channel.created_at"
                },
                {
                  "const": "+channel.code"
                },
                {
                  "const": "+channel.name"
                },
                {
                  "const": "+channel.created_at"
                }
              ]
            },
            "description": "Sorting Conditions"
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "View Hierarchy Information and Page Information"
      },
      "IHubChannel.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Channel Code"
          },
          "name": {
            "type": "string",
            "description": "Channel name"
          }
        }
      },
      "IPageIHubChannel.IHierarchical": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubChannel.IHierarchical"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubChannel.IHierarchical": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubChannelCategory.IHierarchical"
            },
            "title": "List of subcategories",
            "description": "List of subcategories."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Primary key"
          },
          "code": {
            "type": "string",
            "description": "Separator code"
          },
          "name": {
            "type": "string",
            "description": "Channel name"
          },
          "exclusive": {
            "type": "boolean",
            "description": "Exclusivity\n\nIf this value is True, the channel is disconnected and customer information is not shared."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Record creation date and time"
          }
        },
        "required": [
          "categories",
          "id",
          "code",
          "name",
          "exclusive",
          "created_at"
        ],
        "description": "Hierarchical information."
      },
      "IHubSection.ICreate": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "name"
        ],
        "description": "Section Creation Information"
      },
      "IHubSection.IUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "description": "Section Edit Information"
      },
      "IPageIHubSection": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSection"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubSection.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IHubSection.IRequest.ISearch",
            "description": "Search Conditions"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-section.code"
                },
                {
                  "const": "-section.name"
                },
                {
                  "const": "-section.created_at"
                },
                {
                  "const": "+section.code"
                },
                {
                  "const": "+section.name"
                },
                {
                  "const": "+section.created_at"
                }
              ]
            },
            "description": "Sorting Conditions"
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "View section information and page information"
      },
      "IHubSection.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Identifier Code"
          },
          "name": {
            "type": "string",
            "description": "Section Name"
          }
        }
      },
      "IPageIHubOrderGoodCallAggregate": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubOrderGoodCallAggregate"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubOrderGoodCallAggregate": {
        "type": "object",
        "properties": {
          "date": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string",
                "format": "date"
              }
            ]
          },
          "success": {
            "type": "integer"
          },
          "status_2xx": {
            "type": "integer"
          },
          "status_3xx": {
            "type": "integer"
          },
          "status_4xx": {
            "type": "integer"
          },
          "status_5xx": {
            "type": "integer"
          },
          "none": {
            "type": "integer"
          },
          "latency": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IAverage"
              }
            ],
            "title": "Statistics on API response latency",
            "description": "Statistics on API response latency.\n\nIf there is no API success transmission or reception, this value is `null`."
          }
        },
        "required": [
          "date",
          "success",
          "status_2xx",
          "status_3xx",
          "status_4xx",
          "status_5xx",
          "none",
          "latency"
        ]
      },
      "IAverage": {
        "type": "object",
        "properties": {
          "mean": {
            "type": "number"
          },
          "count": {
            "type": "integer"
          },
          "stdev": {
            "type": "number"
          }
        },
        "required": [
          "mean",
          "count",
          "stdev"
        ]
      },
      "IHubOrderGoodCallAggregate.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IHubOrderGoodCallAggregate.IRequest.ISearch",
            "title": "Search information",
            "description": "Search information."
          },
          "term": {
            "oneOf": [
              {
                "const": "day"
              },
              {
                "const": "month"
              },
              {
                "const": "year"
              },
              {
                "const": "week"
              },
              {
                "const": "hour"
              },
              {
                "const": "quarter"
              }
            ],
            "title": "Period type",
            "description": "Period type."
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "required": [
          "term"
        ]
      },
      "IHubOrderGoodCallAggregate.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "format": "date"
          },
          "to": {
            "type": "string",
            "format": "date"
          },
          "sale_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "good_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "description": "Search criteria."
      },
      "IHubOrderGoodCallAggregate.IEntireRequest": {
        "type": "object",
        "properties": {
          "sale_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "good_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "IPageIHubOrderGoodRanking": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubOrderGoodRanking"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubOrderGoodRanking": {
        "type": "object",
        "properties": {
          "sale": {
            "$ref": "#/components/schemas/IHubSale.ISummary",
            "title": "Summary information about the target property",
            "description": "Summary information about the target property."
          },
          "count": {
            "type": "integer",
            "title": "Total number of API calls",
            "description": "Total number of API calls."
          },
          "success": {
            "type": "integer",
            "title": "The number of successes during API calls",
            "description": "The number of successes during API calls."
          },
          "status_2xx": {
            "type": "integer",
            "title": "API response number of responses 201 - 299",
            "description": "API response number of responses 201 - 299."
          },
          "status_3xx": {
            "type": "integer",
            "title": "API response number of responses 301 - 399",
            "description": "API response number of responses 301 - 399."
          },
          "status_4xx": {
            "type": "integer",
            "title": "API response number of 401 to 499 responses",
            "description": "API response number of 401 to 499 responses."
          },
          "status_5xx": {
            "type": "integer",
            "title": "API response number of 501 to 599 responses",
            "description": "API response number of 501 to 599 responses."
          },
          "none": {
            "type": "integer",
            "title": "The number of times an API response field is null",
            "description": "The number of times an API response field is null."
          },
          "cost": {
            "type": "number",
            "exclusiveMinimum": true,
            "minimum": 0,
            "title": "API billing costs",
            "description": "API billing costs."
          },
          "value": {
            "type": "integer",
            "title": "Ranking value",
            "description": "Ranking value.\n\nThis is the most frequently called API ranking, and tied cases are handled as follows:\n\n1. Listing with the most API calls\n2. Listing with the most successful API calls\n3. Listing created faster"
          },
          "latency": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IAverage"
              }
            ],
            "title": "Statistics on API response latency",
            "description": "Statistics on API response latency.\n\nIf there is no API success transmission or reception, this value is `null`."
          }
        },
        "required": [
          "sale",
          "count",
          "success",
          "status_2xx",
          "status_3xx",
          "status_4xx",
          "status_5xx",
          "none",
          "cost",
          "value",
          "latency"
        ],
        "description": "Listing API information for the subscribed API."
      },
      "IHubOrderGoodRanking.IEntireRequest": {
        "type": "object",
        "properties": {
          "sale_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "good_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "IPageIHubSaleCallRanking": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleCallRanking"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubSaleCallRanking": {
        "type": "object",
        "properties": {
          "sale": {
            "$ref": "#/components/schemas/IHubSale.ISummary",
            "title": "Summary information about the target property",
            "description": "Summary information about the target property."
          },
          "count": {
            "type": "integer",
            "title": "Total number of API calls",
            "description": "Total number of API calls."
          },
          "success": {
            "type": "integer",
            "title": "The number of successes during API calls",
            "description": "The number of successes during API calls."
          },
          "value": {
            "type": "integer",
            "title": "Ranking value",
            "description": "Ranking value.\n\nThis is the most frequently called API ranking, and tied cases are\nhandled as follows:\n\n1. Listing with the most API calls\n2. Listing with the most successful API calls\n3. Listing created faster"
          }
        },
        "required": [
          "sale",
          "count",
          "success",
          "value"
        ],
        "description": "Ranking information based on the number of API calls for listings."
      },
      "IHubCustomer.IAuthorized": {
        "type": "object",
        "properties": {
          "setHeaders": {
            "type": "object",
            "properties": {
              "Authorization": {
                "type": "string"
              }
            },
            "required": [
              "Authorization"
            ],
            "title": "Header setting value",
            "description": "Header setting value.\n\nThe client can assign this value to {@link IConnection.headers}.\n\nHowever, this process is automatically performed when calling the\nrelevant SDK function."
          },
          "token": {
            "$ref": "#/components/schemas/IHubCustomer.IToken",
            "title": "Token information",
            "description": "Token information."
          },
          "type": {
            "const": "customer",
            "title": "Discriminator for the discriminated union type",
            "description": "Discriminator for the discriminated union type."
          },
          "member": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubMember"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "member": "#/components/schemas/IHubMember"
              }
            },
            "title": "Membership information",
            "description": "Membership information.\n\nIf you have not registered or logged in, this information is `null`."
          },
          "citizen": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubCitizen"
              }
            ],
            "title": "Citizen Information",
            "description": "Citizen Information.\n\nWhether the customer has authenticated himself or has done so in the past."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "channel": {
            "$ref": "#/components/schemas/IHubChannel",
            "title": "Channel affiliation information",
            "description": "Channel affiliation information.\n\nWhich channel is the customer?"
          },
          "external_user": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubExternalUser"
              }
            ],
            "title": "External user information",
            "description": "External user information.\n\nApplies to customers who access from external services."
          },
          "href": {
            "type": "string",
            "format": "uri",
            "title": "The connection address",
            "description": "The connection address.\n\nSame value as {@link window.location.href}."
          },
          "referrer": {
            "oneOf": [
              {
                "type": "string",
                "format": "uri"
              },
              {
                "type": "string",
                "maxLength": 0
              }
            ],
            "title": "Referrer URL",
            "description": "Referrer URL.\n\nSame value as {@link window.document.referrer}."
          },
          "ip": {
            "oneOf": [
              {
                "type": "string",
                "format": "ipv4"
              },
              {
                "type": "string",
                "format": "ipv6"
              }
            ],
            "title": "The connecting IP address",
            "description": "The connecting IP address."
          },
          "readonly": {
            "type": "boolean",
            "title": "Whether read-only or not",
            "description": "Whether read-only or not."
          },
          "lang_code": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Language code",
            "description": "Language code."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Synonyms for record creation date and time, access date and time",
            "description": "Synonyms for record creation date and time, access date and time."
          }
        },
        "required": [
          "setHeaders",
          "token",
          "type",
          "member",
          "citizen",
          "id",
          "channel",
          "external_user",
          "href",
          "referrer",
          "ip",
          "readonly",
          "lang_code",
          "created_at"
        ]
      },
      "IHubCustomer.IToken": {
        "type": "object",
        "properties": {
          "access": {
            "type": "string",
            "title": "Access token",
            "description": "Access token."
          },
          "refresh": {
            "type": "string",
            "title": "Renewal token",
            "description": "Renewal token."
          },
          "expired_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Token expiration time",
            "description": "Token expiration time."
          },
          "refreshable_until": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Token renewal time",
            "description": "Token renewal time."
          }
        },
        "required": [
          "access",
          "refresh",
          "expired_at",
          "refreshable_until"
        ],
        "description": "Token information."
      },
      "IHubCustomer.IRefresh": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "title": "The renewal token value",
            "description": "The renewal token value."
          }
        },
        "required": [
          "value"
        ],
        "description": "DTO when trying to renew token"
      },
      "IHubCustomer.ICreate": {
        "type": "object",
        "properties": {
          "channel_code": {
            "type": "string",
            "title": "{@link IHubChannel.code code} of the channel you are a customer of",
            "description": "{@link IHubChannel.code code} of the channel you are a customer of.\n\nWhich channel are you a customer of?"
          },
          "external_user": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubExternalUser.ICreate"
              }
            ],
            "title": "External user information",
            "description": "External user information.\n\nApplies to customers who access from external services."
          },
          "href": {
            "type": "string",
            "format": "uri",
            "title": "The connection address",
            "description": "The connection address.\n\nSame value as {@link window.location.href}."
          },
          "referrer": {
            "oneOf": [
              {
                "type": "string",
                "format": "uri"
              },
              {
                "type": "string",
                "maxLength": 0
              }
            ],
            "title": "Referrer URL",
            "description": "Referrer URL.\n\nSame value as {@link window.document.referrer}."
          },
          "ip": {
            "oneOf": [
              {
                "type": "string",
                "format": "ipv4"
              },
              {
                "type": "string",
                "format": "ipv6"
              }
            ],
            "title": "Connection IP address",
            "description": "Connection IP address.\n\nOccasionally, when server-side rendering and server-side API calls are\nmade, such as `next.js`, the client IP acquired by this backend server may\nnot actually belong to the customer, but to another server (`next.js`).\n\nThis `IHubCustomer.ICreate.ip` is a field to prepare for cases where API calls\nare made by server-side rendering, and to accurately record the client's\nactual IP. If this is not the case, do not enter this property value,\nor assign a `null` value."
          },
          "readonly": {
            "type": "boolean",
            "title": "Whether read-only or not",
            "description": "Whether read-only or not."
          },
          "lang_code": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Language code",
            "description": "Language code."
          },
          "expired_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Set token expiration time",
            "description": "Set token expiration time."
          }
        },
        "required": [
          "channel_code",
          "external_user",
          "href",
          "referrer"
        ]
      },
      "IHubExternalUser.ICreate": {
        "type": "object",
        "properties": {
          "application": {
            "type": "string",
            "title": "Identifier code of the external service",
            "description": "Identifier code of the external service."
          },
          "uid": {
            "type": "string",
            "title": "An identifier key for that user in an external service",
            "description": "An identifier key for that user in an external service."
          },
          "nickname": {
            "type": "string",
            "title": "User nickname on external services",
            "description": "User nickname on external services."
          },
          "password": {
            "type": "string",
            "title": "System password for external service users",
            "description": "System password for external service users.\n\nThis is a password issued by the external service to the user,\nand is not the actual user password.\n\nIt is only used to determine whether a customer who entered the same\n{@link application} and {@link code} as the current external system user\nis a valid external system user or a violation."
          },
          "citizen": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubCitizen.ICreate"
              }
            ],
            "title": "Citizen authentication information",
            "description": "Citizen authentication information."
          },
          "content": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubExternalUserContent.ICreate"
              }
            ],
            "title": "External user information details",
            "description": "External user information details.\n\nUsed only when received from WRTN SSO."
          },
          "data": {
            "title": "Additional information from external services",
            "description": "Additional information from external services."
          }
        },
        "required": [
          "application",
          "uid",
          "nickname",
          "password",
          "citizen",
          "content",
          "data"
        ]
      },
      "IHubCitizen.ICreate": {
        "type": "object",
        "properties": {
          "mobile": {
            "type": "string",
            "pattern": "^[0-9]*$",
            "title": "Mobile phone number",
            "description": "Mobile phone number."
          },
          "name": {
            "type": "string",
            "title": "Real name or equivalent name",
            "description": "Real name or equivalent name."
          }
        },
        "required": [
          "mobile",
          "name"
        ],
        "description": "Enter citizen authentication information."
      },
      "IHubExternalUserContent.ICreate": {
        "type": "object",
        "properties": {
          "jobs": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "List of user job information. {@link IHubExternalUserContent.JobType}"
          },
          "gender": {
            "oneOf": [
              {
                "const": "m"
              },
              {
                "const": "f"
              },
              {
                "const": "none"
              }
            ],
            "title": "User gender information",
            "description": "User gender information.\n\n`m` : male\n`f` : female\n`none` : gender not disclosed"
          },
          "birthYear": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "User's year of birth",
            "description": "User's year of birth."
          },
          "interests": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "title": "List of user interests",
            "description": "List of user interests."
          },
          "provider": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "WRTN User Account Provider",
            "description": "WRTN User Account Provider.\n\nex) \"google\", \"kakao\", \"naver\""
          },
          "purposes": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "title": "Purpose of user access",
            "description": "Purpose of user access."
          }
        },
        "required": [
          "jobs",
          "gender",
          "birthYear",
          "interests",
          "provider",
          "purposes"
        ]
      },
      "IHubCustomer.IUpdate": {
        "type": "object",
        "properties": {
          "lang_code": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Language code",
            "description": "Language code."
          }
        }
      },
      "IHubMember.IJoin": {
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string",
            "title": "nickname",
            "description": "nickname."
          },
          "citizen": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubCitizen.ICreate"
              }
            ],
            "title": "Citizen information",
            "description": "Citizen information.\n\nOnly for those who sign up by authenticating themselves."
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email address",
            "description": "Email address."
          },
          "password": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "pattern": "^[A-Za-z0-9@$!%*#?&^]{8,15}$"
              }
            ],
            "title": "Password",
            "description": "Password."
          }
        },
        "required": [
          "nickname",
          "citizen",
          "email",
          "password"
        ],
        "description": "Membership information."
      },
      "IHubCustomer.IBeta": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          }
        },
        "required": [
          "email"
        ]
      },
      "IHubMember.IPasswordChange": {
        "type": "object",
        "properties": {
          "oldbie": {
            "type": "string",
            "title": "Existing password",
            "description": "Existing password."
          },
          "newbie": {
            "type": "string",
            "pattern": "^[A-Za-z0-9@$!%*#?&^]{8,15}$",
            "title": "New password",
            "description": "New password."
          }
        },
        "required": [
          "oldbie",
          "newbie"
        ],
        "description": "Password change request information."
      },
      "IPageIHubAuthenticateKey": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubAuthenticateKey"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubAuthenticateKey": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "expired_at": {
            "type": "string",
            "format": "date"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "title",
          "value",
          "created_at"
        ]
      },
      "IHubAuthenticateKey.ISearch": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IHubAuthenticateKey.IRequest.ISearch",
            "title": "Search information",
            "description": "Search information."
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-created_at"
                },
                {
                  "const": "+created_at"
                }
              ]
            },
            "title": "Sort criteria",
            "description": "Sort criteria."
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        }
      },
      "IHubAuthenticateKey.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          }
        },
        "description": "Search criteria."
      },
      "IHubAuthenticateKey.ICreate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "channel_code": {
            "type": "string"
          },
          "expired_at": {
            "type": "string",
            "format": "date"
          }
        },
        "required": [
          "channel_code"
        ]
      },
      "IHubSSO": {
        "type": "object",
        "properties": {
          "shouldJoin": {
            "type": "boolean",
            "title": "Whether or not you are a member of the Ecosystem",
            "description": "Whether or not you are a member of the Ecosystem."
          },
          "ssoUser": {
            "$ref": "#/components/schemas/IHubSSO.ISSOUser",
            "title": "SSO user information",
            "description": "SSO user information."
          }
        },
        "required": [
          "shouldJoin",
          "ssoUser"
        ],
        "description": "Interface related to Rutton SSO."
      },
      "IHubSSO.ISSOUser": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "title": "result",
            "description": "result."
          },
          "data": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "title": "WRTN User ID",
                "description": "WRTN User ID."
              },
              "name": {
                "type": "string",
                "title": "WRTN username",
                "description": "WRTN username."
              },
              "wrtnUid": {
                "type": "string",
                "title": "WRTN uid",
                "description": "WRTN uid."
              },
              "email": {
                "type": "string",
                "title": "WRTN Email",
                "description": "WRTN Email."
              },
              "birthYear": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number"
                  }
                ],
                "title": "WRTN user's year of birth",
                "description": "WRTN user's year of birth."
              },
              "gender": {
                "type": "string",
                "title": "WRTN user gender",
                "description": "WRTN user gender."
              },
              "interests": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "title": "WRTN user interest list",
                "description": "WRTN user interest list."
              },
              "provider": {
                "type": "string",
                "title": "WRTN User Account Provider",
                "description": "WRTN User Account Provider.\n\nex) \"google\", \"kakao\", \"naver\""
              },
              "job": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "title": "List of WRTN user occupations",
                "description": "List of WRTN user occupations."
              },
              "purpose": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "title": "WRTN User Purpose",
                "description": "WRTN User Purpose."
              }
            },
            "required": [
              "_id",
              "name",
              "email"
            ],
            "description": "User information data"
          }
        },
        "required": [
          "result",
          "data"
        ],
        "description": "SSO user information."
      },
      "IHubSSO.IAuthToken": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access token",
            "description": "Access token."
          }
        },
        "required": [
          "access_token"
        ],
        "description": "SSO authentication token information."
      },
      "IHubSSO.IUpdate": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access token",
            "description": "Access token."
          },
          "job": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Job information",
            "description": "Job information."
          },
          "birthYear": {
            "type": "number",
            "title": "Year of birth",
            "description": "Year of birth."
          },
          "gender": {
            "oneOf": [
              {
                "const": "m"
              },
              {
                "const": "f"
              },
              {
                "const": "none"
              }
            ],
            "title": "Gender",
            "description": "Gender.\n\nWritten as \"m\" | \"f\" | \"none\"."
          },
          "nickname": {
            "type": "string",
            "title": "nickname",
            "description": "nickname."
          }
        },
        "required": [
          "access_token",
          "job"
        ],
        "description": "Modify SSO and Ecosystem User information."
      },
      "IPresignedUrl": {
        "type": "object",
        "properties": {
          "fileUploadUrl": {
            "type": "string",
            "title": "S3 Presigned URL",
            "description": "S3 Presigned URL."
          },
          "urlExpTsMillis": {
            "type": "string",
            "format": "date-time",
            "title": "S3 Presigned URL expiration time",
            "description": "S3 Presigned URL expiration time."
          },
          "bucket": {
            "type": "string",
            "title": "s3 bucket being uploaded",
            "description": "s3 bucket being uploaded."
          },
          "key": {
            "type": "string",
            "title": "s3 key being uploaded",
            "description": "s3 key being uploaded."
          }
        },
        "required": [
          "fileUploadUrl",
          "urlExpTsMillis",
          "bucket",
          "key"
        ],
        "description": "S3 Presigned URL.\n\nPresigned URL information for uploading S3 objects."
      },
      "IPresignedUrl.ICreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "File name",
            "description": "File name."
          },
          "extension": {
            "type": "string",
            "title": "File extension",
            "description": "File extension."
          }
        },
        "required": [
          "name",
          "extension"
        ]
      },
      "IBlockWord.IAll": {
        "type": "object",
        "properties": {
          "blockwords": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IBlockWord.IContent"
            }
          }
        },
        "required": [
          "blockwords"
        ]
      },
      "IBlockWord.IContent": {
        "type": "object",
        "properties": {
          "word": {
            "type": "string"
          },
          "range": {
            "$ref": "#/components/schemas/IBlockWord.IRange"
          }
        },
        "required": [
          "word",
          "range"
        ]
      },
      "IBlockWord.IRange": {
        "type": "object",
        "properties": {
          "start": {
            "type": "integer"
          },
          "end": {
            "type": "integer"
          }
        },
        "required": [
          "start",
          "end"
        ]
      },
      "IBlockWord.IAllRequest": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "language": {
            "oneOf": [
              {
                "const": "ko"
              },
              {
                "const": "jp"
              }
            ]
          },
          "filterType": {
            "type": "array",
            "prefixItems": [
              {
                "const": "BLOCKWORD_REGEX"
              }
            ],
            "additionalItems": false
          }
        },
        "required": [
          "text",
          "language",
          "filterType"
        ]
      },
      "IBlockWord.IBatch": {
        "type": "object",
        "properties": {
          "blockwords": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IBlockWord.IContent"
              }
            }
          }
        },
        "required": [
          "blockwords"
        ]
      },
      "IBlockWord.IBatchRequest": {
        "type": "object",
        "properties": {
          "text": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "language": {
            "oneOf": [
              {
                "const": "ko"
              },
              {
                "const": "jp"
              }
            ]
          },
          "filterType": {
            "type": "array",
            "prefixItems": [
              {
                "const": "BLOCKWORD_REGEX"
              }
            ],
            "additionalItems": false
          }
        },
        "required": [
          "text",
          "language",
          "filterType"
        ]
      },
      "ICheckPrivacy.IInvalid": {
        "type": "object",
        "properties": {
          "word": {
            "type": "string",
            "description": "Words that are tied to personal information"
          },
          "regex": {
            "type": "string",
            "description": "What regular expression was it caught by?"
          }
        },
        "required": [
          "word",
          "regex"
        ],
        "description": "If you were caught with personal information, what words and what\npersonal information were caught?"
      },
      "ICheckPrivacy.IRequest": {
        "type": "object",
        "properties": {
          "text": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "description": "Text to determine whether it contains personal information"
          }
        },
        "required": [
          "text"
        ],
        "description": "Request form to determine whether personal information is included"
      },
      "IPageIHubCouponTicket": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubCouponTicket"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubCouponTicket": {
        "type": "object",
        "properties": {
          "coupon": {
            "$ref": "#/components/schemas/IHubCoupon",
            "title": "Information on affiliate discount coupons",
            "description": "Information on affiliate discount coupons."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "customer": {
            "$ref": "#/components/schemas/IHubCustomer",
            "title": "Information about the customer who issued the ticket",
            "description": "Information about the customer who issued the ticket."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Ticket issuance date and time",
            "description": "Ticket issuance date and time."
          },
          "expired_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Ticket expiration date",
            "description": "Ticket expiration date."
          }
        },
        "required": [
          "coupon",
          "id",
          "customer",
          "created_at",
          "expired_at"
        ],
        "description": "Discount coupon ticket issuance history.\n\n`IHubCouponTicket` is an entity that represents a discount coupon ticket\nissued to a customer.\n\nAnd if the target {@link IHubCoupon discount coupon} specification itself\nhas an expiration date, the expiration date is recorded in {@link expired_at}\nand it is automatically discarded after that period.\n\nOf course, if the discount coupon ticket was used for\n{@link IHubCouponTicketPayment order} within the expiration date,\nit doesn't matter."
      },
      "IHubCouponTicket.IRequest": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        }
      },
      "IHubCouponTicket.ICreate": {
        "type": "object",
        "properties": {
          "coupon_id": {
            "type": "string",
            "format": "uuid",
            "description": "{@link IHubCoupon.id} of the discount coupon you want to issue"
          }
        },
        "required": [
          "coupon_id"
        ],
        "description": "Information on issuing discount coupon tickets.\n\nValid only when the target {@link IHubCoupon discount coupon} is public.\n\nIf you want to obtain a ticket for a private discount coupon, use {@link ITake}."
      },
      "IPageIHubDepositCharge": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubDepositCharge"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubDepositCharge": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary key",
            "description": "Primary key."
          },
          "customer": {
            "$ref": "#/components/schemas/IHubCustomer",
            "title": "Customers who have applied for a deposit",
            "description": "Customers who have applied for a deposit."
          },
          "value": {
            "type": "number",
            "exclusiveMinimum": true,
            "minimum": 0,
            "title": "The amount of deposit/withdrawal",
            "description": "The amount of deposit/withdrawal.\n\nMust be a positive number, and whether or not a deposit/withdrawal\nis made can be seen in {@link IHubDeposit.direction}.\n\nIf you want to express the deposit/withdrawal values as positive/negative\nnumbers, you can also multiply this field value by the\n{@link IHubDeposit.direction} value."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          },
          "publish": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubDepositChargePublish"
              }
            ],
            "title": "Payment progress information for deposit of deposit",
            "description": "Payment progress information for deposit of deposit."
          }
        },
        "required": [
          "id",
          "customer",
          "value",
          "created_at",
          "publish"
        ],
        "description": "Customer deposit deposit request.\n\nDeposits refer to the amount that customers have prepaid and charged in advance.\n\nDue to the nature of the API as a transaction object, this Generative-Hub cannot\nimmediately pay cash at the time of purchase of goods (API call time). Instead,\nthis system charges the customer with a deposit and deducts it every time the\nAPI is called. And {@link IHubDepositCharge} is an entity that visualizes this\n\"deposit request\" for the deposit.\n\nIn other words, {@link IHubDepositCharge} is only the stage where the customer\nexpresses his/her intention to deposit the deposit, and note that the deposit\nhas not yet been completed."
      },
      "IHubDepositChargePublish": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The basic key for the payment process"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Record creation date and time"
          },
          "paid_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Payment completion date and time",
            "description": "Payment completion date and time.\n\nThe charging application completion date and payment date may be\ndifferent. This is the case for \"virtual account payment\"."
          },
          "cancelled_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Payment cancellation/refund date and time",
            "description": "Payment cancellation/refund date and time."
          }
        },
        "required": [
          "id",
          "created_at",
          "paid_at",
          "cancelled_at"
        ],
        "description": "\nPayment progress information for deposit of deposit.\n\n{@link IHubDepositChargePublish} is an entity that visualizes the\nprocess of a customer requesting a deposit and proceeding with payment.\n\nPlease note that the existence of a {@link IHubDepositChargePublish} record\ndoes not mean that payment has been completed. Payment is only completed\nwhen payment is completed.\n\nThe \"process of proceeding with payment\" mentioned above means exactly this.\nHowever, even after payment is made, there are cases where it is suddenly\ncanceled, so you should also be careful about this."
      },
      "IHubDepositCharge.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IHubDepositCharge.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-created_at"
                },
                {
                  "const": "+created_at"
                },
                {
                  "const": "-value"
                },
                {
                  "const": "+value"
                },
                {
                  "const": "-publish.created_at"
                },
                {
                  "const": "-publish.paid_at"
                },
                {
                  "const": "-publish.cancelled_at"
                },
                {
                  "const": "+publish.created_at"
                },
                {
                  "const": "+publish.paid_at"
                },
                {
                  "const": "+publish.cancelled_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "View deposit application information and page information."
      },
      "IHubDepositCharge.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "minimum": {
            "type": "number"
          },
          "maximum": {
            "type": "number"
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "oneOf": [
              {
                "const": "published"
              },
              {
                "const": "pending"
              },
              {
                "const": "cancelled"
              },
              {
                "const": "payed"
              }
            ]
          },
          "publish": {
            "type": "object",
            "properties": {
              "from": {
                "type": "string",
                "format": "date-time"
              },
              "to": {
                "type": "string",
                "format": "date-time"
              },
              "payment": {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "to": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        },
        "required": [
          "state"
        ]
      },
      "IHubDepositCharge.ICreate": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "exclusiveMinimum": true,
            "minimum": 0,
            "title": "The amount of deposit/withdrawal",
            "description": "The amount of deposit/withdrawal.\n\nMust be a positive number, and whether or not a deposit/withdrawal is made can be seen in {@link IHubDeposit.direction}.\n\nIf you want to express the deposit/withdrawal values as positive/negative numbers, you can also multiply this field value by the {@link IHubDeposit.direction} value."
          }
        },
        "required": [
          "value"
        ],
        "description": "Modify deposit request information."
      },
      "IHubDepositChargePublish.ICreate": {
        "type": "object",
        "properties": {
          "code": {
            "oneOf": [
              {
                "const": "iamport"
              },
              {
                "const": "toss.payments"
              }
            ],
            "description": "Provider Code\n\nimport | toss.payments"
          },
          "store_id": {
            "type": "string",
            "description": "Payment Creation ID"
          },
          "uid": {
            "type": "string",
            "description": "Payment Processing User ID"
          }
        },
        "required": [
          "code",
          "store_id",
          "uid"
        ],
        "description": "View payment progress information and page information"
      },
      "IHubDepositChargePublish.IRefundStore": {
        "type": "object",
        "properties": {
          "account": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubBankAccount"
              }
            ],
            "description": "Refund account"
          },
          "reason": {
            "type": "string",
            "description": "Reason for refund"
          }
        },
        "required": [
          "account",
          "reason"
        ],
        "description": "Create refund information"
      },
      "IHubBankAccount": {
        "type": "object",
        "properties": {
          "bank": {
            "type": "string"
          },
          "account": {
            "type": "string"
          },
          "holder": {
            "type": "string"
          },
          "mobile": {
            "type": "string"
          }
        },
        "required": [
          "bank",
          "account",
          "holder",
          "mobile"
        ]
      },
      "IPageIHubDepositHistory": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubDepositHistory"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubDepositHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Primary key"
          },
          "citizen": {
            "$ref": "#/components/schemas/IHubCitizen",
            "description": "IHub Citizen {@link IHubCitizen}"
          },
          "deposit": {
            "$ref": "#/components/schemas/IHubDeposit",
            "description": "Deposit Meta Information {@link IHubDeposit}"
          },
          "source_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the source record that generated the deposit/withdrawal"
          },
          "value": {
            "type": "number",
            "exclusiveMinimum": true,
            "minimum": 0,
            "title": "The amount of deposit/withdrawal",
            "description": "The amount of deposit/withdrawal.\n\nMust be a positive number, and whether or not a deposit/withdrawal\nis made can be seen in {@link IHubDeposit.direction}.\n\nIf you want to express the deposit/withdrawal values as positive/negative\nnumbers, you can also multiply this field value by the\n{@link IHubDeposit.direction} value."
          },
          "balance": {
            "type": "number",
            "title": "Balance after deposit changes",
            "description": "Balance after deposit changes."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Record creation date and time"
          }
        },
        "required": [
          "id",
          "citizen",
          "deposit",
          "source_id",
          "value",
          "balance",
          "created_at"
        ],
        "description": "{@link IHubDepositHistory} is an entity that visualizes the customer's\ndeposit and withdrawal history.\n\nIt can be considered a kind of accounting ledger table."
      },
      "IHubDepositHistory.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IHubDepositHistory.IRequest.ISearch",
            "description": "Search Conditions"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-deposit.source"
                },
                {
                  "const": "-deposit.code"
                },
                {
                  "const": "-deposit.direction"
                },
                {
                  "const": "+deposit.source"
                },
                {
                  "const": "+deposit.code"
                },
                {
                  "const": "+deposit.direction"
                },
                {
                  "const": "-history.created_at"
                },
                {
                  "const": "+history.created_at"
                },
                {
                  "const": "-history.value"
                },
                {
                  "const": "+history.value"
                }
              ]
            },
            "description": "Sorting Conditions"
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Deposit deposit/withdrawal history inquiry and page information"
      },
      "IHubDepositHistory.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "deposit": {
            "$ref": "#/components/schemas/IHubDeposit.IRequest.ISearch",
            "title": "Search for deposit metadata",
            "description": "Search for deposit metadata."
          },
          "citizen_id": {
            "type": "string",
            "format": "uuid",
            "description": "Attributable Citizen ID"
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          },
          "minimum": {
            "type": "number",
            "minimum": 0
          },
          "maximum": {
            "type": "number",
            "minimum": 0
          }
        }
      },
      "IPageIHubCartCommodity": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubCartCommodity"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubCartCommodity.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IHubCartCommodity.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-seller.created_at"
                },
                {
                  "const": "-seller.goods.payments.real"
                },
                {
                  "const": "-seller.goods.published_count"
                },
                {
                  "const": "-seller.reviews.average"
                },
                {
                  "const": "-seller.reviews.count"
                },
                {
                  "const": "-goods.publish_count"
                },
                {
                  "const": "-goods.payments"
                },
                {
                  "const": "-reviews.average"
                },
                {
                  "const": "-reviews.count"
                },
                {
                  "const": "-sale.created_at"
                },
                {
                  "const": "-sale.opened_at"
                },
                {
                  "const": "-sale.closed_at"
                },
                {
                  "const": "-sale.view_count"
                },
                {
                  "const": "+seller.created_at"
                },
                {
                  "const": "+seller.goods.payments.real"
                },
                {
                  "const": "+seller.goods.published_count"
                },
                {
                  "const": "+seller.reviews.average"
                },
                {
                  "const": "+seller.reviews.count"
                },
                {
                  "const": "+goods.publish_count"
                },
                {
                  "const": "+goods.payments"
                },
                {
                  "const": "+reviews.average"
                },
                {
                  "const": "+reviews.count"
                },
                {
                  "const": "+sale.created_at"
                },
                {
                  "const": "+sale.opened_at"
                },
                {
                  "const": "+sale.closed_at"
                },
                {
                  "const": "+sale.view_count"
                },
                {
                  "const": "-commodity.created_at"
                },
                {
                  "const": "+commodity.created_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "View list of products in your shopping cart or page information."
      },
      "IHubCartCommodity.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "sale": {
            "$ref": "#/components/schemas/IHubSale.IRequest.ISearch",
            "title": "The listing of the product",
            "description": "The listing of the product."
          }
        }
      },
      "IHubCartDiscountable": {
        "type": "object",
        "properties": {
          "deposit": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "Total amount of available deposit",
            "description": "Total amount of available deposit.\n\nIf the current {@link IHubCustomer customer} has not yet been authenticated\nas a {@link IHubCitizen citizen}, the `null` value is returned."
          },
          "combinations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubCartDiscountable.ICombination"
            },
            "title": "List of applicable discount coupon combinations",
            "description": "List of applicable discount coupon combinations.\n\nThis is an array of {@link IHubCoupon discount coupons} that can be\napplied simultaneously to receive multiple discounts, and is arranged\nin order of highest total discount amount.\n\nThat is, the combinations with the highest expected total discount\n{@link IHubCouponCombination.amount} are sorted in descending order."
          }
        },
        "required": [
          "deposit",
          "combinations"
        ],
        "description": "Information on discount methods that can be applied to the shopping cart.\n\n`IHubCartDiscountable` is an entity that represents the\n{@link IHubMileageAggregate total amount of mileage} or\n{@link IHubCouponCombination combination of discount coupons} that can be\nused for {@link IHubCartCommodity raw materials} that\n{@link IHubCustomer customer} has added or is trying to add to the\n{@link IHubCart shopping cart}.\n\nNote that the item referred to here refers not only to {@link IHubCartItem}\nthat is in the shopping cart, but also {@link IHubCartItem.ICreate} that is\nnot yet in the shopping cart but is trying to be added. In other words,\n`IHubCartDiscountable` can request discount information for\n{@link IHubSale products} that are not yet in the shopping cart."
      },
      "IHubCartDiscountable.ICombination": {
        "type": "object",
        "properties": {
          "coupons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubCoupon"
            },
            "title": "Discount Coupon List",
            "description": "Discount Coupon List.\n\nA list of discount coupons that have not yet been issued as tickets,\nbut are available for issuance."
          },
          "tickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubCouponTicket"
            },
            "title": "List of previously issued discount coupon tickets",
            "description": "List of previously issued discount coupon tickets."
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubCartDiscountable.IEntry"
            },
            "title": "List of total fixed cost reduction amounts for each discount coupon",
            "description": "List of total fixed cost reduction amounts for each discount coupon."
          },
          "amount": {
            "type": "number",
            "title": "Total amount of fixed cost reduction due to this combination",
            "description": "Total amount of fixed cost reduction due to this combination."
          }
        },
        "required": [
          "coupons",
          "tickets",
          "entries",
          "amount"
        ],
        "description": "Applicable discount coupon combinations."
      },
      "IHubCartDiscountable.IEntry": {
        "type": "object",
        "properties": {
          "commodity_id": {
            "type": "string",
            "format": "uuid",
            "title": "{@link IHubCartCommodity.id} of the target raw material",
            "description": "{@link IHubCartCommodity.id} of the target raw material."
          },
          "pseudo": {
            "type": "boolean",
            "title": "Fake or not",
            "description": "Fake or not.\n\nWhether it is a fake raw material randomly assembled from a specific\n{@link IHubSale listing}, rather than an actual\n{@link IHubCartCommodity shopping cart raw material}."
          },
          "coupon_id": {
            "type": "string",
            "format": "uuid",
            "title": "{@link IHubCoupon.id} for the target discount coupon",
            "description": "{@link IHubCoupon.id} for the target discount coupon."
          },
          "amount": {
            "type": "number",
            "title": "Total amount of fixed cost reduction due to discount coupons",
            "description": "Total amount of fixed cost reduction due to discount coupons."
          }
        },
        "required": [
          "commodity_id",
          "pseudo",
          "coupon_id",
          "amount"
        ],
        "description": "Mapping information for individual discount coupons and shopping cart materials.\n\nInformation describing how much fixed cost reduction each discount coupon\nwill produce for each shopping cart material."
      },
      "IHubCartDiscountable.IRequest": {
        "type": "object",
        "properties": {
          "commodity_ids": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            ],
            "title": "A list of IDs of target cart items",
            "description": "A list of IDs of target cart items.\n\nIf this value is NULL, all {@link IHubCartCommodity raw materials}\nin {@link IHubCart cart} will be targeted."
          },
          "pseudos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubCartCommodity.ICreate"
            },
            "title": "Product raw material input information",
            "description": "Product raw material input information.\n\nBefore actually entering {@link IHubCartCommodity raw material} in the\nshopping cart, you can receive discount information in advance, assuming that the\n{@link IHubCartCommodity raw material} is actually entered in the shopping cart.\n\nThat is, `IHubCartDiscountable` can request discount information even for\n{@link IHubSale products} that are not yet in the shopping cart."
          }
        },
        "required": [
          "commodity_ids",
          "pseudos"
        ],
        "description": "Shopping cart discount combination request information."
      },
      "IHubCartCommodity.ICreate": {
        "type": "object",
        "properties": {
          "sale_id": {
            "type": "string",
            "format": "uuid",
            "title": "Property ID",
            "description": "Property ID."
          },
          "stocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubCartCommodityStock.ICreate"
            },
            "minItems": 1,
            "title": "Final stock list",
            "description": "Final stock list."
          }
        },
        "required": [
          "sale_id",
          "stocks"
        ],
        "description": "Enter information to create products in your shopping cart."
      },
      "IHubCartCommodityStock.ICreate": {
        "type": "object",
        "properties": {
          "unit_id": {
            "type": "string",
            "format": "uuid",
            "title": "The listing unit ID",
            "description": "The listing unit ID."
          },
          "stock_id": {
            "type": "string",
            "format": "uuid",
            "title": "The ID of the target stock",
            "description": "The ID of the target stock.\n\nPlease note that the backend server verifies that the target stock matches the\nselection information of {@link choices}. Therefore, if you enter an incorrect value,\nthe shopping cart product registration will not work properly, so please be careful\nabout this."
          },
          "price_id": {
            "type": "string",
            "format": "uuid",
            "title": "The ID of the target stock price",
            "description": "The ID of the target stock price."
          },
          "choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubCartCommodityStockChoice.ICreate"
            },
            "title": "Final product selection",
            "description": "Final product selection.\n\nSee {@link IHubCartCommodityStockChoice.ICreate}."
          }
        },
        "required": [
          "unit_id",
          "stock_id",
          "price_id",
          "choices"
        ],
        "description": "Enter the final composition information for the items in your shopping cart."
      },
      "IHubCartCommodityStockChoice.ICreate": {
        "type": "object",
        "properties": {
          "option_id": {
            "type": "string",
            "title": "Option ID",
            "description": "Option ID."
          },
          "candidate_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "title": "The selected candidate item ID",
            "description": "The selected candidate item ID."
          },
          "value": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              }
            ],
            "title": "The value provided by the customer for the descriptive option",
            "description": "The value provided by the customer for the descriptive option."
          }
        },
        "required": [
          "option_id",
          "candidate_id",
          "value"
        ],
        "description": "Enter information to select options for the final stocks in your shopping cart."
      },
      "IHubOrderGoodIssueComment.ICreate": {
        "type": "object",
        "properties": {
          "format": {
            "oneOf": [
              {
                "const": "txt"
              },
              {
                "const": "html"
              },
              {
                "const": "md"
              }
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "body": {
            "type": "string",
            "title": "Content body of comment",
            "description": "Content body of comment."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "required": [
          "format",
          "body",
          "files"
        ],
        "description": "Enter information for commenting on issue posts."
      },
      "IHubOrderGoodIssueComment.ISnapshot": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of snapshot record",
            "description": "Creation time of snapshot record.\n\nIn other words, creation time or update time or comment."
          },
          "format": {
            "oneOf": [
              {
                "const": "txt"
              },
              {
                "const": "html"
              },
              {
                "const": "md"
              }
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "body": {
            "type": "string",
            "title": "Content body of comment",
            "description": "Content body of comment."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "required": [
          "id",
          "created_at",
          "format",
          "body",
          "files"
        ]
      },
      "IHubOrderGoodIssueFeeAccept.ICreate": {
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/IHubCustomer",
            "title": "Clients who have been billed a fee",
            "description": "Clients who have been billed a fee."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          },
          "published_at": {
            "type": "string",
            "format": "date-time",
            "title": "Effective date and time of acceptance of the fee",
            "description": "Effective date and time of acceptance of the fee."
          }
        },
        "required": [
          "customer",
          "created_at",
          "published_at"
        ],
        "description": "Enter information to accept the fee."
      },
      "IPageIHubOrderGoodIssueFee": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubOrderGoodIssueFee"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubOrderGoodIssueFee.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IHubOrderGoodIssueFee.IRequest.ISearch",
            "title": "Search criteria",
            "description": "Search criteria."
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-fee.price"
                },
                {
                  "const": "-fee.created_at"
                },
                {
                  "const": "+fee.price"
                },
                {
                  "const": "+fee.created_at"
                }
              ]
            },
            "title": "Sorting conditions",
            "description": "Sorting conditions."
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Search for fee information or page information."
      },
      "IHubOrderGoodIssueFee.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "min_price": {
            "type": "number",
            "title": "Minimum fee amount",
            "description": "Minimum fee amount."
          },
          "max_price": {
            "type": "number",
            "title": "Maximum amount of attorney fees",
            "description": "Maximum amount of attorney fees."
          }
        }
      },
      "IHubOrderGoodIssue.ICreate": {
        "type": "object",
        "properties": {
          "format": {
            "oneOf": [
              {
                "const": "txt"
              },
              {
                "const": "html"
              },
              {
                "const": "md"
              }
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "title": {
            "type": "string",
            "title": "Title of article",
            "description": "Title of article."
          },
          "body": {
            "type": "string",
            "title": "Content body of article",
            "description": "Content body of article."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "required": [
          "format",
          "title",
          "body",
          "files"
        ],
        "description": "Issue article input information."
      },
      "IExecutionResult.IFailure": {
        "type": "object",
        "properties": {
          "success": {
            "const": false
          },
          "error": {}
        },
        "required": [
          "success",
          "error"
        ]
      },
      "IExecutionResult.ISuccessany": {
        "type": "object",
        "properties": {
          "success": {
            "const": true
          },
          "value": {}
        },
        "required": [
          "success",
          "value"
        ]
      },
      "IHubOrderGood.IExecute": {
        "type": "object",
        "properties": {
          "unit_id": {
            "type": "string",
            "format": "uuid",
            "title": "{@link IHubSaleUnit.id} of the target unit",
            "description": "{@link IHubSaleUnit.id} of the target unit."
          },
          "method": {
            "oneOf": [
              {
                "const": "delete"
              },
              {
                "const": "get"
              },
              {
                "const": "head"
              },
              {
                "const": "patch"
              },
              {
                "const": "post"
              },
              {
                "const": "put"
              }
            ],
            "title": "METHOD for calling API",
            "description": "METHOD for calling API."
          },
          "path": {
            "type": "string",
            "title": "PATH for API calls",
            "description": "PATH for API calls."
          },
          "arguments": {
            "type": "array",
            "items": {},
            "title": "A list of parameters to be passed to the function",
            "description": "A list of parameters to be passed to the function."
          }
        },
        "required": [
          "unit_id",
          "method",
          "path",
          "arguments"
        ]
      },
      "IHubOrderGoodHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "method": {
            "oneOf": [
              {
                "const": "delete"
              },
              {
                "const": "get"
              },
              {
                "const": "head"
              },
              {
                "const": "patch"
              },
              {
                "const": "post"
              },
              {
                "const": "put"
              }
            ],
            "title": "The requested method",
            "description": "The requested method."
          },
          "path": {
            "type": "string",
            "title": "The requested path",
            "description": "The requested path."
          },
          "status": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "The status code of the response",
            "description": "The status code of the response."
          },
          "arguments": {
            "title": "The requested argument",
            "description": "The requested argument."
          },
          "output": {
            "title": "The results were responded to",
            "description": "The results were responded to."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          },
          "responded_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "The date and time the response was received",
            "description": "The date and time the response was received."
          }
        },
        "required": [
          "id",
          "method",
          "path",
          "status",
          "arguments",
          "output",
          "created_at",
          "responded_at"
        ]
      },
      "IStudioWorkflowStandalone": {
        "type": "object",
        "properties": {
          "commit": {
            "$ref": "#/components/schemas/IStudioRepositoryCommit",
            "title": "Commit information",
            "description": "Commit information."
          },
          "workflow": {
            "$ref": "#/components/schemas/IStudioWorkflow",
            "title": "Workflow information",
            "description": "Workflow information."
          }
        },
        "required": [
          "commit",
          "workflow"
        ],
        "description": "Workflow standalone record information.\n\nWhen recording and modifying {@link IStudioRepositoryCommit commit},\nonly one {@link IStudioWorkflow workflow} file can be used as a DTO\nstructure to record/modify it.\n\n`IStudioWorkflowStandalone` is a DTO structure designed separately for\nfront-end developers, as only one workflow is currently stored in each\nrepository in the front-end application.\n\nPlease note that this structure will no longer be used when the front-end\nis upgraded in the future to be able to store multiple workflow documents\nin a single repository."
      },
      "IStudioWorkflow": {
        "type": "object",
        "properties": {
          "extension": {
            "const": "workflow",
            "title": "The extension is fixed to \"workflow\"",
            "description": "The extension is fixed to \"workflow\"."
          },
          "valid": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "boolean"
              }
            ],
            "title": "Validity",
            "description": "Validity.\n\nIndicates whether the workflow is executable.\n\nAt least the compile or execute function must be executed to check its validity,\nand until then, the value of this property is `null`.\n\nOf course, if it is a released workflow, this value must be `true`."
          },
          "icon": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uri"
              }
            ],
            "title": "URL of the representative icon",
            "description": "URL of the representative icon."
          },
          "thumbnail": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uri"
              }
            ],
            "title": "Workflow thumbnail image",
            "description": "Workflow thumbnail image.\n\nThis corresponds to the minimap or thumbnail image in the workflow editor."
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Workflow title",
            "description": "Workflow title."
          },
          "summary": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "A brief description of the workflow functions",
            "description": "A brief description of the workflow functions."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Detailed description of the workflow function",
            "description": "Detailed description of the workflow function."
          },
          "data": {
            "$ref": "#/components/schemas/IStudioWorkflowData",
            "title": "The main data of the workflow document",
            "description": "The main data of the workflow document."
          },
          "namespace": {
            "type": "string",
            "title": "Workflow namespace identifier",
            "description": "Workflow namespace identifier."
          },
          "meta_version": {
            "type": "string",
            "title": "Meta version",
            "description": "Meta version."
          },
          "connector_icons": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "title": "List of icons for the connectors used",
            "description": "List of icons for the connectors used."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "snapshot_id": {
            "type": "string",
            "format": "uuid",
            "title": "Snapshot ID",
            "description": "Snapshot ID."
          },
          "type": {
            "const": "workflow",
            "title": "Type of bucket",
            "description": "Type of bucket."
          },
          "commit_id": {
            "type": "string",
            "format": "uuid",
            "title": "The commit ID of the last modified snapshot",
            "description": "The commit ID of the last modified snapshot."
          },
          "migration": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IStudioRepositoryBucketMigration"
              }
            ],
            "title": "Information migrated from Studio 1.0",
            "description": "Information migrated from Studio 1.0."
          },
          "path": {
            "type": "string",
            "title": "The full path to the bucket",
            "description": "The full path to the bucket."
          },
          "location": {
            "type": "string",
            "title": "Path to the bucket's belonging folder",
            "description": "Path to the bucket's belonging folder."
          },
          "name": {
            "type": "string",
            "title": "The file name in the bucket",
            "description": "The file name in the bucket."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The initial creation time of the bucket",
            "description": "The initial creation time of the bucket.\n\nThat is, the same as the time of the commit that initially created the bucket."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "The last modified date of the bucket",
            "description": "The last modified date of the bucket.\n\nThat is, the date and time of the commit that last modified the bucket."
          }
        },
        "required": [
          "extension",
          "valid",
          "icon",
          "thumbnail",
          "title",
          "summary",
          "description",
          "data",
          "namespace",
          "meta_version",
          "connector_icons",
          "id",
          "snapshot_id",
          "type",
          "commit_id",
          "migration",
          "path",
          "location",
          "name",
          "created_at",
          "updated_at"
        ],
        "description": "Workflow document file.\n\n`IStudioWorkflow` is an entity that embodies a workflow document file,\nand is a type of file managed by {@link IStudioRepository repository},\nso it is also a subtype of {@link IStudioRepositoryBucket bucket}.\n\nTherefore, whenever a workflow document is modified, a new snapshot record\nis issued and accumulated, and this editing is done in units of\n{@link IStudioRepositoryCommit commit}.\n\nIn addition, the studio's workflow document embodies components for visual\nprogramming. Therefore, the workflow document can actually be converted into\nprogramming code (TypeScript), and becomes a standalone program when built\n(compiled + bundled).\n\nOf course, you can {@link IStudioRepositoryRelease release} the associated\nrepository to build and distribute other workflow documents or connector\nfunctions together with this workflow document.\n\n- Workflow-only build: For testing\n- Release: For distribution"
      },
      "IStudioWorkflowData": {
        "type": "object",
        "properties": {
          "components": {
            "$ref": "#/components/schemas/ISwaggerComponents",
            "title": "A collection of named types",
            "description": "A collection of named types.\n\nA collection of types used in the current workflow document and scripts\nin the same repository.\n\nThis is distinct from types used in release or swagger connector nodes."
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioWorkflowParameter"
            },
            "title": "List of parameter types",
            "description": "List of parameter types."
          },
          "arguments": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/IAstArrayLiteralExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstBinaryExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstCallExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstConditionalExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstParenthesizedExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstDeleteExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstNonNullExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstSpreadElementExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstElementAccessExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstObjectLiteralExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstPropertyAccessExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstTemplateExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstNumericLiteral"
                    },
                    {
                      "$ref": "#/components/schemas/IAstIdentifier"
                    },
                    {
                      "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
                    },
                    {
                      "$ref": "#/components/schemas/IAstStringLiteral"
                    },
                    {
                      "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
                    },
                    {
                      "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
                    },
                    {
                      "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
                    },
                    {
                      "$ref": "#/components/schemas/IAstTrueLiteral"
                    },
                    {
                      "$ref": "#/components/schemas/IAstFalseLiteral"
                    },
                    {
                      "$ref": "#/components/schemas/IAstNullLiteral"
                    },
                    {
                      "$ref": "#/components/schemas/IAstArrayFilterExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstArrayFlatExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
                    },
                    {
                      "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
                    },
                    {
                      "$ref": "#/components/schemas/IAstArrayMapExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstObjectFlatExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstObjectEntriesExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
                    },
                    {
                      "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
                    },
                    {
                      "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
                    },
                    {
                      "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
                    },
                    {
                      "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                      "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                      "CallExpression": "#/components/schemas/IAstCallExpression",
                      "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                      "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                      "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                      "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                      "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                      "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                      "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                      "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                      "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                      "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                      "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                      "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                      "Identifier": "#/components/schemas/IAstIdentifier",
                      "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                      "StringLiteral": "#/components/schemas/IAstStringLiteral",
                      "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                      "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                      "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                      "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                      "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                      "NullLiteral": "#/components/schemas/IAstNullLiteral",
                      "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                      "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                      "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                      "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                      "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                      "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                      "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                      "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                      "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                      "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                      "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                      "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
                    }
                  }
                }
              }
            ],
            "title": "A list of default argument values entered for the parameter",
            "description": "A list of default argument values entered for the parameter."
          },
          "output": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IConstant"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IString"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.ITuple"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IOneOf"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INull"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IUnknown"
              }
            ],
            "title": "Return type",
            "description": "Return type.\n\nThe `null` value means a return of type `void`."
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioWorkflowVariable"
            },
            "title": "A list of variables to be used by the workflow",
            "description": "A list of variables to be used by the workflow.\n\nEach variable can be referred to by {@link IAstWorkflowVariableIdentifier}."
          },
          "releases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioRepositoryRelease"
            },
            "title": "List of releases used",
            "description": "List of releases used.\n\nEach node within a release can be used as a connector."
          },
          "scripts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioWorkflowScriptConnector"
            },
            "title": "List of script connectors used",
            "description": "List of script connectors used."
          },
          "swaggers": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IStudioWorkflowSwagger.ILinkSwagger"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflowSwagger.IManualSwagger"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflowSwagger.IGoodSwagger"
                }
              ],
              "discriminator": {
                "propertyName": "source",
                "mapping": {
                  "link": "#/components/schemas/IStudioWorkflowSwagger.ILinkSwagger",
                  "manual": "#/components/schemas/IStudioWorkflowSwagger.IManualSwagger",
                  "good": "#/components/schemas/IStudioWorkflowSwagger.IGoodSwagger"
                }
              }
            },
            "title": "List of used swaggers",
            "description": "List of used swaggers.\n\nEach endpoint in swagger can be used as a connector."
          },
          "statements": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IStudioWorkflowBlockStatement"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflowBranchStatement"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflowCallStatement"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflowExpressionStatement"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflowSetStatement"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflowForEachStatement"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflowWhileStatement"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflowRepeatStatement"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflowReturnStatement"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflowSetReturnValueStatement"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflowBreakStatement"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflowContinueStatement"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "WorkflowBlockStatement": "#/components/schemas/IStudioWorkflowBlockStatement",
                  "WorkflowBranchStatement": "#/components/schemas/IStudioWorkflowBranchStatement",
                  "WorkflowCallStatement": "#/components/schemas/IStudioWorkflowCallStatement",
                  "WorkflowExpressionStatement": "#/components/schemas/IStudioWorkflowExpressionStatement",
                  "WorkflowSetStatement": "#/components/schemas/IStudioWorkflowSetStatement",
                  "WorkflowForEachStatement": "#/components/schemas/IStudioWorkflowForEachStatement",
                  "WorkflowWhileStatement": "#/components/schemas/IStudioWorkflowWhileStatement",
                  "WorkflowRepeatStatement": "#/components/schemas/IStudioWorkflowRepeatStatement",
                  "WorkflowReturnStatement": "#/components/schemas/IStudioWorkflowReturnStatement",
                  "WorkflowSetReturnValueStatement": "#/components/schemas/IStudioWorkflowSetReturnValueStatement",
                  "WorkflowBreakStatement": "#/components/schemas/IStudioWorkflowBreakStatement",
                  "WorkflowContinueStatement": "#/components/schemas/IStudioWorkflowContinueStatement"
                }
              }
            },
            "title": "List of Statement nodes deployed in the current workflow",
            "description": "List of Statement nodes deployed in the current workflow.\n\nA circular recursive relationship can be established between each\nnode through an arrow connection, so key-mapping is performed on the IDs\nof each node rather than a tree structure."
          },
          "chatbot_config": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IChatbotConfigV1"
              }
            ],
            "discriminator": {
              "propertyName": "chatbot_session_parameter_version",
              "mapping": {
                "v1": "#/components/schemas/IChatbotConfigV1"
              }
            },
            "title": "Settings when using as a chatbot (agent)",
            "description": "Settings when using as a chatbot (agent)."
          }
        },
        "required": [
          "components",
          "parameters",
          "arguments",
          "output",
          "releases",
          "scripts",
          "swaggers",
          "statements"
        ],
        "description": "The main data of the workflow document.\n\n`IStudioWorkflowMetadata` is an entity that visualizes the main data of\nthe workflow document.\n\nIt contains information about each connector node and their connection codes\nplaced in the workflow document. And since the workflow document is also\ninterpreted as a function, meta information about the workflow itself\nis also included.\n\nFor reference, the reason {@link IStudioWorkflowConnector connector} is\nseparated from each node is because one connector function can be used in\nmultiple connector nodes ({@link IStudioWorkflowCallStatement}). And the reason\nwhy each node of each workflow is not a tree structure like an AST node\nin programming, but a key-mapping structure that indirectly references\n{@link IStudioWorkflowStatement.id} is also similar. This is because each node\nof the workflow can establish a circular recursive relationship depending\non the arrow connection relationship between them."
      },
      "IStudioWorkflowParameter": {
        "type": "object",
        "properties": {
          "schema": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IConstant"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IString"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.ITuple"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IOneOf"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INull"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IUnknown"
              }
            ],
            "title": "Type information for parameters",
            "description": "Type information for parameters."
          },
          "required": {
            "type": "boolean",
            "title": "Whether required or not",
            "description": "Whether required or not."
          },
          "title": {
            "type": "string",
            "title": "The title of the parameter",
            "description": "The title of the parameter."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Detailed description of the parameters",
            "description": "Detailed description of the parameters."
          }
        },
        "required": [
          "schema",
          "required",
          "title",
          "description"
        ],
        "description": "Parameter information of the workflow document.\n\n`IStudioWorkflowParameter` is an entity that visualizes the type and\ndescription information for each parameter of\n{@link IStudioWorkflowParameter workflow document}. This is possible because\nthe workflow document is also a kind of function as its build result.\n\nFor reference, each parameter of the workflow document can be referred to\nas {@link IAstWorkflowParameterIdentifier} on the AST node."
      },
      "IAstArrayLiteralExpression": {
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IAstArrayLiteralExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstBinaryExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstCallExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstConditionalExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstParenthesizedExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstDeleteExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstNonNullExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstSpreadElementExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstElementAccessExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstObjectLiteralExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstPropertyAccessExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstTemplateExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstNumericLiteral"
                },
                {
                  "$ref": "#/components/schemas/IAstIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
                },
                {
                  "$ref": "#/components/schemas/IAstStringLiteral"
                },
                {
                  "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstTrueLiteral"
                },
                {
                  "$ref": "#/components/schemas/IAstFalseLiteral"
                },
                {
                  "$ref": "#/components/schemas/IAstNullLiteral"
                },
                {
                  "$ref": "#/components/schemas/IAstArrayFilterExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstArrayFlatExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstArrayMapExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstObjectFlatExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstObjectEntriesExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                  "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                  "CallExpression": "#/components/schemas/IAstCallExpression",
                  "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                  "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                  "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                  "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                  "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                  "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                  "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                  "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                  "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                  "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                  "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                  "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                  "Identifier": "#/components/schemas/IAstIdentifier",
                  "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                  "StringLiteral": "#/components/schemas/IAstStringLiteral",
                  "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                  "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                  "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                  "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                  "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                  "NullLiteral": "#/components/schemas/IAstNullLiteral",
                  "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                  "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                  "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                  "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                  "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                  "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                  "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                  "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                  "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                  "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                  "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                  "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
                }
              }
            },
            "title": "A list of expressions for each element in the array",
            "description": "A list of expressions for each element in the array."
          },
          "type": {
            "const": "ArrayLiteralExpression",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "elements",
          "type"
        ],
        "description": "Array expression.\n\n```typescript\n[...elements]\n```"
      },
      "IAstBinaryExpression": {
        "type": "object",
        "properties": {
          "left": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            },
            "title": "Left-hand expression",
            "description": "Left-hand expression."
          },
          "operator": {
            "oneOf": [
              {
                "const": "^"
              },
              {
                "const": "-"
              },
              {
                "const": "*"
              },
              {
                "const": "/"
              },
              {
                "const": "+"
              },
              {
                "const": "%"
              },
              {
                "const": "&"
              },
              {
                "const": "="
              },
              {
                "const": "|"
              },
              {
                "const": "<"
              },
              {
                "const": ">"
              },
              {
                "const": "=="
              },
              {
                "const": "==="
              },
              {
                "const": "!="
              },
              {
                "const": "!=="
              },
              {
                "const": "<="
              },
              {
                "const": ">="
              },
              {
                "const": "??"
              },
              {
                "const": "||"
              },
              {
                "const": "&&"
              },
              {
                "const": "<<"
              },
              {
                "const": ">>"
              },
              {
                "const": ">>>"
              },
              {
                "const": "-="
              },
              {
                "const": "*="
              },
              {
                "const": "/="
              },
              {
                "const": "+="
              },
              {
                "const": "%="
              },
              {
                "const": "??="
              },
              {
                "const": "||="
              },
              {
                "const": "&&="
              },
              {
                "const": "^="
              },
              {
                "const": "&="
              },
              {
                "const": "|="
              },
              {
                "const": "<<="
              },
              {
                "const": ">>="
              },
              {
                "const": ">>>="
              }
            ],
            "title": "Operator",
            "description": "Operator."
          },
          "right": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            },
            "title": "Right-hand expression",
            "description": "Right-hand expression."
          },
          "type": {
            "const": "BinaryExpression",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "left",
          "operator",
          "right",
          "type"
        ],
        "description": "Binary expression.\n\nAn expression expressed by a left-hand side, an operator, and a right-hand side.\n\n```typescript\nleft operator right\n```"
      },
      "IAstCallExpression": {
        "type": "object",
        "properties": {
          "expression": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            },
            "title": "Function expression",
            "description": "Function expression."
          },
          "questionDotToken": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "const": "?."
              }
            ],
            "title": "Nullish coalescing operator token",
            "description": "Nullish coalescing operator token."
          },
          "arguments": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IAstArrayLiteralExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstBinaryExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstCallExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstConditionalExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstParenthesizedExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstDeleteExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstNonNullExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstSpreadElementExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstElementAccessExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstObjectLiteralExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstPropertyAccessExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstTemplateExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstNumericLiteral"
                },
                {
                  "$ref": "#/components/schemas/IAstIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
                },
                {
                  "$ref": "#/components/schemas/IAstStringLiteral"
                },
                {
                  "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstTrueLiteral"
                },
                {
                  "$ref": "#/components/schemas/IAstFalseLiteral"
                },
                {
                  "$ref": "#/components/schemas/IAstNullLiteral"
                },
                {
                  "$ref": "#/components/schemas/IAstArrayFilterExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstArrayFlatExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstArrayMapExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstObjectFlatExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstObjectEntriesExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                  "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                  "CallExpression": "#/components/schemas/IAstCallExpression",
                  "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                  "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                  "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                  "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                  "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                  "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                  "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                  "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                  "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                  "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                  "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                  "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                  "Identifier": "#/components/schemas/IAstIdentifier",
                  "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                  "StringLiteral": "#/components/schemas/IAstStringLiteral",
                  "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                  "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                  "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                  "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                  "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                  "NullLiteral": "#/components/schemas/IAstNullLiteral",
                  "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                  "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                  "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                  "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                  "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                  "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                  "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                  "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                  "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                  "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                  "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                  "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
                }
              }
            },
            "title": "A list of expressions for arguments",
            "description": "A list of expressions for arguments."
          },
          "type": {
            "const": "CallExpression",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "expression",
          "questionDotToken",
          "arguments",
          "type"
        ],
        "description": "Function call expression.\n\n```typescript\nexpression(...arguments)\n```"
      },
      "IAstConditionalExpression": {
        "type": "object",
        "properties": {
          "condition": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            }
          },
          "whenTrue": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            }
          },
          "whenFalse": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            }
          },
          "type": {
            "const": "ConditionalExpression",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "condition",
          "whenTrue",
          "whenFalse",
          "type"
        ],
        "description": "Ternary operator expression\n\n```typescript\ncondition ? whenTrue : whenFalse\n```"
      },
      "IAstParenthesizedExpression": {
        "type": "object",
        "properties": {
          "expression": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            },
            "description": "Expressions within parentheses"
          },
          "type": {
            "const": "ParenthesizedExpression",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "expression",
          "type"
        ],
        "description": "Parentheses expression.\n\n```typescript\n(expression)\n```"
      },
      "IAstDeleteExpression": {
        "type": "object",
        "properties": {
          "expression": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            }
          },
          "type": {
            "const": "DeleteExpression",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "expression",
          "type"
        ],
        "description": "Delete expression.\n\n```typescript\ndelete {expression}\n```"
      },
      "IAstNonNullExpression": {
        "type": "object",
        "properties": {
          "expression": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            },
            "title": "Target expression",
            "description": "Target expression."
          },
          "type": {
            "const": "NonNullExpression",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "expression",
          "type"
        ],
        "description": "Non-null expressions.\n\nIf you put an exclamation mark (`!`) at the end of an identifier expression,\nit becomes an expression that asserts that the identifier is not `null`\nor `undefined`.\n\n```typescript\nconst nullable: number | null = null;\nconst nonNull: number = nullable!;\n```"
      },
      "IAstSpreadElementExpression": {
        "type": "object",
        "properties": {
          "expression": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            },
            "title": "An expression for the Spread target object",
            "description": "An expression for the Spread target object."
          },
          "type": {
            "const": "SpreadElementExpression",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "expression",
          "type"
        ],
        "description": "Spreada element (`...`) expression.\n\n```typescript\n...expression\n```"
      },
      "IAstElementAccessExpression": {
        "type": "object",
        "properties": {
          "expression": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            },
            "title": "Original object expression",
            "description": "Original object expression."
          },
          "questionDotToken": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "const": "?."
              }
            ],
            "title": "Nullish coalescing operator",
            "description": "Nullish coalescing operator."
          },
          "argumentExpression": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            },
            "title": "Element access expressions",
            "description": "Element access expressions."
          },
          "type": {
            "const": "ElementAccessExpression",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "expression",
          "questionDotToken",
          "argumentExpression",
          "type"
        ],
        "description": "Member access expressions for elements.\n\n```typescript\nexpression[argumentExpression]\nexpression?.[argumentExpression]\n```"
      },
      "IAstObjectLiteralExpression": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IAstPropertyAssignment"
                },
                {
                  "$ref": "#/components/schemas/IAstShorthandPropertyAssignment"
                },
                {
                  "$ref": "#/components/schemas/IAstSpreadAssignment"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "PropertyAssignment": "#/components/schemas/IAstPropertyAssignment",
                  "ShorthandPropertyAssignment": "#/components/schemas/IAstShorthandPropertyAssignment",
                  "SpreadAssignment": "#/components/schemas/IAstSpreadAssignment"
                }
              }
            },
            "title": "A list of attribute expressions",
            "description": "A list of attribute expressions."
          },
          "type": {
            "const": "ObjectLiteralExpression",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "properties",
          "type"
        ],
        "description": "Object literal expression.\n\n```typescript\nconnst value = 3;\nconst obj = {\n  someKey: \"value\", // PropertyAssignment\n  value, // ShorthandPropertyAssignment\n  ...another, // SpreadAssignment\n}\n```"
      },
      "IAstPropertyAssignment": {
        "type": "object",
        "properties": {
          "name": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstComputedPropertyName"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "ComputedPropertyName": "#/components/schemas/IAstComputedPropertyName"
              }
            },
            "title": "Expressions for attribute names",
            "description": "Expressions for attribute names."
          },
          "initializer": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            },
            "title": "The initial allocation expression given",
            "description": "The initial allocation expression given."
          },
          "type": {
            "const": "PropertyAssignment",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "name",
          "initializer",
          "type"
        ],
        "description": "Property Assignment.\n\nThe left property name is `name`, and the right assigned value `value`\nis `initializer`.\n\n```typescript\nconst obj = {\n  \"something\": value, // StringLiteral\n  `nothing`: value, // NoSubstitutionTemplateLiteral\n  [key]: value, // ComputedPropertyName\n}\n```"
      },
      "IAstIdentifier": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "title": "Text that embodies the identifier",
            "description": "Text that embodies the identifier.\n\nIt must be a single identifier target, not a property access expression or\nelement access expression.\n\nHowever, for developers who are not familiar with programming ASTs,\nit is initially allowed."
          },
          "type": {
            "const": "Identifier",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "text",
          "type"
        ],
        "description": "Identifier expression.\n\n```typescript\nexport const value: number = 0;\n\nvalue // -> (`IAstIdentifier.text` := \"value\") identifier expression\n```\n\nNote that {@link IAstIdentifier.text}, which is a representation of the target\nidentifier, should not, in principle, replace a\n{@link IAstPropertyAccessExpression property access expression} or\n{@link IAstElementAccessExpression element access expression}.\n\nIn other words, the following two cases are not allowed:\n\n- `value.x`\n- `value[0]`\n\nHowever, for developers who are not familiar with programming ASTs, this is\nallowed in the early stages of Studio development."
      },
      "IAstNumericLiteral": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "title": "Text that represents a number",
            "description": "Text that represents a number.\n\nThis value may contain some special characters.\n\nIf you want to represent a negative number, you must not include\nthe negative sign `-` in the text, and you must combine with the\n{@link IAstPrefixUnaryExpression}.\n\n- `1_000_000`\n- `0x17e5a2b`\n- `1.7e+3`"
          },
          "type": {
            "const": "NumericLiteral",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "text",
          "type"
        ],
        "description": "Number letters."
      },
      "IAstNoSubstitutionTemplateLiteral": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "title": "Text value",
            "description": "Text value."
          },
          "type": {
            "const": "NoSubstitutionTemplateLiteral",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "text",
          "type"
        ],
        "description": "Be a template expression without substitution.\n\n`IAstNoSubstitutionTemplateLiteral` is a structure used when a template\nexpression is used without a single variable binding.\n\nOf course, if variable bindings are added to the template expression later,\nthe target node must be changed to {@link IAstTemplateExpression}."
      },
      "IAstStringLiteral": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "title": "A text string that represents a character",
            "description": "A text string that represents a character.\n\nHowever, for template literals, use {@link IAstTemplateLiteralExpression}."
          },
          "type": {
            "const": "StringLiteral",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "text",
          "type"
        ],
        "description": "String text."
      },
      "IAstComputedPropertyName": {
        "type": "object",
        "properties": {
          "expression": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            },
            "title": "Expressions for variable property names",
            "description": "Expressions for variable property names."
          },
          "type": {
            "const": "ComputedPropertyName",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "expression",
          "type"
        ],
        "description": "Computed property name (mutable property name).\n\nThe `[key]` part in the code below is the mutable property, `ComputedPropertyName`.\n\n```typescript\nconst value = \"something\";\nconst obj = {\n  [key]: value,\n}\n```"
      },
      "IAstPrefixUnaryExpression": {
        "type": "object",
        "properties": {
          "operator": {
            "oneOf": [
              {
                "const": "-"
              },
              {
                "const": "+"
              },
              {
                "const": "!"
              },
              {
                "const": "~"
              },
              {
                "const": "++"
              },
              {
                "const": "--"
              }
            ],
            "title": "Types of prefix operators",
            "description": "Types of prefix operators."
          },
          "operand": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            },
            "title": "Operator expression",
            "description": "Operator expression."
          },
          "type": {
            "const": "PrefixUnaryExpression",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "operator",
          "operand",
          "type"
        ],
        "description": "Prefix operator expression.\n\n```typescript\n++x;\n!y;\n~z;\n```"
      },
      "IAstPostfixUnaryExpression": {
        "type": "object",
        "properties": {
          "operator": {
            "oneOf": [
              {
                "const": "++"
              },
              {
                "const": "--"
              }
            ],
            "title": "Types of postfix operators",
            "description": "Types of postfix operators."
          },
          "operand": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            },
            "title": "Operator expression",
            "description": "Operator expression."
          },
          "type": {
            "const": "PostfixUnaryExpression",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "operator",
          "operand",
          "type"
        ],
        "description": "Postfix operator expression.\n\n```typescript\nx++;\ny--;\n```"
      },
      "IAstPropertyAccessExpression": {
        "type": "object",
        "properties": {
          "expression": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            },
            "title": "Original object expression",
            "description": "Original object expression."
          },
          "questionDotToken": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "const": "?."
              }
            ],
            "title": "Nullish coalescing operator",
            "description": "Nullish coalescing operator."
          },
          "name": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "Identifier": "#/components/schemas/IAstIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              }
            },
            "title": "Attribute identifier expression",
            "description": "Attribute identifier expression.\n\nIf the type of the {@link name} object used is not {@link IAstIdentifier} but\n{@link IAstWorkflowCallStatementResultIdentifier} or\n{@link IAstWorkflowLoopStatementResultIdentifier}, then\nthis corresponds to the situation under {@link expression}.\n\nThat is, the object indirectly referenced through {@link expression} is an array variable\ncreated through a loop statement such as\n{@link IStudioWorkflowForEachStatement} or\n{@link IStudioWorkflowWhileStatement}.\n\n```typescript { type: \"PropertyAccessExpression\", expression: { type: \"ElementAccessExpression\", expression: { type: \"WorkflowLoopStatementResultIdentifier\", loop_statement_id: \"some_for_each_statement_id\", }, questionDotToken: null, argumentExpression: { type: \"NumericLiteral\", text: \"0\", }, }, questionDotToken: null, name: { type: \"Work flowCallStatementResultIdentifier\", call_statement_id: \"some_call_statement_id_placed_in_a_block_of_loop_node\", }, } ```"
          },
          "type": {
            "const": "PropertyAccessExpression",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "expression",
          "questionDotToken",
          "name",
          "type"
        ],
        "description": "Property access expression.\n\n```typescript\nexression.name\nexpression?.name\n{\n  expression := {\n    type := \"ElementAccessExpression\",\n    expression := IAstWorkflowLoopStatementResultIdentifier,\n    argumentExpression := NumericLiteral(0)\n  },\n  name := IAstWorkflowCallStatementResultIdentifier\n}\n```"
      },
      "IAstTemplateExpression": {
        "type": "object",
        "properties": {
          "head": {
            "$ref": "#/components/schemas/IAstTemplateHead",
            "title": "The first part of the template string",
            "description": "The first part of the template string."
          },
          "spans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAstTemplateSpan"
            },
            "title": "A list of pairs of template target identifiers and characters",
            "description": "A list of pairs of template target identifiers and characters."
          },
          "type": {
            "const": "TemplateExpression",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "head",
          "spans",
          "type"
        ],
        "description": "Template literal expression.\n\n```typescript\n{\n  text: \"Hello, ${customer}! Welcome to ${store} site!\",\n  head: `Hello, `\n  spans: [\n    { expression: customer, text: `! Welcome to` },\n    { expression: store, text: ` site!` },\n  ],\n}\n```"
      },
      "IAstTemplateHead": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "title": "The very first string section",
            "description": "The very first string section.\n\nIf binding starts from the first letter, leave it as an empty string `\"\"`."
          },
          "type": {
            "const": "TemplateHead",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "text",
          "type"
        ],
        "description": "The header of the template string expression.\n\n```typescript\n`My name is ${mname}.`\n\n// head => \"My name is \"\n```"
      },
      "IAstTemplateSpan": {
        "type": "object",
        "properties": {
          "expression": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            },
            "title": "Binding expression",
            "description": "Binding expression."
          },
          "text": {
            "type": "string",
            "title": "The text string section thereafter",
            "description": "The text string section thereafter."
          },
          "type": {
            "const": "TemplateSpan",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "expression",
          "text",
          "type"
        ],
        "description": "A pair of binding expressions and text that make up a template string.\n\n```typescript\n`${expression} text`\n```"
      },
      "IAstWorkflowVariableIdentifier": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "title": "Target variable name",
            "description": "Target variable name.\n\nCorresponds to {@link IStudioWorkflowVariable.name} in the workflow data."
          },
          "type": {
            "const": "WorkflowVariableIdentifier",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "text",
          "type"
        ],
        "description": "Workflow variable identifier expression.\n\n{@link IStudioWorkflow workflow} can declare user-defined variables\n{@link IStudioWorkflowVariable}. `IAstWorkflowVariableIdentifier` is the\nidentifier for these user-defined variables.\n\nTherefore, {@link text} must match the value of\n{@link IStudioWorkflowVariable.name} declared in\n{@link IStudioWorkflowData.variables}."
      },
      "IAstWorkflowEnvironmentVariableIdentifier": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "title": "{@link IStudioAccountSecret.key key value} of the target global variable",
            "description": "{@link IStudioAccountSecret.key key value} of the target global variable."
          },
          "type": {
            "const": "WorkflowEnvironmentVariableIdentifier",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "text",
          "type"
        ],
        "description": "Environment variable identifier expression.\n\n`WorkflowEnvironmentVariableIdentifier` is an expression that identifies\nan environment variable used in the studio system."
      },
      "IAstWorkflowMetadataIdentifier": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "title": "The name of the workflow metadata identifier",
            "description": "The name of the workflow metadata identifier."
          },
          "type": {
            "const": "WorkflowMetadataIdentifier",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "text",
          "type"
        ],
        "description": "`WorkflowMetadataIdentifier` is an expression that identifies the dynamic\nmetadata required to execute a workflow in the studio system."
      },
      "IAstTrueLiteral": {
        "type": "object",
        "properties": {
          "type": {
            "const": "TrueLiteral",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "type"
        ],
        "description": "`true` text."
      },
      "IAstFalseLiteral": {
        "type": "object",
        "properties": {
          "type": {
            "const": "FalseLiteral",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "type"
        ],
        "description": "The `false` character."
      },
      "IAstNullLiteral": {
        "type": "object",
        "properties": {
          "type": {
            "const": "NullLiteral",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "type"
        ],
        "description": "`null` character."
      },
      "IAstArrayFilterExpression": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "The identifier ID of the current `Array.filter()` expression",
            "description": "The identifier ID of the current `Array.filter()` expression."
          },
          "expression": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            },
            "title": "An expression in the target array",
            "description": "An expression in the target array.\n\nAn expression in the target array to which the `Array.filter()` function will be applied."
          },
          "condition": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            },
            "title": "Filter condition expression",
            "description": "Filter condition expression.\n\nTransformation expression within the `Array.filter()` function.\n\n```typescript\nexpression.filter(\n// this is the transformer\n(value, i) =>\ni <= 5 || value > 10,\n);\n```"
          },
          "type": {
            "const": "ArrayFilterExpression",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "id",
          "expression",
          "condition",
          "type"
        ],
        "description": "`Array.filter()` function expression.\n\n`IAstArrayFilterExpression` is an interface that visualizes the\n`Array.filter()` function, which extracts only elements that satisfy\na specific condition from the original array and creates a new array.\n\n{@link expression} and {@link condition} represent the target array and condition,\nrespectively, and {@link id} is used to identify individual (parameter) elements\nand index numbers of the callback function that `Array.filter()` will use.\nSpecifically, it exists for the callback function parameter\n`Array.filter((element, index) => ...)`, which refers to individual elements,\nand {@link IAstArrayFunctionIndexIdentifier.expression_id}, which visualizes\nthe index number.\n\nBelow is an example of using `IAstArrayFilterExpression`.\n\n### Code example\n```typescript\nconst array: number[] = [...];\narray.filter((value, index) => index <= 5 || value > 10);\n```\n\n### Expression\n```typescript\n{\n  id: \"some_filter_expression_id\",\n  type: \"ArrayFilterExpression\",\n  expression: { type: \"Identifier\", text: \"array\" },\n  condition: {\n    type: \"BinaryExpression\",\n    left: {\n      type: \"BinaryExpression\",\n      left: { type: \"Identifier\", text: \"value\" },\n      operator: \"<=\",\n      right: { type: \"NumericLiteral\", text: \"5\" },\n    },\n    operator: \"&&\",\n    right: {\n      type: \"BinaryExpression\",\n      left: { type: \"Identifier\", text: \"value\" },\n      operator: \">\",\n      right: { type: \"NumericLiteral\", text: \"10\" },\n    },\n  },\n}\n```"
      },
      "IAstArrayFlatExpression": {
        "type": "object",
        "properties": {
          "expression": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            },
            "title": "Expressions for the target arrays to be merged",
            "description": "Expressions for the target arrays to be merged."
          },
          "type": {
            "const": "ArrayFlatExpression",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "expression",
          "type"
        ],
        "description": "Array serialization expression.\n\n`IAstArrayFlatExpression` is an interface that visualizes the\n`Array.flat()` function, which flattens a multidimensional array and creates\nan array with one dimension reduced by concatenating the internal elements.\n\n```typescript\nconst x: T[][] = [\n  [...],\n  [...],\n  [...],\n];\nconst y: T[] = x.flat();\n```"
      },
      "IAstArrayFunctionParameterIdentifier": {
        "type": "object",
        "properties": {
          "expression_id": {
            "type": "string",
            "title": "An identifier such as the target {@link IAstArrayMapExpression map expression}",
            "description": "An identifier such as the target {@link IAstArrayMapExpression map expression}."
          },
          "index": {
            "const": 0,
            "title": "The order of the parameters",
            "description": "The order of the parameters.\n\nProperty for when the array transformation function used is `Array.reduce((x, y, i))`, etc.\n\nCurrently, there is only {@link IAstArrayMapExpression},\nso we will use it by fixing its value to 0."
          },
          "type": {
            "const": "ArrayFunctionParameterIdentifier",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "expression_id",
          "index",
          "type"
        ],
        "description": "The identifier of individual elements of the `Array.map()` function.\n\n`ArrayFunctionParameterIdentifier` is an interface used to identify the\nparameters of the callback function in the array transformation function\nexpression.\n\nFor example, if the array transformation function expression used is\n{@link IAstArrayMapExpression}, then `ArrayFunctionParameterIdentifier` is\nused to identify `value` in `Array.map((value) => ({ ... }))`, and the value\nof {@link IAstArrayMapExpression.id} must match\n{@link IAstArrayFunctionParameterIdentifier.expression_id}.\n\nBelow is an example of using `IAstArrayFunctionParameterIdentifier` and\n{@link IAstArrayMapExpression}.\n\n### Code Example\n```typescript\nconst array: number[] = [];\narray.map((value, index) => {\n  return { id: value + index, age: 20 };\n});\n```\n\n### Expression\n```typescript\n{\n  type: \"ArrayMapExpression\",\n  id: \"some_map_expression_id\",\n  expression: { type: \"Identifier\", text: \"array\" },\n  transformer: {\n    type: \"ObjectLiteralExpression\",\n    properties: [\n      {\n        type: \"PropertyAssignment\",\n        name: { type: \"Identifier\", text: \"id\" },\n        initializer: {\n          type: \"BinaryExpression\",\n          left: {\n            type: \"ArrayFunctionParameterIdentifier\",\n            expression_id: \"some_map_expression_id\",\n            index: 0,\n          },\n          operator: \"+\",\n          right: {\n            type: \"ArrayFunctionIndexIdentifier\",\n            expression_id: \"some_map_expression_id\",\n          },\n        },\n      },\n      {\n        type: \"PropertyAssignment\",\n        name: { type: \"Identifier\", text: \"age\" },\n        initializer: { type: \"NumericLiteral\", text: \"20\" },\n      },\n    ],\n  },\n}\n```"
      },
      "IAstArrayFunctionIndexIdentifier": {
        "type": "object",
        "properties": {
          "expression_id": {
            "type": "string",
            "title": "An identifier such as the target {@link IAstArrayMapExpression map expression}",
            "description": "An identifier such as the target {@link IAstArrayMapExpression map expression}."
          },
          "type": {
            "const": "ArrayFunctionIndexIdentifier",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "expression_id",
          "type"
        ],
        "description": "Index number identifier in `Array.map()` function.\n\n`ArrayFunctionIndexIdentifier` is an interface used to identify the index\nnumber of the callback function in the array conversion function expression.\n\nFor example, if the array conversion function expression used is\n{@link IAstArrayMapExpression}, then `ArrayFunctionIndexIdentifier` is used to\nidentify `index` in `Array.map((_, index) => ({ ... }))` and the value of\n{@link IAstArrayMapExpression.id} must match\n{@link IAstArrayFunctionIndexIdentifier.expression_id}.\n\nBelow is an example of using `IAstArrayFunctionIndexIdentifier` and\n{@link IAstArrayMapExpression}.\n\n### Code Example\n```typescript\nconst array: number[] = [...];\narray.map((value) => {\n  return {\n    id: value + index,\n    age: 20,\n  };\n});\n```\n\n### Expression\n```typescript\n{\n  type: \"ArrayMapExpression\",\n  id: \"some_map_expression_id\",\n  expression: {\n    type: \"Identifier\",\n    text: \"array\",\n  },\n  transformer: {\n    type: \"ObjectLiteralExpression\",\n    properties: [\n      {\n        type: \"PropertyAssignment\",\n        name: {\n          type: \"Identifier\",\n          text: \"id\",\n        },\n        initializer: {\n          type: \"BinaryExpression\",\n          left: {\n            type: \"ArrayFunctionParameterIdentifier\",\n            expression_id: \"some_map_expression_id\",\n            index: 0,\n          },\n          operator: \"+\",\n          right: {\n            type: \"ArrayFunctionIndexIdentifier\",\n            expression_id: \"some_map_expression_id\",\n          },\n        },\n      },\n      {\n        type: \"PropertyAssignment\",\n        name: { type: \"Identifier\", text: \"age\" },\n        initializer: { type: \"NumericLiteral\", text: \"20\" },\n      },\n    ],\n  },\n}\n```"
      },
      "IAstArrayMapExpression": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "The identifier ID of the current `Array.map()` expression",
            "description": "The identifier ID of the current `Array.map()` expression."
          },
          "expression": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            },
            "title": "An expression for the target array",
            "description": "An expression for the target array.\n\nAn expression for the target array to which the `Array.map()` function will be applied."
          },
          "transformer": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            },
            "title": "Transformation expression",
            "description": "Transformation expression.\n\nTransformation expression within the `Array.map()` function.\n\n```typescript\nexpression.map(\n(value) => ({ // this is the transformer\nid: value.id + 1,\nage: 20\n}),\n);\n```"
          },
          "type": {
            "const": "ArrayMapExpression",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "id",
          "expression",
          "transformer",
          "type"
        ],
        "description": "`Array.map()` function expression.\n\n`IAstArrayMapExpression` is an interface that visualizes the `Array.map()`\nfunction, which transforms the original array into another type of array.\n\n{@link expression} and {@link transformer} represent the target array and\nthe transformation expression, respectively, and {@link id} is used to identify\nindividual (parameter) elements and index numbers of the callback function that\n`Array.map()` will use. Specifically, it exists for the callback function's\nparameter {@link IAstArrayFunctionParameterIdentifier.expression_id} that\nrefers to individual elements in `Array.map((element, index) => ...)` and\n{@link IAstArrayFunctionIndexIdentifier.expression_id} that visualizes\nthe index numbers.\n\nBelow is an example of using `IAstArrayMapExpression`.\n\n### Code example\n```typescript const array: number[] = [...];\narray.map((value, index) => {\n  return {\n    id: value + index,\n    age: 20,\n  };\n});\n```\n\n### Expression\n```typescript\n{\n  type: \"ArrayMapExpression\",\n  id: \"some_map_expression_id\",\n  expression: { type: \"Identifier\", text: \"array\" },\n  transformer: {\n    type: \"ObjectLiteralExpression\",\n    properties: [\n      {\n        type: \"PropertyAssignment\",\n        name: { type: \"Identifier\", text: \"id\" },\n        initializer: {\n          type: \"BinaryExpression\",\n          left: {\n            type: \"ArrayFunctionParameterIdentifier\",\n            expression_id: \"some_map_expression_id\",\n            index: 0,\n          },\n          operator: \"+\",\n          right: {\n            type: \"ArrayFunctionIndexIdentifier\",\n            expression_id: \"some_map_expression_id\",\n          },\n        },\n      },\n      {\n        type: \"PropertyAssignment\",\n        name: { type: \"Identifier\", text: \"age\" },\n        initializer: { type: \"NumericLiteral\", text: \"20\" },\n      },\n    ],\n  },\n}\n```"
      },
      "IAstObjectFlatExpression": {
        "type": "object",
        "properties": {
          "expression": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            },
            "title": "Expressions for the objects to be merged",
            "description": "Expressions for the objects to be merged."
          },
          "type": {
            "const": "ObjectFlatExpression",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "expression",
          "type"
        ],
        "description": "Object flattening expression.\n\n`IAstObjectFlatExpression` is an interface that visualizes the concept\nof flattening objects in an array into a single object.\n\n```typescript\nconst objects: Record<string, T>[] = [\n  { ... },\n  { ... },\n  { ... }\n];\nObject.assign({}, ...objects)\n```"
      },
      "IAstObjectEntriesExpression": {
        "type": "object",
        "properties": {
          "expression": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            },
            "title": "Target object expression",
            "description": "Target object expression."
          },
          "type": {
            "const": "ObjectEntriesExpression",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "expression",
          "type"
        ],
        "description": "`Object.entries()` expression.\n\nAn expression that returns all key value values of an object as an array.\n\nHowever, unlike JS's own `Object.entries()`, it is returned as an object\ntype, not a tuple type of key values, as follows.\n\n```typescript\nObject.entries(obj).map(\n  ([key, value]) => ({\n    key,\n    value,\n  })\n);\n```"
      },
      "IAstWorkflowParameterIdentifier": {
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "title": "The number of the target parameter",
            "description": "The number of the target parameter.\n\nA natural number in the range [0 ~ N)."
          },
          "type": {
            "const": "WorkflowParameterIdentifier",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "index",
          "type"
        ],
        "description": "Workflow parameter identifier expression.\n\n{@link IStudioWorkflow workflow document} is also conceptually expressed as a\nfunction, and accordingly, can have {@link IStudioWorkflowParameter own parameter}.\nAnd `IAstWorkflowParameterIdentifier` is an expression that identifies the\nparameter of the workflow document among the nodes placed in the workflow document.\n\nThat is, `IAstWorkflowParameterIdentifier` is a type of {@link IAstIdentifier},\n\nbut is a dedicated identifier expression for workflow parameters only.\n\n```typescript\nexport namespace Workflow {\n  export function main(p0: number, p1: number) {\n    p0; // { type: \"WorkflowParameterIdentifier\", index: 0 }\n    p1; // { type: \"WorkflowParameterIdentifier\", index: 1 }\n  }\n}\n```"
      },
      "IAstWorkflowCallStatementResultIdentifier": {
        "type": "object",
        "properties": {
          "call_statement_id": {
            "type": "string",
            "title": "Target connector function call statement identifier",
            "description": "Target connector function call statement identifier.\n\nYou can enter the {@link IStudioWorkflowCallStatement.id} value of the\ntarget connector function call statement."
          },
          "type": {
            "const": "WorkflowCallStatementResultIdentifier",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "call_statement_id",
          "type"
        ],
        "description": "The return result expression of the workflow connector function call statement.\n\nWhen a connector function is called in {@link IStudioWorkflow workflow document},\nthe function call statement at this time is expressed as\n{@link IStudioWorkflowCallStatement}. And the return value from the connector\nfunction is stored in **some variable**.\n\n`IAstWorkflowCallStatementResultIdentifier` is an expression that identifies\n**some variable** that stores the return value of this connector function. In\nother words, `IAstWorkflowCallStatementResultIdentifier` is a type of\n{@link IAstIdentifier}, but it is a dedicated identifier expression for\n**some variable** that stores the return value of the connector function\ncall statement.\n\n```typescript\nconst value = doSomething(); // identifier expression for value\n```"
      },
      "IAstWorkflowLoopStatementElementIdentifier": {
        "type": "object",
        "properties": {
          "loop_statement_id": {
            "type": "string",
            "title": "The identifier of the target loop",
            "description": "The identifier of the target loop.\n\nYou can enter the {@link IStudioWorkflowForEachStatement.id} value of\nthe target loop."
          },
          "type": {
            "const": "WorkflowLoopStatementElementIdentifier",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "loop_statement_id",
          "type"
        ],
        "description": "An identifier expression for an individual element of a workflow loop.\n\n`IAstWorkflowLoopStatementElementIdentifier` is an expression that\nidentifies an individual element in the loop\n{@link IStudioWorkflowForEachStatement} used in the\n{@link IStudioWorkflow Workflow Documentation}.\n\nThat is, `IAstWorkflowLoopStatementElementIdentifier` is a type of\n{@link IAstIdentifier} but is a dedicated identifier expression for\nindividual elements of a loop.\n\nThe code below should help you understand its meaning.\n\n```typescript\nfor (const elem of array) {\n  elem // identifier expression that refers to the variable elem\n}\n```"
      },
      "IAstWorkflowLoopStatementResultIdentifier": {
        "type": "object",
        "properties": {
          "loop_statement_id": {
            "type": "string",
            "title": "The identifier of the target loop statement",
            "description": "The identifier of the target loop statement.\n\nYou can enter the {@link IStudioWorkflowForEachStatement.id} or\n{@link IStudioWorkflowWhileStatement} value of the target loop statement."
          },
          "type": {
            "const": "WorkflowLoopStatementResultIdentifier",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "loop_statement_id",
          "type"
        ],
        "description": "An identifier expression for the return value of a workflow Loop statement.\n\nIn the {@link IStudioWorkflow workflow document}, if a loop such as\n{@link IStudioWorkflowForEachStatement} or {@link IStudioWorkflowWhileStatement}\nis used, all {@link IAstWorkflowCallStatementResultIdentifier local variables}\ngenerated by {@link IStudioWorkflowCallStatement connector function call}, etc.,\nwithin the loop block, are inserted into the array declared before the start of\nthe loop block.\n\n> However, if {@link IStudioWorkflowBreakStatement break} or\n> {@link IStudioWorkflowContinueStatement continue} statements are used within\n> the loop, local variables are not inserted into the array.\n\n`IAstWorkflowLoopStatementResultIdentifier` is an expression that identifies\nthe array containing the local variables generated in this loop. That is,\n`IAstWorkflowLoopStatementResultIdentifier` is a type of {@link IAstIdentifier},\nbut it is a dedicated identifier expression for the loop result array.\n\nOf course, even if the loop is used double or triple, the array variable pointed\nto by `IAstWorkflowLoopStatementResultIdentifier` is also inserted into the\narray of the upper loop statement.\n\nIf you do not understand the above, look at the example code below. The `pointers`\nvariable in the example code below is the object pointed to by this\n`IAstWorkflowLoopStatementResultIdentifier`.\n\n```typescript\ninterface Pointer {\n  x: number;\n  y: number;\n  z: number;\n}\nconst pointers: Pointer[] = [];\n\nfor (let i: number = 0; i < 10; ++i) {\n  // Call three connector functions within the For loop\n  const x: number = computeX(i); const y: number = computeY(i);\n  const z: number = computeZ(i);\n\n  // Not applicable if continue or break node exists\n  if (x === y && y === z) continue;\n  else if (x < 0) break;\n\n  // When the For loop block ends,\n  // Store all created local variables in an array\n  pointers.push({ x, y, z });\n}\n\n// And can be used outside the For loop\nconst emended: IPointer[] = emendPointers(pointers);\n```"
      },
      "IAstWorkflowSecretIdentifier": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "title": "{@link IStudioAccountSecret.key key value} of the target global variable",
            "description": "{@link IStudioAccountSecret.key key value} of the target global variable."
          },
          "index": {
            "type": "integer",
            "title": "Index of the target global variable",
            "description": "Index of the target global variable.\n\nIf there are multiple values in the target global variable set,\nyou can select a specific value through this property."
          },
          "type": {
            "const": "WorkflowSecretIdentifier",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "text",
          "type"
        ],
        "description": "Secret variable identifier expression.\n\n`WorkflowSecretVariableIdentifier` is an expression that identifies the\n{@link IStudioAccountSecret secret variable set} set in the\n{@link IStudioAccount studio account}, and is used by setting the\n{@link IStudioAccountSecret.key} value to {@link text}."
      },
      "IAstShorthandPropertyAssignment": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/IAstIdentifier",
            "title": "Identifier expression for variable name",
            "description": "Identifier expression for variable name."
          },
          "type": {
            "const": "ShorthandPropertyAssignment",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "name",
          "type"
        ],
        "description": "Shorthand property assignment.\n\nAn expression that uses the variable name as a property name by opening\nonly the variable name, and also assigns the value at the same time.\n\n```typescript\nconst value = \"shorthand\";\nconst x = {\n  value,\n  other: \"something\";\n}\n```"
      },
      "IAstSpreadAssignment": {
        "type": "object",
        "properties": {
          "expression": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            },
            "title": "Expression for Spread allocation object",
            "description": "Expression for Spread allocation object."
          },
          "type": {
            "const": "SpreadAssignment",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the Discriminated Union type."
          }
        },
        "required": [
          "expression",
          "type"
        ],
        "description": "Spread properties assignment.\n\n```typescript\nconst x = { value: 1 };\nconst y = {\n  something: \"nothing\",\n  ...x,\n}\n```"
      },
      "IStudioWorkflowVariable": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "The name of the variable",
            "description": "The name of the variable."
          },
          "schema": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IConstant"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IString"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.ITuple"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IOneOf"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INull"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IUnknown"
              }
            ],
            "title": "Type information of the variable",
            "description": "Type information of the variable."
          }
        },
        "required": [
          "name",
          "schema"
        ],
        "description": "Variables declared in a workflow document.\n\nNote that each separately declared variable in a workflow document can be\nreferred to as {@link IAstWorkflowVariableIdentifier} on the AST node."
      },
      "IStudioRepositoryRelease": {
        "type": "object",
        "properties": {
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioRepositoryReleaseNode"
            },
            "minItems": 1,
            "title": "A list of individual nodes (functions) that make up the distribution",
            "description": "A list of individual nodes (functions) that make up the distribution."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "customer": {
            "$ref": "#/components/schemas/IHubCustomer",
            "title": "Information about the customer who made the release",
            "description": "Information about the customer who made the release."
          },
          "repository": {
            "$ref": "#/components/schemas/IStudioRepository.IStandalone",
            "title": "Information about the repository you are affiliating",
            "description": "Information about the repository you are affiliating."
          },
          "commit": {
            "$ref": "#/components/schemas/IStudioRepositoryCommit",
            "title": "The commit to be released",
            "description": "The commit to be released."
          },
          "components": {
            "$ref": "#/components/schemas/ISwaggerComponents",
            "title": "A collection of named types",
            "description": "A collection of named types."
          },
          "document": {
            "$ref": "#/components/schemas/IStudioRepositoryReleaseDocument",
            "title": "Documentation for the release",
            "description": "Documentation for the release."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "title": "List of search tags",
            "description": "List of search tags."
          },
          "version": {
            "type": "string",
            "title": "Version name",
            "description": "Version name."
          },
          "program_url": {
            "type": "string",
            "format": "uri",
            "title": "URL of the built program",
            "description": "URL of the built program."
          },
          "debug_url": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uri"
              }
            ],
            "title": "URL for debugging",
            "description": "URL for debugging."
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubChannelCategory"
            },
            "title": "List of classification categories",
            "description": "List of classification categories."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The creation date and time of the release record",
            "description": "The creation date and time of the release record."
          },
          "opened_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Distribution start date and time",
            "description": "Distribution start date and time."
          }
        },
        "required": [
          "nodes",
          "id",
          "customer",
          "repository",
          "commit",
          "components",
          "document",
          "tags",
          "version",
          "program_url",
          "debug_url",
          "categories",
          "created_at",
          "opened_at"
        ],
        "description": "Information about the distribution program from the repository.\n\n`IStudioRepositoryRelease` is an entity that embodies a program distributed to the\n{@link IHubRepository repository} targeting the {@link IHubRepositoryCommit commit} feature.\n\nTherefore, the `IStudioRepositoryRelease` entity consists of\n{@link IStudioRepositoryReleaseNode} records based on the elements (functions) selected by\n{@link hub_customers customers} from each of the {@link IStudioRepositoryFile file} and\n{@link IStudioWorkflow workflow} buckets that make up the repository. And the compiled\nand bundled results are stored along with metadata (type) information about them.\n\nDistributing them widely is a release."
      },
      "IStudioWorkflowScriptConnector": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "const": "script",
            "title": "Discriminant type",
            "description": "Discriminant type."
          },
          "path": {
            "type": "string",
            "title": "Path to the target bucket",
            "description": "Path to the target bucket.\n\nRepresents the reference target bucket as a relative path relative\nto the current workflow."
          },
          "accessor": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "Identifier": "#/components/schemas/IAstIdentifier"
              }
            },
            "title": "Accessors for functions",
            "description": "Accessors for functions."
          },
          "kind": {
            "oneOf": [
              {
                "const": "function"
              },
              {
                "const": "workflow"
              }
            ],
            "title": "End of built-in connector function",
            "description": "End of built-in connector function.\n\n- workflow: Another workflow as a function\n- function: A standalone function written by the user"
          },
          "async": {
            "type": "boolean",
            "title": "Whether the function is asynchronous",
            "description": "Whether the function is asynchronous."
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioWorkflowParameter"
            },
            "title": "Parameter list",
            "description": "Parameter list."
          },
          "output": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IConstant"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IString"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.ITuple"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IOneOf"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INull"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IUnknown"
              }
            ],
            "title": "The return type of the function",
            "description": "The return type of the function."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Detailed description of the function",
            "description": "Detailed description of the function."
          },
          "summary": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "A brief description of the function",
            "description": "A brief description of the function."
          }
        },
        "required": [
          "id",
          "type",
          "path",
          "accessor",
          "kind",
          "async",
          "parameters",
          "output",
          "description",
          "summary"
        ],
        "description": "Script function connector information in the workflow.\n\n`IStudioWorkflowScriptConnector` is an entity that visualizes the connector of\nthe script function placed in {@link IStudioWorkflow workflow}. And the\n\"script function\" here means a TypeScript function written in a\n{@link IStudioRepositoryFile file} somewhere in the {@link IStudioRepository repository}\nthat can be called with a {@link IStudioWorkflowCallExpression} node in the workflow\ndocument.\n\nIf the function you want to call is not written in TypeScript in the same repository,\nbut exists in the {@link IStudioWorkflowRelease release} of an external repository,\n\nuse the {@link IStudioWorkflowScriptConnector} type instead. And if the function\nyou want to call is an external Rest API, use the {@link IStudioWorkflowSwaggerConnector}\ntype instead."
      },
      "IStudioWorkflowSwagger.ILinkSwagger": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri"
          },
          "id": {
            "type": "string",
            "title": "Primary Key",
            "description": "Primary Key.\n\nIf the source of the Swagger document is an ordered product, it will be\n{@link IHubSaleUnit.id}.\n\nOn the other hand, if the source of the Swagger document is a direct input,\nit will be the ID value entered directly by the user, or a value composed by\ncombining the url and version of the target server."
          },
          "source": {
            "const": "link",
            "title": "Source of the Swagger document",
            "description": "Source of the Swagger document."
          },
          "data": {
            "$ref": "#/components/schemas/ISwagger",
            "title": "(Corrected) Swagger document data",
            "description": "(Corrected) Swagger document data."
          },
          "connectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioWorkflowSwaggerConnector"
            },
            "title": "List of connectors",
            "description": "List of connectors."
          }
        },
        "required": [
          "url",
          "id",
          "source",
          "data",
          "connectors"
        ],
        "description": "If the source of the swagger is a link."
      },
      "IStudioWorkflowSwaggerConnector": {
        "type": "object",
        "properties": {
          "type": {
            "const": "swagger"
          },
          "swagger_id": {
            "type": "string",
            "title": "Parent's {@link IStudioWorkflowSwagger.id}",
            "description": "Parent's {@link IStudioWorkflowSwagger.id}."
          },
          "method": {
            "oneOf": [
              {
                "const": "delete"
              },
              {
                "const": "get"
              },
              {
                "const": "patch"
              },
              {
                "const": "post"
              },
              {
                "const": "put"
              }
            ],
            "title": "HTTP method",
            "description": "HTTP method."
          },
          "path": {
            "type": "string",
            "title": "Path information",
            "description": "Path information."
          },
          "async": {
            "const": true,
            "title": "Swagger connectors are always asynchronous functions",
            "description": "Swagger connectors are always asynchronous functions."
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioWorkflowConnectorParameter"
            },
            "title": "Parameter list",
            "description": "Parameter list."
          },
          "output": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IConstant"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IString"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.ITuple"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IOneOf"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INull"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IUnknown"
              }
            ],
            "title": "The return type of the function",
            "description": "The return type of the function."
          },
          "summary": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Summary description",
            "description": "Summary description."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Detailed description",
            "description": "Detailed description."
          },
          "icon": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uri"
              }
            ],
            "title": "Connector representative icon URL",
            "description": "Connector representative icon URL."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Tag list",
            "description": "Tag list.\n\nUsed as a concept for grouping API endpoints.\n\n{@link ISwaggerOperation.tags} itself."
          }
        },
        "required": [
          "type",
          "swagger_id",
          "method",
          "path",
          "async",
          "parameters",
          "output",
          "summary",
          "description",
          "icon",
          "tags"
        ],
        "description": "Connector information of Swagger function in workflow.\n\n`IStudioWorkflowSwaggerConnector` is an entity that visualizes the connector of\nSwagger function placed in {@link IStudioWorkflow workflow}. And the \"Swagger function\"\nhere means an external Rest API and its metadata spec that can be called with the\n{@link IStudioWorkflowCallExpression} node in the workflow document.\n\nIf the function you want to call is not from an external Rest API server but is written\nin TypeScript in the same {@link IStudioRepository repository}, use the\n{@link IStudioWorkflowScriptConnector} type instead. And if the function you want to call\nis exported (`export`) from the {@link IStudioRepositoryRelease release} of another\nrepository, use the {@link IStudioWorkflowReleasedConnector} type instead."
      },
      "IStudioWorkflowConnectorParameter": {
        "type": "object",
        "properties": {
          "schema": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IConstant"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IString"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.ITuple"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IOneOf"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INull"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IUnknown"
              }
            ],
            "title": "Type information for parameters",
            "description": "Type information for parameters."
          },
          "required": {
            "type": "boolean",
            "title": "Whether required or not",
            "description": "Whether required or not."
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "The title of the parameter",
            "description": "The title of the parameter."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Detailed description of the parameters",
            "description": "Detailed description of the parameters."
          }
        },
        "required": [
          "schema",
          "required",
          "title",
          "description"
        ],
        "description": "Parameter information of the workflow connector function.\n\n`IStudioWorkflowParameter` is an entity that visualizes the type and description\ninformation for each parameter of the\n{@link IStudioWorkflowConnector connector function} placed in the\n{@link IStudioWorkflowParameter workflow document}."
      },
      "IStudioWorkflowSwagger.IManualSwagger": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Primary Key",
            "description": "Primary Key.\n\nIf the source of the Swagger document is an ordered product, it will be\n{@link IHubSaleUnit.id}.\n\nOn the other hand, if the source of the Swagger document is a direct input,\nit will be the ID value entered directly by the user, or a value composed by\ncombining the url and version of the target server."
          },
          "source": {
            "const": "manual",
            "title": "Source of the Swagger document",
            "description": "Source of the Swagger document."
          },
          "data": {
            "$ref": "#/components/schemas/ISwagger",
            "title": "(Corrected) Swagger document data",
            "description": "(Corrected) Swagger document data."
          },
          "connectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioWorkflowSwaggerConnector"
            },
            "title": "List of connectors",
            "description": "List of connectors."
          }
        },
        "required": [
          "id",
          "source",
          "data",
          "connectors"
        ],
        "description": "If the source of the swagger is direct input."
      },
      "IStudioWorkflowSwagger.IGoodSwagger": {
        "type": "object",
        "properties": {
          "reference": {
            "$ref": "#/components/schemas/IStudioWorkflowSwagger.IReference"
          },
          "id": {
            "type": "string",
            "title": "Primary Key",
            "description": "Primary Key.\n\nIf the source of the Swagger document is an ordered product, it will be\n{@link IHubSaleUnit.id}.\n\nOn the other hand, if the source of the Swagger document is a direct input,\nit will be the ID value entered directly by the user, or a value composed by\ncombining the url and version of the target server."
          },
          "source": {
            "const": "good",
            "title": "Source of the Swagger document",
            "description": "Source of the Swagger document."
          },
          "data": {
            "$ref": "#/components/schemas/ISwagger",
            "title": "(Corrected) Swagger document data",
            "description": "(Corrected) Swagger document data."
          },
          "connectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioWorkflowSwaggerConnector"
            },
            "title": "List of connectors",
            "description": "List of connectors."
          }
        },
        "required": [
          "reference",
          "id",
          "source",
          "data",
          "connectors"
        ],
        "description": "If the source of the swagger is a custom product."
      },
      "IStudioWorkflowSwagger.IReference": {
        "type": "object",
        "properties": {
          "order_id": {
            "type": "string",
            "format": "uuid",
            "title": "{@link IHubOrder.id} of the target order",
            "description": "{@link IHubOrder.id} of the target order."
          },
          "good_id": {
            "type": "string",
            "format": "uuid",
            "title": "{@link IHubOrderGood.id} of the target order item",
            "description": "{@link IHubOrderGood.id} of the target order item."
          },
          "snapshot_id": {
            "type": "string",
            "format": "uuid",
            "title": "A snapshot of the target order goods {@link IHubOrderGoodSnapshot.id}",
            "description": "A snapshot of the target order goods {@link IHubOrderGoodSnapshot.id}."
          },
          "unit_id": {
            "type": "string",
            "format": "uuid",
            "title": "{@link IHubSaleUnit.id} of the target unit",
            "description": "{@link IHubSaleUnit.id} of the target unit."
          }
        },
        "required": [
          "order_id",
          "good_id",
          "snapshot_id",
          "unit_id"
        ],
        "description": "Reference information for ordered products."
      },
      "IStudioWorkflowBlockStatement": {
        "type": "object",
        "properties": {
          "statement_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "{@link IStudioWorkflowStatement.id} list of node statements declared within the block",
            "description": "{@link IStudioWorkflowStatement.id} list of node statements declared within the block.\n\nNodes within a block cannot be interconnected with nodes outside the block."
          },
          "id": {
            "type": "string",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "const": "WorkflowBlockStatement",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the union type."
          },
          "geometry": {
            "$ref": "#/components/schemas/IGeometry2D",
            "title": "Current node's phase information",
            "description": "Current node's phase information."
          }
        },
        "required": [
          "statement_ids",
          "id",
          "type",
          "geometry"
        ],
        "description": "Workflow block statement node.\n\n`IStudioWorkflowBlockStatement` is a node entity that visualizes a block statement in\n{@link IStudioWorkflow workflow program}. Each node statement placed in a block statement\nis expressed as {@link statement_ids}.\n\nNote that nodes placed in a block cannot be interconnected with nodes outside the block.\n\nIn other words, only nodes within a block statement can be interconnected.\n\n```typescript\n// THE BLOCK STATEMENT\n{\n  ...(statements of statement_ids)\n}\n```"
      },
      "IGeometry2D": {
        "type": "object",
        "properties": {
          "position": {
            "$ref": "#/components/schemas/IPoint2D"
          },
          "scale": {
            "$ref": "#/components/schemas/IPoint2D"
          },
          "depth": {
            "type": "number"
          }
        },
        "required": [
          "position",
          "scale",
          "depth"
        ]
      },
      "IPoint2D": {
        "type": "object",
        "properties": {
          "x": {
            "type": "number"
          },
          "y": {
            "type": "number"
          }
        },
        "required": [
          "x",
          "y"
        ]
      },
      "IStudioWorkflowBranchStatement": {
        "type": "object",
        "properties": {
          "condition": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            },
            "title": "Expression for conditional statement",
            "description": "Expression for conditional statement."
          },
          "then_block_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "description": "{@link IStudioWorkflowBlockStatement.id} block statement to execute\nif the condition is `true`.\n\nNodes within the block cannot be interconnected with nodes outside the block."
          },
          "else_block_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "description": "{@link IStudioWorkflowBlockStatement.id} block statement to execute\nif the condition is `false`.\n\nNodes within the block cannot be interconnected with nodes outside the block."
          },
          "id": {
            "type": "string",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "const": "WorkflowBranchStatement",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the union type."
          },
          "geometry": {
            "$ref": "#/components/schemas/IGeometry2D",
            "title": "Current node's phase information",
            "description": "Current node's phase information."
          },
          "nexts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioWorkflowNodeNext"
            },
            "title": "List information of the next node statement",
            "description": "List information of the next node statement.\n\nAfter the execution of the current node statement is completed, a list of\n{@link IStudioWorkflowStatement.id} and a {@link IStudioWorkflowNodeNext} structure\nthat describes the node statements to be executed next.\n\nNote that the node that can be referred to must belong to a block at the same level as\nthe current node. If the current node refers to a node belonging to a block such as\n{@link IStudioWorkflowForEachStatement for loop} or\n{@link IStudioWorkflowBranchStatement if statement}, or a node belonging to a block\nsuch as a for loop or if statement refers to a node outside the block it belongs to,\na validation error occurs by the workflow compiler."
          }
        },
        "required": [
          "condition",
          "then_block_id",
          "else_block_id",
          "id",
          "type",
          "geometry",
          "nexts"
        ],
        "description": "IF conditional statement node in the workflow.\n\n`IStudioWorkflowBranchStatement` is a node entity that visualizes a conditional statement\nin the {@link IStudioWorkflow workflow program} and plays a role in distinguishing\n{@link IStudioWorkflowBlockStatement block node statements} to be executed depending\non whether the conditional statement {@link condition} is satisfied\n({@link then_block_id} vs. {@link else_block_id}).\n\nFor reference, the nodes designated as {@link then_block_id} and {@link else_block_id}\nare all grouped by the Block syntax, and the nodes belonging to each Block cannot be\nconnected to nodes outside the Block with {@link IStudioWorkflowNodeAdvanceable.nexts}.\n\nIn other words, nodes outside the conditional statement block cannot be connected to nodes\ninside the conditional statement block. Also, nodes in the conditional \"true\" block cannot\nbe connected to nodes in the conditional \"false\" block within the conditional statement.\n\n```typescript\nif (condition) {\n  ...(statements of then_block_id)\n} else {\n  ...(statements of else_block_id)\n}\n...(statements of nexts[].node_id)\n```"
      },
      "IStudioWorkflowNodeNext": {
        "type": "object",
        "properties": {
          "node_id": {
            "type": "string",
            "title": "{@link IStudioWorkflowStatement.id} of the next node(statement)",
            "description": "{@link IStudioWorkflowStatement.id} of the next node(statement)."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Description",
            "description": "Description."
          }
        },
        "required": [
          "node_id",
          "description"
        ]
      },
      "IStudioWorkflowCallStatement": {
        "type": "object",
        "properties": {
          "connector": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IStudioWorkflowCallStatement.IReleaseConnectorKey"
              },
              {
                "$ref": "#/components/schemas/IStudioWorkflowCallStatement.IScriptConnectorKey"
              },
              {
                "$ref": "#/components/schemas/IStudioWorkflowCallStatement.ISwaggerConnectorKey"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "release": "#/components/schemas/IStudioWorkflowCallStatement.IReleaseConnectorKey",
                "script": "#/components/schemas/IStudioWorkflowCallStatement.IScriptConnectorKey",
                "swagger": "#/components/schemas/IStudioWorkflowCallStatement.ISwaggerConnectorKey"
              }
            },
            "title": "Target connector information",
            "description": "Target connector information."
          },
          "arguments": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IAstArrayLiteralExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstBinaryExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstCallExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstConditionalExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstParenthesizedExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstDeleteExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstNonNullExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstSpreadElementExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstElementAccessExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstObjectLiteralExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstPropertyAccessExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstTemplateExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstNumericLiteral"
                },
                {
                  "$ref": "#/components/schemas/IAstIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
                },
                {
                  "$ref": "#/components/schemas/IAstStringLiteral"
                },
                {
                  "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstTrueLiteral"
                },
                {
                  "$ref": "#/components/schemas/IAstFalseLiteral"
                },
                {
                  "$ref": "#/components/schemas/IAstNullLiteral"
                },
                {
                  "$ref": "#/components/schemas/IAstArrayFilterExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstArrayFlatExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstArrayMapExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstObjectFlatExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstObjectEntriesExpression"
                },
                {
                  "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
                },
                {
                  "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                  "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                  "CallExpression": "#/components/schemas/IAstCallExpression",
                  "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                  "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                  "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                  "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                  "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                  "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                  "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                  "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                  "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                  "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                  "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                  "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                  "Identifier": "#/components/schemas/IAstIdentifier",
                  "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                  "StringLiteral": "#/components/schemas/IAstStringLiteral",
                  "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                  "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                  "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                  "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                  "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                  "NullLiteral": "#/components/schemas/IAstNullLiteral",
                  "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                  "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                  "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                  "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                  "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                  "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                  "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                  "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                  "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                  "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                  "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                  "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
                }
              }
            },
            "title": "A list of parameters to assign when calling the connector",
            "description": "A list of parameters to assign when calling the connector."
          },
          "parameter_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioWorkflowConnectorParameter"
            },
            "title": "You can explicitly transform parameter types",
            "description": "You can explicitly transform parameter types.\n\nWhen explicitly specifying a type different from the original connector\nfunction's parameter.\n\nFor example, the original connector function receives a variadic parameter\nof type any, but for some reason, you want to specify the parameter type of\nthe connector and dynamically specify the type information of the\ncorresponding parameters.\n\nFor example, connectors related to notion DB, etc."
          },
          "return_type": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IConstant"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IString"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.ITuple"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IOneOf"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INull"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IUnknown"
              }
            ],
            "title": "You can explicitly transform the return type",
            "description": "You can explicitly transform the return type.\n\nWhen explicitly specifying a heterogeneous type different from the return\ntype of the original connector function.\n\nFor example, the original connector function returns any type, but for\nsome reason, you can specify the return type of the connector, and you want\nto dynamically specify the return type information.\n\nFor example, connectors related to notion DB, etc."
          },
          "operand": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier"
              }
            },
            "title": "A variable to store the connector call result",
            "description": "A variable to store the connector call result.\n\nIf this value is not set, the connector call result\nis identified only by {@link IAstWorkflowCallStatementResultIdentifier}.\n\nConversely, if this value is set, the connector call result is stored in\na user-defined variable {@link IStudioWorkflowVariable}, which must be\nidentified by {@link IAstWorkflowVariableIdentifier}."
          },
          "id": {
            "type": "string",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "const": "WorkflowCallStatement",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the union type."
          },
          "geometry": {
            "$ref": "#/components/schemas/IGeometry2D",
            "title": "Current node's phase information",
            "description": "Current node's phase information."
          },
          "nexts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioWorkflowNodeNext"
            },
            "title": "List information of the next node statement",
            "description": "List information of the next node statement.\n\nAfter the execution of the current node statement is completed, a list of\n{@link IStudioWorkflowStatement.id} and a {@link IStudioWorkflowNodeNext} structure\nthat describes the node statements to be executed next.\n\nNote that the node that can be referred to must belong to a block at the same level as\nthe current node. If the current node refers to a node belonging to a block such as\n{@link IStudioWorkflowForEachStatement for loop} or\n{@link IStudioWorkflowBranchStatement if statement}, or a node belonging to a block\nsuch as a for loop or if statement refers to a node outside the block it belongs to,\na validation error occurs by the workflow compiler."
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "The title of the variable being created",
            "description": "The title of the variable being created."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "A detailed description of the variables being created",
            "description": "A detailed description of the variables being created."
          },
          "icon": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uri"
              }
            ],
            "title": "Icon Image UL",
            "description": "Icon Image UL.\n\nYou can explicitly set an independent icon in the workflow node statement."
          }
        },
        "required": [
          "arguments",
          "id",
          "type",
          "geometry",
          "nexts",
          "title",
          "description"
        ],
        "description": "A connector function call statement in the workflow.\n\n`IStudioWorkflowCallStatement` is a node entity that visualizes an expression\nstatement that calls the {@link IStudioWorkflowConnector connector function}\nin the {@link IStudioWorkflow workflow program}.\n\nWhen configuring `IStudioWorkflowCallStatement`, specify the target connector\nyou want to call with {@link connector}, and enter the list of parameters to be\nassigned when calling the connector in {@link arguments} as a\n{@link IAstExpression AST expression}.\n\nAs a reference, whenever this workflow system calls a connector function, it stores\nthe return value in a **some local variable**. And this **some local variable**\nis identified by {@link IAstWorkflowCallStatementResultIdentifier}. However, if\nyou explicitly specify {@link operand}, it should be stored in\n{@link IStudioWorkflowVariable} and identified by\n{@link IAstWorkflowVariableIdentifier}.\n\nIn addition, for {@link title} and {@link descrition} fields, read the supertype\n{@link IStudioWorkflowNodeDescriptable}.\n\n```typescript\nconst result = connector(...arguments);\n```"
      },
      "IStudioWorkflowCallStatement.IReleaseConnectorKey": {
        "type": "object",
        "properties": {
          "type": {
            "const": "release"
          },
          "release_id": {
            "type": "string",
            "description": "{@link IStudioRepositoryRelease.id} of the target release"
          },
          "node_id": {
            "type": "string",
            "description": "{@link IStudioWorkflowStatement.id} of the target node"
          }
        },
        "required": [
          "type",
          "release_id",
          "node_id"
        ],
        "description": "Key for calling the release connector."
      },
      "IStudioWorkflowCallStatement.IScriptConnectorKey": {
        "type": "object",
        "properties": {
          "type": {
            "const": "script"
          },
          "path": {
            "type": "string",
            "title": "Path to the target bucket",
            "description": "Path to the target bucket.\n\nRepresents the reference target bucket as a relative path relative\nto the current workflow."
          },
          "accessor": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "Identifier": "#/components/schemas/IAstIdentifier"
              }
            },
            "title": "Accessors for functions",
            "description": "Accessors for functions."
          }
        },
        "required": [
          "type",
          "path",
          "accessor"
        ],
        "description": "Key for calling the script connector."
      },
      "IStudioWorkflowCallStatement.ISwaggerConnectorKey": {
        "type": "object",
        "properties": {
          "type": {
            "const": "swagger"
          },
          "swagger_id": {
            "type": "string",
            "description": "{@link IStudioWorkflowSwagger.id} of the target swagger"
          },
          "method": {
            "oneOf": [
              {
                "const": "delete"
              },
              {
                "const": "get"
              },
              {
                "const": "head"
              },
              {
                "const": "patch"
              },
              {
                "const": "post"
              },
              {
                "const": "put"
              },
              {
                "const": "options"
              },
              {
                "const": "trace"
              }
            ],
            "title": "Method of the target endpoint",
            "description": "Method of the target endpoint."
          },
          "path": {
            "type": "string",
            "title": "Path to the target endpoint",
            "description": "Path to the target endpoint."
          }
        },
        "required": [
          "type",
          "swagger_id"
        ],
        "description": "Key for calling the Swagger Connector."
      },
      "IStudioWorkflowExpressionStatement": {
        "type": "object",
        "properties": {
          "expression": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            }
          },
          "id": {
            "type": "string",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "const": "WorkflowExpressionStatement",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the union type."
          },
          "geometry": {
            "$ref": "#/components/schemas/IGeometry2D",
            "title": "Current node's phase information",
            "description": "Current node's phase information."
          },
          "nexts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioWorkflowNodeNext"
            },
            "title": "List information of the next node statement",
            "description": "List information of the next node statement.\n\nAfter the execution of the current node statement is completed, a list of\n{@link IStudioWorkflowStatement.id} and a {@link IStudioWorkflowNodeNext} structure\nthat describes the node statements to be executed next.\n\nNote that the node that can be referred to must belong to a block at the same level as\nthe current node. If the current node refers to a node belonging to a block such as\n{@link IStudioWorkflowForEachStatement for loop} or\n{@link IStudioWorkflowBranchStatement if statement}, or a node belonging to a block\nsuch as a for loop or if statement refers to a node outside the block it belongs to,\na validation error occurs by the workflow compiler."
          }
        },
        "required": [
          "expression",
          "id",
          "type",
          "geometry",
          "nexts"
        ]
      },
      "IStudioWorkflowSetStatement": {
        "type": "object",
        "properties": {
          "operand": {
            "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier",
            "title": "Identifier of the target variable",
            "description": "Identifier of the target variable."
          },
          "value": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            },
            "title": "Value",
            "description": "Value."
          },
          "id": {
            "type": "string",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "const": "WorkflowSetStatement",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the union type."
          },
          "geometry": {
            "$ref": "#/components/schemas/IGeometry2D",
            "title": "Current node's phase information",
            "description": "Current node's phase information."
          },
          "nexts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioWorkflowNodeNext"
            },
            "title": "List information of the next node statement",
            "description": "List information of the next node statement.\n\nAfter the execution of the current node statement is completed, a list of\n{@link IStudioWorkflowStatement.id} and a {@link IStudioWorkflowNodeNext} structure\nthat describes the node statements to be executed next.\n\nNote that the node that can be referred to must belong to a block at the same level as\nthe current node. If the current node refers to a node belonging to a block such as\n{@link IStudioWorkflowForEachStatement for loop} or\n{@link IStudioWorkflowBranchStatement if statement}, or a node belonging to a block\nsuch as a for loop or if statement refers to a node outside the block it belongs to,\na validation error occurs by the workflow compiler."
          }
        },
        "required": [
          "operand",
          "value",
          "id",
          "type",
          "geometry",
          "nexts"
        ],
        "description": "Node that assigns a value to a variable.\n\n```typescript\nlet variable: number;\n\nvariable = 3; // -> Set variable to 3\n```"
      },
      "IStudioWorkflowForEachStatement": {
        "type": "object",
        "properties": {
          "expression": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            },
            "title": "The value expression to iterate over",
            "description": "The value expression to iterate over."
          },
          "loop_block_id": {
            "type": "string",
            "description": "{@link IStudioWorkflowBlockStatement.id} of the block statement\nto be repeatedly executed.\n\nA block is formed that groups the target node statements to be\nrepeatedly executed, and the nodes in this block cannot be interconnected\nwith nodes outside the block.\n\nAnd if there is a node that creates a local variable, such as\n{@link IStudioWorkflowCallStatement connector function call} among the\nnodes in the block, all the created local variables are inserted into the\narray outside the block. However, if {@link IStudioWorkflowBreakStatement break}\nor {@link IStudioWorkflowContinueStatement continue} statements are used in\nthe block, the local variables are not inserted into the array."
          },
          "id": {
            "type": "string",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "const": "WorkflowForEachStatement",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the union type."
          },
          "geometry": {
            "$ref": "#/components/schemas/IGeometry2D",
            "title": "Current node's phase information",
            "description": "Current node's phase information."
          },
          "nexts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioWorkflowNodeNext"
            },
            "title": "List information of the next node statement",
            "description": "List information of the next node statement.\n\nAfter the execution of the current node statement is completed, a list of\n{@link IStudioWorkflowStatement.id} and a {@link IStudioWorkflowNodeNext} structure\nthat describes the node statements to be executed next.\n\nNote that the node that can be referred to must belong to a block at the same level as\nthe current node. If the current node refers to a node belonging to a block such as\n{@link IStudioWorkflowForEachStatement for loop} or\n{@link IStudioWorkflowBranchStatement if statement}, or a node belonging to a block\nsuch as a for loop or if statement refers to a node outside the block it belongs to,\na validation error occurs by the workflow compiler."
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "The title of the variable being created",
            "description": "The title of the variable being created."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "A detailed description of the variables being created",
            "description": "A detailed description of the variables being created."
          },
          "icon": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uri"
              }
            ],
            "title": "Icon Image UL",
            "description": "Icon Image UL.\n\nYou can explicitly set an independent icon in the workflow node statement."
          }
        },
        "required": [
          "expression",
          "loop_block_id",
          "id",
          "type",
          "geometry",
          "nexts",
          "title",
          "description"
        ],
        "description": "For Each statement node in the workflow (but like `Array.filter().map()`).\n\n`IStudioWorkflowForEachStatement` is a node entity that embodies\na For Each loop in the {@link IStudioWorkflow workflow program}\n(actually `Array.filter().map()`), and it is a structure that executes a\nrepeating task by composing a {@link IStudioWorkflowBlockStatement block statement}\nreferred to as {@link loop_block_id} for the traversal target object\n{@link expression}.\n\nAnd if a local variable is created in the loop statement, such as\n{@link IStudioWorkflowCallStatement connector function call}, they are all\ninserted into the array declared before the start of the loop block. However,\nif {@link IStudioWorkflowBreakStatement break} or\n{@link IStudioWorkflowContinueStatement continue} statements are used in the block,\nthe local variables are not inserted into the array. In addition, if a loop is\nwritten double or triple, the array created by the loop is also inserted into\nthe array of the upper loop.\n\nFor reference, the array containing the local variables created in the loop\ncan be referred to as the {@link IAstWorkflowLoopStatementResultIdentifier}\nexpression. And the individual elements of the loop target {@link expression}\ncan be designated as the {@link IAstWorkflowLoopStatementElementIdentifier}\nexpression. In addition, nodes placed within the loop block cannot be\ninterconnected with nodes outside the loop block. This applies to all block\nstatements.\n\nIn addition, you can write {@link title} and {@link description} to variables\ncreated through `IStudioWorkflowForEachStatement`. For more information, see\n{@link IStudioWorkflowNodeDescriptable}.\n\n```typescript\nconst output = [];\nfor (const elem of expression) {\n  ...(statements of loop_block_id)\n  output.push({ ..variables generated in the block });\n}\n...(statements of nexts[].node_id)\n```"
      },
      "IStudioWorkflowWhileStatement": {
        "type": "object",
        "properties": {
          "condition": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            },
            "title": "Condition expressions",
            "description": "Condition expressions."
          },
          "loop_block_id": {
            "type": "string",
            "description": "{@link IStudioWorkflowBlockStatement.id} of the block statement to be\nrepeatedly executed with the For statement.\n\nA block is formed that groups the target node statements, and the nodes\nin this block cannot be interconnected with nodes outside the block.\n\nAnd if there is a node that creates a local variable, such as\n{@link IStudioWorkflowCallStatement connector function call}, among the nodes\nin the block, all the created local variables are inserted into the array\noutside the block. However, if {@link IStudioWorkflowBreakStatement break}\nor {@link IStudioWorkflowContinueStatement continue} statements are used\nin the block, the local variables are not inserted into the array."
          },
          "id": {
            "type": "string",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "const": "WorkflowWhileStatement",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the union type."
          },
          "geometry": {
            "$ref": "#/components/schemas/IGeometry2D",
            "title": "Current node's phase information",
            "description": "Current node's phase information."
          },
          "nexts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioWorkflowNodeNext"
            },
            "title": "List information of the next node statement",
            "description": "List information of the next node statement.\n\nAfter the execution of the current node statement is completed, a list of\n{@link IStudioWorkflowStatement.id} and a {@link IStudioWorkflowNodeNext} structure\nthat describes the node statements to be executed next.\n\nNote that the node that can be referred to must belong to a block at the same level as\nthe current node. If the current node refers to a node belonging to a block such as\n{@link IStudioWorkflowForEachStatement for loop} or\n{@link IStudioWorkflowBranchStatement if statement}, or a node belonging to a block\nsuch as a for loop or if statement refers to a node outside the block it belongs to,\na validation error occurs by the workflow compiler."
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "The title of the variable being created",
            "description": "The title of the variable being created."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "A detailed description of the variables being created",
            "description": "A detailed description of the variables being created."
          },
          "icon": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uri"
              }
            ],
            "title": "Icon Image UL",
            "description": "Icon Image UL.\n\nYou can explicitly set an independent icon in the workflow node statement."
          }
        },
        "required": [
          "condition",
          "loop_block_id",
          "id",
          "type",
          "geometry",
          "nexts",
          "title",
          "description"
        ],
        "description": "While statement node in the workflow.\n\n`IStudioWorkflowWhileStatement` is a node entity that visualizes\na While loop in the {@link IStudioWorkflow workflow program} and executes a\nrepeating task by configuring a {@link IStudioWorkflowBlockStatement block statement}\nreferred to as {@link loop_block_id} for the While condition expression\n{@link condition}.\n\nIn addition, if local variables are created in the loop, such as\n{@link IStudioWorkflowCallStatement connector function call}, they are all\ninserted into the array declared before the start of the loop block. However,\nif {@link IStudioWorkflowBreakStatement break} or\n{@link IStudioWorkflowContinueStatement continue} statements are used in the\nblock, local variables are not inserted into the array. In addition, if the loop\nis used double or triple, the array created by the loop is also inserted into\nthe array of the upper loop.\n\nFor reference, the array containing the local variables generated from the\nloop can be referred to as the {@link IAstWorkflowLoopStatementResultIdentifier}\nexpression.\n\nIn addition, nodes placed within the loop block cannot be interconnected with\nnodes outside the loop block. This applies to all block statements.\n\nIn addition, you can write {@link title} and {@link description} to variables\ngenerated through `IStudioWorkflowWhileStatement`. For more information, see\n{@link IStudioWorkflowNodeDescriptable}.\n\n```typescript\nconst output = [];\nwhile (condition) {\n  ...(statements of loop_block_id)\n  output.push({\n    ..variables generated in the block\n  });\n}\n...(statements of nexts[].node_id)\n```"
      },
      "IStudioWorkflowRepeatStatement": {
        "type": "object",
        "properties": {
          "count": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            },
            "title": "Number of times to cycle",
            "description": "Number of times to cycle."
          },
          "loop_block_id": {
            "type": "string",
            "description": "{@link IStudioWorkflowBlockStatement.id} of the block statement\nto be repeatedly executed.\n\nA block is formed that groups the target node statements to be\nrepeatedly executed, and the nodes in this block cannot be interconnected\nwith nodes outside the block.\n\nAnd if there is a node that creates a local variable, such as\n{@link IStudioWorkflowCallStatement connector function call} among the nodes\nin the block, all the created local variables are inserted into the array\noutside the block. However, if {@link IStudioWorkflowBreakStatement break}\nor {@link IStudioWorkflowContinueStatement continue} statements are used in\nthe block, the local variables are not inserted into the array."
          },
          "id": {
            "type": "string",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "const": "WorkflowRepeatStatement",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the union type."
          },
          "geometry": {
            "$ref": "#/components/schemas/IGeometry2D",
            "title": "Current node's phase information",
            "description": "Current node's phase information."
          },
          "nexts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioWorkflowNodeNext"
            },
            "title": "List information of the next node statement",
            "description": "List information of the next node statement.\n\nAfter the execution of the current node statement is completed, a list of\n{@link IStudioWorkflowStatement.id} and a {@link IStudioWorkflowNodeNext} structure\nthat describes the node statements to be executed next.\n\nNote that the node that can be referred to must belong to a block at the same level as\nthe current node. If the current node refers to a node belonging to a block such as\n{@link IStudioWorkflowForEachStatement for loop} or\n{@link IStudioWorkflowBranchStatement if statement}, or a node belonging to a block\nsuch as a for loop or if statement refers to a node outside the block it belongs to,\na validation error occurs by the workflow compiler."
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "The title of the variable being created",
            "description": "The title of the variable being created."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "A detailed description of the variables being created",
            "description": "A detailed description of the variables being created."
          },
          "icon": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uri"
              }
            ],
            "title": "Icon Image UL",
            "description": "Icon Image UL.\n\nYou can explicitly set an independent icon in the workflow node statement."
          }
        },
        "required": [
          "count",
          "loop_block_id",
          "id",
          "type",
          "geometry",
          "nexts",
          "title",
          "description"
        ],
        "description": "Repeat syntax node in workflow."
      },
      "IStudioWorkflowReturnStatement": {
        "type": "object",
        "properties": {
          "expression": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            },
            "title": "The expression to return",
            "description": "The expression to return."
          },
          "id": {
            "type": "string",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "const": "WorkflowReturnStatement",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the union type."
          },
          "geometry": {
            "$ref": "#/components/schemas/IGeometry2D",
            "title": "Current node's phase information",
            "description": "Current node's phase information."
          }
        },
        "required": [
          "expression",
          "id",
          "type",
          "geometry"
        ],
        "description": "Node to return during workflow execution.\n\n```typescript\nreturn;\nreturn <expr>;\n```\n\nThis statement stops execution immediately, so you cannot specify the next node."
      },
      "IStudioWorkflowSetReturnValueStatement": {
        "type": "object",
        "properties": {
          "expression": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IAstArrayLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstBinaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstCallExpression"
              },
              {
                "$ref": "#/components/schemas/IAstConditionalExpression"
              },
              {
                "$ref": "#/components/schemas/IAstParenthesizedExpression"
              },
              {
                "$ref": "#/components/schemas/IAstDeleteExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNonNullExpression"
              },
              {
                "$ref": "#/components/schemas/IAstSpreadElementExpression"
              },
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectLiteralExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstTemplateExpression"
              },
              {
                "$ref": "#/components/schemas/IAstNumericLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstStringLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstTrueLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstFalseLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstNullLiteral"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFilterExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstArrayMapExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectFlatExpression"
              },
              {
                "$ref": "#/components/schemas/IAstObjectEntriesExpression"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
              },
              {
                "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                "CallExpression": "#/components/schemas/IAstCallExpression",
                "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                "Identifier": "#/components/schemas/IAstIdentifier",
                "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                "StringLiteral": "#/components/schemas/IAstStringLiteral",
                "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                "NullLiteral": "#/components/schemas/IAstNullLiteral",
                "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
              }
            },
            "title": "The expression to return",
            "description": "The expression to return."
          },
          "id": {
            "type": "string",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "const": "WorkflowSetReturnValueStatement",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the union type."
          },
          "geometry": {
            "$ref": "#/components/schemas/IGeometry2D",
            "title": "Current node's phase information",
            "description": "Current node's phase information."
          },
          "nexts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioWorkflowNodeNext"
            },
            "title": "List information of the next node statement",
            "description": "List information of the next node statement.\n\nAfter the execution of the current node statement is completed, a list of\n{@link IStudioWorkflowStatement.id} and a {@link IStudioWorkflowNodeNext} structure\nthat describes the node statements to be executed next.\n\nNote that the node that can be referred to must belong to a block at the same level as\nthe current node. If the current node refers to a node belonging to a block such as\n{@link IStudioWorkflowForEachStatement for loop} or\n{@link IStudioWorkflowBranchStatement if statement}, or a node belonging to a block\nsuch as a for loop or if statement refers to a node outside the block it belongs to,\na validation error occurs by the workflow compiler."
          }
        },
        "required": [
          "expression",
          "id",
          "type",
          "geometry",
          "nexts"
        ],
        "description": "Node that sets the return value of the workflow.\n\n```typescript\nlet returnValue: any;\n\nreturnValue = 3; // -> Set the return value to 3\n\nreturn returnValue;\n```\n\nCurrently, workflow is a kind of node-based visual programming language,\nand is designed so that users cannot define a clear execution order, so the\nreturn of a general programming language is impossible to implement. This node\nprovides an alternative, allowing you to set the return value without\na return statement.\n\nThe return value can be set multiple times, and the last value set becomes\nthe final return value.\n\nSetting `null` means that there is no return value, and this also overwrites\nthe previous value."
      },
      "IStudioWorkflowBreakStatement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "const": "WorkflowBreakStatement",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the union type."
          },
          "geometry": {
            "$ref": "#/components/schemas/IGeometry2D",
            "title": "Current node's phase information",
            "description": "Current node's phase information."
          }
        },
        "required": [
          "id",
          "type",
          "geometry"
        ],
        "description": "Break node that immediately breaks out of a loop in a workflow.\n\n`IStudioWorkflowBreakStatement` is a node entity that visualizes a Break statement\nthat immediately breaks out of a loop in a loop such as\n{@link IStudioWorkflowForEachStatement} or {@link IStudioWorkflowWhilteStatement} in a\n{@link IStudioWorkflow workflow program}, and can only be used in the loops of the above\nentities.\n\nAnd if local variables are created in the original loop, such as\n{@link IStudioWorkflowCallStatement connector function call}, they are all inserted\ninto the array declared before the start of the loop block.\n\nHowever, if `IStudioWorkflowBreakStatement` or\n{@link IStudioWorkflowContinueStatement continue} statements are used in the loop,\nthe local variables are not inserted into the upper array.\n\n```typescript\nconst output = [];\nfor (const elem of someArrayExpression) {\n  ...(some-statements)\n  break;\n  output.push({ ...variables generated in the block });\n}\n```"
      },
      "IStudioWorkflowContinueStatement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "const": "WorkflowContinueStatement",
            "title": "The type of the node",
            "description": "The type of the node.\n\nServes as an identifier for the union type."
          },
          "geometry": {
            "$ref": "#/components/schemas/IGeometry2D",
            "title": "Current node's phase information",
            "description": "Current node's phase information."
          }
        },
        "required": [
          "id",
          "type",
          "geometry"
        ],
        "description": "Continue node that immediately restarts the loop in the workflow.\n\n`IStudioWorkflowContinueStatement` is a node entity that visualizes the\nContinue statement that immediately restarts the loop in the\n{@link IStudioWorkflowWorkflow program} {@link IStudioWorkflowForEachStatement}\nor {@link IStudioWorkflowWhilteStatement}\n\nIt can only be used in the loops of the above entities. And if local variables\nare created in the original loop, such as\n{@link IStudioWorkflowCallStatement connector function call}, they are all\ninserted into the array declared before the start of the loop block. However,\nif the `IStudioWorkflowContinueStatement` or\n{@link IStudioWorkflowBreakStatement break} statement is used in the loop, the\nlocal variables are not inserted into the upper array.\n\n```typescript\nconst array = [];\nfor (const elem of array) {\n  ...(some-statements)\n  continue;\n  array.push({ ...variables generated in the block });\n}\n```"
      },
      "IChatbotConfigV1": {
        "type": "object",
        "properties": {
          "as_chatbot": {
            "type": "boolean",
            "title": "Whether to output it as a chatbot",
            "description": "Whether to output it as a chatbot."
          },
          "chatbot_session_parameter_version": {
            "const": "v1",
            "description": "A version value to determine the format of additional values to be\nentered when executing a workflow."
          },
          "role": {
            "type": "string",
            "title": "Roles to be given to chatbots",
            "description": "Roles to be given to chatbots."
          },
          "task": {
            "type": "string",
            "title": "A description of the task expected from the chatbot",
            "description": "A description of the task expected from the chatbot."
          },
          "instruction": {
            "type": "string",
            "title": "Essential rules that a chatbot must follow when performing a task",
            "description": "Essential rules that a chatbot must follow when performing a task."
          },
          "tone": {
            "type": "string",
            "title": "Tone and manners to follow when a chatbot responds",
            "description": "Tone and manners to follow when a chatbot responds."
          },
          "example": {
            "type": "string",
            "title": "Example questions and answers that the chatbot can reference",
            "description": "Example questions and answers that the chatbot can reference."
          },
          "first_message": {
            "type": "string",
            "title": "The chatbot's first message",
            "description": "The chatbot's first message."
          },
          "example_questions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Example questions",
            "description": "Example questions."
          },
          "version": {
            "const": "v1",
            "title": "The version value needed to know what values are in the chatbot config",
            "description": "The version value needed to know what values are in the chatbot config."
          }
        },
        "required": [
          "as_chatbot",
          "chatbot_session_parameter_version",
          "version"
        ],
        "description": "Settings used when outputting Workflow to a chatbot (agent)"
      },
      "IHubOrderGood.IWorkflow": {
        "type": "object",
        "properties": {
          "unit_id": {
            "type": "string",
            "format": "uuid",
            "title": "{@link IHubSaleUnit.id} of the target unit",
            "description": "{@link IHubSaleUnit.id} of the target unit."
          },
          "node_id": {
            "type": "string",
            "format": "uuid",
            "title": "{@link IStudioWorkflowStandalone.id} of the target node",
            "description": "{@link IStudioWorkflowStandalone.id} of the target node."
          }
        },
        "required": [
          "unit_id",
          "node_id"
        ]
      },
      "IHubOrderGood.IOpen": {
        "type": "object",
        "properties": {
          "opened_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "The start date of the order contract",
            "description": "The start date of the order contract.\n\nSet the start date of the order contract.\n\nUnlike the time of confirmation of the order, the effective date can\nbe postponed later than that. And the effective date of the contract\ncan be continuously edited until it arrives.\n\nAlso, the monthly fixed fee is calculated based on the start date.\n\nPlease note that after the customer purchases the seller's API, the\nprocess of reviewing and developing it is necessary, so the effective\ndate of the original contract cannot help but be postponed later than\nthe order confirmation."
          }
        },
        "required": [
          "opened_at"
        ]
      },
      "IHubOrderGood.IClose": {
        "type": "object",
        "properties": {
          "closed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "The end date of the order contract",
            "description": "The end date of the order contract.\n\nSet the end date of the order contract.\n\nHowever, the end date of the contract cannot be set immediately.\nFrom the start date of the contract, it can only be cancelled after a\nperiod of at least 1 month. And if the contract has already been started,\nit can only be terminated in 1-month units."
          }
        },
        "required": [
          "closed_at"
        ]
      },
      "IHubOrder.ICreate": {
        "type": "object",
        "properties": {
          "goods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubOrderGood.ICreate"
            },
            "title": "Product information",
            "description": "Product information."
          }
        },
        "required": [
          "goods"
        ],
        "description": "Order entry information."
      },
      "IHubOrderGood.ICreate": {
        "type": "object",
        "properties": {
          "commodity_id": {
            "type": "string",
            "format": "uuid",
            "title": "Commodity identifier",
            "description": "Commodity identifier."
          }
        },
        "required": [
          "commodity_id"
        ],
        "description": "Enter information about the individual items that make up your order."
      },
      "IHubOrderDiscountable": {
        "type": "object",
        "properties": {
          "deposit": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "Total amount of available deposit",
            "description": "Total amount of available deposit.\n\nIf the current {@link IHubCustomer customer} has not yet been authenticated\nas a {@link IHubCitizen citizen}, the `null` value is returned."
          },
          "combinations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubOrderDiscountable.ICombination"
            },
            "title": "List of applicable discount coupon combinations",
            "description": "List of applicable discount coupon combinations.\n\nThis is an array of {@link IHubCoupon discount coupons} that can be\napplied simultaneously to receive multiple discounts, and is arranged\nin order of highest total discount amount.\n\nThat is, the combinations with the highest expected total discount\n{@link IHubCouponCombination.amount} are sorted in descending order."
          }
        },
        "required": [
          "deposit",
          "combinations"
        ],
        "description": "Information about discount methods available for orders.\n\n`IHubOrderDiscountable` is an entity that represents the total amount of\n{@link IHubMileage mileage} or total deposit amount and\n{@link IHubCouponCombination discount coupon combinations} that can be\nused by {@link IHubCustomer customer} for {@link IHubOrder order} currently\nin the application stage."
      },
      "IHubOrderDiscountable.ICombination": {
        "type": "object",
        "properties": {
          "coupons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubCoupon"
            },
            "title": "Discount Coupon List",
            "description": "Discount Coupon List.\n\nA list of discount coupons that have not yet been issued as tickets,\nbut are available for issuance."
          },
          "tickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubCouponTicket"
            },
            "title": "List of previously issued discount coupon tickets",
            "description": "List of previously issued discount coupon tickets."
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubOrderDiscountable.IEntry"
            },
            "title": "List of total fixed cost reduction amounts for each discount coupon",
            "description": "List of total fixed cost reduction amounts for each discount coupon."
          },
          "amount": {
            "type": "number",
            "title": "Total amount of fixed cost reduction due to this combination",
            "description": "Total amount of fixed cost reduction due to this combination."
          }
        },
        "required": [
          "coupons",
          "tickets",
          "entries",
          "amount"
        ],
        "description": "Applicable discount coupon combinations."
      },
      "IHubOrderDiscountable.IEntry": {
        "type": "object",
        "properties": {
          "good_id": {
            "type": "string",
            "format": "uuid",
            "title": "{@link IHubOrderGood.id} of the target product",
            "description": "{@link IHubOrderGood.id} of the target product."
          },
          "coupon_id": {
            "type": "string",
            "format": "uuid",
            "title": "{@link IHubCoupon.id} for the target discount coupon",
            "description": "{@link IHubCoupon.id} for the target discount coupon."
          },
          "amount": {
            "type": "number",
            "title": "Total amount of fixed cost reduction due to discount coupons",
            "description": "Total amount of fixed cost reduction due to discount coupons."
          }
        },
        "required": [
          "good_id",
          "coupon_id",
          "amount"
        ],
        "description": "Mapping information for individual discount coupons and ordered items.\n\nInformation describing how much fixed cost reduction each discount coupon\nwill produce for each ordered item."
      },
      "IHubOrderDiscountable.IRequest": {
        "type": "object",
        "properties": {
          "good_ids": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                },
                "minItems": 1
              }
            ],
            "title": "A list of {@link IHubOrderGood.id} of target products",
            "description": "A list of {@link IHubOrderGood.id} of target products.\n\nIf you assign a `null` value, the discount combination will\nbe calculated for all products in the target {@link IHubOrder order}."
          }
        },
        "required": [
          "good_ids"
        ],
        "description": "Information on requesting a combination of order discounts."
      },
      "IHubOrderPrice": {
        "type": "object",
        "properties": {
          "ticket_payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubCouponTicketPayment"
            },
            "title": "List of payment details for discount coupon tickets",
            "description": "List of payment details for discount coupon tickets."
          },
          "value": {
            "type": "number",
            "minimum": 0,
            "title": "Nominal total payment",
            "description": "Nominal total payment."
          },
          "deposit": {
            "type": "number",
            "minimum": 0,
            "title": "Fixed cost deposit payment amount",
            "description": "Fixed cost deposit payment amount."
          },
          "ticket": {
            "type": "number",
            "minimum": 0,
            "title": "Fixed cost discount coupon ticket payment amount",
            "description": "Fixed cost discount coupon ticket payment amount."
          }
        },
        "required": [
          "ticket_payments",
          "value",
          "deposit",
          "ticket"
        ],
        "description": "Order price information.\n\n`IHubOrderPrice` is an entity that details the price to be paid\nwhen ordering {@link IHubOrder}, and includes information on deductions\nthrough {@link IHubCouponTicket discount coupon tickets}, deposits,\nand {@link IHubMileage mileage}.\n\nIt mostly deals with {@link IHubSaleUnitStockPrice.fixed fixed costs},\nbut in the case of {@link IHubCoupon discount coupons}, it also affects\nvariable costs in the case of percent discounts."
      },
      "IHubCouponTicketPayment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "ticket": {
            "$ref": "#/components/schemas/IHubCouponTicket",
            "title": "Discount coupon tickets",
            "description": "Discount coupon tickets."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Ticket issuance date and time",
            "description": "Ticket issuance date and time."
          }
        },
        "required": [
          "id",
          "ticket",
          "created_at"
        ],
        "description": "Discount coupon ticket payment (payment) history.\n\n{@link IHubCouponTicketPayment} is an entity that visualizes payment information\nfor {@link IHubOrder order} of discount coupon ticket {@link IHubCouponTicket},\nand is used when {@link IHubCustomer consumer} uses the discount coupon ticket\nissued to him/her for an order and has the payment amount deducted.\n\nAlso, {@link IHubOrder} is not an entity used when an order is completed, but\nis an entity designed to express the order application stage as well, so the\n`IHubCouponTicketPayment` record is not actually created, but the ticket is not\nactually deleted. Until the customer confirms the\n{@link IHubOrder.published_at order}, the ticket is understood as a kind of\ndeposit state.\n\nIn addition, this record can be deleted by the customer himself by reversing\nthe payment of the ticket, but it can also be deleted together with the\ncancellation of the order itself."
      },
      "IHubOrderPrice.ICreate": {
        "type": "object",
        "properties": {
          "coupon_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "title": "{@link IHubCoupon.id} List of applicable discount coupons",
            "description": "{@link IHubCoupon.id} List of applicable discount coupons."
          }
        },
        "required": [
          "coupon_ids"
        ],
        "description": "Edit information for order prices."
      },
      "IHubOrderPublish.ICreate": {
        "type": "object",
        "properties": {
          "opened_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Apply the start date of the order contract in bulk",
            "description": "Apply the start date of the order contract in bulk.\n\nThe start date of the order contract is set for all\n{@link IHubOrderGood products}.\n\nThe effective date can be pushed back from the order confirmation date.\nAnd the effective date of the contract can be continuously edited until\nit arrives.\n\nAlso, the monthly fixed fee is calculated based on the start date.\n\nPlease note that after the customer purchases the seller's API, the\nreview and development process is necessary, so the effective date of\nthe contract cannot help but be pushed back further than the order\nconfirmation.\n\n> It is also possible to set a different start date for each order product."
          },
          "closed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Apply the order contract termination date in bulk",
            "description": "Apply the order contract termination date in bulk.\n\nSet the order contract termination date in bulk for all\n{@link IHubOrderGood products}.\n\nHowever, the contract termination date cannot be set immediately. From\nthe contract initiation date, it can only be cancelled after a minimum\nperiod of 1 month has passed. And if the contract has already been\ninitiated, it can only be terminated in 1-month units.\n\n> It is also possible to set different termination dates for each order product."
          }
        },
        "required": [
          "opened_at",
          "closed_at"
        ],
        "description": "Confirmation input information for your order."
      },
      "IHubOrderPublish.IOpen": {
        "type": "object",
        "properties": {
          "opened_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Apply the start date of the order contract in bulk",
            "description": "Apply the start date of the order contract in bulk.\n\nThe start date of the order contract is set for all\n{@link IHubOrderGood products}.\n\nThe effective date can be pushed back from the order confirmation date.\nAnd the effective date of the contract can be continuously edited until\nit arrives.\n\nAlso, the monthly fixed fee is calculated based on the start date.\n\nPlease note that after the customer purchases the seller's API, the\nreview and development process is necessary, so the effective date of\nthe contract cannot help but be pushed back further than the order\nconfirmation.\n\n> It is also possible to set a different start date for each order product."
          }
        },
        "required": [
          "opened_at"
        ],
        "description": "Edit contract start date information."
      },
      "IHubOrderPublish.IClose": {
        "type": "object",
        "properties": {
          "closed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Apply the order contract termination date in bulk",
            "description": "Apply the order contract termination date in bulk.\n\nSet the order contract termination date in bulk for all\n{@link IHubOrderGood products}.\n\nHowever, the contract termination date cannot be set immediately. From\nthe contract initiation date, it can only be cancelled after a minimum\nperiod of 1 month has passed. And if the contract has already been\ninitiated, it can only be terminated in 1-month units.\n\n> It is also possible to set different termination dates for each order product."
          }
        },
        "required": [
          "closed_at"
        ],
        "description": "Edit information on the termination date of the order contract."
      },
      "IPageIHubOrderGoodHistory.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubOrderGoodHistory.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubOrderGoodHistory.ISummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "responded_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          }
        },
        "required": [
          "id",
          "status",
          "created_at",
          "responded_at"
        ]
      },
      "IHubOrderGoodHistory.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IHubOrderGoodHistory.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-history.created_at"
                },
                {
                  "const": "+history.created_at"
                },
                {
                  "const": "-history.responded_at"
                },
                {
                  "const": "+history.responded_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        }
      },
      "IHubOrderGoodHistory.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "unit_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "IHubSaleInquiryComment.ICreate": {
        "type": "object",
        "properties": {
          "format": {
            "oneOf": [
              {
                "const": "txt"
              },
              {
                "const": "html"
              },
              {
                "const": "md"
              }
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "body": {
            "type": "string",
            "title": "Content body of comment",
            "description": "Content body of comment."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "required": [
          "format",
          "body",
          "files"
        ],
        "description": "Input information required to create a query comment."
      },
      "IHubSaleInquiryComment.ISnapshot": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of snapshot record",
            "description": "Creation time of snapshot record.\n\nIn other words, creation time or update time or comment."
          },
          "format": {
            "oneOf": [
              {
                "const": "txt"
              },
              {
                "const": "html"
              },
              {
                "const": "md"
              }
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "body": {
            "type": "string",
            "title": "Content body of comment",
            "description": "Content body of comment."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "required": [
          "id",
          "created_at",
          "format",
          "body",
          "files"
        ]
      },
      "IHubSaleQuestion.ICreate": {
        "type": "object",
        "properties": {
          "secret": {
            "type": "boolean"
          },
          "format": {
            "oneOf": [
              {
                "const": "txt"
              },
              {
                "const": "html"
              },
              {
                "const": "md"
              }
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "title": {
            "type": "string",
            "title": "Title of article",
            "description": "Title of article."
          },
          "body": {
            "type": "string",
            "title": "Content body of article",
            "description": "Content body of article."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "required": [
          "secret",
          "format",
          "title",
          "body",
          "files"
        ],
        "description": "Enter detailed information about your question regarding the listing snapshot."
      },
      "IBbsArticle.ICreate": {
        "type": "object",
        "properties": {
          "format": {
            "oneOf": [
              {
                "const": "txt"
              },
              {
                "const": "html"
              },
              {
                "const": "md"
              }
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "title": {
            "type": "string",
            "title": "Title of article",
            "description": "Title of article."
          },
          "body": {
            "type": "string",
            "title": "Content body of article",
            "description": "Content body of article."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "required": [
          "format",
          "title",
          "body",
          "files"
        ],
        "description": "Store content type of the article."
      },
      "IHubSaleReview.ICreate": {
        "type": "object",
        "properties": {
          "good_id": {
            "type": "string",
            "format": "uuid"
          },
          "score": {
            "type": "number",
            "minimum": 0,
            "maximum": 100
          },
          "format": {
            "oneOf": [
              {
                "const": "txt"
              },
              {
                "const": "html"
              },
              {
                "const": "md"
              }
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "title": {
            "type": "string",
            "title": "Title of article",
            "description": "Title of article."
          },
          "body": {
            "type": "string",
            "title": "Content body of article",
            "description": "Content body of article."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "required": [
          "good_id",
          "score",
          "format",
          "title",
          "body",
          "files"
        ],
        "description": "Input information to create a review for a listing snapshot."
      },
      "IHubSaleReview.IUpdate": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "title": "Content body of article",
            "description": "Content body of article."
          },
          "format": {
            "oneOf": [
              {
                "const": "txt"
              },
              {
                "const": "html"
              },
              {
                "const": "md"
              }
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "title": {
            "type": "string",
            "title": "Title of article",
            "description": "Title of article."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          },
          "score": {
            "type": "number",
            "minimum": 0,
            "maximum": 100
          }
        },
        "required": [
          "body",
          "format",
          "title",
          "files",
          "score"
        ],
        "description": "Information on editing reviews for listing snapshots."
      },
      "IHubBookmarkSale": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Bookmark ID",
            "description": "Bookmark ID."
          },
          "sale": {
            "$ref": "#/components/schemas/IHubSale",
            "title": "Bookmark target property information",
            "description": "Bookmark target property information."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Date and time the bookmark was created",
            "description": "Date and time the bookmark was created."
          }
        },
        "required": [
          "id",
          "sale",
          "created_at"
        ],
        "description": "Bookmark information for listings.\n\n`IHubSaleBookmark` is the information that is generated when you bookmark\n{@link IHubSale listings}."
      },
      "IPageIHubSaleRecommend.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleRecommend.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubSaleRecommend.ISummary": {
        "type": "object",
        "properties": {
          "seller": {
            "$ref": "#/components/schemas/IHubSeller.IInvert",
            "title": "The seller who wrote this listing",
            "description": "The seller who wrote this listing."
          },
          "section": {
            "$ref": "#/components/schemas/IHubSection",
            "title": "The belonging section",
            "description": "The belonging section."
          },
          "audit": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubSaleAudit.IInvert"
              }
            ],
            "title": "Audit information",
            "description": "Audit information.\n\nIf this value is `null` or the internal attribute value\n{@link IHubSaleAudit.approved_at} is `null`, the customer cannot view or\nbrowse/purchase it at all. Only the seller and the administrator are aware\nof the existence of the listing."
          },
          "bookmarked_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "The point in time when you added it to your bookmarks",
            "description": "The point in time when you added it to your bookmarks."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "The ID of the property",
            "description": "The ID of the property."
          },
          "snapshot_id": {
            "type": "string",
            "format": "uuid",
            "title": "The ID of the snapshot",
            "description": "The ID of the snapshot."
          },
          "latest": {
            "type": "boolean",
            "title": "Last snapshot",
            "description": "Last snapshot.\n\nIs this snapshot the last snapshot of the property?\n\nHowever, the criteria for \"last\" vary depending on the perspective of\nthe user viewing this property.\n\n- Customer perspective: The most recently approved property\n- Seller/Administrator: The most recently created property"
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleChannel"
            },
            "title": "Channel/Category List",
            "description": "Channel/Category List.\n\nA list of channels and categories in which this item is sold."
          },
          "aggregate": {
            "$ref": "#/components/schemas/IHubSaleAggregate",
            "title": "Aggregate/performance information for this listing (or snapshot)",
            "description": "Aggregate/performance information for this listing (or snapshot)."
          },
          "content": {
            "$ref": "#/components/schemas/IHubSaleContent.IInvert",
            "title": "Content information",
            "description": "Content information.\n\nDescriptive information including the language code.\n\nIf you want to see other language written contents, call the below API function.\n\n- {@link HubApi.functional.hub.customers.sales.contents}\n- {@link HubApi.functional.hub.customers.sales.snapshots.contents}"
          },
          "units": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleUnit.ISummary"
            },
            "minItems": 1,
            "title": "Unit List",
            "description": "Unit List.\n\nA record representing the products currently being sold, containing\ninformation about the {@link IHubSaleUnitOption options} that can be\nset for each product, and the {@link IHubSaleUnitStock stock} that\ncan be configured by selecting options."
          },
          "version": {
            "type": "string",
            "title": "Version name",
            "description": "Version name.\n\nYou can set a different value than {@link ISwaggerInfo.version}.\n\nThat is, the version name in the server spec (Swagger document) and\nthe version name in the product may be different."
          },
          "activated_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Activation time of the snapshot",
            "description": "Activation time of the snapshot.\n\nThe time this snapshot was first activated after it was approved for review."
          },
          "expired_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "The time when the APIs of the current listing (snapshot) are stopped",
            "description": "The time when the APIs of the current listing (snapshot) are stopped.\n\nSince the transaction target is an API, the seller should not\nimmediately delete the listing just because it has stopped selling.\nIt should guarantee a minimum period of use, so that customers using\nthe API will respond to this.\n\nTherefore, when the listing is stopped, it is made to disappear after\na certain grace period.\n\nOf course, if it is a listing that has never been sold, it does not apply."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          },
          "paused_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Temporary suspension of sales",
            "description": "Temporary suspension of sales.\n\nThe seller has temporarily suspended API sales for some reason.\n\nCustomers can still view the listing on the listing and details page,\nbut the listing will be labeled as \"This listing is suspended by the\nseller.\""
          },
          "suspended_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Temporary suspension of sales",
            "description": "Temporary suspension of sales.\n\nThe seller has suspended sales for some reason.\n\nCustomers will not be able to view the listing or details page at all.\nAt first glance, it looks similar to a soft delete, but the difference is\nthat the seller and the administrator can still view it, and the sale can\nbe resumed at any time.\n\nAlso, even if the seller has suspended, previous buyers of the listing\ncan still use the API. The time of suspension of the API can be found in\nthe {@link IHubSaleSnapshot.expired_at} property."
          },
          "opened_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Sales start date",
            "description": "Sales start date."
          },
          "closed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "The sale end date",
            "description": "The sale end date.\n\nIf this value is NULL, the sale will continue forever."
          }
        },
        "required": [
          "seller",
          "section",
          "audit",
          "bookmarked_at",
          "id",
          "snapshot_id",
          "latest",
          "channels",
          "aggregate",
          "content",
          "units",
          "version",
          "activated_at",
          "expired_at",
          "created_at",
          "paused_at",
          "suspended_at",
          "opened_at",
          "closed_at"
        ]
      },
      "IHubSaleRecommend.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IHubSaleRecommend.IRequest.ISearch",
            "title": "Search information",
            "description": "Search information."
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-seller.created_at"
                },
                {
                  "const": "-seller.goods.payments.real"
                },
                {
                  "const": "-seller.goods.published_count"
                },
                {
                  "const": "-seller.reviews.average"
                },
                {
                  "const": "-seller.reviews.count"
                },
                {
                  "const": "-goods.publish_count"
                },
                {
                  "const": "-goods.payments"
                },
                {
                  "const": "-reviews.average"
                },
                {
                  "const": "-reviews.count"
                },
                {
                  "const": "-sale.created_at"
                },
                {
                  "const": "-sale.opened_at"
                },
                {
                  "const": "-sale.closed_at"
                },
                {
                  "const": "-sale.view_count"
                },
                {
                  "const": "+seller.created_at"
                },
                {
                  "const": "+seller.goods.payments.real"
                },
                {
                  "const": "+seller.goods.published_count"
                },
                {
                  "const": "+seller.reviews.average"
                },
                {
                  "const": "+seller.reviews.count"
                },
                {
                  "const": "+goods.publish_count"
                },
                {
                  "const": "+goods.payments"
                },
                {
                  "const": "+reviews.average"
                },
                {
                  "const": "+reviews.count"
                },
                {
                  "const": "+sale.created_at"
                },
                {
                  "const": "+sale.opened_at"
                },
                {
                  "const": "+sale.closed_at"
                },
                {
                  "const": "+sale.view_count"
                }
              ]
            },
            "title": "Sort criteria",
            "description": "Sort criteria."
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        }
      },
      "IHubSaleRecommend.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "sale": {
            "$ref": "#/components/schemas/IHubSale.IRequest.ISearch"
          }
        },
        "required": [
          "sale"
        ]
      },
      "IPageIHubShelfOrderGood": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubShelfOrderGood"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubShelfOrderGood": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key.\n\nActually {@link IHubOrderGood.id} itself."
          },
          "good": {
            "$ref": "#/components/schemas/IHubOrderGood.IInvert",
            "title": "Reverse reference of the product",
            "description": "Reverse reference of the product."
          },
          "schedule_state": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "const": "paused"
              },
              {
                "const": "active"
              }
            ],
            "title": "A list of schedules to execute this function",
            "description": "A list of schedules to execute this function."
          }
        },
        "required": [
          "id",
          "good",
          "schedule_state"
        ]
      },
      "IHubShelfOrderGood.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IHubShelfOrderGood.IRequest.ISearch",
            "description": "Search Conditions"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-seller.created_at"
                },
                {
                  "const": "-seller.goods.payments.real"
                },
                {
                  "const": "-seller.goods.published_count"
                },
                {
                  "const": "-seller.reviews.average"
                },
                {
                  "const": "-seller.reviews.count"
                },
                {
                  "const": "-goods.publish_count"
                },
                {
                  "const": "-goods.payments"
                },
                {
                  "const": "-reviews.average"
                },
                {
                  "const": "-reviews.count"
                },
                {
                  "const": "-sale.created_at"
                },
                {
                  "const": "-sale.opened_at"
                },
                {
                  "const": "-sale.closed_at"
                },
                {
                  "const": "-sale.view_count"
                },
                {
                  "const": "+seller.created_at"
                },
                {
                  "const": "+seller.goods.payments.real"
                },
                {
                  "const": "+seller.goods.published_count"
                },
                {
                  "const": "+seller.reviews.average"
                },
                {
                  "const": "+seller.reviews.count"
                },
                {
                  "const": "+goods.publish_count"
                },
                {
                  "const": "+goods.payments"
                },
                {
                  "const": "+reviews.average"
                },
                {
                  "const": "+reviews.count"
                },
                {
                  "const": "+sale.created_at"
                },
                {
                  "const": "+sale.opened_at"
                },
                {
                  "const": "+sale.closed_at"
                },
                {
                  "const": "+sale.view_count"
                },
                {
                  "const": "-order.created_at"
                },
                {
                  "const": "-order.publish.created_at"
                },
                {
                  "const": "+order.created_at"
                },
                {
                  "const": "+order.publish.created_at"
                },
                {
                  "const": "-good.opened_at"
                },
                {
                  "const": "-good.closed_at"
                },
                {
                  "const": "+good.opened_at"
                },
                {
                  "const": "+good.closed_at"
                }
              ]
            },
            "description": "Sorting Conditions"
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        }
      },
      "IHubShelfOrderGood.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "good": {
            "$ref": "#/components/schemas/IHubOrderGood.IRequest.ISearch"
          },
          "schedule_state": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "const": "paused"
              },
              {
                "const": "active"
              }
            ]
          }
        }
      },
      "IHubSeller.IJoin": {
        "type": "object",
        "properties": {},
        "description": "Enter seller membership registration information."
      },
      "IHubOrderGoodIssueFee.ICreate": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "minimum": 0,
            "title": "Amount of the attorney's fee",
            "description": "Amount of the attorney's fee."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          }
        },
        "required": [
          "value",
          "created_at"
        ],
        "description": "Input information for claiming the fee.\n\nThe value exists only if the fee is accepted."
      },
      "IHubSaleInquiryAnswer.ICreate": {
        "type": "object",
        "properties": {
          "format": {
            "oneOf": [
              {
                "const": "txt"
              },
              {
                "const": "html"
              },
              {
                "const": "md"
              }
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "title": {
            "type": "string",
            "title": "Title of article",
            "description": "Title of article."
          },
          "body": {
            "type": "string",
            "title": "Content body of article",
            "description": "Content body of article."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "required": [
          "format",
          "title",
          "body",
          "files"
        ],
        "description": "Input information required to write a reply."
      },
      "IHubSaleInquiryAnswer.ISnapshot": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of snapshot record",
            "description": "Creation time of snapshot record.\n\nIn other words, creation time or update time or article."
          },
          "format": {
            "oneOf": [
              {
                "const": "txt"
              },
              {
                "const": "html"
              },
              {
                "const": "md"
              }
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "title": {
            "type": "string",
            "title": "Title of article",
            "description": "Title of article."
          },
          "body": {
            "type": "string",
            "title": "Content body of article",
            "description": "Content body of article."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "required": [
          "id",
          "created_at",
          "format",
          "title",
          "body",
          "files"
        ]
      },
      "IHubSale.ICreate": {
        "type": "object",
        "properties": {
          "section_code": {
            "type": "string",
            "title": "{@link IHubSection.code} in the belonging section",
            "description": "{@link IHubSection.code} in the belonging section."
          },
          "opened_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "The time when the sale of this property automatically begins",
            "description": "The time when the sale of this property automatically begins."
          },
          "closed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "The time at which the sale of this property automatically ends",
            "description": "The time at which the sale of this property automatically ends."
          },
          "__approve": {
            "type": "boolean",
            "title": "Whether to auto-approval",
            "description": "Whether to auto-approval.\n\nTemporary variable, to be removed in the future."
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleChannel.ICreate"
            },
            "minItems": 1,
            "title": "Channel/Category List",
            "description": "Channel/Category List.\n\nA list of channels and categories in which this item is sold."
          },
          "contents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleContent.ICreate"
            },
            "minItems": 1,
            "title": "Content information",
            "description": "Content information.\n\nDescriptive information written by the seller when listing the item.\n\nIf you want to support multiple languages, just assign the multiple\nlanguage values to the `title`, `description`, and `summary`\nproperties.\n\nNote that, icons and attachment files must be composed separately.\nIts because the some icons or files may contain the prohibited\nsigns or symbols in the national or cultural level. If not and every icons\nand files in each language content are the same, just copy and paste\ntheir URL addresses."
          },
          "units": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IHubSaleUnit.ICreate.IReleaseUnitCreate"
                },
                {
                  "$ref": "#/components/schemas/IHubSaleUnit.ICreate.IAPIUnitCreate"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "workflow": "#/components/schemas/IHubSaleUnit.ICreate.IReleaseUnitCreate",
                  "api": "#/components/schemas/IHubSaleUnit.ICreate.IAPIUnitCreate"
                }
              }
            },
            "minItems": 1,
            "title": "Unit list",
            "description": "Unit list."
          },
          "version": {
            "type": "string",
            "title": "Version name",
            "description": "Version name.\n\nYou can set a different value than {@link ISwaggerInfo.version}.\n\nThat is, the version name in the server spec (Swagger document)\nand the version name in the snapshot can be different."
          }
        },
        "required": [
          "section_code",
          "opened_at",
          "closed_at",
          "channels",
          "contents",
          "units",
          "version"
        ],
        "description": "Enter the listing information."
      },
      "IPageIHubSaleUnitParameter": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubSaleUnitParameter"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IHubSaleUnitParameter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Record creation time",
            "description": "Record creation time."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Date and time of record modification",
            "description": "Date and time of record modification."
          },
          "key": {
            "type": "string",
            "title": "Key value",
            "description": "Key value."
          },
          "value": {
            "type": "string",
            "title": "The Value for the corresponding Key value",
            "description": "The Value for the corresponding Key value."
          },
          "in": {
            "oneOf": [
              {
                "const": "query"
              },
              {
                "const": "header"
              }
            ],
            "title": "Parameter type",
            "description": "Parameter type.\n\nCurrently cookie type is not supported."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "description": "Description of the key"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "key",
          "value",
          "in",
          "description"
        ],
        "description": "Parameter information for the listing unit.\n\nDefinition of additional parameters to be sent to the seller server."
      },
      "IHubSaleUnitParameter.ICreate": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "title": "Key value",
            "description": "Key value."
          },
          "value": {
            "type": "string",
            "title": "The Value for the corresponding Key value",
            "description": "The Value for the corresponding Key value."
          },
          "in": {
            "oneOf": [
              {
                "const": "query"
              },
              {
                "const": "header"
              }
            ],
            "title": "Parameter type",
            "description": "Parameter type.\n\nCurrently cookie type is not supported."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "description": "Description of the key"
          }
        },
        "required": [
          "key",
          "value",
          "in",
          "description"
        ],
        "description": "Parameter input information."
      },
      "IHubSaleUnitParameter.IUpdate": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "title": "The Value for the corresponding Key value",
            "description": "The Value for the corresponding Key value."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "description": "Description of the key"
          }
        },
        "required": [
          "value",
          "description"
        ],
        "description": "Parameter modification information.\n\nOnly values and descriptions can be edited."
      },
      "IPageIStudioAccount.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioAccount.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IStudioAccount.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IStudioAccount.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-account.code"
                },
                {
                  "const": "+account.code"
                },
                {
                  "const": "-account.created_at"
                },
                {
                  "const": "+account.created_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Page and search request information."
      },
      "IStudioAccount.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "type": {
            "oneOf": [
              {
                "const": "member"
              },
              {
                "const": "enterprise"
              }
            ]
          },
          "code": {
            "type": "string"
          }
        }
      },
      "IStudioAccount": {
        "type": "object",
        "properties": {
          "owner": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IHubMember"
              },
              {
                "$ref": "#/components/schemas/IStudioEnterprise.IInvertFromAccount"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "member": "#/components/schemas/IHubMember",
                "enterprise": "#/components/schemas/IStudioEnterprise.IInvertFromAccount"
              }
            },
            "title": "Owner information",
            "description": "Owner information."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "code": {
            "type": "string",
            "title": "Identifier code",
            "description": "Identifier code."
          },
          "created_at": {
            "type": "string",
            "title": "Account creation date and time",
            "description": "Account creation date and time."
          }
        },
        "required": [
          "owner",
          "id",
          "code",
          "created_at"
        ],
        "description": "Account entity.\n\n`IStudioAccount` is an entity that embodies an account in the studio system.\nAn account is a single entity with a unique identifier code, and can own\n{@link IStudioRepository repositories}. For example, if the address of a specific\nrepository in GitHub is https://github.com/samchon/typia, \"samchon\" is the identifier\nof the account, and it is the owner of the repository called \"typia.\"\n\nAnd the account referred to here does not necessarily refer to a person. The account owner\nmay be a {@link IHubMember member}, but it may also be a {@link IStudioEnterprise company}.\nFor example, in the case of https://github.com/Microsoft/TypeScript, the account owner\nis not a person, but the company \"Microsoft.\"\n\nIn addition, an account can change its owner. And when the owner changes, it is also\npossible for the subject to change from an individual to a company. For example,\nan account and repository that started as an individual will become successful and\nthen be promoted to a company in the future."
      },
      "IPageIStudioAccountSchedule.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioAccountSchedule.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IStudioAccountSchedule.ISummary": {
        "type": "object",
        "properties": {
          "repository": {
            "$ref": "#/components/schemas/IStudioRepository.ISummary",
            "title": "Affiliated storage",
            "description": "Affiliated storage."
          },
          "release": {
            "$ref": "#/components/schemas/IStudioRepositoryRelease.ISummary",
            "title": "Commit of attribution. The most recent version",
            "description": "Commit of attribution. The most recent version."
          },
          "workflow": {
            "$ref": "#/components/schemas/IStudioWorkflow.ISummary",
            "title": "Workflow documentation",
            "description": "Workflow documentation."
          },
          "purpose": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "const": "app"
              },
              {
                "const": "agent"
              }
            ],
            "title": "For app differentiation purposes",
            "description": "For app differentiation purposes."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "const": "schedule",
            "title": "Discriminator",
            "description": "Discriminator."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Date and time of record modification",
            "description": "Date and time of record modification."
          },
          "intervals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioAccountScheduleInterval"
            },
            "title": "Schedule execution interval",
            "description": "Schedule execution interval."
          },
          "of_good": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IStudioAccountScheduleOfGood"
              }
            ],
            "title": "Information about the product I ordered",
            "description": "Information about the product I ordered.\n\nIf the schedule is generated from the product I ordered, it is not `null`."
          }
        },
        "required": [
          "repository",
          "release",
          "workflow",
          "purpose",
          "id",
          "type",
          "created_at",
          "updated_at",
          "intervals",
          "of_good"
        ],
        "description": "Account schedule summary information."
      },
      "IStudioRepository.ISummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "account": {
            "$ref": "#/components/schemas/IStudioAccount.ISummary",
            "title": "Your account information",
            "description": "Your account information."
          },
          "code": {
            "type": "string",
            "title": "The identifier code of the repository",
            "description": "The identifier code of the repository."
          },
          "disclosure": {
            "oneOf": [
              {
                "const": "public"
              },
              {
                "const": "protected"
              },
              {
                "const": "private"
              }
            ],
            "title": "The visibility level of the repository",
            "description": "The visibility level of the repository.\n\n- `public`: A public repository that can be viewed by all members.\n- `protected`: A protected repository that can be viewed only by staff.\n- `private`: A private repository that can be viewed only by those who have been granted permission."
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Repository title",
            "description": "Repository title."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "title": "List of search tag values",
            "description": "List of search tag values."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the repository was created",
            "description": "The date and time the repository was created."
          }
        },
        "required": [
          "id",
          "account",
          "code",
          "disclosure",
          "title",
          "tags",
          "created_at"
        ],
        "description": "Summary information about the repository."
      },
      "IStudioRepositoryRelease.ISummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "commit": {
            "$ref": "#/components/schemas/IStudioRepositoryCommit.ISummary",
            "title": "Commit information",
            "description": "Commit information."
          },
          "document": {
            "$ref": "#/components/schemas/IStudioRepositoryReleaseDocument.ISummary",
            "title": "Document information",
            "description": "Document information."
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubChannelCategory"
            },
            "title": "List of classification categories",
            "description": "List of classification categories."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "title": "List of search tags",
            "description": "List of search tags."
          },
          "version": {
            "type": "string",
            "title": "Version name",
            "description": "Version name."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The creation date and time of the release record",
            "description": "The creation date and time of the release record."
          },
          "opened_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Distribution start date and time",
            "description": "Distribution start date and time."
          }
        },
        "required": [
          "id",
          "commit",
          "document",
          "categories",
          "tags",
          "version",
          "created_at",
          "opened_at"
        ]
      },
      "IStudioRepositoryCommit.ISummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "parent_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "title": "The ID of the original commit",
            "description": "The ID of the original commit.\n\nIf the initial commit has no base, the value `null` is assigned."
          },
          "customer": {
            "$ref": "#/components/schemas/IHubCustomer",
            "title": "Customers who have committed",
            "description": "Customers who have committed."
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "The title of the commit",
            "description": "The title of the commit."
          },
          "latest": {
            "type": "boolean",
            "title": "Whether it is the most recent commit",
            "description": "Whether it is the most recent commit."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The commit creation date and time",
            "description": "The commit creation date and time."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Commit modification date and time",
            "description": "Commit modification date and time."
          },
          "archived_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Commit record confirmation date and time",
            "description": "Commit record confirmation date and time.\n\nAll changes in the commit are recorded on the server, confirming and finalizing it.\n\nAfter the commit is recorded, no modification or deletion is possible."
          }
        },
        "required": [
          "id",
          "parent_id",
          "customer",
          "title",
          "latest",
          "created_at",
          "updated_at",
          "archived_at"
        ],
        "description": "Summary information about the commit."
      },
      "IStudioRepositoryReleaseDocument.ISummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "title": {
            "type": "string",
            "title": "title",
            "description": "title."
          },
          "body": {
            "type": "string",
            "title": "Descriptive text section",
            "description": "Descriptive text section."
          }
        },
        "required": [
          "id",
          "title",
          "body"
        ],
        "description": "Summary information about the repository distribution."
      },
      "IStudioAccountScheduleInterval": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Interval unique id",
            "description": "Interval unique id."
          },
          "studio_account_schedule_id": {
            "type": "string",
            "format": "uuid",
            "title": "The id of the target scheduler",
            "description": "The id of the target scheduler."
          },
          "duration": {
            "type": "string",
            "format": "duration",
            "description": "duration value"
          },
          "started_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "The start time and date of the first execution of the schedule",
            "description": "The start time and date of the first execution of the schedule."
          },
          "paused_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "The date and time of the schedule suspension",
            "description": "The date and time of the schedule suspension."
          },
          "closed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Schedule interruption date",
            "description": "Schedule interruption date."
          },
          "created_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          },
          "updated_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Date and time the record was modified",
            "description": "Date and time the record was modified."
          },
          "deleted_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Date and time of record deletion",
            "description": "Date and time of record deletion."
          }
        },
        "required": [
          "id",
          "studio_account_schedule_id",
          "duration",
          "started_at",
          "paused_at",
          "closed_at",
          "created_at",
          "updated_at",
          "deleted_at"
        ]
      },
      "IStudioAccountScheduleOfGood": {
        "type": "object",
        "properties": {
          "good": {
            "$ref": "#/components/schemas/IHubOrderGood.IInvert",
            "title": "Reverse reference information for the order",
            "description": "Reverse reference information for the order."
          },
          "unit": {
            "$ref": "#/components/schemas/IHubSaleUnit.ISummary",
            "title": "Reverse reference information for the unit",
            "description": "Reverse reference information for the unit."
          }
        },
        "required": [
          "good",
          "unit"
        ],
        "description": "Studio account order schedule information."
      },
      "IStudioAccountSchedule.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IStudioAccountSchedule.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-account.code"
                },
                {
                  "const": "+account.code"
                },
                {
                  "const": "-account.created_at"
                },
                {
                  "const": "+account.created_at"
                },
                {
                  "const": "-repository.code"
                },
                {
                  "const": "-repository.title"
                },
                {
                  "const": "-repository.created_at"
                },
                {
                  "const": "+repository.code"
                },
                {
                  "const": "+repository.title"
                },
                {
                  "const": "+repository.created_at"
                },
                {
                  "const": "-bucket.name"
                },
                {
                  "const": "-bucket.created_at"
                },
                {
                  "const": "-bucket.updated_at"
                },
                {
                  "const": "+bucket.name"
                },
                {
                  "const": "+bucket.created_at"
                },
                {
                  "const": "+bucket.updated_at"
                },
                {
                  "const": "-schedule.created_at"
                },
                {
                  "const": "-release.document.title"
                },
                {
                  "const": "-release.version"
                },
                {
                  "const": "-release.created_at"
                },
                {
                  "const": "-release.opened_at"
                },
                {
                  "const": "-workflow.summary"
                },
                {
                  "const": "-workflow.title"
                },
                {
                  "const": "+schedule.created_at"
                },
                {
                  "const": "+release.document.title"
                },
                {
                  "const": "+release.version"
                },
                {
                  "const": "+release.created_at"
                },
                {
                  "const": "+release.opened_at"
                },
                {
                  "const": "+workflow.summary"
                },
                {
                  "const": "+workflow.title"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Page and search request information."
      },
      "IStudioAccountSchedule.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "repository": {
            "$ref": "#/components/schemas/IStudioRepository.IRequest.ISearch"
          },
          "release": {
            "$ref": "#/components/schemas/IStudioRepositoryRelease.IRequest.ISearch"
          },
          "workflow": {
            "$ref": "#/components/schemas/IStudioWorkflow.IRequest.ISearch"
          },
          "release_node_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "IStudioRepository.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/IStudioAccount.IRequest.ISearch"
          },
          "title": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IStudioRepositoryRelease.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "document": {
            "$ref": "#/components/schemas/IStudioRepositoryReleaseDocument.IRequest.ISearch"
          },
          "version_from": {
            "type": "string"
          },
          "version_to": {
            "type": "string"
          },
          "date_from": {
            "type": "string",
            "format": "date-time"
          },
          "date_to": {
            "type": "string",
            "format": "date-time"
          },
          "channel_category_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "IStudioRepositoryReleaseDocument.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "title_or_body": {
            "type": "string"
          }
        }
      },
      "IStudioWorkflow.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "title_or_summary": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ]
          }
        }
      },
      "IStudioAccountSchedule": {
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/IHubCustomer",
            "title": "The customer who created the schedule",
            "description": "The customer who created the schedule."
          },
          "repository": {
            "$ref": "#/components/schemas/IStudioRepository.IStandalone",
            "title": "Affiliated storage",
            "description": "Affiliated storage."
          },
          "node": {
            "$ref": "#/components/schemas/IStudioRepositoryReleaseNode.IInvert",
            "title": "Affiliated release node",
            "description": "Affiliated release node."
          },
          "workflow": {
            "$ref": "#/components/schemas/IStudioWorkflow",
            "title": "Workflow documentation",
            "description": "Workflow documentation."
          },
          "arguments": {
            "type": "array",
            "items": {},
            "title": "A list of argument values to be entered for the parameter",
            "description": "A list of argument values to be entered for the parameter."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "const": "schedule",
            "title": "Discriminator",
            "description": "Discriminator."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Date and time of record modification",
            "description": "Date and time of record modification."
          },
          "intervals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioAccountScheduleInterval"
            },
            "title": "Schedule execution interval",
            "description": "Schedule execution interval."
          },
          "of_good": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IStudioAccountScheduleOfGood"
              }
            ],
            "title": "Information about the product I ordered",
            "description": "Information about the product I ordered.\n\nIf the schedule is generated from the product I ordered, it is not `null`."
          }
        },
        "required": [
          "customer",
          "repository",
          "node",
          "workflow",
          "arguments",
          "id",
          "type",
          "created_at",
          "updated_at",
          "intervals",
          "of_good"
        ],
        "description": "Schedule information per account.\n\n`IStudioAccountSchedule` is an entity that visualizes schedule information\nset per {@link IStudioAccount account}. And the schedule here refers to\n{@link IStudioRepositoryReleaseNode release node} that is repeatedly executed\nbased on a certain cycle.\n\nFor reference, the target release node must be of type {@link IStudioWorkflow workflow},\nand the {@link IStudioRepositoryRelease release} can be an old version."
      },
      "IStudioRepositoryReleaseNode.IInvert": {
        "type": "object",
        "properties": {
          "release": {
            "$ref": "#/components/schemas/IStudioRepositoryRelease.IInvert",
            "title": "Distribution program information",
            "description": "Distribution program information."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "release_id": {
            "type": "string",
            "format": "uuid",
            "title": "{@link IStudioRepositoryRelease.id} of the parent release",
            "description": "{@link IStudioRepositoryRelease.id} of the parent release."
          },
          "type": {
            "const": "release",
            "title": "Discriminator of connectors",
            "description": "Discriminator of connectors."
          },
          "bucket": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IStudioRepositoryDirectory.ISummary"
              },
              {
                "$ref": "#/components/schemas/IStudioRepositoryFile.ISummary"
              },
              {
                "$ref": "#/components/schemas/IStudioWorkflow.ISummary"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "directory": "#/components/schemas/IStudioRepositoryDirectory.ISummary",
                "file": "#/components/schemas/IStudioRepositoryFile.ISummary",
                "workflow": "#/components/schemas/IStudioWorkflow.ISummary"
              }
            },
            "title": "Reference information for the target bucket",
            "description": "Reference information for the target bucket."
          },
          "accessor": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Accessor for the node (function) to be released",
            "description": "Accessor for the node (function) to be released."
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioRepositoryReleaseNode.IParameter"
            },
            "title": "A list of type information for the function's parameters",
            "description": "A list of type information for the function's parameters."
          },
          "output": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IConstant"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IString"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.ITuple"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IOneOf"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INull"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IUnknown"
              }
            ],
            "title": "Return type information",
            "description": "Return type information.\n\n`null` if the return type is `void` (or `Promise<void>`)."
          },
          "async": {
            "type": "boolean",
            "title": "Whether the function is asynchronous",
            "description": "Whether the function is asynchronous."
          },
          "purpose": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "const": "app"
              },
              {
                "const": "agent"
              }
            ],
            "title": "Purpose of extracting the release",
            "description": "Purpose of extracting the release."
          },
          "summary": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Summary statement",
            "description": "Summary statement."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Detailed description",
            "description": "Detailed description."
          }
        },
        "required": [
          "release",
          "id",
          "release_id",
          "type",
          "bucket",
          "accessor",
          "parameters",
          "output",
          "async",
          "purpose",
          "summary",
          "description"
        ],
        "description": "Reverse reference information for the distribution program."
      },
      "IStudioRepositoryRelease.IInvert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "customer": {
            "$ref": "#/components/schemas/IHubCustomer",
            "title": "Information about the customer who made the release",
            "description": "Information about the customer who made the release."
          },
          "repository": {
            "$ref": "#/components/schemas/IStudioRepository.IStandalone",
            "title": "Information about the repository you are affiliating",
            "description": "Information about the repository you are affiliating."
          },
          "commit": {
            "$ref": "#/components/schemas/IStudioRepositoryCommit",
            "title": "The commit to be released",
            "description": "The commit to be released."
          },
          "components": {
            "$ref": "#/components/schemas/ISwaggerComponents",
            "title": "A collection of named types",
            "description": "A collection of named types."
          },
          "document": {
            "$ref": "#/components/schemas/IStudioRepositoryReleaseDocument",
            "title": "Documentation for the release",
            "description": "Documentation for the release."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "title": "List of search tags",
            "description": "List of search tags."
          },
          "version": {
            "type": "string",
            "title": "Version name",
            "description": "Version name."
          },
          "program_url": {
            "type": "string",
            "format": "uri",
            "title": "URL of the built program",
            "description": "URL of the built program."
          },
          "debug_url": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uri"
              }
            ],
            "title": "URL for debugging",
            "description": "URL for debugging."
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IHubChannelCategory"
            },
            "title": "List of classification categories",
            "description": "List of classification categories."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The creation date and time of the release record",
            "description": "The creation date and time of the release record."
          },
          "opened_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Distribution start date and time",
            "description": "Distribution start date and time."
          }
        },
        "required": [
          "id",
          "customer",
          "repository",
          "commit",
          "components",
          "document",
          "tags",
          "version",
          "program_url",
          "debug_url",
          "categories",
          "created_at",
          "opened_at"
        ],
        "description": "Back reference information from child nodes."
      },
      "IPageIStudioAccountSecret.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioAccountSecret.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IStudioAccountSecret.ISummary": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "title": "Number of variables",
            "description": "Number of variables."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "key": {
            "type": "string",
            "title": "Key value, i.e. variable name",
            "description": "Key value, i.e. variable name."
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "A title for the variable",
            "description": "A title for the variable."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Date and time of record modification",
            "description": "Date and time of record modification."
          }
        },
        "required": [
          "count",
          "id",
          "key",
          "title",
          "created_at",
          "updated_at"
        ],
        "description": "Summary information about the script."
      },
      "IStudioAccountSecret.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IStudioAccountSecret.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-secret.key"
                },
                {
                  "const": "-secret.title"
                },
                {
                  "const": "-secret.created_at"
                },
                {
                  "const": "-secret.updated_at"
                },
                {
                  "const": "+secret.key"
                },
                {
                  "const": "+secret.title"
                },
                {
                  "const": "+secret.created_at"
                },
                {
                  "const": "+secret.updated_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Page and search request information."
      },
      "IStudioAccountSecret.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "title_or_description": {
            "type": "string"
          }
        }
      },
      "IStudioAccountSecret": {
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/IHubCustomer",
            "title": "Customer information that registered the variable",
            "description": "Customer information that registered the variable."
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioAccountSecretValue"
            },
            "title": "A list of variable values",
            "description": "A list of variable values."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Detailed description of the variables",
            "description": "Detailed description of the variables."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "key": {
            "type": "string",
            "title": "Key value, i.e. variable name",
            "description": "Key value, i.e. variable name."
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "A title for the variable",
            "description": "A title for the variable."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Date and time of record modification",
            "description": "Date and time of record modification."
          }
        },
        "required": [
          "customer",
          "values",
          "description",
          "id",
          "key",
          "title",
          "created_at",
          "updated_at"
        ],
        "description": "Secret variable set information registered to the studio account.\n\n`IStudioAccountSecret` is an entity that visualizes a set of secret variables\nregistered to {@link IStudioAccount studio account}. It is a concept that collects\nmultiple {@link values variable values} for one secret {@link key}. And the secret\nvariable referred to here refers to authentication keys or passwords used for\nlinking with other applications.\n\nFor reference, the main purpose of the secret variable is to be used as a parameter\nor some property inserted into a connector or workflow function within the\n{@link IStudioWorkflow workflow} program. It is identified through\n{@link IAstWorkflowSecretIdentifier} and is mainly used to store authentication keys\nsuch as Google or Facebook.\n\nAnd for this purpose, {@link IStudioAccountSecretValue.value variable value}\nis encrypted and stored in the DB."
      },
      "IStudioAccountSecretValue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "code": {
            "type": "string",
            "title": "Identifier code",
            "description": "Identifier code.\n\nUsually used are account emails or IDs of linked target services."
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Scope of authority",
            "description": "Scope of authority."
          },
          "value": {
            "type": "string",
            "title": "Secret value",
            "description": "Secret value."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Date and time of record modification",
            "description": "Date and time of record modification."
          },
          "expired_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Expiration date and time of the variable value",
            "description": "Expiration date and time of the variable value."
          }
        },
        "required": [
          "id",
          "code",
          "scopes",
          "value",
          "created_at",
          "updated_at",
          "expired_at"
        ],
        "description": "Global variable value information registered in the studio account.\n\n`IStudioAccountSecretValue` is an entity that embodies the individual values\nof the {@link IStudioAccountSecret secret variable set} registered in the\n{@link IStudioAccount studio account}.\n\nAnd the secret variable referred to here refers to authentication keys or passwords\nused for linking with other applications. For reference, the main purpose\nof the secret variable is to be used as a parameter or some property inserted into\na connector or workflow function within the {@link IStudioWorkflow workflow} program.\n\nIt is identified through {@link IAstWorkflowSecretIdentifier} and is mainly used to\nstore authentication keys such as Google or Facebook.\n\nAnd for this purpose, {@link IStudioAccountSecretValue.value variable value}\nis encrypted and stored in the DB."
      },
      "IPageIStudioAccountSecretValue.IInvertSummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioAccountSecretValue.IInvertSummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IStudioAccountSecretValue.IInvertSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "code": {
            "type": "string",
            "title": "Identifier code",
            "description": "Identifier code.\n\nUsually used are account emails or IDs of linked target services."
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Scope of authority",
            "description": "Scope of authority."
          },
          "secret": {
            "$ref": "#/components/schemas/IStudioAccountSecret.IInvert",
            "title": "Parents Secret Information",
            "description": "Parents Secret Information."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Date and time of record modification",
            "description": "Date and time of record modification."
          },
          "expired_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Expiration date and time of the variable value",
            "description": "Expiration date and time of the variable value."
          }
        },
        "required": [
          "id",
          "code",
          "scopes",
          "secret",
          "created_at",
          "updated_at",
          "expired_at"
        ],
        "description": "Summary of dereferencing information for secret variables."
      },
      "IStudioAccountSecret.IInvert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "key": {
            "type": "string",
            "title": "Key value, i.e. variable name",
            "description": "Key value, i.e. variable name."
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "A title for the variable",
            "description": "A title for the variable."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Date and time of record modification",
            "description": "Date and time of record modification."
          }
        },
        "required": [
          "id",
          "key",
          "title",
          "created_at",
          "updated_at"
        ],
        "description": "Secret's reverse reference information."
      },
      "IStudioAccountSecretValue.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IStudioAccountSecretValue.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-secret.key"
                },
                {
                  "const": "-secret.title"
                },
                {
                  "const": "-secret.created_at"
                },
                {
                  "const": "-secret.updated_at"
                },
                {
                  "const": "+secret.key"
                },
                {
                  "const": "+secret.title"
                },
                {
                  "const": "+secret.created_at"
                },
                {
                  "const": "+secret.updated_at"
                },
                {
                  "const": "-value.created_at"
                },
                {
                  "const": "-value.updated_at"
                },
                {
                  "const": "-value.expired_at"
                },
                {
                  "const": "-value.code"
                },
                {
                  "const": "-value.sequence"
                },
                {
                  "const": "+value.created_at"
                },
                {
                  "const": "+value.updated_at"
                },
                {
                  "const": "+value.expired_at"
                },
                {
                  "const": "+value.code"
                },
                {
                  "const": "+value.sequence"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        }
      },
      "IStudioAccountSecretValue.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "secret": {
            "$ref": "#/components/schemas/IStudioAccountSecret.IRequest.ISearch"
          }
        }
      },
      "IStudioAccountWidgetTile.IMinimapItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "kind": {
            "oneOf": [
              {
                "const": "workflow"
              },
              {
                "const": "schedule"
              },
              {
                "const": "release-node"
              },
              {
                "const": "release-node-agent"
              }
            ],
            "title": "The type of component deployed",
            "description": "The type of component deployed."
          },
          "geometry": {
            "$ref": "#/components/schemas/IStudioAccountWidgetTileGeometry",
            "title": "Coordinate and size information",
            "description": "Coordinate and size information."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          }
        },
        "required": [
          "id",
          "kind",
          "geometry",
          "created_at"
        ],
        "description": "Information displayed on the tile's minimap."
      },
      "IStudioAccountWidgetTileGeometry": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "breakpoint": {
            "oneOf": [
              {
                "const": "md"
              },
              {
                "const": "xs"
              },
              {
                "const": "sm"
              },
              {
                "const": "lg"
              }
            ],
            "title": "Breakpoints for responsive UI",
            "description": "Breakpoints for responsive UI.\n\n- xs: 1 space\n- sm: 2 spaces\n- md: 4 spaces\n- lg: 4 spaces"
          },
          "position": {
            "$ref": "#/components/schemas/IStudioAccountWidgetTileGeometry.IPosition",
            "title": "Coordinate information",
            "description": "Coordinate information."
          },
          "scale": {
            "$ref": "#/components/schemas/IStudioAccountWidgetTileGeometry.IScale",
            "title": "Size information",
            "description": "Size information."
          },
          "pinned": {
            "type": "boolean",
            "title": "Whether to fix the coordinates",
            "description": "Whether to fix the coordinates.\n\nIf this value is set to `true` and the target tile's coordinates are fixed,\n\nit will not be affected by the future pushing movement of other tiles.\n\nThis means that the coordinates are completely fixed."
          }
        },
        "required": [
          "id",
          "breakpoint",
          "position",
          "scale",
          "pinned"
        ],
        "description": "Tiles UI breakpoint placement information."
      },
      "IStudioAccountWidgetTileGeometry.IPosition": {
        "type": "object",
        "properties": {
          "x": {
            "type": "integer"
          },
          "y": {
            "type": "integer"
          }
        },
        "required": [
          "x",
          "y"
        ],
        "description": "Coordinate information."
      },
      "IStudioAccountWidgetTileGeometry.IScale": {
        "type": "object",
        "properties": {
          "x": {
            "type": "integer",
            "exclusiveMinimum": true,
            "minimum": 0
          },
          "y": {
            "type": "integer",
            "exclusiveMinimum": true,
            "minimum": 0
          }
        },
        "required": [
          "x",
          "y"
        ],
        "description": "Size information."
      },
      "IGeometryPageIStudioAccountWidgetTile.ISummary": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "title": "Number of total records in the database",
            "description": "Number of total records in the database."
          },
          "world": {
            "$ref": "#/components/schemas/IPoint2D",
            "title": "The world size",
            "description": "The world size."
          },
          "boundary": {
            "$ref": "#/components/schemas/IGeometryPage.IBoundary",
            "title": "The boundary of the current page",
            "description": "The boundary of the current page."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioAccountWidgetTile.ISummary"
            },
            "title": "List of records covered by the {@link boundary}",
            "description": "List of records covered by the {@link boundary}."
          }
        },
        "required": [
          "total",
          "world",
          "boundary",
          "data"
        ],
        "description": "Geometry Page.\n\nCollection of records with geometry information."
      },
      "IGeometryPage.IBoundary": {
        "type": "object",
        "properties": {
          "position": {
            "$ref": "#/components/schemas/IPoint2D",
            "title": "The starting point of the boundary",
            "description": "The starting point of the boundary."
          },
          "scale": {
            "$ref": "#/components/schemas/IPoint2D",
            "title": "The scale of the boundary",
            "description": "The scale of the boundary."
          }
        },
        "required": [
          "position",
          "scale"
        ],
        "description": "Boundary info."
      },
      "IStudioAccountWidgetTile.ISummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "component": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IStudioAccountWidgetTileComponentOfReleaseNode"
              },
              {
                "$ref": "#/components/schemas/IStudioAccountWidgetTileComponentOfSchedule"
              },
              {
                "$ref": "#/components/schemas/IStudioAccountWidgetTileComponentOfWorkflow"
              }
            ],
            "title": "Deployed components",
            "description": "Deployed components."
          },
          "geometry": {
            "$ref": "#/components/schemas/IStudioAccountWidgetTileGeometry",
            "title": "Coordinate and size information",
            "description": "Coordinate and size information."
          },
          "created_at": {
            "type": "string",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          },
          "deleted_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Date and time of record deletion",
            "description": "Date and time of record deletion."
          }
        },
        "required": [
          "id",
          "component",
          "geometry",
          "created_at",
          "deleted_at"
        ],
        "description": "Summary information about the tile.\n\nThe difference is that the breakpoint is specified compared to the\ndetailed information."
      },
      "IStudioAccountWidgetTileComponentOfReleaseNode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "kind": {
            "oneOf": [
              {
                "const": "release-node"
              },
              {
                "const": "release-node-agent"
              }
            ],
            "title": "One type of tile component is chatbot",
            "description": "One type of tile component is chatbot."
          },
          "node": {
            "$ref": "#/components/schemas/IStudioRepositoryReleaseNode.IInvert",
            "title": "Affiliated release node",
            "description": "Affiliated release node."
          },
          "histories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioRepositoryReleaseNodeHistory"
            },
            "title": "Schedule execution history",
            "description": "Schedule execution history."
          },
          "arguments": {
            "type": "array",
            "items": {},
            "title": "List of parameter values required for execution",
            "description": "List of parameter values required for execution."
          }
        },
        "required": [
          "id",
          "kind",
          "node",
          "histories",
          "arguments"
        ],
        "description": "Release node placed on a Studio widget tile.\n\n`IStudioAccountWidgetTileComponentOfReleaseNode` is an entity that represents\na {@link IStudioRepositoryReleaseNode release node} placed on a Studio's\n{@link IStudioAccountWidgetTile widget tile}."
      },
      "IStudioRepositoryReleaseNodeHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "customer": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IHubCustomer"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "customer": "#/components/schemas/IHubCustomer"
              }
            }
          },
          "schedule": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IStudioAccountSchedule.ISummary"
              }
            ]
          },
          "parameters": {
            "type": "array",
            "items": {}
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "terminated_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "result": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IStudioRepositoryReleaseNodeHistory.IResult"
              }
            ]
          }
        },
        "required": [
          "id",
          "customer",
          "schedule",
          "parameters",
          "created_at",
          "started_at",
          "terminated_at",
          "result"
        ]
      },
      "IStudioRepositoryReleaseNodeHistory.IResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "output": {},
          "error": {},
          "completed_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "success",
          "output",
          "error",
          "completed_at"
        ]
      },
      "IStudioAccountWidgetTileComponentOfSchedule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "kind": {
            "const": "schedule",
            "title": "Among the tile components, one type is routine",
            "description": "Among the tile components, one type is routine."
          },
          "schedule": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IStudioAccountSchedule"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "schedule": "#/components/schemas/IStudioAccountSchedule"
              }
            },
            "title": "Schedule information",
            "description": "Schedule information."
          },
          "histories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioRepositoryReleaseNodeHistory"
            },
            "title": "Schedule execution history",
            "description": "Schedule execution history."
          }
        },
        "required": [
          "id",
          "kind",
          "schedule",
          "histories"
        ],
        "description": "Schedule placed on a Studio widget tile.\n\n`IStudioAccountWidgetTileComponentOfSchedule` is an entity that represents a\n{@link IStudioAccountSchedule schedule} placed on a Studio's\n{@link IStudioAccountWidgetTile widget tile}."
      },
      "IStudioAccountWidgetTileComponentOfWorkflow": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "kind": {
            "const": "workflow",
            "title": "The type of workflow you are working on among the tile components",
            "description": "The type of workflow you are working on among the tile components."
          },
          "repository": {
            "$ref": "#/components/schemas/IStudioRepository.IStandalone",
            "title": "Information about the repository you are affiliating",
            "description": "Information about the repository you are affiliating."
          },
          "workflow": {
            "$ref": "#/components/schemas/IStudioWorkflow",
            "title": "A workflow document you're working on",
            "description": "A workflow document you're working on."
          },
          "histories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioWorkflowHistory"
            },
            "title": "Workflow execution history",
            "description": "Workflow execution history."
          },
          "arguments": {
            "type": "array",
            "items": {},
            "title": "List of parameter values required for execution",
            "description": "List of parameter values required for execution."
          }
        },
        "required": [
          "id",
          "kind",
          "repository",
          "workflow",
          "histories",
          "arguments"
        ],
        "description": "A working workflow placed on a Studio widget tile.\n\n`IStudioAccountWidgetTileComponentOfWorkflow` is an entity that represents a working\n{@link IStudioWorkflow workflow} placed on a Studio's\n{@link IStudioAccountWidgetTile widget tile}."
      },
      "IStudioWorkflowHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "commit_id": {
            "type": "string",
            "format": "uuid"
          },
          "customer": {
            "$ref": "#/components/schemas/IHubCustomer"
          },
          "metadata": {
            "$ref": "#/components/schemas/IStudioWorkflowHistory.IMetadata"
          },
          "parameters": {
            "type": "array",
            "items": {}
          },
          "result": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IStudioWorkflowHistory.IResult"
              }
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "terminated_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          }
        },
        "required": [
          "id",
          "commit_id",
          "customer",
          "metadata",
          "parameters",
          "result",
          "created_at",
          "started_at",
          "terminated_at"
        ],
        "description": "Workflow execution history."
      },
      "IStudioWorkflowHistory.IMetadata": {
        "type": "object",
        "properties": {
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioWorkflowParameter"
            }
          },
          "output": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IConstant"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IString"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.ITuple"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IOneOf"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INull"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IUnknown"
              }
            ]
          },
          "components": {
            "$ref": "#/components/schemas/ISwaggerComponents"
          }
        },
        "required": [
          "parameters",
          "output",
          "components"
        ]
      },
      "IStudioWorkflowHistory.IResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "output": {},
          "error": {},
          "completed_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "success",
          "output",
          "error",
          "completed_at"
        ]
      },
      "IStudioAccountWidgetTile.IRequest": {
        "type": "object",
        "properties": {
          "breakpoint": {
            "oneOf": [
              {
                "const": "md"
              },
              {
                "const": "xs"
              },
              {
                "const": "sm"
              },
              {
                "const": "lg"
              }
            ],
            "title": "Breakpoints based on responsive UI",
            "description": "Breakpoints based on responsive UI."
          },
          "boundary": {
            "$ref": "#/components/schemas/IGeometryPage.IBoundary",
            "title": "Target boundary",
            "description": "Target boundary."
          }
        },
        "required": [
          "breakpoint",
          "boundary"
        ],
        "description": "Page request and retrieval information."
      },
      "IStudioAccountWidgetTile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "component": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IStudioAccountWidgetTileComponentOfReleaseNode"
              },
              {
                "$ref": "#/components/schemas/IStudioAccountWidgetTileComponentOfSchedule"
              },
              {
                "$ref": "#/components/schemas/IStudioAccountWidgetTileComponentOfWorkflow"
              }
            ],
            "title": "Deployed components",
            "description": "Deployed components."
          },
          "geometries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioAccountWidgetTileGeometry"
            },
            "title": "List of coordinates and size information for each breakpoint",
            "description": "List of coordinates and size information for each breakpoint."
          },
          "created_at": {
            "type": "string",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          },
          "deleted_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Date and time of record deletion",
            "description": "Date and time of record deletion."
          }
        },
        "required": [
          "id",
          "component",
          "geometries",
          "created_at",
          "deleted_at"
        ],
        "description": "Studio Account Widget Tile.\n\n`IStudioAccountWidgetTile` is an entity that represents an individual tile that\ncan be placed in a widget that can be configured for each {@link IStudioAccount account}\nin the studio.\n\nAnd when creating a widget tile {@link IStudioAccountWidgetTile.ICreate}, you can place\nit by specifying a {@link IStudioRepositoryReleaseNode release node} or an entity record\nrelated to it, and when reading it in the application, the most recent successful\nreturn value among the {@link IStudioRepositoryReleaseNodeHistory function call history}\nof the release node linked to the target entity is used.\n\n- {@link IStudioAccountSchedule}\n- {@link IStudioRepositoryReleaseNode}\n\nIn addition, widget tiles have their own\n{@link IStudioAccountWidgetTile.IGeometry coordinate system}, and\n{@link IGeometryPage pagination} also has a unique characteristic that is performed\naccording to the coordinate system.\n\nIn addition, the placement coordinates can be changed at any time by the push function\nin the API, even if you do not change them by directly specifying a specific widget.\nThe pushing ({@link IStudioAccountWidgetTile.ICreate.bash}) mentioned here means that\nwhile placing a new tile (or moving an existing tile), the tile that overlaps it is\npushed to the bottom (Y axis). Of course, it is also possible for other tiles to be\npushed in a chain due to the pushed tile."
      },
      "IPageIStudioEnterpriseEmployee.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioEnterpriseEmployee.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IStudioEnterpriseEmployee.ISummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "const": "employee",
            "title": "Identifier of the Discriminated Union type",
            "description": "Identifier of the Discriminated Union type."
          },
          "member": {
            "$ref": "#/components/schemas/IHubMember",
            "title": "Affiliated member information",
            "description": "Affiliated member information."
          },
          "title": {
            "oneOf": [
              {
                "const": "member"
              },
              {
                "const": "owner"
              },
              {
                "const": "manager"
              },
              {
                "const": "observer"
              }
            ],
            "title": "Positions that can be assigned to employees",
            "description": "Positions that can be assigned to employees.\n\n- `owner`: Owner of the company. Has all permissions\n- `manager`: Manager of the company, has permissions for general members\n- `member`: General members\n- `observer`: Viewer of the team, read-only"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Employee invitation date and time",
            "description": "Employee invitation date and time."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Date and time of employee permission modification",
            "description": "Date and time of employee permission modification."
          },
          "approved_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Date and time of employee invitation approval",
            "description": "Date and time of employee invitation approval."
          }
        },
        "required": [
          "id",
          "type",
          "member",
          "title",
          "created_at",
          "updated_at",
          "approved_at"
        ],
        "description": "Summary information about the staff."
      },
      "IStudioEnterpriseEmployee.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IStudioEnterpriseEmployee.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-employee.title"
                },
                {
                  "const": "-employee.created_at"
                },
                {
                  "const": "-employee.approved_at"
                },
                {
                  "const": "+employee.title"
                },
                {
                  "const": "+employee.created_at"
                },
                {
                  "const": "+employee.approved_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Page and search request information."
      },
      "IStudioEnterpriseEmployee.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "title": {
            "oneOf": [
              {
                "const": "member"
              },
              {
                "const": "owner"
              },
              {
                "const": "manager"
              },
              {
                "const": "observer"
              }
            ]
          },
          "approved": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IStudioEnterpriseEmployee": {
        "type": "object",
        "properties": {
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioEnterpriseTeamCompanion.IInvert"
            },
            "title": "List of team affiliation information",
            "description": "List of team affiliation information."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "const": "employee",
            "title": "Identifier of the Discriminated Union type",
            "description": "Identifier of the Discriminated Union type."
          },
          "member": {
            "$ref": "#/components/schemas/IHubMember",
            "title": "Affiliated member information",
            "description": "Affiliated member information."
          },
          "title": {
            "oneOf": [
              {
                "const": "member"
              },
              {
                "const": "owner"
              },
              {
                "const": "manager"
              },
              {
                "const": "observer"
              }
            ],
            "title": "Positions that can be assigned to employees",
            "description": "Positions that can be assigned to employees.\n\n- `owner`: Owner of the company. Has all permissions\n- `manager`: Manager of the company, has permissions for general members\n- `member`: General members\n- `observer`: Viewer of the team, read-only"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Employee invitation date and time",
            "description": "Employee invitation date and time."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Date and time of employee permission modification",
            "description": "Date and time of employee permission modification."
          },
          "approved_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Date and time of employee invitation approval",
            "description": "Date and time of employee invitation approval."
          }
        },
        "required": [
          "teams",
          "id",
          "type",
          "member",
          "title",
          "created_at",
          "updated_at",
          "approved_at"
        ],
        "description": "Employee entity within the company.\n\n`IStudioEnterpriseEmployee` is an entity that represents an employee belonging to\n{@link IStudioEnterprise company}. Employees belong to\n{@link IStudioEnterpriseTeam team} within the company, and work as\n{@link IStudioEnterpriseTeamCompanion members}, and are granted\n{@link IStudioRepositoryAccess permission} from the company's\n{@link IStudioRepository repository} as a team unit.\n\nPlease note that only those who have registered as {@link IHubMember members}\nin this studio system can be appointed as employees, and it is possible for one person\nto belong to multiple companies as an employee at the same time."
      },
      "IStudioEnterpriseTeamCompanion.IInvert": {
        "type": "object",
        "properties": {
          "team": {
            "$ref": "#/components/schemas/IStudioEnterpriseTeam.ISummary",
            "title": "Team affiliation information",
            "description": "Team affiliation information."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "role": {
            "oneOf": [
              {
                "const": "member"
              },
              {
                "const": "manager"
              },
              {
                "const": "observer"
              },
              {
                "const": "chief"
              }
            ],
            "title": "Roles assigned to teammates",
            "description": "Roles assigned to teammates."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Date of record creation",
            "description": "Date of record creation.\n\nDate of first appointment as teammate."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Record modification date",
            "description": "Record modification date.\n\nSynonymous with role change date."
          }
        },
        "required": [
          "team",
          "id",
          "role",
          "created_at",
          "updated_at"
        ],
        "description": "Reverse reference information from staff."
      },
      "IStudioEnterpriseTeam.ISummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "const": "team",
            "title": "Identifier of the Discriminated Union type",
            "description": "Identifier of the Discriminated Union type."
          },
          "code": {
            "type": "string",
            "title": "The team identifier code",
            "description": "The team identifier code.\n\nPart of the path in the URL address of the team page."
          },
          "name": {
            "type": "string",
            "title": "Team name",
            "description": "Team name."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          }
        },
        "required": [
          "id",
          "type",
          "code",
          "name",
          "created_at"
        ],
        "description": "Summary information about the team."
      },
      "IPageIStudioEnterprise.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioEnterprise.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IStudioEnterprise.ISummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "const": "enterprise",
            "title": "Identifier of the Discriminated Union type",
            "description": "Identifier of the Discriminated Union type."
          },
          "account": {
            "$ref": "#/components/schemas/IStudioAccount.IInvert",
            "title": "Your account information",
            "description": "Your account information."
          },
          "name": {
            "type": "string",
            "title": "Company name",
            "description": "Company name."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          }
        },
        "required": [
          "id",
          "type",
          "account",
          "name",
          "created_at"
        ],
        "description": "Summary information about the company."
      },
      "IStudioEnterprise.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IStudioEnterprise.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-enterprise.name"
                },
                {
                  "const": "-enterprise.created_at"
                },
                {
                  "const": "-account.code"
                },
                {
                  "const": "+enterprise.name"
                },
                {
                  "const": "+enterprise.created_at"
                },
                {
                  "const": "+account.code"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        }
      },
      "IStudioEnterprise.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "account": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "IStudioEnterprise": {
        "type": "object",
        "properties": {
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioEnterpriseTeam"
            },
            "title": "Team list",
            "description": "Team list."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "const": "enterprise",
            "title": "Identifier of the Discriminated Union type",
            "description": "Identifier of the Discriminated Union type."
          },
          "account": {
            "$ref": "#/components/schemas/IStudioAccount.IInvert",
            "title": "Your account information",
            "description": "Your account information."
          },
          "name": {
            "type": "string",
            "title": "Company name",
            "description": "Company name."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          }
        },
        "required": [
          "teams",
          "id",
          "type",
          "account",
          "name",
          "created_at"
        ],
        "description": "Corporate entity.\n\n`IStudioEnterprise` is an entity that represents a company, and literally means\na subject participating in the studio system as a company unit. And in the case of\na company, unlike {@link IHubMember members}, it must have a {@link IStudioAccount account}.\n\nIn addition, a company has {@link IStudioEnterpriseEmployee employees} and\n{@link IStudioEnterpriseTeam teams} composed of them as sub-entities. And among\nthese teams, its {@link IStudioEnterpriseTeamCompanion members} can have the same\n{@link IStudioRepositoryAccess access rights} of the\n{@link IStudioRepository repository} belonging to the company as a group."
      },
      "IStudioEnterpriseTeam": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "const": "team",
            "title": "Identifier of the Discriminated Union type",
            "description": "Identifier of the Discriminated Union type."
          },
          "code": {
            "type": "string",
            "title": "The team identifier code",
            "description": "The team identifier code.\n\nPart of the path in the URL address of the team page."
          },
          "name": {
            "type": "string",
            "title": "Team name",
            "description": "Team name."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          }
        },
        "required": [
          "id",
          "type",
          "code",
          "name",
          "created_at"
        ],
        "description": "Team information within the company.\n\n`IStudioEnterpriseTeam` is an entity that represents a team within the\n{@link IStudioEnterprise company}. The team is\n{@link IStudioEnterpriseTeamCompanion members} and has\n{@link IStudioEnterpriseEmployee employees}, and can be active by receiving\n{@link IStudioRepositoryAccess access} from the {@link IStudioRepository repository}\nowned by the company as a team unit."
      },
      "IPageIStudioEnterpriseTeamCompanion.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioEnterpriseTeamCompanion.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IStudioEnterpriseTeamCompanion.ISummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "role": {
            "oneOf": [
              {
                "const": "member"
              },
              {
                "const": "manager"
              },
              {
                "const": "observer"
              },
              {
                "const": "chief"
              }
            ],
            "title": "Roles assigned to teammates",
            "description": "Roles assigned to teammates."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Date of record creation",
            "description": "Date of record creation.\n\nDate of first appointment as teammate."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Record modification date",
            "description": "Record modification date.\n\nSynonymous with role change date."
          }
        },
        "required": [
          "id",
          "role",
          "created_at",
          "updated_at"
        ],
        "description": "Summary information about your teammates."
      },
      "IStudioEnterpriseTeamCompanion.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IStudioEnterpriseTeamCompanion.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-companion.role"
                },
                {
                  "const": "-companion.created_at"
                },
                {
                  "const": "+companion.role"
                },
                {
                  "const": "+companion.created_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Page and search request information."
      },
      "IStudioEnterpriseTeamCompanion.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "roles": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "member"
                },
                {
                  "const": "manager"
                },
                {
                  "const": "observer"
                },
                {
                  "const": "chief"
                }
              ]
            }
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IStudioEnterpriseTeamCompanion": {
        "type": "object",
        "properties": {
          "employee": {
            "$ref": "#/components/schemas/IStudioEnterpriseEmployee",
            "title": "Target employee information",
            "description": "Target employee information."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "role": {
            "oneOf": [
              {
                "const": "member"
              },
              {
                "const": "manager"
              },
              {
                "const": "observer"
              },
              {
                "const": "chief"
              }
            ],
            "title": "Roles assigned to teammates",
            "description": "Roles assigned to teammates."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Date of record creation",
            "description": "Date of record creation.\n\nDate of first appointment as teammate."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Record modification date",
            "description": "Record modification date.\n\nSynonymous with role change date."
          }
        },
        "required": [
          "employee",
          "id",
          "role",
          "created_at",
          "updated_at"
        ],
        "description": "Information about the members of a team within a company.\n\n`IStudioEnterpriseTeamCompanion` is an entity that visualizes which\n{@link IStudioEnterpriseEmployee employees} participate as members in each\n{@link IStudioEnterpriseTeam team} that constitutes a {@link IStudioEnterprise company}.\n\nNote that employees participate as members of a team and are given a certain role,\nwhich may be different from their original position. Also, employees of a company\ncan belong to multiple teams at the same time. This is similar to how one\n{@link IHubMember member} could be assigned as an employee to multiple companies\nat the same time."
      },
      "IPageIStudioEnterpriseTeam.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioEnterpriseTeam.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IStudioEnterpriseTeam.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IStudioEnterpriseTeam.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-team.code"
                },
                {
                  "const": "-team.name"
                },
                {
                  "const": "-team.created_at"
                },
                {
                  "const": "+team.code"
                },
                {
                  "const": "+team.name"
                },
                {
                  "const": "+team.created_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Page and search request information."
      },
      "IStudioEnterpriseTeam.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "IStudioMetaStatistics": {
        "type": "object",
        "properties": {
          "connector": {
            "$ref": "#/components/schemas/IStudioMetaStatistics.IConnector"
          }
        },
        "required": [
          "connector"
        ]
      },
      "IStudioMetaStatistics.IConnector": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number"
          }
        },
        "required": [
          "count"
        ]
      },
      "IPageIStudioMetaChatSession": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioMetaChatSession"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IStudioMetaChatSession": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "customer": {
            "$ref": "#/components/schemas/IHubCustomer",
            "title": "Information about the customer who created the chat session",
            "description": "Information about the customer who created the chat session."
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Chat room title",
            "description": "Chat room title."
          },
          "connection": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IStudioMetaChatSessionConnection"
              }
            ],
            "title": "The most recent connection information",
            "description": "The most recent connection information.\n\nIf a session was opened only with an HTTP request and no connection\nwas made, `null`."
          },
          "last_message": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IStudioMetaChatSessionMessageIStudioMetaChatSessionMessageData.ITalk"
              }
            ],
            "title": "The last conversation message history",
            "description": "The last conversation message history.\n\nIf there is no conversation message from this session yet, `null`."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Date and time of record modification",
            "description": "Date and time of record modification."
          },
          "pinned_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Date and time fixed to the top of the list",
            "description": "Date and time fixed to the top of the list."
          }
        },
        "required": [
          "id",
          "customer",
          "title",
          "connection",
          "last_message",
          "created_at",
          "updated_at",
          "pinned_at"
        ],
        "description": "Meta LLM chat session information.\n\n`IStudioMetaChatSession` is an entity that visualizes the Meta LLM chat\nsession and its history.\n\nTherefore, `IStudioMetaChatSession` contains the most basic information of\nthe chat session, such as {@link customer opener customer} and\n{@link created_at opening time}, and the sub-entities\n{@link IStudioMetaChatSessionConnection} and\n{@link IStudioMetaChatSessionMessage} contain the session connection information\nand the mutually transmitted and received message history, respectively.\n\nFor reference, our Meta LLM chat session uses the WebSocket protocol and\n[TGrid](https://tgrid.com/docs/remote-procedure-call/)'s RPC\n(Remote Procedure Call) concept. Therefore, the sub-entity\n{@link IStudioMetaChatSessionConnection} records the client's\nconnection/disconnection information to the WebSocket server, and\n{@link IStudioMetaChatSessionMessage} records the RPC function calls and\nreturn history between the server and client."
      },
      "IStudioMetaChatSessionConnection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "customer": {
            "$ref": "#/components/schemas/IHubCustomer",
            "title": "Chat session connection customer information",
            "description": "Chat session connection customer information."
          },
          "connected_at": {
            "type": "string",
            "format": "date-time",
            "title": "Connection time",
            "description": "Connection time."
          },
          "disconnected_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Disconnection time",
            "description": "Disconnection time."
          }
        },
        "required": [
          "id",
          "customer",
          "connected_at",
          "disconnected_at"
        ],
        "description": "Meta LLM chat session connection information.\n\n`IStudioMetaChatSessionConnection` is an entity that visualizes the connection\ninformation of {@link IHubCustomer customer} to the\n{@link IStudioMetaChatSession Meta LLM chat session}.\n\nThat is, whenever a customer connects to a Meta LLM chat session using the\nWebSocket protocol, an `IStudioMetaChatSessionConnection` record is created for\nthat session, and when the customer disconnects the WebSocket, the time is recorded\nin {@link disconnected_at}."
      },
      "IStudioMetaChatSessionMessageIStudioMetaChatSessionMessageData.ITalk": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "connection_id": {
            "type": "string",
            "format": "uuid",
            "title": "{@link IStudioMetaChatSessionConnection.id} of the session connection",
            "description": "{@link IStudioMetaChatSessionConnection.id} of the session connection.\n\nIf you need detailed information about the session connection,\n\nyou can directly query {@link  {@link IStudioMetaChatSessionConnection} through\nthe provided SDK API."
          },
          "speaker": {
            "oneOf": [
              {
                "const": "customer"
              },
              {
                "const": "agent"
              }
            ],
            "description": "Who is the speaker?\n\nIt means who is the originator of the current message, and conversely, it also means\nthe type of RPC function caller.\n\nThat is, if this attribute value is \"customer\", the client called the server's\n{@link IStudioMetaChatService} RPC function, and conversely, if this attribute value\nis \"agent\", the server called the client's {@link IStudioMetaChatListener} RPC function.\n\n- customer: Customer (human)\n- agent: LLM Agent (robot)"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IStudioMetaChatSessionMessageData.ITalk"
              },
              {
                "$ref": "#/components/schemas/IStudioMetaChatSessionMessageData.IFunctionCallPlan"
              },
              {
                "$ref": "#/components/schemas/IStudioMetaChatSessionMessageData.ISelectFunction"
              },
              {
                "$ref": "#/components/schemas/IStudioMetaChatSessionMessageData.IFillArgument"
              },
              {
                "$ref": "#/components/schemas/IStudioMetaChatSessionMessageData.ICompleteFunction"
              },
              {
                "$ref": "#/components/schemas/IStudioMetaChatSessionMessageData.IPrepareWorkflow"
              },
              {
                "$ref": "#/components/schemas/IStudioMetaChatSessionMessageData.ICompleteWorkflow"
              }
            ],
            "discriminator": {
              "propertyName": "kind",
              "mapping": {
                "talk": "#/components/schemas/IStudioMetaChatSessionMessageData.ITalk",
                "explainFunctionCall": "#/components/schemas/IStudioMetaChatSessionMessageData.IFunctionCallPlan",
                "selectFunction": "#/components/schemas/IStudioMetaChatSessionMessageData.ISelectFunction",
                "fillArgument": "#/components/schemas/IStudioMetaChatSessionMessageData.IFillArgument",
                "completeFunction": "#/components/schemas/IStudioMetaChatSessionMessageData.ICompleteFunction",
                "prepareWorkflow": "#/components/schemas/IStudioMetaChatSessionMessageData.IPrepareWorkflow",
                "completeWorkflow": "#/components/schemas/IStudioMetaChatSessionMessageData.ICompleteWorkflow"
              }
            },
            "title": "Message data",
            "description": "Message data.\n\nInformation on the call and response data of RPC functions."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the message was created",
            "description": "The date and time the message was created."
          },
          "completed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "The time when the message (function call) is completed",
            "description": "The time when the message (function call) is completed."
          }
        },
        "required": [
          "id",
          "connection_id",
          "speaker",
          "data",
          "created_at",
          "completed_at"
        ],
        "description": "Meta LLM chat session message information.\n\n`IStudioMetaChatSessionMessage` is an entity that records messages that occurred in a\n{@link IStudioMetaChatSession Meta LLM chat session}. To be precise, it records which\n{@link IStudioMetaChatSessionConnection WebSocket connection} within the chat session\nit occurred in.\n\nAnd since our Meta LLM chat session uses TGrid's\n[RPC (Remote Procedure Call)](https://tgrid.com/docs/remote-procedure-call/)\nconcept in the WebSocket protocol, this `IStudioMetaChatSessionMessage` is also an entity\nthat encompasses {@link IStudioMetaChatSessionMessageData}, the history information for\nRPC function calls."
      },
      "IStudioMetaChatSessionMessageData.ITalk": {
        "type": "object",
        "properties": {
          "dialogue": {
            "$ref": "#/components/schemas/IStudioMetaChatDialogue.IText",
            "title": "Conversation data",
            "description": "Conversation data."
          },
          "kind": {
            "const": "talk",
            "title": "Type of data",
            "description": "Type of data."
          },
          "reaction": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IExecutionResult.IFailure"
              },
              {
                "$ref": "#/components/schemas/IExecutionResult.ISuccessany"
              }
            ],
            "title": "The return value of the target RPC function",
            "description": "The return value of the target RPC function.\n\nWhen calling an RPC function from a server to a client, it is the return value of the client function,\nand when calling an RPC function from a client to a server, it is the return value of the server function.\n\nHowever, since the function call is not always successful, an error may have occurred instead of the return value,\nso {@link IExecutionResult}, which corresponds to the union type of returned value and thrown exception, was used.\n\n> The original attribute name `return` is semantically correct, but it was intentionally avoided because it is a reserved word."
          }
        },
        "required": [
          "dialogue",
          "kind",
          "reaction"
        ],
        "description": "Conversation message data.\n\n{@link IStudioMetaChatListener.talk} from server to client or\n{@link IStudioMetaChatService.talk} from client to server RPC (Remote Procedure Call)\nfunction call and response data information."
      },
      "IStudioMetaChatDialogue.IText": {
        "type": "object",
        "properties": {
          "kind": {
            "const": "text"
          },
          "text": {
            "type": "string"
          }
        },
        "required": [
          "kind",
          "text"
        ],
        "description": "Text conversation information."
      },
      "IStudioMetaChatSessionMessageData.IFunctionCallPlan": {
        "type": "object",
        "properties": {
          "plan": {
            "$ref": "#/components/schemas/IStudioMetaChatFunctionCallPlan",
            "title": "Function call plan",
            "description": "Function call plan."
          },
          "kind": {
            "const": "explainFunctionCall",
            "title": "Type of data",
            "description": "Type of data."
          },
          "reaction": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IExecutionResult.IFailure"
              },
              {
                "$ref": "#/components/schemas/IExecutionResult.ISuccessany"
              }
            ],
            "title": "The return value of the target RPC function",
            "description": "The return value of the target RPC function.\n\nWhen calling an RPC function from a server to a client, it is the return value of the client function,\nand when calling an RPC function from a client to a server, it is the return value of the server function.\n\nHowever, since the function call is not always successful, an error may have occurred instead of the return value,\nso {@link IExecutionResult}, which corresponds to the union type of returned value and thrown exception, was used.\n\n> The original attribute name `return` is semantically correct, but it was intentionally avoided because it is a reserved word."
          }
        },
        "required": [
          "plan",
          "kind",
          "reaction"
        ],
        "description": "Function call plan description message data.\n\n{@link IStudioMetaChatListener.explainFunctionCall}\nRPC (Remote Procedure Call) function call and response data information\nfrom server to client."
      },
      "IStudioMetaChatFunctionCallPlan": {
        "type": "object",
        "properties": {
          "functions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioMetaChatFunctionCallPlan.IFunction"
            },
            "title": "A list of functions to call",
            "description": "A list of functions to call.\n\nNot all meta information about the functions is provided, only simple descriptive\ninformation is provided."
          },
          "general": {
            "type": "string",
            "title": "A description of the entire plan",
            "description": "A description of the entire plan."
          },
          "steps": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "A list of descriptions for each function call",
            "description": "A list of descriptions for each function call."
          }
        },
        "required": [
          "functions",
          "general",
          "steps"
        ],
        "description": "Description of the Meta Chat Agent's function call plan.\n\n`IStudioMetaChatFunctionCallPlan` is an interface that the server uses to explain\nthe function call plan to the client in a Meta LLM chat session. It contains a\ndescription of what functions Meta LLM will call and the overall/development level\nof the call plan.\n\nIn RPC (Remote Procedure Call),\nit is used in the {@link IStudioMetaChatListener.explainFunctionCall} function."
      },
      "IStudioMetaChatFunctionCallPlan.IFunction": {
        "type": "object",
        "properties": {
          "method": {
            "oneOf": [
              {
                "const": "delete"
              },
              {
                "const": "get"
              },
              {
                "const": "patch"
              },
              {
                "const": "post"
              },
              {
                "const": "put"
              }
            ]
          },
          "path": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "icon": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "method",
          "path"
        ]
      },
      "IStudioMetaChatSessionMessageData.ISelectFunction": {
        "type": "object",
        "properties": {
          "function": {
            "$ref": "#/components/schemas/IStudioMetaChatFunctionCall.ISelect",
            "title": "Selected function data",
            "description": "Selected function data."
          },
          "kind": {
            "const": "selectFunction",
            "title": "Type of data",
            "description": "Type of data."
          },
          "reaction": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IExecutionResult.IFailure"
              },
              {
                "$ref": "#/components/schemas/IExecutionResult.ISuccessany"
              }
            ],
            "title": "The return value of the target RPC function",
            "description": "The return value of the target RPC function.\n\nWhen calling an RPC function from a server to a client, it is the return value of the client function,\nand when calling an RPC function from a client to a server, it is the return value of the server function.\n\nHowever, since the function call is not always successful, an error may have occurred instead of the return value,\nso {@link IExecutionResult}, which corresponds to the union type of returned value and thrown exception, was used.\n\n> The original attribute name `return` is semantically correct, but it was intentionally avoided because it is a reserved word."
          }
        },
        "required": [
          "function",
          "kind",
          "reaction"
        ],
        "description": "Function selection message data.\n\n{@link IStudioMetaChatListener.selectFunction}\nRPC (Remote Procedure Call) function call and response data information\nfrom server to client."
      },
      "IStudioMetaChatFunctionCall.ISelect": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "function": {
            "$ref": "#/components/schemas/OmitNever__type",
            "title": "Meta information about the function being called",
            "description": "Meta information about the function being called."
          }
        },
        "required": [
          "id",
          "function"
        ],
        "description": "Information about the function that LLM chose to call during the chat.\n\nWhen LLM selects a function to call by understanding the context during a\nconversation with a user,\n\nthe Meta LLM server notifies the client by calling the\n{@link IStudioMetaChatListener.selectFunction} function."
      },
      "OmitNever__type": {
        "type": "object",
        "properties": {
          "method": {
            "oneOf": [
              {
                "const": "delete"
              },
              {
                "const": "get"
              },
              {
                "const": "patch"
              },
              {
                "const": "post"
              },
              {
                "const": "put"
              }
            ],
            "title": "HTTP method of the endpoint",
            "description": "HTTP method of the endpoint."
          },
          "output": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "default": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "boolean"
                      }
                    ],
                    "title": "Default value",
                    "description": "Default value."
                  },
                  "enum": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "boolean"
                        }
                      ]
                    },
                    "title": "Enumeration values",
                    "description": "Enumeration values."
                  },
                  "type": {
                    "const": "boolean",
                    "title": "Discriminator value of the type",
                    "description": "Discriminator value of the type."
                  },
                  "nullable": {
                    "type": "boolean",
                    "title": "Whether to allow `null` value or not",
                    "description": "Whether to allow `null` value or not."
                  },
                  "title": {
                    "type": "string",
                    "title": "Title of the schema",
                    "description": "Title of the schema."
                  },
                  "description": {
                    "type": "string",
                    "title": "Detailed description of the schema",
                    "description": "Detailed description of the schema."
                  },
                  "deprecated": {
                    "type": "boolean",
                    "title": "Whether the type is deprecated or not",
                    "description": "Whether the type is deprecated or not."
                  },
                  "example": {
                    "title": "Example value",
                    "description": "Example value."
                  },
                  "examples": {
                    "type": "object",
                    "properties": {},
                    "title": "List of example values as key-value pairs",
                    "description": "List of example values as key-value pairs.",
                    "additionalProperties": {}
                  },
                  "x-wrtn-placeholder": {
                    "type": "string",
                    "title": "Placeholder value for frontend application",
                    "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                  },
                  "x-wrtn-prerequisite": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "jmesPath": {
                            "type": "string",
                            "title": "Function returning transformed values using JMESPath expression",
                            "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "jmesPath",
                          "method",
                          "path"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "label": {
                            "type": "string",
                            "title": "Transform function returning label",
                            "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                          },
                          "value": {
                            "type": "string",
                            "title": "Transform function returning target value",
                            "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                          },
                          "array": {
                            "type": "string",
                            "title": "Transform function returning array instance",
                            "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "label",
                          "value",
                          "method",
                          "path"
                        ]
                      }
                    ],
                    "title": "Prerequisite API endpoint for the schema",
                    "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                  }
                },
                "required": [
                  "type"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "default": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "integer"
                      }
                    ],
                    "title": "Default value",
                    "description": "Default value."
                  },
                  "enum": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "number"
                        }
                      ]
                    },
                    "title": "Enumeration values",
                    "description": "Enumeration values."
                  },
                  "minimum": {
                    "type": "integer",
                    "title": "Minimum value restriction",
                    "description": "Minimum value restriction."
                  },
                  "maximum": {
                    "type": "integer",
                    "title": "Maximum value restriction",
                    "description": "Maximum value restriction."
                  },
                  "exclusiveMinimum": {
                    "type": "boolean",
                    "title": "Exclusive minimum value restriction",
                    "description": "Exclusive minimum value restriction.\n\nFor reference, even though your Swagger document has defined the\n`exclusiveMinimum` value as `number`, it has been forcibly converted\nto `boolean` type, and assigns the numeric value to the\n{@link minimum} property in the {@link OpenApi} conversion."
                  },
                  "exclusiveMaximum": {
                    "type": "boolean",
                    "title": "Exclusive maximum value restriction",
                    "description": "Exclusive maximum value restriction.\n\nFor reference, even though your Swagger document has defined the\n`exclusiveMaximum` value as `number`, it has been forcibly converted\nto `boolean` type, and assigns the numeric value to the\n{@link maximum} property in the {@link OpenApi} conversion."
                  },
                  "multipleOf": {
                    "type": "integer",
                    "exclusiveMinimum": true,
                    "minimum": 0,
                    "title": "Multiple of value restriction",
                    "description": "Multiple of value restriction."
                  },
                  "type": {
                    "const": "integer",
                    "title": "Discriminator value of the type",
                    "description": "Discriminator value of the type."
                  },
                  "nullable": {
                    "type": "boolean",
                    "title": "Whether to allow `null` value or not",
                    "description": "Whether to allow `null` value or not."
                  },
                  "title": {
                    "type": "string",
                    "title": "Title of the schema",
                    "description": "Title of the schema."
                  },
                  "description": {
                    "type": "string",
                    "title": "Detailed description of the schema",
                    "description": "Detailed description of the schema."
                  },
                  "deprecated": {
                    "type": "boolean",
                    "title": "Whether the type is deprecated or not",
                    "description": "Whether the type is deprecated or not."
                  },
                  "example": {
                    "title": "Example value",
                    "description": "Example value."
                  },
                  "examples": {
                    "type": "object",
                    "properties": {},
                    "title": "List of example values as key-value pairs",
                    "description": "List of example values as key-value pairs.",
                    "additionalProperties": {}
                  },
                  "x-wrtn-placeholder": {
                    "type": "string",
                    "title": "Placeholder value for frontend application",
                    "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                  },
                  "x-wrtn-prerequisite": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "jmesPath": {
                            "type": "string",
                            "title": "Function returning transformed values using JMESPath expression",
                            "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "jmesPath",
                          "method",
                          "path"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "label": {
                            "type": "string",
                            "title": "Transform function returning label",
                            "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                          },
                          "value": {
                            "type": "string",
                            "title": "Transform function returning target value",
                            "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                          },
                          "array": {
                            "type": "string",
                            "title": "Transform function returning array instance",
                            "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "label",
                          "value",
                          "method",
                          "path"
                        ]
                      }
                    ],
                    "title": "Prerequisite API endpoint for the schema",
                    "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                  }
                },
                "required": [
                  "type"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "default": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "number"
                      }
                    ],
                    "title": "Default value",
                    "description": "Default value."
                  },
                  "enum": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "number"
                        }
                      ]
                    },
                    "title": "Enumeration values",
                    "description": "Enumeration values."
                  },
                  "minimum": {
                    "type": "number",
                    "title": "Minimum value restriction",
                    "description": "Minimum value restriction."
                  },
                  "maximum": {
                    "type": "number",
                    "title": "Maximum value restriction",
                    "description": "Maximum value restriction."
                  },
                  "exclusiveMinimum": {
                    "type": "boolean",
                    "title": "Exclusive minimum value restriction",
                    "description": "Exclusive minimum value restriction.\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined the `exclusiveMinimum` value as `number`, {@link OpenAiComposer}\nforcibly converts it to `boolean` type, and assign the numeric value to\nthe {@link minimum} property."
                  },
                  "exclusiveMaximum": {
                    "type": "boolean",
                    "title": "Exclusive maximum value restriction",
                    "description": "Exclusive maximum value restriction.\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined the `exclusiveMaximum` value as `number`, {@link OpenAiComposer}\nforcibly converts it to `boolean` type, and assign the numeric value to\nthe {@link maximum} property."
                  },
                  "multipleOf": {
                    "type": "number",
                    "exclusiveMinimum": true,
                    "minimum": 0,
                    "title": "Multiple of value restriction",
                    "description": "Multiple of value restriction."
                  },
                  "type": {
                    "const": "number",
                    "title": "Discriminator value of the type",
                    "description": "Discriminator value of the type."
                  },
                  "nullable": {
                    "type": "boolean",
                    "title": "Whether to allow `null` value or not",
                    "description": "Whether to allow `null` value or not."
                  },
                  "title": {
                    "type": "string",
                    "title": "Title of the schema",
                    "description": "Title of the schema."
                  },
                  "description": {
                    "type": "string",
                    "title": "Detailed description of the schema",
                    "description": "Detailed description of the schema."
                  },
                  "deprecated": {
                    "type": "boolean",
                    "title": "Whether the type is deprecated or not",
                    "description": "Whether the type is deprecated or not."
                  },
                  "example": {
                    "title": "Example value",
                    "description": "Example value."
                  },
                  "examples": {
                    "type": "object",
                    "properties": {},
                    "title": "List of example values as key-value pairs",
                    "description": "List of example values as key-value pairs.",
                    "additionalProperties": {}
                  },
                  "x-wrtn-placeholder": {
                    "type": "string",
                    "title": "Placeholder value for frontend application",
                    "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                  },
                  "x-wrtn-prerequisite": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "jmesPath": {
                            "type": "string",
                            "title": "Function returning transformed values using JMESPath expression",
                            "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "jmesPath",
                          "method",
                          "path"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "label": {
                            "type": "string",
                            "title": "Transform function returning label",
                            "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                          },
                          "value": {
                            "type": "string",
                            "title": "Transform function returning target value",
                            "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                          },
                          "array": {
                            "type": "string",
                            "title": "Transform function returning array instance",
                            "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "label",
                          "value",
                          "method",
                          "path"
                        ]
                      }
                    ],
                    "title": "Prerequisite API endpoint for the schema",
                    "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                  }
                },
                "required": [
                  "type"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "x-wrtn-secret-key": {
                    "type": "string",
                    "title": "Secret key for the schema",
                    "description": "Secret key for the schema.\n\n`x-wrtn-secret-key` is a property means a secret key that is required\nfor the target API endpoint calling. If the secret key is not filled,\nthe API call would be failed."
                  },
                  "x-wrtn-secret-scopes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "title": "Secret scopes for the schema",
                    "description": "Secret scopes for the schema.\n\n`x-wrtn-secret-scopes` is a property means a list of secret scopes that\nare required for the target API endpoint calling. If the secret scopes\nare not satisfied, the API call would be failed."
                  },
                  "default": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "string"
                      }
                    ],
                    "title": "Default value",
                    "description": "Default value."
                  },
                  "enum": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "title": "Enumeration values",
                    "description": "Enumeration values."
                  },
                  "format": {
                    "type": "string",
                    "title": "Format restriction",
                    "description": "Format restriction."
                  },
                  "pattern": {
                    "type": "string",
                    "title": "Pattern restriction",
                    "description": "Pattern restriction."
                  },
                  "minLength": {
                    "type": "integer",
                    "title": "Minimum length restriction",
                    "description": "Minimum length restriction."
                  },
                  "maxLength": {
                    "type": "integer",
                    "title": "Maximum length restriction",
                    "description": "Maximum length restriction."
                  },
                  "contentMediaType": {
                    "type": "string",
                    "title": "Content media type restriction",
                    "description": "Content media type restriction."
                  },
                  "type": {
                    "const": "string",
                    "title": "Discriminator value of the type",
                    "description": "Discriminator value of the type."
                  },
                  "nullable": {
                    "type": "boolean",
                    "title": "Whether to allow `null` value or not",
                    "description": "Whether to allow `null` value or not."
                  },
                  "title": {
                    "type": "string",
                    "title": "Title of the schema",
                    "description": "Title of the schema."
                  },
                  "description": {
                    "type": "string",
                    "title": "Detailed description of the schema",
                    "description": "Detailed description of the schema."
                  },
                  "deprecated": {
                    "type": "boolean",
                    "title": "Whether the type is deprecated or not",
                    "description": "Whether the type is deprecated or not."
                  },
                  "example": {
                    "title": "Example value",
                    "description": "Example value."
                  },
                  "examples": {
                    "type": "object",
                    "properties": {},
                    "title": "List of example values as key-value pairs",
                    "description": "List of example values as key-value pairs.",
                    "additionalProperties": {}
                  },
                  "x-wrtn-placeholder": {
                    "type": "string",
                    "title": "Placeholder value for frontend application",
                    "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                  },
                  "x-wrtn-prerequisite": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "jmesPath": {
                            "type": "string",
                            "title": "Function returning transformed values using JMESPath expression",
                            "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "jmesPath",
                          "method",
                          "path"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "label": {
                            "type": "string",
                            "title": "Transform function returning label",
                            "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                          },
                          "value": {
                            "type": "string",
                            "title": "Transform function returning target value",
                            "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                          },
                          "array": {
                            "type": "string",
                            "title": "Transform function returning array instance",
                            "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "label",
                          "value",
                          "method",
                          "path"
                        ]
                      }
                    ],
                    "title": "Prerequisite API endpoint for the schema",
                    "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                  }
                },
                "required": [
                  "type"
                ]
              },
              {
                "$ref": "#/components/schemas/__type.o77"
              },
              {
                "$ref": "#/components/schemas/__type.o78"
              },
              {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "title": "Title of the schema",
                    "description": "Title of the schema."
                  },
                  "description": {
                    "type": "string",
                    "title": "Detailed description of the schema",
                    "description": "Detailed description of the schema."
                  },
                  "deprecated": {
                    "type": "boolean",
                    "title": "Whether the type is deprecated or not",
                    "description": "Whether the type is deprecated or not."
                  },
                  "example": {
                    "title": "Example value",
                    "description": "Example value."
                  },
                  "examples": {
                    "type": "object",
                    "properties": {},
                    "title": "List of example values as key-value pairs",
                    "description": "List of example values as key-value pairs.",
                    "additionalProperties": {}
                  },
                  "x-wrtn-placeholder": {
                    "type": "string",
                    "title": "Placeholder value for frontend application",
                    "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                  },
                  "x-wrtn-prerequisite": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "jmesPath": {
                            "type": "string",
                            "title": "Function returning transformed values using JMESPath expression",
                            "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "jmesPath",
                          "method",
                          "path"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "label": {
                            "type": "string",
                            "title": "Transform function returning label",
                            "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                          },
                          "value": {
                            "type": "string",
                            "title": "Transform function returning target value",
                            "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                          },
                          "array": {
                            "type": "string",
                            "title": "Transform function returning array instance",
                            "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "label",
                          "value",
                          "method",
                          "path"
                        ]
                      }
                    ],
                    "title": "Prerequisite API endpoint for the schema",
                    "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "const": "null",
                    "title": "Type is always `null`",
                    "description": "Type is always `null`."
                  },
                  "default": {
                    "type": "null",
                    "title": "Default value",
                    "description": "Default value."
                  },
                  "title": {
                    "type": "string",
                    "title": "Title of the schema",
                    "description": "Title of the schema."
                  },
                  "description": {
                    "type": "string",
                    "title": "Detailed description of the schema",
                    "description": "Detailed description of the schema."
                  },
                  "deprecated": {
                    "type": "boolean",
                    "title": "Whether the type is deprecated or not",
                    "description": "Whether the type is deprecated or not."
                  },
                  "example": {
                    "title": "Example value",
                    "description": "Example value."
                  },
                  "examples": {
                    "type": "object",
                    "properties": {},
                    "title": "List of example values as key-value pairs",
                    "description": "List of example values as key-value pairs.",
                    "additionalProperties": {}
                  },
                  "x-wrtn-placeholder": {
                    "type": "string",
                    "title": "Placeholder value for frontend application",
                    "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                  },
                  "x-wrtn-prerequisite": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "jmesPath": {
                            "type": "string",
                            "title": "Function returning transformed values using JMESPath expression",
                            "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "jmesPath",
                          "method",
                          "path"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "label": {
                            "type": "string",
                            "title": "Transform function returning label",
                            "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                          },
                          "value": {
                            "type": "string",
                            "title": "Transform function returning target value",
                            "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                          },
                          "array": {
                            "type": "string",
                            "title": "Transform function returning array instance",
                            "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "label",
                          "value",
                          "method",
                          "path"
                        ]
                      }
                    ],
                    "title": "Prerequisite API endpoint for the schema",
                    "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                  }
                },
                "required": [
                  "type"
                ]
              },
              {
                "$ref": "#/components/schemas/__type.o82"
              }
            ],
            "title": "Expected return type",
            "description": "Expected return type.\n\nIf the target operation returns nothing (`void`), the `output`\nwould be `undefined`."
          },
          "name": {
            "type": "string",
            "title": "Representative name of the function",
            "description": "Representative name of the function.\n\nThe `name` is a repsentative name identifying the function in the\n{@link IHttpLlmApplication}. The `name` value is just composed by joining the\n{@link IHttpMigrateRoute.accessor} by underscore `_` character.\n\nHere is the composition rule of the  {@link IHttpMigrateRoute.accessor}:\n\n> The `accessor` is composed with the following rules. At first,\n> namespaces are composed by static directory names in the {@link path}.\n> Parametric symbols represented by `:param` or `{param}` cannot be\n> a part of the namespace.\n>\n> Instead, they would be a part of the function name. The function\n> name is composed with the {@link method HTTP method} and parametric\n> symbols like `getByParam` or `postByParam`. If there are multiple\n> path parameters, they would be concatenated by `And` like\n> `getByParam1AndParam2`.\n>\n> For refefence, if the {@link operation}'s {@link method} is `delete`,\n> the function name would be replaced to `erase` instead of `delete`.\n> It is the reason why the `delete` is a reserved keyword in many\n> programming languages.\n>\n> - Example 1\n>   - path: `POST /shopping/sellers/sales`\n>   - accessor: `shopping.sellers.sales.post`\n> - Example 2\n>   - endpoint: `GET /shoppings/sellers/sales/:saleId/reviews/:reviewId/comments/:id\n>   - accessor: `shoppings.sellers.sales.reviews.getBySaleIdAndReviewIdAndCommentId`"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Category tags for the function",
            "description": "Category tags for the function.\n\nSame with {@link OpenApi.IOperation.tags} indicating the category of the function."
          },
          "path": {
            "type": "string",
            "title": "Path of the endpoint",
            "description": "Path of the endpoint."
          },
          "description": {
            "type": "string",
            "title": "Description of the function",
            "description": "Description of the function.\n\n`IHttpLlmFunction.description` is composed by below rule:\n\n1. Starts from the {@link OpenApi.IOperation.summary} paragraph.\n2. The next paragraphs are filled with the\n   {@link OpenApi.IOperation.description}. By the way, if the first\n   paragraph of {@link OpenApi.IOperation.description} is same with the\n   {@link OpenApi.IOperation.summary}, it would not be duplicated.\n3. Parameters' descriptions are added with `@param` tag.\n4. {@link OpenApi.IOperation.security Security requirements} are added\n   with `@security` tag.\n5. Tag names are added with `@tag` tag.\n6. If {@link OpenApi.IOperation.deprecated}, `@deprecated` tag is added.\n\nFor reference, the `description` is very important property to teach\nthe purpose of the function to the LLM (Language Large Model), and\nLLM actually determines which function to call by the description.\n\nAlso, when the LLM conversates with the user, the `description` is\nused to explain the function to the user. Therefore, the `description`\nproperty has the highest priroity, and you have to consider it."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the function is deprecated or not",
            "description": "Whether the function is deprecated or not.\n\nIf the `deprecated` is `true`, the function is not recommended to use.\n\nLLM (Large Language Model) may not use the deprecated function."
          },
          "parameters": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "default": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "boolean"
                        }
                      ],
                      "title": "Default value",
                      "description": "Default value."
                    },
                    "enum": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "null"
                          },
                          {
                            "type": "boolean"
                          }
                        ]
                      },
                      "title": "Enumeration values",
                      "description": "Enumeration values."
                    },
                    "type": {
                      "const": "boolean",
                      "title": "Discriminator value of the type",
                      "description": "Discriminator value of the type."
                    },
                    "nullable": {
                      "type": "boolean",
                      "title": "Whether to allow `null` value or not",
                      "description": "Whether to allow `null` value or not."
                    },
                    "title": {
                      "type": "string",
                      "title": "Title of the schema",
                      "description": "Title of the schema."
                    },
                    "description": {
                      "type": "string",
                      "title": "Detailed description of the schema",
                      "description": "Detailed description of the schema."
                    },
                    "deprecated": {
                      "type": "boolean",
                      "title": "Whether the type is deprecated or not",
                      "description": "Whether the type is deprecated or not."
                    },
                    "example": {
                      "title": "Example value",
                      "description": "Example value."
                    },
                    "examples": {
                      "type": "object",
                      "properties": {},
                      "title": "List of example values as key-value pairs",
                      "description": "List of example values as key-value pairs.",
                      "additionalProperties": {}
                    },
                    "x-wrtn-placeholder": {
                      "type": "string",
                      "title": "Placeholder value for frontend application",
                      "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                    },
                    "x-wrtn-prerequisite": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "jmesPath": {
                              "type": "string",
                              "title": "Function returning transformed values using JMESPath expression",
                              "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                            },
                            "method": {
                              "oneOf": [
                                {
                                  "const": "delete"
                                },
                                {
                                  "const": "get"
                                },
                                {
                                  "const": "patch"
                                },
                                {
                                  "const": "post"
                                },
                                {
                                  "const": "put"
                                }
                              ],
                              "title": "HTTP method to call the endpoint",
                              "description": "HTTP method to call the endpoint."
                            },
                            "path": {
                              "type": "string",
                              "title": "Path of the endpoint",
                              "description": "Path of the endpoint."
                            }
                          },
                          "required": [
                            "jmesPath",
                            "method",
                            "path"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "label": {
                              "type": "string",
                              "title": "Transform function returning label",
                              "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                            },
                            "value": {
                              "type": "string",
                              "title": "Transform function returning target value",
                              "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                            },
                            "array": {
                              "type": "string",
                              "title": "Transform function returning array instance",
                              "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                            },
                            "method": {
                              "oneOf": [
                                {
                                  "const": "delete"
                                },
                                {
                                  "const": "get"
                                },
                                {
                                  "const": "patch"
                                },
                                {
                                  "const": "post"
                                },
                                {
                                  "const": "put"
                                }
                              ],
                              "title": "HTTP method to call the endpoint",
                              "description": "HTTP method to call the endpoint."
                            },
                            "path": {
                              "type": "string",
                              "title": "Path of the endpoint",
                              "description": "Path of the endpoint."
                            }
                          },
                          "required": [
                            "label",
                            "value",
                            "method",
                            "path"
                          ]
                        }
                      ],
                      "title": "Prerequisite API endpoint for the schema",
                      "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                    }
                  },
                  "required": [
                    "type"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "default": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "integer"
                        }
                      ],
                      "title": "Default value",
                      "description": "Default value."
                    },
                    "enum": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "null"
                          },
                          {
                            "type": "number"
                          }
                        ]
                      },
                      "title": "Enumeration values",
                      "description": "Enumeration values."
                    },
                    "minimum": {
                      "type": "integer",
                      "title": "Minimum value restriction",
                      "description": "Minimum value restriction."
                    },
                    "maximum": {
                      "type": "integer",
                      "title": "Maximum value restriction",
                      "description": "Maximum value restriction."
                    },
                    "exclusiveMinimum": {
                      "type": "boolean",
                      "title": "Exclusive minimum value restriction",
                      "description": "Exclusive minimum value restriction.\n\nFor reference, even though your Swagger document has defined the\n`exclusiveMinimum` value as `number`, it has been forcibly converted\nto `boolean` type, and assigns the numeric value to the\n{@link minimum} property in the {@link OpenApi} conversion."
                    },
                    "exclusiveMaximum": {
                      "type": "boolean",
                      "title": "Exclusive maximum value restriction",
                      "description": "Exclusive maximum value restriction.\n\nFor reference, even though your Swagger document has defined the\n`exclusiveMaximum` value as `number`, it has been forcibly converted\nto `boolean` type, and assigns the numeric value to the\n{@link maximum} property in the {@link OpenApi} conversion."
                    },
                    "multipleOf": {
                      "type": "integer",
                      "exclusiveMinimum": true,
                      "minimum": 0,
                      "title": "Multiple of value restriction",
                      "description": "Multiple of value restriction."
                    },
                    "type": {
                      "const": "integer",
                      "title": "Discriminator value of the type",
                      "description": "Discriminator value of the type."
                    },
                    "nullable": {
                      "type": "boolean",
                      "title": "Whether to allow `null` value or not",
                      "description": "Whether to allow `null` value or not."
                    },
                    "title": {
                      "type": "string",
                      "title": "Title of the schema",
                      "description": "Title of the schema."
                    },
                    "description": {
                      "type": "string",
                      "title": "Detailed description of the schema",
                      "description": "Detailed description of the schema."
                    },
                    "deprecated": {
                      "type": "boolean",
                      "title": "Whether the type is deprecated or not",
                      "description": "Whether the type is deprecated or not."
                    },
                    "example": {
                      "title": "Example value",
                      "description": "Example value."
                    },
                    "examples": {
                      "type": "object",
                      "properties": {},
                      "title": "List of example values as key-value pairs",
                      "description": "List of example values as key-value pairs.",
                      "additionalProperties": {}
                    },
                    "x-wrtn-placeholder": {
                      "type": "string",
                      "title": "Placeholder value for frontend application",
                      "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                    },
                    "x-wrtn-prerequisite": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "jmesPath": {
                              "type": "string",
                              "title": "Function returning transformed values using JMESPath expression",
                              "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                            },
                            "method": {
                              "oneOf": [
                                {
                                  "const": "delete"
                                },
                                {
                                  "const": "get"
                                },
                                {
                                  "const": "patch"
                                },
                                {
                                  "const": "post"
                                },
                                {
                                  "const": "put"
                                }
                              ],
                              "title": "HTTP method to call the endpoint",
                              "description": "HTTP method to call the endpoint."
                            },
                            "path": {
                              "type": "string",
                              "title": "Path of the endpoint",
                              "description": "Path of the endpoint."
                            }
                          },
                          "required": [
                            "jmesPath",
                            "method",
                            "path"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "label": {
                              "type": "string",
                              "title": "Transform function returning label",
                              "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                            },
                            "value": {
                              "type": "string",
                              "title": "Transform function returning target value",
                              "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                            },
                            "array": {
                              "type": "string",
                              "title": "Transform function returning array instance",
                              "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                            },
                            "method": {
                              "oneOf": [
                                {
                                  "const": "delete"
                                },
                                {
                                  "const": "get"
                                },
                                {
                                  "const": "patch"
                                },
                                {
                                  "const": "post"
                                },
                                {
                                  "const": "put"
                                }
                              ],
                              "title": "HTTP method to call the endpoint",
                              "description": "HTTP method to call the endpoint."
                            },
                            "path": {
                              "type": "string",
                              "title": "Path of the endpoint",
                              "description": "Path of the endpoint."
                            }
                          },
                          "required": [
                            "label",
                            "value",
                            "method",
                            "path"
                          ]
                        }
                      ],
                      "title": "Prerequisite API endpoint for the schema",
                      "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                    }
                  },
                  "required": [
                    "type"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "default": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "title": "Default value",
                      "description": "Default value."
                    },
                    "enum": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "null"
                          },
                          {
                            "type": "number"
                          }
                        ]
                      },
                      "title": "Enumeration values",
                      "description": "Enumeration values."
                    },
                    "minimum": {
                      "type": "number",
                      "title": "Minimum value restriction",
                      "description": "Minimum value restriction."
                    },
                    "maximum": {
                      "type": "number",
                      "title": "Maximum value restriction",
                      "description": "Maximum value restriction."
                    },
                    "exclusiveMinimum": {
                      "type": "boolean",
                      "title": "Exclusive minimum value restriction",
                      "description": "Exclusive minimum value restriction.\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined the `exclusiveMinimum` value as `number`, {@link OpenAiComposer}\nforcibly converts it to `boolean` type, and assign the numeric value to\nthe {@link minimum} property."
                    },
                    "exclusiveMaximum": {
                      "type": "boolean",
                      "title": "Exclusive maximum value restriction",
                      "description": "Exclusive maximum value restriction.\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined the `exclusiveMaximum` value as `number`, {@link OpenAiComposer}\nforcibly converts it to `boolean` type, and assign the numeric value to\nthe {@link maximum} property."
                    },
                    "multipleOf": {
                      "type": "number",
                      "exclusiveMinimum": true,
                      "minimum": 0,
                      "title": "Multiple of value restriction",
                      "description": "Multiple of value restriction."
                    },
                    "type": {
                      "const": "number",
                      "title": "Discriminator value of the type",
                      "description": "Discriminator value of the type."
                    },
                    "nullable": {
                      "type": "boolean",
                      "title": "Whether to allow `null` value or not",
                      "description": "Whether to allow `null` value or not."
                    },
                    "title": {
                      "type": "string",
                      "title": "Title of the schema",
                      "description": "Title of the schema."
                    },
                    "description": {
                      "type": "string",
                      "title": "Detailed description of the schema",
                      "description": "Detailed description of the schema."
                    },
                    "deprecated": {
                      "type": "boolean",
                      "title": "Whether the type is deprecated or not",
                      "description": "Whether the type is deprecated or not."
                    },
                    "example": {
                      "title": "Example value",
                      "description": "Example value."
                    },
                    "examples": {
                      "type": "object",
                      "properties": {},
                      "title": "List of example values as key-value pairs",
                      "description": "List of example values as key-value pairs.",
                      "additionalProperties": {}
                    },
                    "x-wrtn-placeholder": {
                      "type": "string",
                      "title": "Placeholder value for frontend application",
                      "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                    },
                    "x-wrtn-prerequisite": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "jmesPath": {
                              "type": "string",
                              "title": "Function returning transformed values using JMESPath expression",
                              "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                            },
                            "method": {
                              "oneOf": [
                                {
                                  "const": "delete"
                                },
                                {
                                  "const": "get"
                                },
                                {
                                  "const": "patch"
                                },
                                {
                                  "const": "post"
                                },
                                {
                                  "const": "put"
                                }
                              ],
                              "title": "HTTP method to call the endpoint",
                              "description": "HTTP method to call the endpoint."
                            },
                            "path": {
                              "type": "string",
                              "title": "Path of the endpoint",
                              "description": "Path of the endpoint."
                            }
                          },
                          "required": [
                            "jmesPath",
                            "method",
                            "path"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "label": {
                              "type": "string",
                              "title": "Transform function returning label",
                              "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                            },
                            "value": {
                              "type": "string",
                              "title": "Transform function returning target value",
                              "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                            },
                            "array": {
                              "type": "string",
                              "title": "Transform function returning array instance",
                              "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                            },
                            "method": {
                              "oneOf": [
                                {
                                  "const": "delete"
                                },
                                {
                                  "const": "get"
                                },
                                {
                                  "const": "patch"
                                },
                                {
                                  "const": "post"
                                },
                                {
                                  "const": "put"
                                }
                              ],
                              "title": "HTTP method to call the endpoint",
                              "description": "HTTP method to call the endpoint."
                            },
                            "path": {
                              "type": "string",
                              "title": "Path of the endpoint",
                              "description": "Path of the endpoint."
                            }
                          },
                          "required": [
                            "label",
                            "value",
                            "method",
                            "path"
                          ]
                        }
                      ],
                      "title": "Prerequisite API endpoint for the schema",
                      "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                    }
                  },
                  "required": [
                    "type"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "x-wrtn-secret-key": {
                      "type": "string",
                      "title": "Secret key for the schema",
                      "description": "Secret key for the schema.\n\n`x-wrtn-secret-key` is a property means a secret key that is required\nfor the target API endpoint calling. If the secret key is not filled,\nthe API call would be failed."
                    },
                    "x-wrtn-secret-scopes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "title": "Secret scopes for the schema",
                      "description": "Secret scopes for the schema.\n\n`x-wrtn-secret-scopes` is a property means a list of secret scopes that\nare required for the target API endpoint calling. If the secret scopes\nare not satisfied, the API call would be failed."
                    },
                    "default": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "title": "Default value",
                      "description": "Default value."
                    },
                    "enum": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "null"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      },
                      "title": "Enumeration values",
                      "description": "Enumeration values."
                    },
                    "format": {
                      "type": "string",
                      "title": "Format restriction",
                      "description": "Format restriction."
                    },
                    "pattern": {
                      "type": "string",
                      "title": "Pattern restriction",
                      "description": "Pattern restriction."
                    },
                    "minLength": {
                      "type": "integer",
                      "title": "Minimum length restriction",
                      "description": "Minimum length restriction."
                    },
                    "maxLength": {
                      "type": "integer",
                      "title": "Maximum length restriction",
                      "description": "Maximum length restriction."
                    },
                    "contentMediaType": {
                      "type": "string",
                      "title": "Content media type restriction",
                      "description": "Content media type restriction."
                    },
                    "type": {
                      "const": "string",
                      "title": "Discriminator value of the type",
                      "description": "Discriminator value of the type."
                    },
                    "nullable": {
                      "type": "boolean",
                      "title": "Whether to allow `null` value or not",
                      "description": "Whether to allow `null` value or not."
                    },
                    "title": {
                      "type": "string",
                      "title": "Title of the schema",
                      "description": "Title of the schema."
                    },
                    "description": {
                      "type": "string",
                      "title": "Detailed description of the schema",
                      "description": "Detailed description of the schema."
                    },
                    "deprecated": {
                      "type": "boolean",
                      "title": "Whether the type is deprecated or not",
                      "description": "Whether the type is deprecated or not."
                    },
                    "example": {
                      "title": "Example value",
                      "description": "Example value."
                    },
                    "examples": {
                      "type": "object",
                      "properties": {},
                      "title": "List of example values as key-value pairs",
                      "description": "List of example values as key-value pairs.",
                      "additionalProperties": {}
                    },
                    "x-wrtn-placeholder": {
                      "type": "string",
                      "title": "Placeholder value for frontend application",
                      "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                    },
                    "x-wrtn-prerequisite": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "jmesPath": {
                              "type": "string",
                              "title": "Function returning transformed values using JMESPath expression",
                              "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                            },
                            "method": {
                              "oneOf": [
                                {
                                  "const": "delete"
                                },
                                {
                                  "const": "get"
                                },
                                {
                                  "const": "patch"
                                },
                                {
                                  "const": "post"
                                },
                                {
                                  "const": "put"
                                }
                              ],
                              "title": "HTTP method to call the endpoint",
                              "description": "HTTP method to call the endpoint."
                            },
                            "path": {
                              "type": "string",
                              "title": "Path of the endpoint",
                              "description": "Path of the endpoint."
                            }
                          },
                          "required": [
                            "jmesPath",
                            "method",
                            "path"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "label": {
                              "type": "string",
                              "title": "Transform function returning label",
                              "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                            },
                            "value": {
                              "type": "string",
                              "title": "Transform function returning target value",
                              "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                            },
                            "array": {
                              "type": "string",
                              "title": "Transform function returning array instance",
                              "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                            },
                            "method": {
                              "oneOf": [
                                {
                                  "const": "delete"
                                },
                                {
                                  "const": "get"
                                },
                                {
                                  "const": "patch"
                                },
                                {
                                  "const": "post"
                                },
                                {
                                  "const": "put"
                                }
                              ],
                              "title": "HTTP method to call the endpoint",
                              "description": "HTTP method to call the endpoint."
                            },
                            "path": {
                              "type": "string",
                              "title": "Path of the endpoint",
                              "description": "Path of the endpoint."
                            }
                          },
                          "required": [
                            "label",
                            "value",
                            "method",
                            "path"
                          ]
                        }
                      ],
                      "title": "Prerequisite API endpoint for the schema",
                      "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                    }
                  },
                  "required": [
                    "type"
                  ]
                },
                {
                  "$ref": "#/components/schemas/__type.o77"
                },
                {
                  "$ref": "#/components/schemas/__type.o78"
                },
                {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "title": "Title of the schema",
                      "description": "Title of the schema."
                    },
                    "description": {
                      "type": "string",
                      "title": "Detailed description of the schema",
                      "description": "Detailed description of the schema."
                    },
                    "deprecated": {
                      "type": "boolean",
                      "title": "Whether the type is deprecated or not",
                      "description": "Whether the type is deprecated or not."
                    },
                    "example": {
                      "title": "Example value",
                      "description": "Example value."
                    },
                    "examples": {
                      "type": "object",
                      "properties": {},
                      "title": "List of example values as key-value pairs",
                      "description": "List of example values as key-value pairs.",
                      "additionalProperties": {}
                    },
                    "x-wrtn-placeholder": {
                      "type": "string",
                      "title": "Placeholder value for frontend application",
                      "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                    },
                    "x-wrtn-prerequisite": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "jmesPath": {
                              "type": "string",
                              "title": "Function returning transformed values using JMESPath expression",
                              "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                            },
                            "method": {
                              "oneOf": [
                                {
                                  "const": "delete"
                                },
                                {
                                  "const": "get"
                                },
                                {
                                  "const": "patch"
                                },
                                {
                                  "const": "post"
                                },
                                {
                                  "const": "put"
                                }
                              ],
                              "title": "HTTP method to call the endpoint",
                              "description": "HTTP method to call the endpoint."
                            },
                            "path": {
                              "type": "string",
                              "title": "Path of the endpoint",
                              "description": "Path of the endpoint."
                            }
                          },
                          "required": [
                            "jmesPath",
                            "method",
                            "path"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "label": {
                              "type": "string",
                              "title": "Transform function returning label",
                              "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                            },
                            "value": {
                              "type": "string",
                              "title": "Transform function returning target value",
                              "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                            },
                            "array": {
                              "type": "string",
                              "title": "Transform function returning array instance",
                              "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                            },
                            "method": {
                              "oneOf": [
                                {
                                  "const": "delete"
                                },
                                {
                                  "const": "get"
                                },
                                {
                                  "const": "patch"
                                },
                                {
                                  "const": "post"
                                },
                                {
                                  "const": "put"
                                }
                              ],
                              "title": "HTTP method to call the endpoint",
                              "description": "HTTP method to call the endpoint."
                            },
                            "path": {
                              "type": "string",
                              "title": "Path of the endpoint",
                              "description": "Path of the endpoint."
                            }
                          },
                          "required": [
                            "label",
                            "value",
                            "method",
                            "path"
                          ]
                        }
                      ],
                      "title": "Prerequisite API endpoint for the schema",
                      "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "const": "null",
                      "title": "Type is always `null`",
                      "description": "Type is always `null`."
                    },
                    "default": {
                      "type": "null",
                      "title": "Default value",
                      "description": "Default value."
                    },
                    "title": {
                      "type": "string",
                      "title": "Title of the schema",
                      "description": "Title of the schema."
                    },
                    "description": {
                      "type": "string",
                      "title": "Detailed description of the schema",
                      "description": "Detailed description of the schema."
                    },
                    "deprecated": {
                      "type": "boolean",
                      "title": "Whether the type is deprecated or not",
                      "description": "Whether the type is deprecated or not."
                    },
                    "example": {
                      "title": "Example value",
                      "description": "Example value."
                    },
                    "examples": {
                      "type": "object",
                      "properties": {},
                      "title": "List of example values as key-value pairs",
                      "description": "List of example values as key-value pairs.",
                      "additionalProperties": {}
                    },
                    "x-wrtn-placeholder": {
                      "type": "string",
                      "title": "Placeholder value for frontend application",
                      "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                    },
                    "x-wrtn-prerequisite": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "jmesPath": {
                              "type": "string",
                              "title": "Function returning transformed values using JMESPath expression",
                              "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                            },
                            "method": {
                              "oneOf": [
                                {
                                  "const": "delete"
                                },
                                {
                                  "const": "get"
                                },
                                {
                                  "const": "patch"
                                },
                                {
                                  "const": "post"
                                },
                                {
                                  "const": "put"
                                }
                              ],
                              "title": "HTTP method to call the endpoint",
                              "description": "HTTP method to call the endpoint."
                            },
                            "path": {
                              "type": "string",
                              "title": "Path of the endpoint",
                              "description": "Path of the endpoint."
                            }
                          },
                          "required": [
                            "jmesPath",
                            "method",
                            "path"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "label": {
                              "type": "string",
                              "title": "Transform function returning label",
                              "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                            },
                            "value": {
                              "type": "string",
                              "title": "Transform function returning target value",
                              "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                            },
                            "array": {
                              "type": "string",
                              "title": "Transform function returning array instance",
                              "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                            },
                            "method": {
                              "oneOf": [
                                {
                                  "const": "delete"
                                },
                                {
                                  "const": "get"
                                },
                                {
                                  "const": "patch"
                                },
                                {
                                  "const": "post"
                                },
                                {
                                  "const": "put"
                                }
                              ],
                              "title": "HTTP method to call the endpoint",
                              "description": "HTTP method to call the endpoint."
                            },
                            "path": {
                              "type": "string",
                              "title": "Path of the endpoint",
                              "description": "Path of the endpoint."
                            }
                          },
                          "required": [
                            "label",
                            "value",
                            "method",
                            "path"
                          ]
                        }
                      ],
                      "title": "Prerequisite API endpoint for the schema",
                      "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                    }
                  },
                  "required": [
                    "type"
                  ]
                },
                {
                  "$ref": "#/components/schemas/__type.o82"
                }
              ]
            },
            "title": "List of parameter types",
            "description": "List of parameter types.\n\nIf you've configured {@link IHttpLlmApplication.IOptions.keyword} as `true`,\nnumber of {@link IHttpLlmFunction.parameters} are always 1 and the first\nparameter's type is always {@link ILlmSchema.IObject}. The\nproperties' rule is:\n\n- `pathParameters`: Path parameters of {@link IHttpMigrateRoute.parameters}\n- `query`: Query parameter of {@link IHttpMigrateRoute.query}\n- `body`: Body parameter of {@link IHttpMigrateRoute.body}\n\n```typescript\n{\n  ...pathParameters,\n  query,\n  body,\n}\n```\n\nOtherwise, the parameters would be multiple, and the sequence of the\nparameters are following below rules:\n\n```typescript\n[\n  ...pathParameters,\n  ...(query ? [query] : []),\n  ...(body ? [body] : []),\n]\n```"
          },
          "strict": {
            "const": true,
            "title": "Whether the function schema types are strict or not",
            "description": "Whether the function schema types are strict or not.\n\nNewly added specification to \"OpenAI\" at 2024-08-07."
          },
          "separated": {
            "type": "object",
            "properties": {
              "llm": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "index": {
                      "type": "integer",
                      "title": "Index of the parameter",
                      "description": "Index of the parameter."
                    },
                    "schema": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "default": {
                              "oneOf": [
                                {
                                  "type": "null"
                                },
                                {
                                  "type": "boolean"
                                }
                              ],
                              "title": "Default value",
                              "description": "Default value."
                            },
                            "enum": {
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "null"
                                  },
                                  {
                                    "type": "boolean"
                                  }
                                ]
                              },
                              "title": "Enumeration values",
                              "description": "Enumeration values."
                            },
                            "type": {
                              "const": "boolean",
                              "title": "Discriminator value of the type",
                              "description": "Discriminator value of the type."
                            },
                            "nullable": {
                              "type": "boolean",
                              "title": "Whether to allow `null` value or not",
                              "description": "Whether to allow `null` value or not."
                            },
                            "title": {
                              "type": "string",
                              "title": "Title of the schema",
                              "description": "Title of the schema."
                            },
                            "description": {
                              "type": "string",
                              "title": "Detailed description of the schema",
                              "description": "Detailed description of the schema."
                            },
                            "deprecated": {
                              "type": "boolean",
                              "title": "Whether the type is deprecated or not",
                              "description": "Whether the type is deprecated or not."
                            },
                            "example": {
                              "title": "Example value",
                              "description": "Example value."
                            },
                            "examples": {
                              "type": "object",
                              "properties": {},
                              "title": "List of example values as key-value pairs",
                              "description": "List of example values as key-value pairs.",
                              "additionalProperties": {}
                            },
                            "x-wrtn-placeholder": {
                              "type": "string",
                              "title": "Placeholder value for frontend application",
                              "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                            },
                            "x-wrtn-prerequisite": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "jmesPath": {
                                      "type": "string",
                                      "title": "Function returning transformed values using JMESPath expression",
                                      "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                                    },
                                    "method": {
                                      "oneOf": [
                                        {
                                          "const": "delete"
                                        },
                                        {
                                          "const": "get"
                                        },
                                        {
                                          "const": "patch"
                                        },
                                        {
                                          "const": "post"
                                        },
                                        {
                                          "const": "put"
                                        }
                                      ],
                                      "title": "HTTP method to call the endpoint",
                                      "description": "HTTP method to call the endpoint."
                                    },
                                    "path": {
                                      "type": "string",
                                      "title": "Path of the endpoint",
                                      "description": "Path of the endpoint."
                                    }
                                  },
                                  "required": [
                                    "jmesPath",
                                    "method",
                                    "path"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "label": {
                                      "type": "string",
                                      "title": "Transform function returning label",
                                      "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                                    },
                                    "value": {
                                      "type": "string",
                                      "title": "Transform function returning target value",
                                      "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                                    },
                                    "array": {
                                      "type": "string",
                                      "title": "Transform function returning array instance",
                                      "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                                    },
                                    "method": {
                                      "oneOf": [
                                        {
                                          "const": "delete"
                                        },
                                        {
                                          "const": "get"
                                        },
                                        {
                                          "const": "patch"
                                        },
                                        {
                                          "const": "post"
                                        },
                                        {
                                          "const": "put"
                                        }
                                      ],
                                      "title": "HTTP method to call the endpoint",
                                      "description": "HTTP method to call the endpoint."
                                    },
                                    "path": {
                                      "type": "string",
                                      "title": "Path of the endpoint",
                                      "description": "Path of the endpoint."
                                    }
                                  },
                                  "required": [
                                    "label",
                                    "value",
                                    "method",
                                    "path"
                                  ]
                                }
                              ],
                              "title": "Prerequisite API endpoint for the schema",
                              "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                            }
                          },
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "default": {
                              "oneOf": [
                                {
                                  "type": "null"
                                },
                                {
                                  "type": "integer"
                                }
                              ],
                              "title": "Default value",
                              "description": "Default value."
                            },
                            "enum": {
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "null"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              },
                              "title": "Enumeration values",
                              "description": "Enumeration values."
                            },
                            "minimum": {
                              "type": "integer",
                              "title": "Minimum value restriction",
                              "description": "Minimum value restriction."
                            },
                            "maximum": {
                              "type": "integer",
                              "title": "Maximum value restriction",
                              "description": "Maximum value restriction."
                            },
                            "exclusiveMinimum": {
                              "type": "boolean",
                              "title": "Exclusive minimum value restriction",
                              "description": "Exclusive minimum value restriction.\n\nFor reference, even though your Swagger document has defined the\n`exclusiveMinimum` value as `number`, it has been forcibly converted\nto `boolean` type, and assigns the numeric value to the\n{@link minimum} property in the {@link OpenApi} conversion."
                            },
                            "exclusiveMaximum": {
                              "type": "boolean",
                              "title": "Exclusive maximum value restriction",
                              "description": "Exclusive maximum value restriction.\n\nFor reference, even though your Swagger document has defined the\n`exclusiveMaximum` value as `number`, it has been forcibly converted\nto `boolean` type, and assigns the numeric value to the\n{@link maximum} property in the {@link OpenApi} conversion."
                            },
                            "multipleOf": {
                              "type": "integer",
                              "exclusiveMinimum": true,
                              "minimum": 0,
                              "title": "Multiple of value restriction",
                              "description": "Multiple of value restriction."
                            },
                            "type": {
                              "const": "integer",
                              "title": "Discriminator value of the type",
                              "description": "Discriminator value of the type."
                            },
                            "nullable": {
                              "type": "boolean",
                              "title": "Whether to allow `null` value or not",
                              "description": "Whether to allow `null` value or not."
                            },
                            "title": {
                              "type": "string",
                              "title": "Title of the schema",
                              "description": "Title of the schema."
                            },
                            "description": {
                              "type": "string",
                              "title": "Detailed description of the schema",
                              "description": "Detailed description of the schema."
                            },
                            "deprecated": {
                              "type": "boolean",
                              "title": "Whether the type is deprecated or not",
                              "description": "Whether the type is deprecated or not."
                            },
                            "example": {
                              "title": "Example value",
                              "description": "Example value."
                            },
                            "examples": {
                              "type": "object",
                              "properties": {},
                              "title": "List of example values as key-value pairs",
                              "description": "List of example values as key-value pairs.",
                              "additionalProperties": {}
                            },
                            "x-wrtn-placeholder": {
                              "type": "string",
                              "title": "Placeholder value for frontend application",
                              "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                            },
                            "x-wrtn-prerequisite": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "jmesPath": {
                                      "type": "string",
                                      "title": "Function returning transformed values using JMESPath expression",
                                      "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                                    },
                                    "method": {
                                      "oneOf": [
                                        {
                                          "const": "delete"
                                        },
                                        {
                                          "const": "get"
                                        },
                                        {
                                          "const": "patch"
                                        },
                                        {
                                          "const": "post"
                                        },
                                        {
                                          "const": "put"
                                        }
                                      ],
                                      "title": "HTTP method to call the endpoint",
                                      "description": "HTTP method to call the endpoint."
                                    },
                                    "path": {
                                      "type": "string",
                                      "title": "Path of the endpoint",
                                      "description": "Path of the endpoint."
                                    }
                                  },
                                  "required": [
                                    "jmesPath",
                                    "method",
                                    "path"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "label": {
                                      "type": "string",
                                      "title": "Transform function returning label",
                                      "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                                    },
                                    "value": {
                                      "type": "string",
                                      "title": "Transform function returning target value",
                                      "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                                    },
                                    "array": {
                                      "type": "string",
                                      "title": "Transform function returning array instance",
                                      "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                                    },
                                    "method": {
                                      "oneOf": [
                                        {
                                          "const": "delete"
                                        },
                                        {
                                          "const": "get"
                                        },
                                        {
                                          "const": "patch"
                                        },
                                        {
                                          "const": "post"
                                        },
                                        {
                                          "const": "put"
                                        }
                                      ],
                                      "title": "HTTP method to call the endpoint",
                                      "description": "HTTP method to call the endpoint."
                                    },
                                    "path": {
                                      "type": "string",
                                      "title": "Path of the endpoint",
                                      "description": "Path of the endpoint."
                                    }
                                  },
                                  "required": [
                                    "label",
                                    "value",
                                    "method",
                                    "path"
                                  ]
                                }
                              ],
                              "title": "Prerequisite API endpoint for the schema",
                              "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                            }
                          },
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "default": {
                              "oneOf": [
                                {
                                  "type": "null"
                                },
                                {
                                  "type": "number"
                                }
                              ],
                              "title": "Default value",
                              "description": "Default value."
                            },
                            "enum": {
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "null"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              },
                              "title": "Enumeration values",
                              "description": "Enumeration values."
                            },
                            "minimum": {
                              "type": "number",
                              "title": "Minimum value restriction",
                              "description": "Minimum value restriction."
                            },
                            "maximum": {
                              "type": "number",
                              "title": "Maximum value restriction",
                              "description": "Maximum value restriction."
                            },
                            "exclusiveMinimum": {
                              "type": "boolean",
                              "title": "Exclusive minimum value restriction",
                              "description": "Exclusive minimum value restriction.\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined the `exclusiveMinimum` value as `number`, {@link OpenAiComposer}\nforcibly converts it to `boolean` type, and assign the numeric value to\nthe {@link minimum} property."
                            },
                            "exclusiveMaximum": {
                              "type": "boolean",
                              "title": "Exclusive maximum value restriction",
                              "description": "Exclusive maximum value restriction.\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined the `exclusiveMaximum` value as `number`, {@link OpenAiComposer}\nforcibly converts it to `boolean` type, and assign the numeric value to\nthe {@link maximum} property."
                            },
                            "multipleOf": {
                              "type": "number",
                              "exclusiveMinimum": true,
                              "minimum": 0,
                              "title": "Multiple of value restriction",
                              "description": "Multiple of value restriction."
                            },
                            "type": {
                              "const": "number",
                              "title": "Discriminator value of the type",
                              "description": "Discriminator value of the type."
                            },
                            "nullable": {
                              "type": "boolean",
                              "title": "Whether to allow `null` value or not",
                              "description": "Whether to allow `null` value or not."
                            },
                            "title": {
                              "type": "string",
                              "title": "Title of the schema",
                              "description": "Title of the schema."
                            },
                            "description": {
                              "type": "string",
                              "title": "Detailed description of the schema",
                              "description": "Detailed description of the schema."
                            },
                            "deprecated": {
                              "type": "boolean",
                              "title": "Whether the type is deprecated or not",
                              "description": "Whether the type is deprecated or not."
                            },
                            "example": {
                              "title": "Example value",
                              "description": "Example value."
                            },
                            "examples": {
                              "type": "object",
                              "properties": {},
                              "title": "List of example values as key-value pairs",
                              "description": "List of example values as key-value pairs.",
                              "additionalProperties": {}
                            },
                            "x-wrtn-placeholder": {
                              "type": "string",
                              "title": "Placeholder value for frontend application",
                              "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                            },
                            "x-wrtn-prerequisite": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "jmesPath": {
                                      "type": "string",
                                      "title": "Function returning transformed values using JMESPath expression",
                                      "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                                    },
                                    "method": {
                                      "oneOf": [
                                        {
                                          "const": "delete"
                                        },
                                        {
                                          "const": "get"
                                        },
                                        {
                                          "const": "patch"
                                        },
                                        {
                                          "const": "post"
                                        },
                                        {
                                          "const": "put"
                                        }
                                      ],
                                      "title": "HTTP method to call the endpoint",
                                      "description": "HTTP method to call the endpoint."
                                    },
                                    "path": {
                                      "type": "string",
                                      "title": "Path of the endpoint",
                                      "description": "Path of the endpoint."
                                    }
                                  },
                                  "required": [
                                    "jmesPath",
                                    "method",
                                    "path"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "label": {
                                      "type": "string",
                                      "title": "Transform function returning label",
                                      "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                                    },
                                    "value": {
                                      "type": "string",
                                      "title": "Transform function returning target value",
                                      "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                                    },
                                    "array": {
                                      "type": "string",
                                      "title": "Transform function returning array instance",
                                      "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                                    },
                                    "method": {
                                      "oneOf": [
                                        {
                                          "const": "delete"
                                        },
                                        {
                                          "const": "get"
                                        },
                                        {
                                          "const": "patch"
                                        },
                                        {
                                          "const": "post"
                                        },
                                        {
                                          "const": "put"
                                        }
                                      ],
                                      "title": "HTTP method to call the endpoint",
                                      "description": "HTTP method to call the endpoint."
                                    },
                                    "path": {
                                      "type": "string",
                                      "title": "Path of the endpoint",
                                      "description": "Path of the endpoint."
                                    }
                                  },
                                  "required": [
                                    "label",
                                    "value",
                                    "method",
                                    "path"
                                  ]
                                }
                              ],
                              "title": "Prerequisite API endpoint for the schema",
                              "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                            }
                          },
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "x-wrtn-secret-key": {
                              "type": "string",
                              "title": "Secret key for the schema",
                              "description": "Secret key for the schema.\n\n`x-wrtn-secret-key` is a property means a secret key that is required\nfor the target API endpoint calling. If the secret key is not filled,\nthe API call would be failed."
                            },
                            "x-wrtn-secret-scopes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "title": "Secret scopes for the schema",
                              "description": "Secret scopes for the schema.\n\n`x-wrtn-secret-scopes` is a property means a list of secret scopes that\nare required for the target API endpoint calling. If the secret scopes\nare not satisfied, the API call would be failed."
                            },
                            "default": {
                              "oneOf": [
                                {
                                  "type": "null"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "title": "Default value",
                              "description": "Default value."
                            },
                            "enum": {
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "null"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ]
                              },
                              "title": "Enumeration values",
                              "description": "Enumeration values."
                            },
                            "format": {
                              "type": "string",
                              "title": "Format restriction",
                              "description": "Format restriction."
                            },
                            "pattern": {
                              "type": "string",
                              "title": "Pattern restriction",
                              "description": "Pattern restriction."
                            },
                            "minLength": {
                              "type": "integer",
                              "title": "Minimum length restriction",
                              "description": "Minimum length restriction."
                            },
                            "maxLength": {
                              "type": "integer",
                              "title": "Maximum length restriction",
                              "description": "Maximum length restriction."
                            },
                            "contentMediaType": {
                              "type": "string",
                              "title": "Content media type restriction",
                              "description": "Content media type restriction."
                            },
                            "type": {
                              "const": "string",
                              "title": "Discriminator value of the type",
                              "description": "Discriminator value of the type."
                            },
                            "nullable": {
                              "type": "boolean",
                              "title": "Whether to allow `null` value or not",
                              "description": "Whether to allow `null` value or not."
                            },
                            "title": {
                              "type": "string",
                              "title": "Title of the schema",
                              "description": "Title of the schema."
                            },
                            "description": {
                              "type": "string",
                              "title": "Detailed description of the schema",
                              "description": "Detailed description of the schema."
                            },
                            "deprecated": {
                              "type": "boolean",
                              "title": "Whether the type is deprecated or not",
                              "description": "Whether the type is deprecated or not."
                            },
                            "example": {
                              "title": "Example value",
                              "description": "Example value."
                            },
                            "examples": {
                              "type": "object",
                              "properties": {},
                              "title": "List of example values as key-value pairs",
                              "description": "List of example values as key-value pairs.",
                              "additionalProperties": {}
                            },
                            "x-wrtn-placeholder": {
                              "type": "string",
                              "title": "Placeholder value for frontend application",
                              "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                            },
                            "x-wrtn-prerequisite": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "jmesPath": {
                                      "type": "string",
                                      "title": "Function returning transformed values using JMESPath expression",
                                      "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                                    },
                                    "method": {
                                      "oneOf": [
                                        {
                                          "const": "delete"
                                        },
                                        {
                                          "const": "get"
                                        },
                                        {
                                          "const": "patch"
                                        },
                                        {
                                          "const": "post"
                                        },
                                        {
                                          "const": "put"
                                        }
                                      ],
                                      "title": "HTTP method to call the endpoint",
                                      "description": "HTTP method to call the endpoint."
                                    },
                                    "path": {
                                      "type": "string",
                                      "title": "Path of the endpoint",
                                      "description": "Path of the endpoint."
                                    }
                                  },
                                  "required": [
                                    "jmesPath",
                                    "method",
                                    "path"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "label": {
                                      "type": "string",
                                      "title": "Transform function returning label",
                                      "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                                    },
                                    "value": {
                                      "type": "string",
                                      "title": "Transform function returning target value",
                                      "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                                    },
                                    "array": {
                                      "type": "string",
                                      "title": "Transform function returning array instance",
                                      "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                                    },
                                    "method": {
                                      "oneOf": [
                                        {
                                          "const": "delete"
                                        },
                                        {
                                          "const": "get"
                                        },
                                        {
                                          "const": "patch"
                                        },
                                        {
                                          "const": "post"
                                        },
                                        {
                                          "const": "put"
                                        }
                                      ],
                                      "title": "HTTP method to call the endpoint",
                                      "description": "HTTP method to call the endpoint."
                                    },
                                    "path": {
                                      "type": "string",
                                      "title": "Path of the endpoint",
                                      "description": "Path of the endpoint."
                                    }
                                  },
                                  "required": [
                                    "label",
                                    "value",
                                    "method",
                                    "path"
                                  ]
                                }
                              ],
                              "title": "Prerequisite API endpoint for the schema",
                              "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                            }
                          },
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "$ref": "#/components/schemas/__type.o77"
                        },
                        {
                          "$ref": "#/components/schemas/__type.o78"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "title": {
                              "type": "string",
                              "title": "Title of the schema",
                              "description": "Title of the schema."
                            },
                            "description": {
                              "type": "string",
                              "title": "Detailed description of the schema",
                              "description": "Detailed description of the schema."
                            },
                            "deprecated": {
                              "type": "boolean",
                              "title": "Whether the type is deprecated or not",
                              "description": "Whether the type is deprecated or not."
                            },
                            "example": {
                              "title": "Example value",
                              "description": "Example value."
                            },
                            "examples": {
                              "type": "object",
                              "properties": {},
                              "title": "List of example values as key-value pairs",
                              "description": "List of example values as key-value pairs.",
                              "additionalProperties": {}
                            },
                            "x-wrtn-placeholder": {
                              "type": "string",
                              "title": "Placeholder value for frontend application",
                              "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                            },
                            "x-wrtn-prerequisite": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "jmesPath": {
                                      "type": "string",
                                      "title": "Function returning transformed values using JMESPath expression",
                                      "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                                    },
                                    "method": {
                                      "oneOf": [
                                        {
                                          "const": "delete"
                                        },
                                        {
                                          "const": "get"
                                        },
                                        {
                                          "const": "patch"
                                        },
                                        {
                                          "const": "post"
                                        },
                                        {
                                          "const": "put"
                                        }
                                      ],
                                      "title": "HTTP method to call the endpoint",
                                      "description": "HTTP method to call the endpoint."
                                    },
                                    "path": {
                                      "type": "string",
                                      "title": "Path of the endpoint",
                                      "description": "Path of the endpoint."
                                    }
                                  },
                                  "required": [
                                    "jmesPath",
                                    "method",
                                    "path"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "label": {
                                      "type": "string",
                                      "title": "Transform function returning label",
                                      "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                                    },
                                    "value": {
                                      "type": "string",
                                      "title": "Transform function returning target value",
                                      "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                                    },
                                    "array": {
                                      "type": "string",
                                      "title": "Transform function returning array instance",
                                      "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                                    },
                                    "method": {
                                      "oneOf": [
                                        {
                                          "const": "delete"
                                        },
                                        {
                                          "const": "get"
                                        },
                                        {
                                          "const": "patch"
                                        },
                                        {
                                          "const": "post"
                                        },
                                        {
                                          "const": "put"
                                        }
                                      ],
                                      "title": "HTTP method to call the endpoint",
                                      "description": "HTTP method to call the endpoint."
                                    },
                                    "path": {
                                      "type": "string",
                                      "title": "Path of the endpoint",
                                      "description": "Path of the endpoint."
                                    }
                                  },
                                  "required": [
                                    "label",
                                    "value",
                                    "method",
                                    "path"
                                  ]
                                }
                              ],
                              "title": "Prerequisite API endpoint for the schema",
                              "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "const": "null",
                              "title": "Type is always `null`",
                              "description": "Type is always `null`."
                            },
                            "default": {
                              "type": "null",
                              "title": "Default value",
                              "description": "Default value."
                            },
                            "title": {
                              "type": "string",
                              "title": "Title of the schema",
                              "description": "Title of the schema."
                            },
                            "description": {
                              "type": "string",
                              "title": "Detailed description of the schema",
                              "description": "Detailed description of the schema."
                            },
                            "deprecated": {
                              "type": "boolean",
                              "title": "Whether the type is deprecated or not",
                              "description": "Whether the type is deprecated or not."
                            },
                            "example": {
                              "title": "Example value",
                              "description": "Example value."
                            },
                            "examples": {
                              "type": "object",
                              "properties": {},
                              "title": "List of example values as key-value pairs",
                              "description": "List of example values as key-value pairs.",
                              "additionalProperties": {}
                            },
                            "x-wrtn-placeholder": {
                              "type": "string",
                              "title": "Placeholder value for frontend application",
                              "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                            },
                            "x-wrtn-prerequisite": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "jmesPath": {
                                      "type": "string",
                                      "title": "Function returning transformed values using JMESPath expression",
                                      "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                                    },
                                    "method": {
                                      "oneOf": [
                                        {
                                          "const": "delete"
                                        },
                                        {
                                          "const": "get"
                                        },
                                        {
                                          "const": "patch"
                                        },
                                        {
                                          "const": "post"
                                        },
                                        {
                                          "const": "put"
                                        }
                                      ],
                                      "title": "HTTP method to call the endpoint",
                                      "description": "HTTP method to call the endpoint."
                                    },
                                    "path": {
                                      "type": "string",
                                      "title": "Path of the endpoint",
                                      "description": "Path of the endpoint."
                                    }
                                  },
                                  "required": [
                                    "jmesPath",
                                    "method",
                                    "path"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "label": {
                                      "type": "string",
                                      "title": "Transform function returning label",
                                      "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                                    },
                                    "value": {
                                      "type": "string",
                                      "title": "Transform function returning target value",
                                      "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                                    },
                                    "array": {
                                      "type": "string",
                                      "title": "Transform function returning array instance",
                                      "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                                    },
                                    "method": {
                                      "oneOf": [
                                        {
                                          "const": "delete"
                                        },
                                        {
                                          "const": "get"
                                        },
                                        {
                                          "const": "patch"
                                        },
                                        {
                                          "const": "post"
                                        },
                                        {
                                          "const": "put"
                                        }
                                      ],
                                      "title": "HTTP method to call the endpoint",
                                      "description": "HTTP method to call the endpoint."
                                    },
                                    "path": {
                                      "type": "string",
                                      "title": "Path of the endpoint",
                                      "description": "Path of the endpoint."
                                    }
                                  },
                                  "required": [
                                    "label",
                                    "value",
                                    "method",
                                    "path"
                                  ]
                                }
                              ],
                              "title": "Prerequisite API endpoint for the schema",
                              "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                            }
                          },
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "$ref": "#/components/schemas/__type.o82"
                        }
                      ],
                      "title": "Type schema info of the parameter",
                      "description": "Type schema info of the parameter."
                    }
                  },
                  "required": [
                    "index",
                    "schema"
                  ]
                },
                "title": "Parameters that would be composed by the LLM",
                "description": "Parameters that would be composed by the LLM."
              },
              "human": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "index": {
                      "type": "integer",
                      "title": "Index of the parameter",
                      "description": "Index of the parameter."
                    },
                    "schema": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "default": {
                              "oneOf": [
                                {
                                  "type": "null"
                                },
                                {
                                  "type": "boolean"
                                }
                              ],
                              "title": "Default value",
                              "description": "Default value."
                            },
                            "enum": {
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "null"
                                  },
                                  {
                                    "type": "boolean"
                                  }
                                ]
                              },
                              "title": "Enumeration values",
                              "description": "Enumeration values."
                            },
                            "type": {
                              "const": "boolean",
                              "title": "Discriminator value of the type",
                              "description": "Discriminator value of the type."
                            },
                            "nullable": {
                              "type": "boolean",
                              "title": "Whether to allow `null` value or not",
                              "description": "Whether to allow `null` value or not."
                            },
                            "title": {
                              "type": "string",
                              "title": "Title of the schema",
                              "description": "Title of the schema."
                            },
                            "description": {
                              "type": "string",
                              "title": "Detailed description of the schema",
                              "description": "Detailed description of the schema."
                            },
                            "deprecated": {
                              "type": "boolean",
                              "title": "Whether the type is deprecated or not",
                              "description": "Whether the type is deprecated or not."
                            },
                            "example": {
                              "title": "Example value",
                              "description": "Example value."
                            },
                            "examples": {
                              "type": "object",
                              "properties": {},
                              "title": "List of example values as key-value pairs",
                              "description": "List of example values as key-value pairs.",
                              "additionalProperties": {}
                            },
                            "x-wrtn-placeholder": {
                              "type": "string",
                              "title": "Placeholder value for frontend application",
                              "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                            },
                            "x-wrtn-prerequisite": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "jmesPath": {
                                      "type": "string",
                                      "title": "Function returning transformed values using JMESPath expression",
                                      "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                                    },
                                    "method": {
                                      "oneOf": [
                                        {
                                          "const": "delete"
                                        },
                                        {
                                          "const": "get"
                                        },
                                        {
                                          "const": "patch"
                                        },
                                        {
                                          "const": "post"
                                        },
                                        {
                                          "const": "put"
                                        }
                                      ],
                                      "title": "HTTP method to call the endpoint",
                                      "description": "HTTP method to call the endpoint."
                                    },
                                    "path": {
                                      "type": "string",
                                      "title": "Path of the endpoint",
                                      "description": "Path of the endpoint."
                                    }
                                  },
                                  "required": [
                                    "jmesPath",
                                    "method",
                                    "path"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "label": {
                                      "type": "string",
                                      "title": "Transform function returning label",
                                      "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                                    },
                                    "value": {
                                      "type": "string",
                                      "title": "Transform function returning target value",
                                      "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                                    },
                                    "array": {
                                      "type": "string",
                                      "title": "Transform function returning array instance",
                                      "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                                    },
                                    "method": {
                                      "oneOf": [
                                        {
                                          "const": "delete"
                                        },
                                        {
                                          "const": "get"
                                        },
                                        {
                                          "const": "patch"
                                        },
                                        {
                                          "const": "post"
                                        },
                                        {
                                          "const": "put"
                                        }
                                      ],
                                      "title": "HTTP method to call the endpoint",
                                      "description": "HTTP method to call the endpoint."
                                    },
                                    "path": {
                                      "type": "string",
                                      "title": "Path of the endpoint",
                                      "description": "Path of the endpoint."
                                    }
                                  },
                                  "required": [
                                    "label",
                                    "value",
                                    "method",
                                    "path"
                                  ]
                                }
                              ],
                              "title": "Prerequisite API endpoint for the schema",
                              "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                            }
                          },
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "default": {
                              "oneOf": [
                                {
                                  "type": "null"
                                },
                                {
                                  "type": "integer"
                                }
                              ],
                              "title": "Default value",
                              "description": "Default value."
                            },
                            "enum": {
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "null"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              },
                              "title": "Enumeration values",
                              "description": "Enumeration values."
                            },
                            "minimum": {
                              "type": "integer",
                              "title": "Minimum value restriction",
                              "description": "Minimum value restriction."
                            },
                            "maximum": {
                              "type": "integer",
                              "title": "Maximum value restriction",
                              "description": "Maximum value restriction."
                            },
                            "exclusiveMinimum": {
                              "type": "boolean",
                              "title": "Exclusive minimum value restriction",
                              "description": "Exclusive minimum value restriction.\n\nFor reference, even though your Swagger document has defined the\n`exclusiveMinimum` value as `number`, it has been forcibly converted\nto `boolean` type, and assigns the numeric value to the\n{@link minimum} property in the {@link OpenApi} conversion."
                            },
                            "exclusiveMaximum": {
                              "type": "boolean",
                              "title": "Exclusive maximum value restriction",
                              "description": "Exclusive maximum value restriction.\n\nFor reference, even though your Swagger document has defined the\n`exclusiveMaximum` value as `number`, it has been forcibly converted\nto `boolean` type, and assigns the numeric value to the\n{@link maximum} property in the {@link OpenApi} conversion."
                            },
                            "multipleOf": {
                              "type": "integer",
                              "exclusiveMinimum": true,
                              "minimum": 0,
                              "title": "Multiple of value restriction",
                              "description": "Multiple of value restriction."
                            },
                            "type": {
                              "const": "integer",
                              "title": "Discriminator value of the type",
                              "description": "Discriminator value of the type."
                            },
                            "nullable": {
                              "type": "boolean",
                              "title": "Whether to allow `null` value or not",
                              "description": "Whether to allow `null` value or not."
                            },
                            "title": {
                              "type": "string",
                              "title": "Title of the schema",
                              "description": "Title of the schema."
                            },
                            "description": {
                              "type": "string",
                              "title": "Detailed description of the schema",
                              "description": "Detailed description of the schema."
                            },
                            "deprecated": {
                              "type": "boolean",
                              "title": "Whether the type is deprecated or not",
                              "description": "Whether the type is deprecated or not."
                            },
                            "example": {
                              "title": "Example value",
                              "description": "Example value."
                            },
                            "examples": {
                              "type": "object",
                              "properties": {},
                              "title": "List of example values as key-value pairs",
                              "description": "List of example values as key-value pairs.",
                              "additionalProperties": {}
                            },
                            "x-wrtn-placeholder": {
                              "type": "string",
                              "title": "Placeholder value for frontend application",
                              "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                            },
                            "x-wrtn-prerequisite": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "jmesPath": {
                                      "type": "string",
                                      "title": "Function returning transformed values using JMESPath expression",
                                      "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                                    },
                                    "method": {
                                      "oneOf": [
                                        {
                                          "const": "delete"
                                        },
                                        {
                                          "const": "get"
                                        },
                                        {
                                          "const": "patch"
                                        },
                                        {
                                          "const": "post"
                                        },
                                        {
                                          "const": "put"
                                        }
                                      ],
                                      "title": "HTTP method to call the endpoint",
                                      "description": "HTTP method to call the endpoint."
                                    },
                                    "path": {
                                      "type": "string",
                                      "title": "Path of the endpoint",
                                      "description": "Path of the endpoint."
                                    }
                                  },
                                  "required": [
                                    "jmesPath",
                                    "method",
                                    "path"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "label": {
                                      "type": "string",
                                      "title": "Transform function returning label",
                                      "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                                    },
                                    "value": {
                                      "type": "string",
                                      "title": "Transform function returning target value",
                                      "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                                    },
                                    "array": {
                                      "type": "string",
                                      "title": "Transform function returning array instance",
                                      "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                                    },
                                    "method": {
                                      "oneOf": [
                                        {
                                          "const": "delete"
                                        },
                                        {
                                          "const": "get"
                                        },
                                        {
                                          "const": "patch"
                                        },
                                        {
                                          "const": "post"
                                        },
                                        {
                                          "const": "put"
                                        }
                                      ],
                                      "title": "HTTP method to call the endpoint",
                                      "description": "HTTP method to call the endpoint."
                                    },
                                    "path": {
                                      "type": "string",
                                      "title": "Path of the endpoint",
                                      "description": "Path of the endpoint."
                                    }
                                  },
                                  "required": [
                                    "label",
                                    "value",
                                    "method",
                                    "path"
                                  ]
                                }
                              ],
                              "title": "Prerequisite API endpoint for the schema",
                              "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                            }
                          },
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "default": {
                              "oneOf": [
                                {
                                  "type": "null"
                                },
                                {
                                  "type": "number"
                                }
                              ],
                              "title": "Default value",
                              "description": "Default value."
                            },
                            "enum": {
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "null"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              },
                              "title": "Enumeration values",
                              "description": "Enumeration values."
                            },
                            "minimum": {
                              "type": "number",
                              "title": "Minimum value restriction",
                              "description": "Minimum value restriction."
                            },
                            "maximum": {
                              "type": "number",
                              "title": "Maximum value restriction",
                              "description": "Maximum value restriction."
                            },
                            "exclusiveMinimum": {
                              "type": "boolean",
                              "title": "Exclusive minimum value restriction",
                              "description": "Exclusive minimum value restriction.\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined the `exclusiveMinimum` value as `number`, {@link OpenAiComposer}\nforcibly converts it to `boolean` type, and assign the numeric value to\nthe {@link minimum} property."
                            },
                            "exclusiveMaximum": {
                              "type": "boolean",
                              "title": "Exclusive maximum value restriction",
                              "description": "Exclusive maximum value restriction.\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined the `exclusiveMaximum` value as `number`, {@link OpenAiComposer}\nforcibly converts it to `boolean` type, and assign the numeric value to\nthe {@link maximum} property."
                            },
                            "multipleOf": {
                              "type": "number",
                              "exclusiveMinimum": true,
                              "minimum": 0,
                              "title": "Multiple of value restriction",
                              "description": "Multiple of value restriction."
                            },
                            "type": {
                              "const": "number",
                              "title": "Discriminator value of the type",
                              "description": "Discriminator value of the type."
                            },
                            "nullable": {
                              "type": "boolean",
                              "title": "Whether to allow `null` value or not",
                              "description": "Whether to allow `null` value or not."
                            },
                            "title": {
                              "type": "string",
                              "title": "Title of the schema",
                              "description": "Title of the schema."
                            },
                            "description": {
                              "type": "string",
                              "title": "Detailed description of the schema",
                              "description": "Detailed description of the schema."
                            },
                            "deprecated": {
                              "type": "boolean",
                              "title": "Whether the type is deprecated or not",
                              "description": "Whether the type is deprecated or not."
                            },
                            "example": {
                              "title": "Example value",
                              "description": "Example value."
                            },
                            "examples": {
                              "type": "object",
                              "properties": {},
                              "title": "List of example values as key-value pairs",
                              "description": "List of example values as key-value pairs.",
                              "additionalProperties": {}
                            },
                            "x-wrtn-placeholder": {
                              "type": "string",
                              "title": "Placeholder value for frontend application",
                              "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                            },
                            "x-wrtn-prerequisite": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "jmesPath": {
                                      "type": "string",
                                      "title": "Function returning transformed values using JMESPath expression",
                                      "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                                    },
                                    "method": {
                                      "oneOf": [
                                        {
                                          "const": "delete"
                                        },
                                        {
                                          "const": "get"
                                        },
                                        {
                                          "const": "patch"
                                        },
                                        {
                                          "const": "post"
                                        },
                                        {
                                          "const": "put"
                                        }
                                      ],
                                      "title": "HTTP method to call the endpoint",
                                      "description": "HTTP method to call the endpoint."
                                    },
                                    "path": {
                                      "type": "string",
                                      "title": "Path of the endpoint",
                                      "description": "Path of the endpoint."
                                    }
                                  },
                                  "required": [
                                    "jmesPath",
                                    "method",
                                    "path"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "label": {
                                      "type": "string",
                                      "title": "Transform function returning label",
                                      "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                                    },
                                    "value": {
                                      "type": "string",
                                      "title": "Transform function returning target value",
                                      "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                                    },
                                    "array": {
                                      "type": "string",
                                      "title": "Transform function returning array instance",
                                      "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                                    },
                                    "method": {
                                      "oneOf": [
                                        {
                                          "const": "delete"
                                        },
                                        {
                                          "const": "get"
                                        },
                                        {
                                          "const": "patch"
                                        },
                                        {
                                          "const": "post"
                                        },
                                        {
                                          "const": "put"
                                        }
                                      ],
                                      "title": "HTTP method to call the endpoint",
                                      "description": "HTTP method to call the endpoint."
                                    },
                                    "path": {
                                      "type": "string",
                                      "title": "Path of the endpoint",
                                      "description": "Path of the endpoint."
                                    }
                                  },
                                  "required": [
                                    "label",
                                    "value",
                                    "method",
                                    "path"
                                  ]
                                }
                              ],
                              "title": "Prerequisite API endpoint for the schema",
                              "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                            }
                          },
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "x-wrtn-secret-key": {
                              "type": "string",
                              "title": "Secret key for the schema",
                              "description": "Secret key for the schema.\n\n`x-wrtn-secret-key` is a property means a secret key that is required\nfor the target API endpoint calling. If the secret key is not filled,\nthe API call would be failed."
                            },
                            "x-wrtn-secret-scopes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "title": "Secret scopes for the schema",
                              "description": "Secret scopes for the schema.\n\n`x-wrtn-secret-scopes` is a property means a list of secret scopes that\nare required for the target API endpoint calling. If the secret scopes\nare not satisfied, the API call would be failed."
                            },
                            "default": {
                              "oneOf": [
                                {
                                  "type": "null"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "title": "Default value",
                              "description": "Default value."
                            },
                            "enum": {
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "null"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ]
                              },
                              "title": "Enumeration values",
                              "description": "Enumeration values."
                            },
                            "format": {
                              "type": "string",
                              "title": "Format restriction",
                              "description": "Format restriction."
                            },
                            "pattern": {
                              "type": "string",
                              "title": "Pattern restriction",
                              "description": "Pattern restriction."
                            },
                            "minLength": {
                              "type": "integer",
                              "title": "Minimum length restriction",
                              "description": "Minimum length restriction."
                            },
                            "maxLength": {
                              "type": "integer",
                              "title": "Maximum length restriction",
                              "description": "Maximum length restriction."
                            },
                            "contentMediaType": {
                              "type": "string",
                              "title": "Content media type restriction",
                              "description": "Content media type restriction."
                            },
                            "type": {
                              "const": "string",
                              "title": "Discriminator value of the type",
                              "description": "Discriminator value of the type."
                            },
                            "nullable": {
                              "type": "boolean",
                              "title": "Whether to allow `null` value or not",
                              "description": "Whether to allow `null` value or not."
                            },
                            "title": {
                              "type": "string",
                              "title": "Title of the schema",
                              "description": "Title of the schema."
                            },
                            "description": {
                              "type": "string",
                              "title": "Detailed description of the schema",
                              "description": "Detailed description of the schema."
                            },
                            "deprecated": {
                              "type": "boolean",
                              "title": "Whether the type is deprecated or not",
                              "description": "Whether the type is deprecated or not."
                            },
                            "example": {
                              "title": "Example value",
                              "description": "Example value."
                            },
                            "examples": {
                              "type": "object",
                              "properties": {},
                              "title": "List of example values as key-value pairs",
                              "description": "List of example values as key-value pairs.",
                              "additionalProperties": {}
                            },
                            "x-wrtn-placeholder": {
                              "type": "string",
                              "title": "Placeholder value for frontend application",
                              "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                            },
                            "x-wrtn-prerequisite": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "jmesPath": {
                                      "type": "string",
                                      "title": "Function returning transformed values using JMESPath expression",
                                      "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                                    },
                                    "method": {
                                      "oneOf": [
                                        {
                                          "const": "delete"
                                        },
                                        {
                                          "const": "get"
                                        },
                                        {
                                          "const": "patch"
                                        },
                                        {
                                          "const": "post"
                                        },
                                        {
                                          "const": "put"
                                        }
                                      ],
                                      "title": "HTTP method to call the endpoint",
                                      "description": "HTTP method to call the endpoint."
                                    },
                                    "path": {
                                      "type": "string",
                                      "title": "Path of the endpoint",
                                      "description": "Path of the endpoint."
                                    }
                                  },
                                  "required": [
                                    "jmesPath",
                                    "method",
                                    "path"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "label": {
                                      "type": "string",
                                      "title": "Transform function returning label",
                                      "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                                    },
                                    "value": {
                                      "type": "string",
                                      "title": "Transform function returning target value",
                                      "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                                    },
                                    "array": {
                                      "type": "string",
                                      "title": "Transform function returning array instance",
                                      "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                                    },
                                    "method": {
                                      "oneOf": [
                                        {
                                          "const": "delete"
                                        },
                                        {
                                          "const": "get"
                                        },
                                        {
                                          "const": "patch"
                                        },
                                        {
                                          "const": "post"
                                        },
                                        {
                                          "const": "put"
                                        }
                                      ],
                                      "title": "HTTP method to call the endpoint",
                                      "description": "HTTP method to call the endpoint."
                                    },
                                    "path": {
                                      "type": "string",
                                      "title": "Path of the endpoint",
                                      "description": "Path of the endpoint."
                                    }
                                  },
                                  "required": [
                                    "label",
                                    "value",
                                    "method",
                                    "path"
                                  ]
                                }
                              ],
                              "title": "Prerequisite API endpoint for the schema",
                              "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                            }
                          },
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "$ref": "#/components/schemas/__type.o77"
                        },
                        {
                          "$ref": "#/components/schemas/__type.o78"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "title": {
                              "type": "string",
                              "title": "Title of the schema",
                              "description": "Title of the schema."
                            },
                            "description": {
                              "type": "string",
                              "title": "Detailed description of the schema",
                              "description": "Detailed description of the schema."
                            },
                            "deprecated": {
                              "type": "boolean",
                              "title": "Whether the type is deprecated or not",
                              "description": "Whether the type is deprecated or not."
                            },
                            "example": {
                              "title": "Example value",
                              "description": "Example value."
                            },
                            "examples": {
                              "type": "object",
                              "properties": {},
                              "title": "List of example values as key-value pairs",
                              "description": "List of example values as key-value pairs.",
                              "additionalProperties": {}
                            },
                            "x-wrtn-placeholder": {
                              "type": "string",
                              "title": "Placeholder value for frontend application",
                              "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                            },
                            "x-wrtn-prerequisite": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "jmesPath": {
                                      "type": "string",
                                      "title": "Function returning transformed values using JMESPath expression",
                                      "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                                    },
                                    "method": {
                                      "oneOf": [
                                        {
                                          "const": "delete"
                                        },
                                        {
                                          "const": "get"
                                        },
                                        {
                                          "const": "patch"
                                        },
                                        {
                                          "const": "post"
                                        },
                                        {
                                          "const": "put"
                                        }
                                      ],
                                      "title": "HTTP method to call the endpoint",
                                      "description": "HTTP method to call the endpoint."
                                    },
                                    "path": {
                                      "type": "string",
                                      "title": "Path of the endpoint",
                                      "description": "Path of the endpoint."
                                    }
                                  },
                                  "required": [
                                    "jmesPath",
                                    "method",
                                    "path"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "label": {
                                      "type": "string",
                                      "title": "Transform function returning label",
                                      "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                                    },
                                    "value": {
                                      "type": "string",
                                      "title": "Transform function returning target value",
                                      "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                                    },
                                    "array": {
                                      "type": "string",
                                      "title": "Transform function returning array instance",
                                      "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                                    },
                                    "method": {
                                      "oneOf": [
                                        {
                                          "const": "delete"
                                        },
                                        {
                                          "const": "get"
                                        },
                                        {
                                          "const": "patch"
                                        },
                                        {
                                          "const": "post"
                                        },
                                        {
                                          "const": "put"
                                        }
                                      ],
                                      "title": "HTTP method to call the endpoint",
                                      "description": "HTTP method to call the endpoint."
                                    },
                                    "path": {
                                      "type": "string",
                                      "title": "Path of the endpoint",
                                      "description": "Path of the endpoint."
                                    }
                                  },
                                  "required": [
                                    "label",
                                    "value",
                                    "method",
                                    "path"
                                  ]
                                }
                              ],
                              "title": "Prerequisite API endpoint for the schema",
                              "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "const": "null",
                              "title": "Type is always `null`",
                              "description": "Type is always `null`."
                            },
                            "default": {
                              "type": "null",
                              "title": "Default value",
                              "description": "Default value."
                            },
                            "title": {
                              "type": "string",
                              "title": "Title of the schema",
                              "description": "Title of the schema."
                            },
                            "description": {
                              "type": "string",
                              "title": "Detailed description of the schema",
                              "description": "Detailed description of the schema."
                            },
                            "deprecated": {
                              "type": "boolean",
                              "title": "Whether the type is deprecated or not",
                              "description": "Whether the type is deprecated or not."
                            },
                            "example": {
                              "title": "Example value",
                              "description": "Example value."
                            },
                            "examples": {
                              "type": "object",
                              "properties": {},
                              "title": "List of example values as key-value pairs",
                              "description": "List of example values as key-value pairs.",
                              "additionalProperties": {}
                            },
                            "x-wrtn-placeholder": {
                              "type": "string",
                              "title": "Placeholder value for frontend application",
                              "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                            },
                            "x-wrtn-prerequisite": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "jmesPath": {
                                      "type": "string",
                                      "title": "Function returning transformed values using JMESPath expression",
                                      "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                                    },
                                    "method": {
                                      "oneOf": [
                                        {
                                          "const": "delete"
                                        },
                                        {
                                          "const": "get"
                                        },
                                        {
                                          "const": "patch"
                                        },
                                        {
                                          "const": "post"
                                        },
                                        {
                                          "const": "put"
                                        }
                                      ],
                                      "title": "HTTP method to call the endpoint",
                                      "description": "HTTP method to call the endpoint."
                                    },
                                    "path": {
                                      "type": "string",
                                      "title": "Path of the endpoint",
                                      "description": "Path of the endpoint."
                                    }
                                  },
                                  "required": [
                                    "jmesPath",
                                    "method",
                                    "path"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "label": {
                                      "type": "string",
                                      "title": "Transform function returning label",
                                      "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                                    },
                                    "value": {
                                      "type": "string",
                                      "title": "Transform function returning target value",
                                      "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                                    },
                                    "array": {
                                      "type": "string",
                                      "title": "Transform function returning array instance",
                                      "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                                    },
                                    "method": {
                                      "oneOf": [
                                        {
                                          "const": "delete"
                                        },
                                        {
                                          "const": "get"
                                        },
                                        {
                                          "const": "patch"
                                        },
                                        {
                                          "const": "post"
                                        },
                                        {
                                          "const": "put"
                                        }
                                      ],
                                      "title": "HTTP method to call the endpoint",
                                      "description": "HTTP method to call the endpoint."
                                    },
                                    "path": {
                                      "type": "string",
                                      "title": "Path of the endpoint",
                                      "description": "Path of the endpoint."
                                    }
                                  },
                                  "required": [
                                    "label",
                                    "value",
                                    "method",
                                    "path"
                                  ]
                                }
                              ],
                              "title": "Prerequisite API endpoint for the schema",
                              "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                            }
                          },
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "$ref": "#/components/schemas/__type.o82"
                        }
                      ],
                      "title": "Type schema info of the parameter",
                      "description": "Type schema info of the parameter."
                    }
                  },
                  "required": [
                    "index",
                    "schema"
                  ]
                },
                "title": "Parameters that would be composed by the human",
                "description": "Parameters that would be composed by the human."
              }
            },
            "required": [
              "llm",
              "human"
            ],
            "title": "Collection of separated parameters",
            "description": "Collection of separated parameters.\n\nFilled only when {@link IHttpLlmApplication.IOptions.separate} is configured."
          }
        },
        "required": [
          "method",
          "name",
          "path",
          "parameters",
          "strict"
        ]
      },
      "__type.o77": {
        "type": "object",
        "properties": {
          "items": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "default": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "boolean"
                      }
                    ],
                    "title": "Default value",
                    "description": "Default value."
                  },
                  "enum": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "boolean"
                        }
                      ]
                    },
                    "title": "Enumeration values",
                    "description": "Enumeration values."
                  },
                  "type": {
                    "const": "boolean",
                    "title": "Discriminator value of the type",
                    "description": "Discriminator value of the type."
                  },
                  "nullable": {
                    "type": "boolean",
                    "title": "Whether to allow `null` value or not",
                    "description": "Whether to allow `null` value or not."
                  },
                  "title": {
                    "type": "string",
                    "title": "Title of the schema",
                    "description": "Title of the schema."
                  },
                  "description": {
                    "type": "string",
                    "title": "Detailed description of the schema",
                    "description": "Detailed description of the schema."
                  },
                  "deprecated": {
                    "type": "boolean",
                    "title": "Whether the type is deprecated or not",
                    "description": "Whether the type is deprecated or not."
                  },
                  "example": {
                    "title": "Example value",
                    "description": "Example value."
                  },
                  "examples": {
                    "type": "object",
                    "properties": {},
                    "title": "List of example values as key-value pairs",
                    "description": "List of example values as key-value pairs.",
                    "additionalProperties": {}
                  },
                  "x-wrtn-placeholder": {
                    "type": "string",
                    "title": "Placeholder value for frontend application",
                    "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                  },
                  "x-wrtn-prerequisite": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "jmesPath": {
                            "type": "string",
                            "title": "Function returning transformed values using JMESPath expression",
                            "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "jmesPath",
                          "method",
                          "path"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "label": {
                            "type": "string",
                            "title": "Transform function returning label",
                            "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                          },
                          "value": {
                            "type": "string",
                            "title": "Transform function returning target value",
                            "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                          },
                          "array": {
                            "type": "string",
                            "title": "Transform function returning array instance",
                            "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "label",
                          "value",
                          "method",
                          "path"
                        ]
                      }
                    ],
                    "title": "Prerequisite API endpoint for the schema",
                    "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                  }
                },
                "required": [
                  "type"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "default": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "integer"
                      }
                    ],
                    "title": "Default value",
                    "description": "Default value."
                  },
                  "enum": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "number"
                        }
                      ]
                    },
                    "title": "Enumeration values",
                    "description": "Enumeration values."
                  },
                  "minimum": {
                    "type": "integer",
                    "title": "Minimum value restriction",
                    "description": "Minimum value restriction."
                  },
                  "maximum": {
                    "type": "integer",
                    "title": "Maximum value restriction",
                    "description": "Maximum value restriction."
                  },
                  "exclusiveMinimum": {
                    "type": "boolean",
                    "title": "Exclusive minimum value restriction",
                    "description": "Exclusive minimum value restriction.\n\nFor reference, even though your Swagger document has defined the\n`exclusiveMinimum` value as `number`, it has been forcibly converted\nto `boolean` type, and assigns the numeric value to the\n{@link minimum} property in the {@link OpenApi} conversion."
                  },
                  "exclusiveMaximum": {
                    "type": "boolean",
                    "title": "Exclusive maximum value restriction",
                    "description": "Exclusive maximum value restriction.\n\nFor reference, even though your Swagger document has defined the\n`exclusiveMaximum` value as `number`, it has been forcibly converted\nto `boolean` type, and assigns the numeric value to the\n{@link maximum} property in the {@link OpenApi} conversion."
                  },
                  "multipleOf": {
                    "type": "integer",
                    "exclusiveMinimum": true,
                    "minimum": 0,
                    "title": "Multiple of value restriction",
                    "description": "Multiple of value restriction."
                  },
                  "type": {
                    "const": "integer",
                    "title": "Discriminator value of the type",
                    "description": "Discriminator value of the type."
                  },
                  "nullable": {
                    "type": "boolean",
                    "title": "Whether to allow `null` value or not",
                    "description": "Whether to allow `null` value or not."
                  },
                  "title": {
                    "type": "string",
                    "title": "Title of the schema",
                    "description": "Title of the schema."
                  },
                  "description": {
                    "type": "string",
                    "title": "Detailed description of the schema",
                    "description": "Detailed description of the schema."
                  },
                  "deprecated": {
                    "type": "boolean",
                    "title": "Whether the type is deprecated or not",
                    "description": "Whether the type is deprecated or not."
                  },
                  "example": {
                    "title": "Example value",
                    "description": "Example value."
                  },
                  "examples": {
                    "type": "object",
                    "properties": {},
                    "title": "List of example values as key-value pairs",
                    "description": "List of example values as key-value pairs.",
                    "additionalProperties": {}
                  },
                  "x-wrtn-placeholder": {
                    "type": "string",
                    "title": "Placeholder value for frontend application",
                    "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                  },
                  "x-wrtn-prerequisite": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "jmesPath": {
                            "type": "string",
                            "title": "Function returning transformed values using JMESPath expression",
                            "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "jmesPath",
                          "method",
                          "path"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "label": {
                            "type": "string",
                            "title": "Transform function returning label",
                            "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                          },
                          "value": {
                            "type": "string",
                            "title": "Transform function returning target value",
                            "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                          },
                          "array": {
                            "type": "string",
                            "title": "Transform function returning array instance",
                            "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "label",
                          "value",
                          "method",
                          "path"
                        ]
                      }
                    ],
                    "title": "Prerequisite API endpoint for the schema",
                    "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                  }
                },
                "required": [
                  "type"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "default": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "number"
                      }
                    ],
                    "title": "Default value",
                    "description": "Default value."
                  },
                  "enum": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "number"
                        }
                      ]
                    },
                    "title": "Enumeration values",
                    "description": "Enumeration values."
                  },
                  "minimum": {
                    "type": "number",
                    "title": "Minimum value restriction",
                    "description": "Minimum value restriction."
                  },
                  "maximum": {
                    "type": "number",
                    "title": "Maximum value restriction",
                    "description": "Maximum value restriction."
                  },
                  "exclusiveMinimum": {
                    "type": "boolean",
                    "title": "Exclusive minimum value restriction",
                    "description": "Exclusive minimum value restriction.\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined the `exclusiveMinimum` value as `number`, {@link OpenAiComposer}\nforcibly converts it to `boolean` type, and assign the numeric value to\nthe {@link minimum} property."
                  },
                  "exclusiveMaximum": {
                    "type": "boolean",
                    "title": "Exclusive maximum value restriction",
                    "description": "Exclusive maximum value restriction.\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined the `exclusiveMaximum` value as `number`, {@link OpenAiComposer}\nforcibly converts it to `boolean` type, and assign the numeric value to\nthe {@link maximum} property."
                  },
                  "multipleOf": {
                    "type": "number",
                    "exclusiveMinimum": true,
                    "minimum": 0,
                    "title": "Multiple of value restriction",
                    "description": "Multiple of value restriction."
                  },
                  "type": {
                    "const": "number",
                    "title": "Discriminator value of the type",
                    "description": "Discriminator value of the type."
                  },
                  "nullable": {
                    "type": "boolean",
                    "title": "Whether to allow `null` value or not",
                    "description": "Whether to allow `null` value or not."
                  },
                  "title": {
                    "type": "string",
                    "title": "Title of the schema",
                    "description": "Title of the schema."
                  },
                  "description": {
                    "type": "string",
                    "title": "Detailed description of the schema",
                    "description": "Detailed description of the schema."
                  },
                  "deprecated": {
                    "type": "boolean",
                    "title": "Whether the type is deprecated or not",
                    "description": "Whether the type is deprecated or not."
                  },
                  "example": {
                    "title": "Example value",
                    "description": "Example value."
                  },
                  "examples": {
                    "type": "object",
                    "properties": {},
                    "title": "List of example values as key-value pairs",
                    "description": "List of example values as key-value pairs.",
                    "additionalProperties": {}
                  },
                  "x-wrtn-placeholder": {
                    "type": "string",
                    "title": "Placeholder value for frontend application",
                    "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                  },
                  "x-wrtn-prerequisite": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "jmesPath": {
                            "type": "string",
                            "title": "Function returning transformed values using JMESPath expression",
                            "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "jmesPath",
                          "method",
                          "path"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "label": {
                            "type": "string",
                            "title": "Transform function returning label",
                            "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                          },
                          "value": {
                            "type": "string",
                            "title": "Transform function returning target value",
                            "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                          },
                          "array": {
                            "type": "string",
                            "title": "Transform function returning array instance",
                            "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "label",
                          "value",
                          "method",
                          "path"
                        ]
                      }
                    ],
                    "title": "Prerequisite API endpoint for the schema",
                    "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                  }
                },
                "required": [
                  "type"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "x-wrtn-secret-key": {
                    "type": "string",
                    "title": "Secret key for the schema",
                    "description": "Secret key for the schema.\n\n`x-wrtn-secret-key` is a property means a secret key that is required\nfor the target API endpoint calling. If the secret key is not filled,\nthe API call would be failed."
                  },
                  "x-wrtn-secret-scopes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "title": "Secret scopes for the schema",
                    "description": "Secret scopes for the schema.\n\n`x-wrtn-secret-scopes` is a property means a list of secret scopes that\nare required for the target API endpoint calling. If the secret scopes\nare not satisfied, the API call would be failed."
                  },
                  "default": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "string"
                      }
                    ],
                    "title": "Default value",
                    "description": "Default value."
                  },
                  "enum": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "title": "Enumeration values",
                    "description": "Enumeration values."
                  },
                  "format": {
                    "type": "string",
                    "title": "Format restriction",
                    "description": "Format restriction."
                  },
                  "pattern": {
                    "type": "string",
                    "title": "Pattern restriction",
                    "description": "Pattern restriction."
                  },
                  "minLength": {
                    "type": "integer",
                    "title": "Minimum length restriction",
                    "description": "Minimum length restriction."
                  },
                  "maxLength": {
                    "type": "integer",
                    "title": "Maximum length restriction",
                    "description": "Maximum length restriction."
                  },
                  "contentMediaType": {
                    "type": "string",
                    "title": "Content media type restriction",
                    "description": "Content media type restriction."
                  },
                  "type": {
                    "const": "string",
                    "title": "Discriminator value of the type",
                    "description": "Discriminator value of the type."
                  },
                  "nullable": {
                    "type": "boolean",
                    "title": "Whether to allow `null` value or not",
                    "description": "Whether to allow `null` value or not."
                  },
                  "title": {
                    "type": "string",
                    "title": "Title of the schema",
                    "description": "Title of the schema."
                  },
                  "description": {
                    "type": "string",
                    "title": "Detailed description of the schema",
                    "description": "Detailed description of the schema."
                  },
                  "deprecated": {
                    "type": "boolean",
                    "title": "Whether the type is deprecated or not",
                    "description": "Whether the type is deprecated or not."
                  },
                  "example": {
                    "title": "Example value",
                    "description": "Example value."
                  },
                  "examples": {
                    "type": "object",
                    "properties": {},
                    "title": "List of example values as key-value pairs",
                    "description": "List of example values as key-value pairs.",
                    "additionalProperties": {}
                  },
                  "x-wrtn-placeholder": {
                    "type": "string",
                    "title": "Placeholder value for frontend application",
                    "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                  },
                  "x-wrtn-prerequisite": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "jmesPath": {
                            "type": "string",
                            "title": "Function returning transformed values using JMESPath expression",
                            "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "jmesPath",
                          "method",
                          "path"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "label": {
                            "type": "string",
                            "title": "Transform function returning label",
                            "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                          },
                          "value": {
                            "type": "string",
                            "title": "Transform function returning target value",
                            "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                          },
                          "array": {
                            "type": "string",
                            "title": "Transform function returning array instance",
                            "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "label",
                          "value",
                          "method",
                          "path"
                        ]
                      }
                    ],
                    "title": "Prerequisite API endpoint for the schema",
                    "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                  }
                },
                "required": [
                  "type"
                ]
              },
              {
                "$ref": "#/components/schemas/__type.o77"
              },
              {
                "$ref": "#/components/schemas/__type.o78"
              },
              {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "title": "Title of the schema",
                    "description": "Title of the schema."
                  },
                  "description": {
                    "type": "string",
                    "title": "Detailed description of the schema",
                    "description": "Detailed description of the schema."
                  },
                  "deprecated": {
                    "type": "boolean",
                    "title": "Whether the type is deprecated or not",
                    "description": "Whether the type is deprecated or not."
                  },
                  "example": {
                    "title": "Example value",
                    "description": "Example value."
                  },
                  "examples": {
                    "type": "object",
                    "properties": {},
                    "title": "List of example values as key-value pairs",
                    "description": "List of example values as key-value pairs.",
                    "additionalProperties": {}
                  },
                  "x-wrtn-placeholder": {
                    "type": "string",
                    "title": "Placeholder value for frontend application",
                    "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                  },
                  "x-wrtn-prerequisite": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "jmesPath": {
                            "type": "string",
                            "title": "Function returning transformed values using JMESPath expression",
                            "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "jmesPath",
                          "method",
                          "path"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "label": {
                            "type": "string",
                            "title": "Transform function returning label",
                            "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                          },
                          "value": {
                            "type": "string",
                            "title": "Transform function returning target value",
                            "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                          },
                          "array": {
                            "type": "string",
                            "title": "Transform function returning array instance",
                            "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "label",
                          "value",
                          "method",
                          "path"
                        ]
                      }
                    ],
                    "title": "Prerequisite API endpoint for the schema",
                    "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "const": "null",
                    "title": "Type is always `null`",
                    "description": "Type is always `null`."
                  },
                  "default": {
                    "type": "null",
                    "title": "Default value",
                    "description": "Default value."
                  },
                  "title": {
                    "type": "string",
                    "title": "Title of the schema",
                    "description": "Title of the schema."
                  },
                  "description": {
                    "type": "string",
                    "title": "Detailed description of the schema",
                    "description": "Detailed description of the schema."
                  },
                  "deprecated": {
                    "type": "boolean",
                    "title": "Whether the type is deprecated or not",
                    "description": "Whether the type is deprecated or not."
                  },
                  "example": {
                    "title": "Example value",
                    "description": "Example value."
                  },
                  "examples": {
                    "type": "object",
                    "properties": {},
                    "title": "List of example values as key-value pairs",
                    "description": "List of example values as key-value pairs.",
                    "additionalProperties": {}
                  },
                  "x-wrtn-placeholder": {
                    "type": "string",
                    "title": "Placeholder value for frontend application",
                    "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                  },
                  "x-wrtn-prerequisite": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "jmesPath": {
                            "type": "string",
                            "title": "Function returning transformed values using JMESPath expression",
                            "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "jmesPath",
                          "method",
                          "path"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "label": {
                            "type": "string",
                            "title": "Transform function returning label",
                            "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                          },
                          "value": {
                            "type": "string",
                            "title": "Transform function returning target value",
                            "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                          },
                          "array": {
                            "type": "string",
                            "title": "Transform function returning array instance",
                            "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "label",
                          "value",
                          "method",
                          "path"
                        ]
                      }
                    ],
                    "title": "Prerequisite API endpoint for the schema",
                    "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                  }
                },
                "required": [
                  "type"
                ]
              },
              {
                "$ref": "#/components/schemas/__type.o82"
              }
            ],
            "title": "Items type schema info",
            "description": "Items type schema info.\n\nThe `items` means the type of the array elements. In other words, it is\nthe type schema info of the `T` in the TypeScript array type `Array<T>`."
          },
          "minItems": {
            "type": "integer",
            "title": "Minimum items restriction",
            "description": "Minimum items restriction.\n\nRestriction of minumum number of items in the array."
          },
          "type": {
            "const": "array",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "uniqueItems": {
            "type": "boolean",
            "title": "Unique items restriction",
            "description": "Unique items restriction.\n\nIf this property value is `true`, target array must have unique items."
          },
          "maxItems": {
            "type": "integer",
            "title": "Maximum items restriction",
            "description": "Maximum items restriction.\n\nRestriction of maximum number of items in the array."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "type": "object",
            "properties": {},
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs.",
            "additionalProperties": {}
          },
          "nullable": {
            "type": "boolean",
            "title": "Whether to allow `null` value or not",
            "description": "Whether to allow `null` value or not."
          },
          "x-wrtn-placeholder": {
            "type": "string",
            "title": "Placeholder value for frontend application",
            "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
          },
          "x-wrtn-prerequisite": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "jmesPath": {
                    "type": "string",
                    "title": "Function returning transformed values using JMESPath expression",
                    "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                  },
                  "method": {
                    "oneOf": [
                      {
                        "const": "delete"
                      },
                      {
                        "const": "get"
                      },
                      {
                        "const": "patch"
                      },
                      {
                        "const": "post"
                      },
                      {
                        "const": "put"
                      }
                    ],
                    "title": "HTTP method to call the endpoint",
                    "description": "HTTP method to call the endpoint."
                  },
                  "path": {
                    "type": "string",
                    "title": "Path of the endpoint",
                    "description": "Path of the endpoint."
                  }
                },
                "required": [
                  "jmesPath",
                  "method",
                  "path"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "label": {
                    "type": "string",
                    "title": "Transform function returning label",
                    "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                  },
                  "value": {
                    "type": "string",
                    "title": "Transform function returning target value",
                    "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                  },
                  "array": {
                    "type": "string",
                    "title": "Transform function returning array instance",
                    "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                  },
                  "method": {
                    "oneOf": [
                      {
                        "const": "delete"
                      },
                      {
                        "const": "get"
                      },
                      {
                        "const": "patch"
                      },
                      {
                        "const": "post"
                      },
                      {
                        "const": "put"
                      }
                    ],
                    "title": "HTTP method to call the endpoint",
                    "description": "HTTP method to call the endpoint."
                  },
                  "path": {
                    "type": "string",
                    "title": "Path of the endpoint",
                    "description": "Path of the endpoint."
                  }
                },
                "required": [
                  "label",
                  "value",
                  "method",
                  "path"
                ]
              }
            ],
            "title": "Prerequisite API endpoint for the schema",
            "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
          }
        },
        "required": [
          "items",
          "type"
        ]
      },
      "__type.o78": {
        "type": "object",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/__type.o79",
            "title": "Properties of the object",
            "description": "Properties of the object.\n\nThe `properties` means a list of key-value pairs of the object's\nregular properties. The key is the name of the regular property,\nand the value is the type schema info.\n\nIf you need additional properties that is represented by dynamic key,\nyou can use the {@link additionalProperties} instead."
          },
          "additionalProperties": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "type": "object",
                "properties": {
                  "default": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "boolean"
                      }
                    ],
                    "title": "Default value",
                    "description": "Default value."
                  },
                  "enum": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "boolean"
                        }
                      ]
                    },
                    "title": "Enumeration values",
                    "description": "Enumeration values."
                  },
                  "type": {
                    "const": "boolean",
                    "title": "Discriminator value of the type",
                    "description": "Discriminator value of the type."
                  },
                  "nullable": {
                    "type": "boolean",
                    "title": "Whether to allow `null` value or not",
                    "description": "Whether to allow `null` value or not."
                  },
                  "title": {
                    "type": "string",
                    "title": "Title of the schema",
                    "description": "Title of the schema."
                  },
                  "description": {
                    "type": "string",
                    "title": "Detailed description of the schema",
                    "description": "Detailed description of the schema."
                  },
                  "deprecated": {
                    "type": "boolean",
                    "title": "Whether the type is deprecated or not",
                    "description": "Whether the type is deprecated or not."
                  },
                  "example": {
                    "title": "Example value",
                    "description": "Example value."
                  },
                  "examples": {
                    "type": "object",
                    "properties": {},
                    "title": "List of example values as key-value pairs",
                    "description": "List of example values as key-value pairs.",
                    "additionalProperties": {}
                  },
                  "x-wrtn-placeholder": {
                    "type": "string",
                    "title": "Placeholder value for frontend application",
                    "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                  },
                  "x-wrtn-prerequisite": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "jmesPath": {
                            "type": "string",
                            "title": "Function returning transformed values using JMESPath expression",
                            "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "jmesPath",
                          "method",
                          "path"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "label": {
                            "type": "string",
                            "title": "Transform function returning label",
                            "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                          },
                          "value": {
                            "type": "string",
                            "title": "Transform function returning target value",
                            "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                          },
                          "array": {
                            "type": "string",
                            "title": "Transform function returning array instance",
                            "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "label",
                          "value",
                          "method",
                          "path"
                        ]
                      }
                    ],
                    "title": "Prerequisite API endpoint for the schema",
                    "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                  }
                },
                "required": [
                  "type"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "default": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "integer"
                      }
                    ],
                    "title": "Default value",
                    "description": "Default value."
                  },
                  "enum": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "number"
                        }
                      ]
                    },
                    "title": "Enumeration values",
                    "description": "Enumeration values."
                  },
                  "minimum": {
                    "type": "integer",
                    "title": "Minimum value restriction",
                    "description": "Minimum value restriction."
                  },
                  "maximum": {
                    "type": "integer",
                    "title": "Maximum value restriction",
                    "description": "Maximum value restriction."
                  },
                  "exclusiveMinimum": {
                    "type": "boolean",
                    "title": "Exclusive minimum value restriction",
                    "description": "Exclusive minimum value restriction.\n\nFor reference, even though your Swagger document has defined the\n`exclusiveMinimum` value as `number`, it has been forcibly converted\nto `boolean` type, and assigns the numeric value to the\n{@link minimum} property in the {@link OpenApi} conversion."
                  },
                  "exclusiveMaximum": {
                    "type": "boolean",
                    "title": "Exclusive maximum value restriction",
                    "description": "Exclusive maximum value restriction.\n\nFor reference, even though your Swagger document has defined the\n`exclusiveMaximum` value as `number`, it has been forcibly converted\nto `boolean` type, and assigns the numeric value to the\n{@link maximum} property in the {@link OpenApi} conversion."
                  },
                  "multipleOf": {
                    "type": "integer",
                    "exclusiveMinimum": true,
                    "minimum": 0,
                    "title": "Multiple of value restriction",
                    "description": "Multiple of value restriction."
                  },
                  "type": {
                    "const": "integer",
                    "title": "Discriminator value of the type",
                    "description": "Discriminator value of the type."
                  },
                  "nullable": {
                    "type": "boolean",
                    "title": "Whether to allow `null` value or not",
                    "description": "Whether to allow `null` value or not."
                  },
                  "title": {
                    "type": "string",
                    "title": "Title of the schema",
                    "description": "Title of the schema."
                  },
                  "description": {
                    "type": "string",
                    "title": "Detailed description of the schema",
                    "description": "Detailed description of the schema."
                  },
                  "deprecated": {
                    "type": "boolean",
                    "title": "Whether the type is deprecated or not",
                    "description": "Whether the type is deprecated or not."
                  },
                  "example": {
                    "title": "Example value",
                    "description": "Example value."
                  },
                  "examples": {
                    "type": "object",
                    "properties": {},
                    "title": "List of example values as key-value pairs",
                    "description": "List of example values as key-value pairs.",
                    "additionalProperties": {}
                  },
                  "x-wrtn-placeholder": {
                    "type": "string",
                    "title": "Placeholder value for frontend application",
                    "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                  },
                  "x-wrtn-prerequisite": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "jmesPath": {
                            "type": "string",
                            "title": "Function returning transformed values using JMESPath expression",
                            "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "jmesPath",
                          "method",
                          "path"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "label": {
                            "type": "string",
                            "title": "Transform function returning label",
                            "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                          },
                          "value": {
                            "type": "string",
                            "title": "Transform function returning target value",
                            "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                          },
                          "array": {
                            "type": "string",
                            "title": "Transform function returning array instance",
                            "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "label",
                          "value",
                          "method",
                          "path"
                        ]
                      }
                    ],
                    "title": "Prerequisite API endpoint for the schema",
                    "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                  }
                },
                "required": [
                  "type"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "default": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "number"
                      }
                    ],
                    "title": "Default value",
                    "description": "Default value."
                  },
                  "enum": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "number"
                        }
                      ]
                    },
                    "title": "Enumeration values",
                    "description": "Enumeration values."
                  },
                  "minimum": {
                    "type": "number",
                    "title": "Minimum value restriction",
                    "description": "Minimum value restriction."
                  },
                  "maximum": {
                    "type": "number",
                    "title": "Maximum value restriction",
                    "description": "Maximum value restriction."
                  },
                  "exclusiveMinimum": {
                    "type": "boolean",
                    "title": "Exclusive minimum value restriction",
                    "description": "Exclusive minimum value restriction.\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined the `exclusiveMinimum` value as `number`, {@link OpenAiComposer}\nforcibly converts it to `boolean` type, and assign the numeric value to\nthe {@link minimum} property."
                  },
                  "exclusiveMaximum": {
                    "type": "boolean",
                    "title": "Exclusive maximum value restriction",
                    "description": "Exclusive maximum value restriction.\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined the `exclusiveMaximum` value as `number`, {@link OpenAiComposer}\nforcibly converts it to `boolean` type, and assign the numeric value to\nthe {@link maximum} property."
                  },
                  "multipleOf": {
                    "type": "number",
                    "exclusiveMinimum": true,
                    "minimum": 0,
                    "title": "Multiple of value restriction",
                    "description": "Multiple of value restriction."
                  },
                  "type": {
                    "const": "number",
                    "title": "Discriminator value of the type",
                    "description": "Discriminator value of the type."
                  },
                  "nullable": {
                    "type": "boolean",
                    "title": "Whether to allow `null` value or not",
                    "description": "Whether to allow `null` value or not."
                  },
                  "title": {
                    "type": "string",
                    "title": "Title of the schema",
                    "description": "Title of the schema."
                  },
                  "description": {
                    "type": "string",
                    "title": "Detailed description of the schema",
                    "description": "Detailed description of the schema."
                  },
                  "deprecated": {
                    "type": "boolean",
                    "title": "Whether the type is deprecated or not",
                    "description": "Whether the type is deprecated or not."
                  },
                  "example": {
                    "title": "Example value",
                    "description": "Example value."
                  },
                  "examples": {
                    "type": "object",
                    "properties": {},
                    "title": "List of example values as key-value pairs",
                    "description": "List of example values as key-value pairs.",
                    "additionalProperties": {}
                  },
                  "x-wrtn-placeholder": {
                    "type": "string",
                    "title": "Placeholder value for frontend application",
                    "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                  },
                  "x-wrtn-prerequisite": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "jmesPath": {
                            "type": "string",
                            "title": "Function returning transformed values using JMESPath expression",
                            "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "jmesPath",
                          "method",
                          "path"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "label": {
                            "type": "string",
                            "title": "Transform function returning label",
                            "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                          },
                          "value": {
                            "type": "string",
                            "title": "Transform function returning target value",
                            "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                          },
                          "array": {
                            "type": "string",
                            "title": "Transform function returning array instance",
                            "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "label",
                          "value",
                          "method",
                          "path"
                        ]
                      }
                    ],
                    "title": "Prerequisite API endpoint for the schema",
                    "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                  }
                },
                "required": [
                  "type"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "x-wrtn-secret-key": {
                    "type": "string",
                    "title": "Secret key for the schema",
                    "description": "Secret key for the schema.\n\n`x-wrtn-secret-key` is a property means a secret key that is required\nfor the target API endpoint calling. If the secret key is not filled,\nthe API call would be failed."
                  },
                  "x-wrtn-secret-scopes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "title": "Secret scopes for the schema",
                    "description": "Secret scopes for the schema.\n\n`x-wrtn-secret-scopes` is a property means a list of secret scopes that\nare required for the target API endpoint calling. If the secret scopes\nare not satisfied, the API call would be failed."
                  },
                  "default": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "string"
                      }
                    ],
                    "title": "Default value",
                    "description": "Default value."
                  },
                  "enum": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "title": "Enumeration values",
                    "description": "Enumeration values."
                  },
                  "format": {
                    "type": "string",
                    "title": "Format restriction",
                    "description": "Format restriction."
                  },
                  "pattern": {
                    "type": "string",
                    "title": "Pattern restriction",
                    "description": "Pattern restriction."
                  },
                  "minLength": {
                    "type": "integer",
                    "title": "Minimum length restriction",
                    "description": "Minimum length restriction."
                  },
                  "maxLength": {
                    "type": "integer",
                    "title": "Maximum length restriction",
                    "description": "Maximum length restriction."
                  },
                  "contentMediaType": {
                    "type": "string",
                    "title": "Content media type restriction",
                    "description": "Content media type restriction."
                  },
                  "type": {
                    "const": "string",
                    "title": "Discriminator value of the type",
                    "description": "Discriminator value of the type."
                  },
                  "nullable": {
                    "type": "boolean",
                    "title": "Whether to allow `null` value or not",
                    "description": "Whether to allow `null` value or not."
                  },
                  "title": {
                    "type": "string",
                    "title": "Title of the schema",
                    "description": "Title of the schema."
                  },
                  "description": {
                    "type": "string",
                    "title": "Detailed description of the schema",
                    "description": "Detailed description of the schema."
                  },
                  "deprecated": {
                    "type": "boolean",
                    "title": "Whether the type is deprecated or not",
                    "description": "Whether the type is deprecated or not."
                  },
                  "example": {
                    "title": "Example value",
                    "description": "Example value."
                  },
                  "examples": {
                    "type": "object",
                    "properties": {},
                    "title": "List of example values as key-value pairs",
                    "description": "List of example values as key-value pairs.",
                    "additionalProperties": {}
                  },
                  "x-wrtn-placeholder": {
                    "type": "string",
                    "title": "Placeholder value for frontend application",
                    "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                  },
                  "x-wrtn-prerequisite": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "jmesPath": {
                            "type": "string",
                            "title": "Function returning transformed values using JMESPath expression",
                            "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "jmesPath",
                          "method",
                          "path"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "label": {
                            "type": "string",
                            "title": "Transform function returning label",
                            "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                          },
                          "value": {
                            "type": "string",
                            "title": "Transform function returning target value",
                            "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                          },
                          "array": {
                            "type": "string",
                            "title": "Transform function returning array instance",
                            "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "label",
                          "value",
                          "method",
                          "path"
                        ]
                      }
                    ],
                    "title": "Prerequisite API endpoint for the schema",
                    "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                  }
                },
                "required": [
                  "type"
                ]
              },
              {
                "$ref": "#/components/schemas/__type.o77"
              },
              {
                "$ref": "#/components/schemas/__type.o78"
              },
              {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "title": "Title of the schema",
                    "description": "Title of the schema."
                  },
                  "description": {
                    "type": "string",
                    "title": "Detailed description of the schema",
                    "description": "Detailed description of the schema."
                  },
                  "deprecated": {
                    "type": "boolean",
                    "title": "Whether the type is deprecated or not",
                    "description": "Whether the type is deprecated or not."
                  },
                  "example": {
                    "title": "Example value",
                    "description": "Example value."
                  },
                  "examples": {
                    "type": "object",
                    "properties": {},
                    "title": "List of example values as key-value pairs",
                    "description": "List of example values as key-value pairs.",
                    "additionalProperties": {}
                  },
                  "x-wrtn-placeholder": {
                    "type": "string",
                    "title": "Placeholder value for frontend application",
                    "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                  },
                  "x-wrtn-prerequisite": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "jmesPath": {
                            "type": "string",
                            "title": "Function returning transformed values using JMESPath expression",
                            "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "jmesPath",
                          "method",
                          "path"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "label": {
                            "type": "string",
                            "title": "Transform function returning label",
                            "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                          },
                          "value": {
                            "type": "string",
                            "title": "Transform function returning target value",
                            "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                          },
                          "array": {
                            "type": "string",
                            "title": "Transform function returning array instance",
                            "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "label",
                          "value",
                          "method",
                          "path"
                        ]
                      }
                    ],
                    "title": "Prerequisite API endpoint for the schema",
                    "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "const": "null",
                    "title": "Type is always `null`",
                    "description": "Type is always `null`."
                  },
                  "default": {
                    "type": "null",
                    "title": "Default value",
                    "description": "Default value."
                  },
                  "title": {
                    "type": "string",
                    "title": "Title of the schema",
                    "description": "Title of the schema."
                  },
                  "description": {
                    "type": "string",
                    "title": "Detailed description of the schema",
                    "description": "Detailed description of the schema."
                  },
                  "deprecated": {
                    "type": "boolean",
                    "title": "Whether the type is deprecated or not",
                    "description": "Whether the type is deprecated or not."
                  },
                  "example": {
                    "title": "Example value",
                    "description": "Example value."
                  },
                  "examples": {
                    "type": "object",
                    "properties": {},
                    "title": "List of example values as key-value pairs",
                    "description": "List of example values as key-value pairs.",
                    "additionalProperties": {}
                  },
                  "x-wrtn-placeholder": {
                    "type": "string",
                    "title": "Placeholder value for frontend application",
                    "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                  },
                  "x-wrtn-prerequisite": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "jmesPath": {
                            "type": "string",
                            "title": "Function returning transformed values using JMESPath expression",
                            "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "jmesPath",
                          "method",
                          "path"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "label": {
                            "type": "string",
                            "title": "Transform function returning label",
                            "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                          },
                          "value": {
                            "type": "string",
                            "title": "Transform function returning target value",
                            "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                          },
                          "array": {
                            "type": "string",
                            "title": "Transform function returning array instance",
                            "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                          },
                          "method": {
                            "oneOf": [
                              {
                                "const": "delete"
                              },
                              {
                                "const": "get"
                              },
                              {
                                "const": "patch"
                              },
                              {
                                "const": "post"
                              },
                              {
                                "const": "put"
                              }
                            ],
                            "title": "HTTP method to call the endpoint",
                            "description": "HTTP method to call the endpoint."
                          },
                          "path": {
                            "type": "string",
                            "title": "Path of the endpoint",
                            "description": "Path of the endpoint."
                          }
                        },
                        "required": [
                          "label",
                          "value",
                          "method",
                          "path"
                        ]
                      }
                    ],
                    "title": "Prerequisite API endpoint for the schema",
                    "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                  }
                },
                "required": [
                  "type"
                ]
              },
              {
                "$ref": "#/components/schemas/__type.o82"
              }
            ],
            "title": "Additional properties' info",
            "description": "Additional properties' info.\n\nThe `additionalProperties` means the type schema info of the additional\nproperties that are not listed in the {@link properties}.\n\nIf the value is `true`, it means that the additional properties are not\nrestricted. They can be any type. Otherwise, if the value is\n{@link ILlmSchema} type, it means that the additional properties must\nfollow the type schema info.\n\n- `true`: `Record<string, any>`\n- `ILlmSchema`: `Record<string, T>`"
          },
          "type": {
            "const": "object",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "required": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "List of key values of the required properties",
            "description": "List of key values of the required properties.\n\nThe `required` means a list of the key values of the required\n{@link properties}. If some property key is not listed in the `required`\nlist, it means that property is optional. Otherwise some property key\nexists in the `required` list, it means that the property must be filled.\n\nBelow is an example of the {@link properties} and `required`.\n\n```typescript\ninterface SomeObject {\n  id: string;\n  email: string;\n  name?: string;\n}\n```\n\nAs you can see, `id` and `email` {@link properties} are {@link required},\nso that they are listed in the `required` list.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": { \"type\": \"string\" },\n    \"email\": { \"type\": \"string\" },\n    \"name\": { \"type\": \"string\" }\n  },\n  \"required\": [\"id\", \"email\"]\n}\n```"
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "type": "object",
            "properties": {},
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs.",
            "additionalProperties": {}
          },
          "nullable": {
            "type": "boolean",
            "title": "Whether to allow `null` value or not",
            "description": "Whether to allow `null` value or not."
          },
          "x-wrtn-placeholder": {
            "type": "string",
            "title": "Placeholder value for frontend application",
            "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
          },
          "x-wrtn-prerequisite": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "jmesPath": {
                    "type": "string",
                    "title": "Function returning transformed values using JMESPath expression",
                    "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                  },
                  "method": {
                    "oneOf": [
                      {
                        "const": "delete"
                      },
                      {
                        "const": "get"
                      },
                      {
                        "const": "patch"
                      },
                      {
                        "const": "post"
                      },
                      {
                        "const": "put"
                      }
                    ],
                    "title": "HTTP method to call the endpoint",
                    "description": "HTTP method to call the endpoint."
                  },
                  "path": {
                    "type": "string",
                    "title": "Path of the endpoint",
                    "description": "Path of the endpoint."
                  }
                },
                "required": [
                  "jmesPath",
                  "method",
                  "path"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "label": {
                    "type": "string",
                    "title": "Transform function returning label",
                    "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                  },
                  "value": {
                    "type": "string",
                    "title": "Transform function returning target value",
                    "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                  },
                  "array": {
                    "type": "string",
                    "title": "Transform function returning array instance",
                    "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                  },
                  "method": {
                    "oneOf": [
                      {
                        "const": "delete"
                      },
                      {
                        "const": "get"
                      },
                      {
                        "const": "patch"
                      },
                      {
                        "const": "post"
                      },
                      {
                        "const": "put"
                      }
                    ],
                    "title": "HTTP method to call the endpoint",
                    "description": "HTTP method to call the endpoint."
                  },
                  "path": {
                    "type": "string",
                    "title": "Path of the endpoint",
                    "description": "Path of the endpoint."
                  }
                },
                "required": [
                  "label",
                  "value",
                  "method",
                  "path"
                ]
              }
            ],
            "title": "Prerequisite API endpoint for the schema",
            "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
          }
        },
        "required": [
          "type"
        ]
      },
      "__type.o79": {
        "type": "object",
        "properties": {},
        "additionalProperties": {
          "oneOf": [
            {
              "type": "object",
              "properties": {
                "default": {
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "type": "boolean"
                    }
                  ],
                  "title": "Default value",
                  "description": "Default value."
                },
                "enum": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "boolean"
                      }
                    ]
                  },
                  "title": "Enumeration values",
                  "description": "Enumeration values."
                },
                "type": {
                  "const": "boolean",
                  "title": "Discriminator value of the type",
                  "description": "Discriminator value of the type."
                },
                "nullable": {
                  "type": "boolean",
                  "title": "Whether to allow `null` value or not",
                  "description": "Whether to allow `null` value or not."
                },
                "title": {
                  "type": "string",
                  "title": "Title of the schema",
                  "description": "Title of the schema."
                },
                "description": {
                  "type": "string",
                  "title": "Detailed description of the schema",
                  "description": "Detailed description of the schema."
                },
                "deprecated": {
                  "type": "boolean",
                  "title": "Whether the type is deprecated or not",
                  "description": "Whether the type is deprecated or not."
                },
                "example": {
                  "title": "Example value",
                  "description": "Example value."
                },
                "examples": {
                  "type": "object",
                  "properties": {},
                  "title": "List of example values as key-value pairs",
                  "description": "List of example values as key-value pairs.",
                  "additionalProperties": {}
                },
                "x-wrtn-placeholder": {
                  "type": "string",
                  "title": "Placeholder value for frontend application",
                  "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                },
                "x-wrtn-prerequisite": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "jmesPath": {
                          "type": "string",
                          "title": "Function returning transformed values using JMESPath expression",
                          "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                        },
                        "method": {
                          "oneOf": [
                            {
                              "const": "delete"
                            },
                            {
                              "const": "get"
                            },
                            {
                              "const": "patch"
                            },
                            {
                              "const": "post"
                            },
                            {
                              "const": "put"
                            }
                          ],
                          "title": "HTTP method to call the endpoint",
                          "description": "HTTP method to call the endpoint."
                        },
                        "path": {
                          "type": "string",
                          "title": "Path of the endpoint",
                          "description": "Path of the endpoint."
                        }
                      },
                      "required": [
                        "jmesPath",
                        "method",
                        "path"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "label": {
                          "type": "string",
                          "title": "Transform function returning label",
                          "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                        },
                        "value": {
                          "type": "string",
                          "title": "Transform function returning target value",
                          "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                        },
                        "array": {
                          "type": "string",
                          "title": "Transform function returning array instance",
                          "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                        },
                        "method": {
                          "oneOf": [
                            {
                              "const": "delete"
                            },
                            {
                              "const": "get"
                            },
                            {
                              "const": "patch"
                            },
                            {
                              "const": "post"
                            },
                            {
                              "const": "put"
                            }
                          ],
                          "title": "HTTP method to call the endpoint",
                          "description": "HTTP method to call the endpoint."
                        },
                        "path": {
                          "type": "string",
                          "title": "Path of the endpoint",
                          "description": "Path of the endpoint."
                        }
                      },
                      "required": [
                        "label",
                        "value",
                        "method",
                        "path"
                      ]
                    }
                  ],
                  "title": "Prerequisite API endpoint for the schema",
                  "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                }
              },
              "required": [
                "type"
              ]
            },
            {
              "type": "object",
              "properties": {
                "default": {
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "type": "integer"
                    }
                  ],
                  "title": "Default value",
                  "description": "Default value."
                },
                "enum": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "number"
                      }
                    ]
                  },
                  "title": "Enumeration values",
                  "description": "Enumeration values."
                },
                "minimum": {
                  "type": "integer",
                  "title": "Minimum value restriction",
                  "description": "Minimum value restriction."
                },
                "maximum": {
                  "type": "integer",
                  "title": "Maximum value restriction",
                  "description": "Maximum value restriction."
                },
                "exclusiveMinimum": {
                  "type": "boolean",
                  "title": "Exclusive minimum value restriction",
                  "description": "Exclusive minimum value restriction.\n\nFor reference, even though your Swagger document has defined the\n`exclusiveMinimum` value as `number`, it has been forcibly converted\nto `boolean` type, and assigns the numeric value to the\n{@link minimum} property in the {@link OpenApi} conversion."
                },
                "exclusiveMaximum": {
                  "type": "boolean",
                  "title": "Exclusive maximum value restriction",
                  "description": "Exclusive maximum value restriction.\n\nFor reference, even though your Swagger document has defined the\n`exclusiveMaximum` value as `number`, it has been forcibly converted\nto `boolean` type, and assigns the numeric value to the\n{@link maximum} property in the {@link OpenApi} conversion."
                },
                "multipleOf": {
                  "type": "integer",
                  "exclusiveMinimum": true,
                  "minimum": 0,
                  "title": "Multiple of value restriction",
                  "description": "Multiple of value restriction."
                },
                "type": {
                  "const": "integer",
                  "title": "Discriminator value of the type",
                  "description": "Discriminator value of the type."
                },
                "nullable": {
                  "type": "boolean",
                  "title": "Whether to allow `null` value or not",
                  "description": "Whether to allow `null` value or not."
                },
                "title": {
                  "type": "string",
                  "title": "Title of the schema",
                  "description": "Title of the schema."
                },
                "description": {
                  "type": "string",
                  "title": "Detailed description of the schema",
                  "description": "Detailed description of the schema."
                },
                "deprecated": {
                  "type": "boolean",
                  "title": "Whether the type is deprecated or not",
                  "description": "Whether the type is deprecated or not."
                },
                "example": {
                  "title": "Example value",
                  "description": "Example value."
                },
                "examples": {
                  "type": "object",
                  "properties": {},
                  "title": "List of example values as key-value pairs",
                  "description": "List of example values as key-value pairs.",
                  "additionalProperties": {}
                },
                "x-wrtn-placeholder": {
                  "type": "string",
                  "title": "Placeholder value for frontend application",
                  "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                },
                "x-wrtn-prerequisite": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "jmesPath": {
                          "type": "string",
                          "title": "Function returning transformed values using JMESPath expression",
                          "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                        },
                        "method": {
                          "oneOf": [
                            {
                              "const": "delete"
                            },
                            {
                              "const": "get"
                            },
                            {
                              "const": "patch"
                            },
                            {
                              "const": "post"
                            },
                            {
                              "const": "put"
                            }
                          ],
                          "title": "HTTP method to call the endpoint",
                          "description": "HTTP method to call the endpoint."
                        },
                        "path": {
                          "type": "string",
                          "title": "Path of the endpoint",
                          "description": "Path of the endpoint."
                        }
                      },
                      "required": [
                        "jmesPath",
                        "method",
                        "path"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "label": {
                          "type": "string",
                          "title": "Transform function returning label",
                          "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                        },
                        "value": {
                          "type": "string",
                          "title": "Transform function returning target value",
                          "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                        },
                        "array": {
                          "type": "string",
                          "title": "Transform function returning array instance",
                          "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                        },
                        "method": {
                          "oneOf": [
                            {
                              "const": "delete"
                            },
                            {
                              "const": "get"
                            },
                            {
                              "const": "patch"
                            },
                            {
                              "const": "post"
                            },
                            {
                              "const": "put"
                            }
                          ],
                          "title": "HTTP method to call the endpoint",
                          "description": "HTTP method to call the endpoint."
                        },
                        "path": {
                          "type": "string",
                          "title": "Path of the endpoint",
                          "description": "Path of the endpoint."
                        }
                      },
                      "required": [
                        "label",
                        "value",
                        "method",
                        "path"
                      ]
                    }
                  ],
                  "title": "Prerequisite API endpoint for the schema",
                  "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                }
              },
              "required": [
                "type"
              ]
            },
            {
              "type": "object",
              "properties": {
                "default": {
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "type": "number"
                    }
                  ],
                  "title": "Default value",
                  "description": "Default value."
                },
                "enum": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "number"
                      }
                    ]
                  },
                  "title": "Enumeration values",
                  "description": "Enumeration values."
                },
                "minimum": {
                  "type": "number",
                  "title": "Minimum value restriction",
                  "description": "Minimum value restriction."
                },
                "maximum": {
                  "type": "number",
                  "title": "Maximum value restriction",
                  "description": "Maximum value restriction."
                },
                "exclusiveMinimum": {
                  "type": "boolean",
                  "title": "Exclusive minimum value restriction",
                  "description": "Exclusive minimum value restriction.\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined the `exclusiveMinimum` value as `number`, {@link OpenAiComposer}\nforcibly converts it to `boolean` type, and assign the numeric value to\nthe {@link minimum} property."
                },
                "exclusiveMaximum": {
                  "type": "boolean",
                  "title": "Exclusive maximum value restriction",
                  "description": "Exclusive maximum value restriction.\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined the `exclusiveMaximum` value as `number`, {@link OpenAiComposer}\nforcibly converts it to `boolean` type, and assign the numeric value to\nthe {@link maximum} property."
                },
                "multipleOf": {
                  "type": "number",
                  "exclusiveMinimum": true,
                  "minimum": 0,
                  "title": "Multiple of value restriction",
                  "description": "Multiple of value restriction."
                },
                "type": {
                  "const": "number",
                  "title": "Discriminator value of the type",
                  "description": "Discriminator value of the type."
                },
                "nullable": {
                  "type": "boolean",
                  "title": "Whether to allow `null` value or not",
                  "description": "Whether to allow `null` value or not."
                },
                "title": {
                  "type": "string",
                  "title": "Title of the schema",
                  "description": "Title of the schema."
                },
                "description": {
                  "type": "string",
                  "title": "Detailed description of the schema",
                  "description": "Detailed description of the schema."
                },
                "deprecated": {
                  "type": "boolean",
                  "title": "Whether the type is deprecated or not",
                  "description": "Whether the type is deprecated or not."
                },
                "example": {
                  "title": "Example value",
                  "description": "Example value."
                },
                "examples": {
                  "type": "object",
                  "properties": {},
                  "title": "List of example values as key-value pairs",
                  "description": "List of example values as key-value pairs.",
                  "additionalProperties": {}
                },
                "x-wrtn-placeholder": {
                  "type": "string",
                  "title": "Placeholder value for frontend application",
                  "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                },
                "x-wrtn-prerequisite": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "jmesPath": {
                          "type": "string",
                          "title": "Function returning transformed values using JMESPath expression",
                          "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                        },
                        "method": {
                          "oneOf": [
                            {
                              "const": "delete"
                            },
                            {
                              "const": "get"
                            },
                            {
                              "const": "patch"
                            },
                            {
                              "const": "post"
                            },
                            {
                              "const": "put"
                            }
                          ],
                          "title": "HTTP method to call the endpoint",
                          "description": "HTTP method to call the endpoint."
                        },
                        "path": {
                          "type": "string",
                          "title": "Path of the endpoint",
                          "description": "Path of the endpoint."
                        }
                      },
                      "required": [
                        "jmesPath",
                        "method",
                        "path"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "label": {
                          "type": "string",
                          "title": "Transform function returning label",
                          "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                        },
                        "value": {
                          "type": "string",
                          "title": "Transform function returning target value",
                          "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                        },
                        "array": {
                          "type": "string",
                          "title": "Transform function returning array instance",
                          "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                        },
                        "method": {
                          "oneOf": [
                            {
                              "const": "delete"
                            },
                            {
                              "const": "get"
                            },
                            {
                              "const": "patch"
                            },
                            {
                              "const": "post"
                            },
                            {
                              "const": "put"
                            }
                          ],
                          "title": "HTTP method to call the endpoint",
                          "description": "HTTP method to call the endpoint."
                        },
                        "path": {
                          "type": "string",
                          "title": "Path of the endpoint",
                          "description": "Path of the endpoint."
                        }
                      },
                      "required": [
                        "label",
                        "value",
                        "method",
                        "path"
                      ]
                    }
                  ],
                  "title": "Prerequisite API endpoint for the schema",
                  "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                }
              },
              "required": [
                "type"
              ]
            },
            {
              "type": "object",
              "properties": {
                "x-wrtn-secret-key": {
                  "type": "string",
                  "title": "Secret key for the schema",
                  "description": "Secret key for the schema.\n\n`x-wrtn-secret-key` is a property means a secret key that is required\nfor the target API endpoint calling. If the secret key is not filled,\nthe API call would be failed."
                },
                "x-wrtn-secret-scopes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "Secret scopes for the schema",
                  "description": "Secret scopes for the schema.\n\n`x-wrtn-secret-scopes` is a property means a list of secret scopes that\nare required for the target API endpoint calling. If the secret scopes\nare not satisfied, the API call would be failed."
                },
                "default": {
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "title": "Default value",
                  "description": "Default value."
                },
                "enum": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "title": "Enumeration values",
                  "description": "Enumeration values."
                },
                "format": {
                  "type": "string",
                  "title": "Format restriction",
                  "description": "Format restriction."
                },
                "pattern": {
                  "type": "string",
                  "title": "Pattern restriction",
                  "description": "Pattern restriction."
                },
                "minLength": {
                  "type": "integer",
                  "title": "Minimum length restriction",
                  "description": "Minimum length restriction."
                },
                "maxLength": {
                  "type": "integer",
                  "title": "Maximum length restriction",
                  "description": "Maximum length restriction."
                },
                "contentMediaType": {
                  "type": "string",
                  "title": "Content media type restriction",
                  "description": "Content media type restriction."
                },
                "type": {
                  "const": "string",
                  "title": "Discriminator value of the type",
                  "description": "Discriminator value of the type."
                },
                "nullable": {
                  "type": "boolean",
                  "title": "Whether to allow `null` value or not",
                  "description": "Whether to allow `null` value or not."
                },
                "title": {
                  "type": "string",
                  "title": "Title of the schema",
                  "description": "Title of the schema."
                },
                "description": {
                  "type": "string",
                  "title": "Detailed description of the schema",
                  "description": "Detailed description of the schema."
                },
                "deprecated": {
                  "type": "boolean",
                  "title": "Whether the type is deprecated or not",
                  "description": "Whether the type is deprecated or not."
                },
                "example": {
                  "title": "Example value",
                  "description": "Example value."
                },
                "examples": {
                  "type": "object",
                  "properties": {},
                  "title": "List of example values as key-value pairs",
                  "description": "List of example values as key-value pairs.",
                  "additionalProperties": {}
                },
                "x-wrtn-placeholder": {
                  "type": "string",
                  "title": "Placeholder value for frontend application",
                  "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                },
                "x-wrtn-prerequisite": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "jmesPath": {
                          "type": "string",
                          "title": "Function returning transformed values using JMESPath expression",
                          "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                        },
                        "method": {
                          "oneOf": [
                            {
                              "const": "delete"
                            },
                            {
                              "const": "get"
                            },
                            {
                              "const": "patch"
                            },
                            {
                              "const": "post"
                            },
                            {
                              "const": "put"
                            }
                          ],
                          "title": "HTTP method to call the endpoint",
                          "description": "HTTP method to call the endpoint."
                        },
                        "path": {
                          "type": "string",
                          "title": "Path of the endpoint",
                          "description": "Path of the endpoint."
                        }
                      },
                      "required": [
                        "jmesPath",
                        "method",
                        "path"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "label": {
                          "type": "string",
                          "title": "Transform function returning label",
                          "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                        },
                        "value": {
                          "type": "string",
                          "title": "Transform function returning target value",
                          "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                        },
                        "array": {
                          "type": "string",
                          "title": "Transform function returning array instance",
                          "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                        },
                        "method": {
                          "oneOf": [
                            {
                              "const": "delete"
                            },
                            {
                              "const": "get"
                            },
                            {
                              "const": "patch"
                            },
                            {
                              "const": "post"
                            },
                            {
                              "const": "put"
                            }
                          ],
                          "title": "HTTP method to call the endpoint",
                          "description": "HTTP method to call the endpoint."
                        },
                        "path": {
                          "type": "string",
                          "title": "Path of the endpoint",
                          "description": "Path of the endpoint."
                        }
                      },
                      "required": [
                        "label",
                        "value",
                        "method",
                        "path"
                      ]
                    }
                  ],
                  "title": "Prerequisite API endpoint for the schema",
                  "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                }
              },
              "required": [
                "type"
              ]
            },
            {
              "$ref": "#/components/schemas/__type.o77"
            },
            {
              "$ref": "#/components/schemas/__type.o78"
            },
            {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "title": "Title of the schema",
                  "description": "Title of the schema."
                },
                "description": {
                  "type": "string",
                  "title": "Detailed description of the schema",
                  "description": "Detailed description of the schema."
                },
                "deprecated": {
                  "type": "boolean",
                  "title": "Whether the type is deprecated or not",
                  "description": "Whether the type is deprecated or not."
                },
                "example": {
                  "title": "Example value",
                  "description": "Example value."
                },
                "examples": {
                  "type": "object",
                  "properties": {},
                  "title": "List of example values as key-value pairs",
                  "description": "List of example values as key-value pairs.",
                  "additionalProperties": {}
                },
                "x-wrtn-placeholder": {
                  "type": "string",
                  "title": "Placeholder value for frontend application",
                  "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                },
                "x-wrtn-prerequisite": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "jmesPath": {
                          "type": "string",
                          "title": "Function returning transformed values using JMESPath expression",
                          "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                        },
                        "method": {
                          "oneOf": [
                            {
                              "const": "delete"
                            },
                            {
                              "const": "get"
                            },
                            {
                              "const": "patch"
                            },
                            {
                              "const": "post"
                            },
                            {
                              "const": "put"
                            }
                          ],
                          "title": "HTTP method to call the endpoint",
                          "description": "HTTP method to call the endpoint."
                        },
                        "path": {
                          "type": "string",
                          "title": "Path of the endpoint",
                          "description": "Path of the endpoint."
                        }
                      },
                      "required": [
                        "jmesPath",
                        "method",
                        "path"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "label": {
                          "type": "string",
                          "title": "Transform function returning label",
                          "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                        },
                        "value": {
                          "type": "string",
                          "title": "Transform function returning target value",
                          "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                        },
                        "array": {
                          "type": "string",
                          "title": "Transform function returning array instance",
                          "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                        },
                        "method": {
                          "oneOf": [
                            {
                              "const": "delete"
                            },
                            {
                              "const": "get"
                            },
                            {
                              "const": "patch"
                            },
                            {
                              "const": "post"
                            },
                            {
                              "const": "put"
                            }
                          ],
                          "title": "HTTP method to call the endpoint",
                          "description": "HTTP method to call the endpoint."
                        },
                        "path": {
                          "type": "string",
                          "title": "Path of the endpoint",
                          "description": "Path of the endpoint."
                        }
                      },
                      "required": [
                        "label",
                        "value",
                        "method",
                        "path"
                      ]
                    }
                  ],
                  "title": "Prerequisite API endpoint for the schema",
                  "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                }
              }
            },
            {
              "type": "object",
              "properties": {
                "type": {
                  "const": "null",
                  "title": "Type is always `null`",
                  "description": "Type is always `null`."
                },
                "default": {
                  "type": "null",
                  "title": "Default value",
                  "description": "Default value."
                },
                "title": {
                  "type": "string",
                  "title": "Title of the schema",
                  "description": "Title of the schema."
                },
                "description": {
                  "type": "string",
                  "title": "Detailed description of the schema",
                  "description": "Detailed description of the schema."
                },
                "deprecated": {
                  "type": "boolean",
                  "title": "Whether the type is deprecated or not",
                  "description": "Whether the type is deprecated or not."
                },
                "example": {
                  "title": "Example value",
                  "description": "Example value."
                },
                "examples": {
                  "type": "object",
                  "properties": {},
                  "title": "List of example values as key-value pairs",
                  "description": "List of example values as key-value pairs.",
                  "additionalProperties": {}
                },
                "x-wrtn-placeholder": {
                  "type": "string",
                  "title": "Placeholder value for frontend application",
                  "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                },
                "x-wrtn-prerequisite": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "jmesPath": {
                          "type": "string",
                          "title": "Function returning transformed values using JMESPath expression",
                          "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                        },
                        "method": {
                          "oneOf": [
                            {
                              "const": "delete"
                            },
                            {
                              "const": "get"
                            },
                            {
                              "const": "patch"
                            },
                            {
                              "const": "post"
                            },
                            {
                              "const": "put"
                            }
                          ],
                          "title": "HTTP method to call the endpoint",
                          "description": "HTTP method to call the endpoint."
                        },
                        "path": {
                          "type": "string",
                          "title": "Path of the endpoint",
                          "description": "Path of the endpoint."
                        }
                      },
                      "required": [
                        "jmesPath",
                        "method",
                        "path"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "label": {
                          "type": "string",
                          "title": "Transform function returning label",
                          "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                        },
                        "value": {
                          "type": "string",
                          "title": "Transform function returning target value",
                          "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                        },
                        "array": {
                          "type": "string",
                          "title": "Transform function returning array instance",
                          "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                        },
                        "method": {
                          "oneOf": [
                            {
                              "const": "delete"
                            },
                            {
                              "const": "get"
                            },
                            {
                              "const": "patch"
                            },
                            {
                              "const": "post"
                            },
                            {
                              "const": "put"
                            }
                          ],
                          "title": "HTTP method to call the endpoint",
                          "description": "HTTP method to call the endpoint."
                        },
                        "path": {
                          "type": "string",
                          "title": "Path of the endpoint",
                          "description": "Path of the endpoint."
                        }
                      },
                      "required": [
                        "label",
                        "value",
                        "method",
                        "path"
                      ]
                    }
                  ],
                  "title": "Prerequisite API endpoint for the schema",
                  "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                }
              },
              "required": [
                "type"
              ]
            },
            {
              "$ref": "#/components/schemas/__type.o82"
            }
          ]
        }
      },
      "__type.o82": {
        "type": "object",
        "properties": {
          "oneOf": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "default": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "boolean"
                        }
                      ],
                      "title": "Default value",
                      "description": "Default value."
                    },
                    "enum": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "null"
                          },
                          {
                            "type": "boolean"
                          }
                        ]
                      },
                      "title": "Enumeration values",
                      "description": "Enumeration values."
                    },
                    "type": {
                      "const": "boolean",
                      "title": "Discriminator value of the type",
                      "description": "Discriminator value of the type."
                    },
                    "nullable": {
                      "type": "boolean",
                      "title": "Whether to allow `null` value or not",
                      "description": "Whether to allow `null` value or not."
                    },
                    "title": {
                      "type": "string",
                      "title": "Title of the schema",
                      "description": "Title of the schema."
                    },
                    "description": {
                      "type": "string",
                      "title": "Detailed description of the schema",
                      "description": "Detailed description of the schema."
                    },
                    "deprecated": {
                      "type": "boolean",
                      "title": "Whether the type is deprecated or not",
                      "description": "Whether the type is deprecated or not."
                    },
                    "example": {
                      "title": "Example value",
                      "description": "Example value."
                    },
                    "examples": {
                      "type": "object",
                      "properties": {},
                      "title": "List of example values as key-value pairs",
                      "description": "List of example values as key-value pairs.",
                      "additionalProperties": {}
                    },
                    "x-wrtn-placeholder": {
                      "type": "string",
                      "title": "Placeholder value for frontend application",
                      "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                    },
                    "x-wrtn-prerequisite": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "jmesPath": {
                              "type": "string",
                              "title": "Function returning transformed values using JMESPath expression",
                              "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                            },
                            "method": {
                              "oneOf": [
                                {
                                  "const": "delete"
                                },
                                {
                                  "const": "get"
                                },
                                {
                                  "const": "patch"
                                },
                                {
                                  "const": "post"
                                },
                                {
                                  "const": "put"
                                }
                              ],
                              "title": "HTTP method to call the endpoint",
                              "description": "HTTP method to call the endpoint."
                            },
                            "path": {
                              "type": "string",
                              "title": "Path of the endpoint",
                              "description": "Path of the endpoint."
                            }
                          },
                          "required": [
                            "jmesPath",
                            "method",
                            "path"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "label": {
                              "type": "string",
                              "title": "Transform function returning label",
                              "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                            },
                            "value": {
                              "type": "string",
                              "title": "Transform function returning target value",
                              "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                            },
                            "array": {
                              "type": "string",
                              "title": "Transform function returning array instance",
                              "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                            },
                            "method": {
                              "oneOf": [
                                {
                                  "const": "delete"
                                },
                                {
                                  "const": "get"
                                },
                                {
                                  "const": "patch"
                                },
                                {
                                  "const": "post"
                                },
                                {
                                  "const": "put"
                                }
                              ],
                              "title": "HTTP method to call the endpoint",
                              "description": "HTTP method to call the endpoint."
                            },
                            "path": {
                              "type": "string",
                              "title": "Path of the endpoint",
                              "description": "Path of the endpoint."
                            }
                          },
                          "required": [
                            "label",
                            "value",
                            "method",
                            "path"
                          ]
                        }
                      ],
                      "title": "Prerequisite API endpoint for the schema",
                      "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                    }
                  },
                  "required": [
                    "type"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "default": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "integer"
                        }
                      ],
                      "title": "Default value",
                      "description": "Default value."
                    },
                    "enum": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "null"
                          },
                          {
                            "type": "number"
                          }
                        ]
                      },
                      "title": "Enumeration values",
                      "description": "Enumeration values."
                    },
                    "minimum": {
                      "type": "integer",
                      "title": "Minimum value restriction",
                      "description": "Minimum value restriction."
                    },
                    "maximum": {
                      "type": "integer",
                      "title": "Maximum value restriction",
                      "description": "Maximum value restriction."
                    },
                    "exclusiveMinimum": {
                      "type": "boolean",
                      "title": "Exclusive minimum value restriction",
                      "description": "Exclusive minimum value restriction.\n\nFor reference, even though your Swagger document has defined the\n`exclusiveMinimum` value as `number`, it has been forcibly converted\nto `boolean` type, and assigns the numeric value to the\n{@link minimum} property in the {@link OpenApi} conversion."
                    },
                    "exclusiveMaximum": {
                      "type": "boolean",
                      "title": "Exclusive maximum value restriction",
                      "description": "Exclusive maximum value restriction.\n\nFor reference, even though your Swagger document has defined the\n`exclusiveMaximum` value as `number`, it has been forcibly converted\nto `boolean` type, and assigns the numeric value to the\n{@link maximum} property in the {@link OpenApi} conversion."
                    },
                    "multipleOf": {
                      "type": "integer",
                      "exclusiveMinimum": true,
                      "minimum": 0,
                      "title": "Multiple of value restriction",
                      "description": "Multiple of value restriction."
                    },
                    "type": {
                      "const": "integer",
                      "title": "Discriminator value of the type",
                      "description": "Discriminator value of the type."
                    },
                    "nullable": {
                      "type": "boolean",
                      "title": "Whether to allow `null` value or not",
                      "description": "Whether to allow `null` value or not."
                    },
                    "title": {
                      "type": "string",
                      "title": "Title of the schema",
                      "description": "Title of the schema."
                    },
                    "description": {
                      "type": "string",
                      "title": "Detailed description of the schema",
                      "description": "Detailed description of the schema."
                    },
                    "deprecated": {
                      "type": "boolean",
                      "title": "Whether the type is deprecated or not",
                      "description": "Whether the type is deprecated or not."
                    },
                    "example": {
                      "title": "Example value",
                      "description": "Example value."
                    },
                    "examples": {
                      "type": "object",
                      "properties": {},
                      "title": "List of example values as key-value pairs",
                      "description": "List of example values as key-value pairs.",
                      "additionalProperties": {}
                    },
                    "x-wrtn-placeholder": {
                      "type": "string",
                      "title": "Placeholder value for frontend application",
                      "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                    },
                    "x-wrtn-prerequisite": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "jmesPath": {
                              "type": "string",
                              "title": "Function returning transformed values using JMESPath expression",
                              "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                            },
                            "method": {
                              "oneOf": [
                                {
                                  "const": "delete"
                                },
                                {
                                  "const": "get"
                                },
                                {
                                  "const": "patch"
                                },
                                {
                                  "const": "post"
                                },
                                {
                                  "const": "put"
                                }
                              ],
                              "title": "HTTP method to call the endpoint",
                              "description": "HTTP method to call the endpoint."
                            },
                            "path": {
                              "type": "string",
                              "title": "Path of the endpoint",
                              "description": "Path of the endpoint."
                            }
                          },
                          "required": [
                            "jmesPath",
                            "method",
                            "path"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "label": {
                              "type": "string",
                              "title": "Transform function returning label",
                              "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                            },
                            "value": {
                              "type": "string",
                              "title": "Transform function returning target value",
                              "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                            },
                            "array": {
                              "type": "string",
                              "title": "Transform function returning array instance",
                              "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                            },
                            "method": {
                              "oneOf": [
                                {
                                  "const": "delete"
                                },
                                {
                                  "const": "get"
                                },
                                {
                                  "const": "patch"
                                },
                                {
                                  "const": "post"
                                },
                                {
                                  "const": "put"
                                }
                              ],
                              "title": "HTTP method to call the endpoint",
                              "description": "HTTP method to call the endpoint."
                            },
                            "path": {
                              "type": "string",
                              "title": "Path of the endpoint",
                              "description": "Path of the endpoint."
                            }
                          },
                          "required": [
                            "label",
                            "value",
                            "method",
                            "path"
                          ]
                        }
                      ],
                      "title": "Prerequisite API endpoint for the schema",
                      "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                    }
                  },
                  "required": [
                    "type"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "default": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "title": "Default value",
                      "description": "Default value."
                    },
                    "enum": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "null"
                          },
                          {
                            "type": "number"
                          }
                        ]
                      },
                      "title": "Enumeration values",
                      "description": "Enumeration values."
                    },
                    "minimum": {
                      "type": "number",
                      "title": "Minimum value restriction",
                      "description": "Minimum value restriction."
                    },
                    "maximum": {
                      "type": "number",
                      "title": "Maximum value restriction",
                      "description": "Maximum value restriction."
                    },
                    "exclusiveMinimum": {
                      "type": "boolean",
                      "title": "Exclusive minimum value restriction",
                      "description": "Exclusive minimum value restriction.\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined the `exclusiveMinimum` value as `number`, {@link OpenAiComposer}\nforcibly converts it to `boolean` type, and assign the numeric value to\nthe {@link minimum} property."
                    },
                    "exclusiveMaximum": {
                      "type": "boolean",
                      "title": "Exclusive maximum value restriction",
                      "description": "Exclusive maximum value restriction.\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined the `exclusiveMaximum` value as `number`, {@link OpenAiComposer}\nforcibly converts it to `boolean` type, and assign the numeric value to\nthe {@link maximum} property."
                    },
                    "multipleOf": {
                      "type": "number",
                      "exclusiveMinimum": true,
                      "minimum": 0,
                      "title": "Multiple of value restriction",
                      "description": "Multiple of value restriction."
                    },
                    "type": {
                      "const": "number",
                      "title": "Discriminator value of the type",
                      "description": "Discriminator value of the type."
                    },
                    "nullable": {
                      "type": "boolean",
                      "title": "Whether to allow `null` value or not",
                      "description": "Whether to allow `null` value or not."
                    },
                    "title": {
                      "type": "string",
                      "title": "Title of the schema",
                      "description": "Title of the schema."
                    },
                    "description": {
                      "type": "string",
                      "title": "Detailed description of the schema",
                      "description": "Detailed description of the schema."
                    },
                    "deprecated": {
                      "type": "boolean",
                      "title": "Whether the type is deprecated or not",
                      "description": "Whether the type is deprecated or not."
                    },
                    "example": {
                      "title": "Example value",
                      "description": "Example value."
                    },
                    "examples": {
                      "type": "object",
                      "properties": {},
                      "title": "List of example values as key-value pairs",
                      "description": "List of example values as key-value pairs.",
                      "additionalProperties": {}
                    },
                    "x-wrtn-placeholder": {
                      "type": "string",
                      "title": "Placeholder value for frontend application",
                      "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                    },
                    "x-wrtn-prerequisite": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "jmesPath": {
                              "type": "string",
                              "title": "Function returning transformed values using JMESPath expression",
                              "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                            },
                            "method": {
                              "oneOf": [
                                {
                                  "const": "delete"
                                },
                                {
                                  "const": "get"
                                },
                                {
                                  "const": "patch"
                                },
                                {
                                  "const": "post"
                                },
                                {
                                  "const": "put"
                                }
                              ],
                              "title": "HTTP method to call the endpoint",
                              "description": "HTTP method to call the endpoint."
                            },
                            "path": {
                              "type": "string",
                              "title": "Path of the endpoint",
                              "description": "Path of the endpoint."
                            }
                          },
                          "required": [
                            "jmesPath",
                            "method",
                            "path"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "label": {
                              "type": "string",
                              "title": "Transform function returning label",
                              "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                            },
                            "value": {
                              "type": "string",
                              "title": "Transform function returning target value",
                              "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                            },
                            "array": {
                              "type": "string",
                              "title": "Transform function returning array instance",
                              "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                            },
                            "method": {
                              "oneOf": [
                                {
                                  "const": "delete"
                                },
                                {
                                  "const": "get"
                                },
                                {
                                  "const": "patch"
                                },
                                {
                                  "const": "post"
                                },
                                {
                                  "const": "put"
                                }
                              ],
                              "title": "HTTP method to call the endpoint",
                              "description": "HTTP method to call the endpoint."
                            },
                            "path": {
                              "type": "string",
                              "title": "Path of the endpoint",
                              "description": "Path of the endpoint."
                            }
                          },
                          "required": [
                            "label",
                            "value",
                            "method",
                            "path"
                          ]
                        }
                      ],
                      "title": "Prerequisite API endpoint for the schema",
                      "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                    }
                  },
                  "required": [
                    "type"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "x-wrtn-secret-key": {
                      "type": "string",
                      "title": "Secret key for the schema",
                      "description": "Secret key for the schema.\n\n`x-wrtn-secret-key` is a property means a secret key that is required\nfor the target API endpoint calling. If the secret key is not filled,\nthe API call would be failed."
                    },
                    "x-wrtn-secret-scopes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "title": "Secret scopes for the schema",
                      "description": "Secret scopes for the schema.\n\n`x-wrtn-secret-scopes` is a property means a list of secret scopes that\nare required for the target API endpoint calling. If the secret scopes\nare not satisfied, the API call would be failed."
                    },
                    "default": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "title": "Default value",
                      "description": "Default value."
                    },
                    "enum": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "null"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      },
                      "title": "Enumeration values",
                      "description": "Enumeration values."
                    },
                    "format": {
                      "type": "string",
                      "title": "Format restriction",
                      "description": "Format restriction."
                    },
                    "pattern": {
                      "type": "string",
                      "title": "Pattern restriction",
                      "description": "Pattern restriction."
                    },
                    "minLength": {
                      "type": "integer",
                      "title": "Minimum length restriction",
                      "description": "Minimum length restriction."
                    },
                    "maxLength": {
                      "type": "integer",
                      "title": "Maximum length restriction",
                      "description": "Maximum length restriction."
                    },
                    "contentMediaType": {
                      "type": "string",
                      "title": "Content media type restriction",
                      "description": "Content media type restriction."
                    },
                    "type": {
                      "const": "string",
                      "title": "Discriminator value of the type",
                      "description": "Discriminator value of the type."
                    },
                    "nullable": {
                      "type": "boolean",
                      "title": "Whether to allow `null` value or not",
                      "description": "Whether to allow `null` value or not."
                    },
                    "title": {
                      "type": "string",
                      "title": "Title of the schema",
                      "description": "Title of the schema."
                    },
                    "description": {
                      "type": "string",
                      "title": "Detailed description of the schema",
                      "description": "Detailed description of the schema."
                    },
                    "deprecated": {
                      "type": "boolean",
                      "title": "Whether the type is deprecated or not",
                      "description": "Whether the type is deprecated or not."
                    },
                    "example": {
                      "title": "Example value",
                      "description": "Example value."
                    },
                    "examples": {
                      "type": "object",
                      "properties": {},
                      "title": "List of example values as key-value pairs",
                      "description": "List of example values as key-value pairs.",
                      "additionalProperties": {}
                    },
                    "x-wrtn-placeholder": {
                      "type": "string",
                      "title": "Placeholder value for frontend application",
                      "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                    },
                    "x-wrtn-prerequisite": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "jmesPath": {
                              "type": "string",
                              "title": "Function returning transformed values using JMESPath expression",
                              "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                            },
                            "method": {
                              "oneOf": [
                                {
                                  "const": "delete"
                                },
                                {
                                  "const": "get"
                                },
                                {
                                  "const": "patch"
                                },
                                {
                                  "const": "post"
                                },
                                {
                                  "const": "put"
                                }
                              ],
                              "title": "HTTP method to call the endpoint",
                              "description": "HTTP method to call the endpoint."
                            },
                            "path": {
                              "type": "string",
                              "title": "Path of the endpoint",
                              "description": "Path of the endpoint."
                            }
                          },
                          "required": [
                            "jmesPath",
                            "method",
                            "path"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "label": {
                              "type": "string",
                              "title": "Transform function returning label",
                              "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                            },
                            "value": {
                              "type": "string",
                              "title": "Transform function returning target value",
                              "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                            },
                            "array": {
                              "type": "string",
                              "title": "Transform function returning array instance",
                              "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                            },
                            "method": {
                              "oneOf": [
                                {
                                  "const": "delete"
                                },
                                {
                                  "const": "get"
                                },
                                {
                                  "const": "patch"
                                },
                                {
                                  "const": "post"
                                },
                                {
                                  "const": "put"
                                }
                              ],
                              "title": "HTTP method to call the endpoint",
                              "description": "HTTP method to call the endpoint."
                            },
                            "path": {
                              "type": "string",
                              "title": "Path of the endpoint",
                              "description": "Path of the endpoint."
                            }
                          },
                          "required": [
                            "label",
                            "value",
                            "method",
                            "path"
                          ]
                        }
                      ],
                      "title": "Prerequisite API endpoint for the schema",
                      "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                    }
                  },
                  "required": [
                    "type"
                  ]
                },
                {
                  "$ref": "#/components/schemas/__type.o77"
                },
                {
                  "$ref": "#/components/schemas/__type.o78"
                },
                {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "title": "Title of the schema",
                      "description": "Title of the schema."
                    },
                    "description": {
                      "type": "string",
                      "title": "Detailed description of the schema",
                      "description": "Detailed description of the schema."
                    },
                    "deprecated": {
                      "type": "boolean",
                      "title": "Whether the type is deprecated or not",
                      "description": "Whether the type is deprecated or not."
                    },
                    "example": {
                      "title": "Example value",
                      "description": "Example value."
                    },
                    "examples": {
                      "type": "object",
                      "properties": {},
                      "title": "List of example values as key-value pairs",
                      "description": "List of example values as key-value pairs.",
                      "additionalProperties": {}
                    },
                    "x-wrtn-placeholder": {
                      "type": "string",
                      "title": "Placeholder value for frontend application",
                      "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                    },
                    "x-wrtn-prerequisite": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "jmesPath": {
                              "type": "string",
                              "title": "Function returning transformed values using JMESPath expression",
                              "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                            },
                            "method": {
                              "oneOf": [
                                {
                                  "const": "delete"
                                },
                                {
                                  "const": "get"
                                },
                                {
                                  "const": "patch"
                                },
                                {
                                  "const": "post"
                                },
                                {
                                  "const": "put"
                                }
                              ],
                              "title": "HTTP method to call the endpoint",
                              "description": "HTTP method to call the endpoint."
                            },
                            "path": {
                              "type": "string",
                              "title": "Path of the endpoint",
                              "description": "Path of the endpoint."
                            }
                          },
                          "required": [
                            "jmesPath",
                            "method",
                            "path"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "label": {
                              "type": "string",
                              "title": "Transform function returning label",
                              "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                            },
                            "value": {
                              "type": "string",
                              "title": "Transform function returning target value",
                              "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                            },
                            "array": {
                              "type": "string",
                              "title": "Transform function returning array instance",
                              "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                            },
                            "method": {
                              "oneOf": [
                                {
                                  "const": "delete"
                                },
                                {
                                  "const": "get"
                                },
                                {
                                  "const": "patch"
                                },
                                {
                                  "const": "post"
                                },
                                {
                                  "const": "put"
                                }
                              ],
                              "title": "HTTP method to call the endpoint",
                              "description": "HTTP method to call the endpoint."
                            },
                            "path": {
                              "type": "string",
                              "title": "Path of the endpoint",
                              "description": "Path of the endpoint."
                            }
                          },
                          "required": [
                            "label",
                            "value",
                            "method",
                            "path"
                          ]
                        }
                      ],
                      "title": "Prerequisite API endpoint for the schema",
                      "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "const": "null",
                      "title": "Type is always `null`",
                      "description": "Type is always `null`."
                    },
                    "default": {
                      "type": "null",
                      "title": "Default value",
                      "description": "Default value."
                    },
                    "title": {
                      "type": "string",
                      "title": "Title of the schema",
                      "description": "Title of the schema."
                    },
                    "description": {
                      "type": "string",
                      "title": "Detailed description of the schema",
                      "description": "Detailed description of the schema."
                    },
                    "deprecated": {
                      "type": "boolean",
                      "title": "Whether the type is deprecated or not",
                      "description": "Whether the type is deprecated or not."
                    },
                    "example": {
                      "title": "Example value",
                      "description": "Example value."
                    },
                    "examples": {
                      "type": "object",
                      "properties": {},
                      "title": "List of example values as key-value pairs",
                      "description": "List of example values as key-value pairs.",
                      "additionalProperties": {}
                    },
                    "x-wrtn-placeholder": {
                      "type": "string",
                      "title": "Placeholder value for frontend application",
                      "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
                    },
                    "x-wrtn-prerequisite": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "jmesPath": {
                              "type": "string",
                              "title": "Function returning transformed values using JMESPath expression",
                              "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                            },
                            "method": {
                              "oneOf": [
                                {
                                  "const": "delete"
                                },
                                {
                                  "const": "get"
                                },
                                {
                                  "const": "patch"
                                },
                                {
                                  "const": "post"
                                },
                                {
                                  "const": "put"
                                }
                              ],
                              "title": "HTTP method to call the endpoint",
                              "description": "HTTP method to call the endpoint."
                            },
                            "path": {
                              "type": "string",
                              "title": "Path of the endpoint",
                              "description": "Path of the endpoint."
                            }
                          },
                          "required": [
                            "jmesPath",
                            "method",
                            "path"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "label": {
                              "type": "string",
                              "title": "Transform function returning label",
                              "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                            },
                            "value": {
                              "type": "string",
                              "title": "Transform function returning target value",
                              "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                            },
                            "array": {
                              "type": "string",
                              "title": "Transform function returning array instance",
                              "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                            },
                            "method": {
                              "oneOf": [
                                {
                                  "const": "delete"
                                },
                                {
                                  "const": "get"
                                },
                                {
                                  "const": "patch"
                                },
                                {
                                  "const": "post"
                                },
                                {
                                  "const": "put"
                                }
                              ],
                              "title": "HTTP method to call the endpoint",
                              "description": "HTTP method to call the endpoint."
                            },
                            "path": {
                              "type": "string",
                              "title": "Path of the endpoint",
                              "description": "Path of the endpoint."
                            }
                          },
                          "required": [
                            "label",
                            "value",
                            "method",
                            "path"
                          ]
                        }
                      ],
                      "title": "Prerequisite API endpoint for the schema",
                      "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
                    }
                  },
                  "required": [
                    "type"
                  ]
                }
              ]
            },
            "title": "List of the union types",
            "description": "List of the union types."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "type": "object",
            "properties": {},
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs.",
            "additionalProperties": {}
          },
          "x-wrtn-placeholder": {
            "type": "string",
            "title": "Placeholder value for frontend application",
            "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
          },
          "x-wrtn-prerequisite": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "jmesPath": {
                    "type": "string",
                    "title": "Function returning transformed values using JMESPath expression",
                    "description": "Function returning transformed values using JMESPath expression.\n\n`Prerequisite.Props.jmesPath` is a string typed property that extracts desired values\nfrom the prerequisite API response using a JMESPath expression. This property simplifies\nand replaces the `label`, `value`, and `array` properties.\n\nJMESPath expressions are used to extract the desired data based on the API response.\nThe expression must always be a valid JMESPath syntax.\n\n- Type: `jmesPath: string`\n- Example: `\"members[*].data.title\"`\n- Usage: `jmespath.search(response, jmesPath)`\n\nNote: The `label`, `value`, and `array` properties are no longer in use."
                  },
                  "method": {
                    "oneOf": [
                      {
                        "const": "delete"
                      },
                      {
                        "const": "get"
                      },
                      {
                        "const": "patch"
                      },
                      {
                        "const": "post"
                      },
                      {
                        "const": "put"
                      }
                    ],
                    "title": "HTTP method to call the endpoint",
                    "description": "HTTP method to call the endpoint."
                  },
                  "path": {
                    "type": "string",
                    "title": "Path of the endpoint",
                    "description": "Path of the endpoint."
                  }
                },
                "required": [
                  "jmesPath",
                  "method",
                  "path"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "label": {
                    "type": "string",
                    "title": "Transform function returning label",
                    "description": "Transform function returning label.\n\n`Prerequisite.Props.label` is a string typed property representing\na function returning the label from the element instance of the\nprerequisite API respond array.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are\nalways `elem`, `index` and `array`. Of course, the function's\nreturn type must be always `string`.\n\n- type: `label: (elem: Element, index: number, array: Element[]) => string`\n- example: `return elem.title`\n- how to use: `new Function(\"elem\", \"index\", \"array\", labelScript)(...)`"
                  },
                  "value": {
                    "type": "string",
                    "title": "Transform function returning target value",
                    "description": "Transform function returning target value.\n\n`Prerequisite.Props.value` is a string typed property representing\na function returning the target value from the element instance of\nthe prerequisite API respond array. If you've defined this `Prerequisite`\ntype to a `number` type, the returned value must be actual number type.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter names are always\n`elem`, `index` and `array`.\n\n- type: `value: (elem: Element, index: number, array: Element[]) => Value`\n- example: `return elem.no`\n- how to use: `new Function(\"elem\", \"index\", \"array\", valueScript)(...)`"
                  },
                  "array": {
                    "type": "string",
                    "title": "Transform function returning array instance",
                    "description": "Transform function returning array instance.\n\n`Prerequisite.Props.array` is a string typed property representing\na function returning an array instance from the response of the\nprerequisite API.\n\nThe function script must be a string value that can be parsed by\n`new Function(string)` statement. Also, its parameter name is\nalways `response`.\n\nIf the prerequisite API responses an array and it is the desired one,\nyou don't need to specify this property.\n\n- type: `array: (response: Response) => Elemenet[]`\n- example: `return response.members.map(m => m.data)`\n- how to use: `new Function(\"response\", arrayScript)(response)`"
                  },
                  "method": {
                    "oneOf": [
                      {
                        "const": "delete"
                      },
                      {
                        "const": "get"
                      },
                      {
                        "const": "patch"
                      },
                      {
                        "const": "post"
                      },
                      {
                        "const": "put"
                      }
                    ],
                    "title": "HTTP method to call the endpoint",
                    "description": "HTTP method to call the endpoint."
                  },
                  "path": {
                    "type": "string",
                    "title": "Path of the endpoint",
                    "description": "Path of the endpoint."
                  }
                },
                "required": [
                  "label",
                  "value",
                  "method",
                  "path"
                ]
              }
            ],
            "title": "Prerequisite API endpoint for the schema",
            "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
          }
        },
        "required": [
          "oneOf"
        ]
      },
      "IStudioMetaChatSessionMessageData.IFillArgument": {
        "type": "object",
        "properties": {
          "function_id": {
            "type": "string",
            "format": "uuid",
            "title": "The {@link IStudioMetaChatFunctionCall.id} value of the target LLM Function Call",
            "description": "The {@link IStudioMetaChatFunctionCall.id} value of the target LLM Function Call."
          },
          "index": {
            "type": "number",
            "title": "Index number of the parameter to be configured",
            "description": "Index number of the parameter to be configured."
          },
          "schema": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IOpenAiSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/IOpenAiSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/IOpenAiSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/IOpenAiSchema.IString"
              },
              {
                "$ref": "#/components/schemas/IOpenAiSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/IOpenAiSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/IOpenAiSchema.IUnknown"
              },
              {
                "$ref": "#/components/schemas/IOpenAiSchema.INullOnly"
              },
              {
                "$ref": "#/components/schemas/IOpenAiSchema.IOneOf"
              }
            ],
            "title": "Schema information that the client must configure directly",
            "description": "Schema information that the client must configure directly."
          },
          "llm": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "properties": {
                  "schema": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/IOpenAiSchema.IBoolean"
                      },
                      {
                        "$ref": "#/components/schemas/IOpenAiSchema.IInteger"
                      },
                      {
                        "$ref": "#/components/schemas/IOpenAiSchema.INumber"
                      },
                      {
                        "$ref": "#/components/schemas/IOpenAiSchema.IString"
                      },
                      {
                        "$ref": "#/components/schemas/IOpenAiSchema.IArray"
                      },
                      {
                        "$ref": "#/components/schemas/IOpenAiSchema.IObject"
                      },
                      {
                        "$ref": "#/components/schemas/IOpenAiSchema.IUnknown"
                      },
                      {
                        "$ref": "#/components/schemas/IOpenAiSchema.INullOnly"
                      },
                      {
                        "$ref": "#/components/schemas/IOpenAiSchema.IOneOf"
                      }
                    ],
                    "title": "Schema information that LLM needs to configure",
                    "description": "Schema information that LLM needs to configure."
                  },
                  "value": {
                    "title": "The values that LLM actually composed",
                    "description": "The values that LLM actually composed."
                  }
                },
                "required": [
                  "schema",
                  "value"
                ]
              }
            ],
            "title": "LLM's self-constructed schema and value information",
            "description": "LLM's self-constructed schema and value information.\n\nIf this value is `null`, it must be constructed by a human with 100% purity."
          },
          "kind": {
            "const": "fillArgument",
            "title": "Type of data",
            "description": "Type of data."
          },
          "reaction": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IExecutionResult.IFailure"
              },
              {
                "$ref": "#/components/schemas/IExecutionResult.ISuccessany"
              }
            ],
            "title": "The return value of the target RPC function",
            "description": "The return value of the target RPC function.\n\nWhen calling an RPC function from a server to a client, it is the return value of the client function,\nand when calling an RPC function from a client to a server, it is the return value of the server function.\n\nHowever, since the function call is not always successful, an error may have occurred instead of the return value,\nso {@link IExecutionResult}, which corresponds to the union type of returned value and thrown exception, was used.\n\n> The original attribute name `return` is semantically correct, but it was intentionally avoided because it is a reserved word."
          }
        },
        "required": [
          "function_id",
          "index",
          "schema",
          "llm",
          "kind",
          "reaction"
        ],
        "description": "Function argument filling message data.\n\n{@link IStudioMetaChatListener.fillArgument} from server to client\nRPC (Remote Procedure Call) function call and response data information.\n\nFor argument information configured by the client, refer to {@link reaction}."
      },
      "IOpenAiSchema.IBoolean": {
        "type": "object",
        "properties": {
          "default": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "boolean"
              }
            ],
            "title": "Default value",
            "description": "Default value."
          },
          "enum": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "title": "Enumeration values",
            "description": "Enumeration values."
          },
          "type": {
            "const": "boolean",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "nullable": {
            "type": "boolean",
            "title": "Whether to allow `null` value or not",
            "description": "Whether to allow `null` value or not."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          },
          "x-wrtn-placeholder": {
            "type": "string",
            "title": "Placeholder value for frontend application",
            "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
          },
          "x-wrtn-prerequisite": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfJMesPath"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfFunction"
              }
            ],
            "title": "Prerequisite API endpoint for the schema",
            "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
          }
        },
        "required": [
          "type"
        ],
        "description": "Boolean type schema info."
      },
      "IOpenAiSchema.IInteger": {
        "type": "object",
        "properties": {
          "default": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Default value",
            "description": "Default value."
          },
          "enum": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "number"
                }
              ]
            },
            "title": "Enumeration values",
            "description": "Enumeration values."
          },
          "minimum": {
            "type": "integer",
            "title": "Minimum value restriction",
            "description": "Minimum value restriction."
          },
          "maximum": {
            "type": "integer",
            "title": "Maximum value restriction",
            "description": "Maximum value restriction."
          },
          "exclusiveMinimum": {
            "type": "boolean",
            "title": "Exclusive minimum value restriction",
            "description": "Exclusive minimum value restriction.\n\nFor reference, even though your Swagger document has defined the\n`exclusiveMinimum` value as `number`, it has been forcibly converted\nto `boolean` type, and assigns the numeric value to the\n{@link minimum} property in the {@link OpenApi} conversion."
          },
          "exclusiveMaximum": {
            "type": "boolean",
            "title": "Exclusive maximum value restriction",
            "description": "Exclusive maximum value restriction.\n\nFor reference, even though your Swagger document has defined the\n`exclusiveMaximum` value as `number`, it has been forcibly converted\nto `boolean` type, and assigns the numeric value to the\n{@link maximum} property in the {@link OpenApi} conversion."
          },
          "multipleOf": {
            "type": "integer",
            "exclusiveMinimum": true,
            "minimum": 0,
            "title": "Multiple of value restriction",
            "description": "Multiple of value restriction."
          },
          "type": {
            "const": "integer",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "nullable": {
            "type": "boolean",
            "title": "Whether to allow `null` value or not",
            "description": "Whether to allow `null` value or not."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          },
          "x-wrtn-placeholder": {
            "type": "string",
            "title": "Placeholder value for frontend application",
            "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
          },
          "x-wrtn-prerequisite": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfJMesPath"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfFunction"
              }
            ],
            "title": "Prerequisite API endpoint for the schema",
            "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
          }
        },
        "required": [
          "type"
        ],
        "description": "Integer type schema info."
      },
      "IOpenAiSchema.INumber": {
        "type": "object",
        "properties": {
          "default": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "Default value",
            "description": "Default value."
          },
          "enum": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "number"
                }
              ]
            },
            "title": "Enumeration values",
            "description": "Enumeration values."
          },
          "minimum": {
            "type": "number",
            "title": "Minimum value restriction",
            "description": "Minimum value restriction."
          },
          "maximum": {
            "type": "number",
            "title": "Maximum value restriction",
            "description": "Maximum value restriction."
          },
          "exclusiveMinimum": {
            "type": "boolean",
            "title": "Exclusive minimum value restriction",
            "description": "Exclusive minimum value restriction.\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined the `exclusiveMinimum` value as `number`, {@link OpenAiComposer}\nforcibly converts it to `boolean` type, and assign the numeric value to\nthe {@link minimum} property."
          },
          "exclusiveMaximum": {
            "type": "boolean",
            "title": "Exclusive maximum value restriction",
            "description": "Exclusive maximum value restriction.\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined the `exclusiveMaximum` value as `number`, {@link OpenAiComposer}\nforcibly converts it to `boolean` type, and assign the numeric value to\nthe {@link maximum} property."
          },
          "multipleOf": {
            "type": "number",
            "exclusiveMinimum": true,
            "minimum": 0,
            "title": "Multiple of value restriction",
            "description": "Multiple of value restriction."
          },
          "type": {
            "const": "number",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "nullable": {
            "type": "boolean",
            "title": "Whether to allow `null` value or not",
            "description": "Whether to allow `null` value or not."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          },
          "x-wrtn-placeholder": {
            "type": "string",
            "title": "Placeholder value for frontend application",
            "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
          },
          "x-wrtn-prerequisite": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfJMesPath"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfFunction"
              }
            ],
            "title": "Prerequisite API endpoint for the schema",
            "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
          }
        },
        "required": [
          "type"
        ],
        "description": "Number type schema info."
      },
      "IOpenAiSchema.IString": {
        "type": "object",
        "properties": {
          "x-wrtn-secret-key": {
            "type": "string",
            "title": "Secret key for the schema",
            "description": "Secret key for the schema.\n\n`x-wrtn-secret-key` is a property means a secret key that is required\nfor the target API endpoint calling. If the secret key is not filled,\nthe API call would be failed."
          },
          "x-wrtn-secret-scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Secret scopes for the schema",
            "description": "Secret scopes for the schema.\n\n`x-wrtn-secret-scopes` is a property means a list of secret scopes that\nare required for the target API endpoint calling. If the secret scopes\nare not satisfied, the API call would be failed."
          },
          "default": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Default value",
            "description": "Default value."
          },
          "enum": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string"
                }
              ]
            },
            "title": "Enumeration values",
            "description": "Enumeration values."
          },
          "format": {
            "type": "string",
            "title": "Format restriction",
            "description": "Format restriction."
          },
          "pattern": {
            "type": "string",
            "title": "Pattern restriction",
            "description": "Pattern restriction."
          },
          "minLength": {
            "type": "integer",
            "title": "Minimum length restriction",
            "description": "Minimum length restriction."
          },
          "maxLength": {
            "type": "integer",
            "title": "Maximum length restriction",
            "description": "Maximum length restriction."
          },
          "contentMediaType": {
            "type": "string",
            "title": "Content media type restriction",
            "description": "Content media type restriction."
          },
          "type": {
            "const": "string",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "nullable": {
            "type": "boolean",
            "title": "Whether to allow `null` value or not",
            "description": "Whether to allow `null` value or not."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          },
          "x-wrtn-placeholder": {
            "type": "string",
            "title": "Placeholder value for frontend application",
            "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
          },
          "x-wrtn-prerequisite": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfJMesPath"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfFunction"
              }
            ],
            "title": "Prerequisite API endpoint for the schema",
            "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
          }
        },
        "required": [
          "type"
        ],
        "description": "String type schema info."
      },
      "IOpenAiSchema.IArray": {
        "type": "object",
        "properties": {
          "items": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IOpenAiSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/IOpenAiSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/IOpenAiSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/IOpenAiSchema.IString"
              },
              {
                "$ref": "#/components/schemas/IOpenAiSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/IOpenAiSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/IOpenAiSchema.IUnknown"
              },
              {
                "$ref": "#/components/schemas/IOpenAiSchema.INullOnly"
              },
              {
                "$ref": "#/components/schemas/IOpenAiSchema.IOneOf"
              }
            ],
            "title": "Items type schema info",
            "description": "Items type schema info.\n\nThe `items` means the type of the array elements. In other words, it is\nthe type schema info of the `T` in the TypeScript array type `Array<T>`."
          },
          "minItems": {
            "type": "integer",
            "title": "Minimum items restriction",
            "description": "Minimum items restriction.\n\nRestriction of minumum number of items in the array."
          },
          "type": {
            "const": "array",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "uniqueItems": {
            "type": "boolean",
            "title": "Unique items restriction",
            "description": "Unique items restriction.\n\nIf this property value is `true`, target array must have unique items."
          },
          "maxItems": {
            "type": "integer",
            "title": "Maximum items restriction",
            "description": "Maximum items restriction.\n\nRestriction of maximum number of items in the array."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          },
          "nullable": {
            "type": "boolean",
            "title": "Whether to allow `null` value or not",
            "description": "Whether to allow `null` value or not."
          },
          "x-wrtn-placeholder": {
            "type": "string",
            "title": "Placeholder value for frontend application",
            "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
          },
          "x-wrtn-prerequisite": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfJMesPath"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfFunction"
              }
            ],
            "title": "Prerequisite API endpoint for the schema",
            "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
          }
        },
        "required": [
          "items",
          "type"
        ],
        "description": "Array type schema info."
      },
      "IOpenAiSchema.IObject": {
        "type": "object",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/RecordstringIOpenAiSchema",
            "title": "Properties of the object",
            "description": "Properties of the object.\n\nThe `properties` means a list of key-value pairs of the object's\nregular properties. The key is the name of the regular property,\nand the value is the type schema info.\n\nIf you need additional properties that is represented by dynamic key,\nyou can use the {@link additionalProperties} instead."
          },
          "additionalProperties": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/IOpenAiSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/IOpenAiSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/IOpenAiSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/IOpenAiSchema.IString"
              },
              {
                "$ref": "#/components/schemas/IOpenAiSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/IOpenAiSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/IOpenAiSchema.IUnknown"
              },
              {
                "$ref": "#/components/schemas/IOpenAiSchema.INullOnly"
              },
              {
                "$ref": "#/components/schemas/IOpenAiSchema.IOneOf"
              }
            ],
            "title": "Additional properties' info",
            "description": "Additional properties' info.\n\nThe `additionalProperties` means the type schema info of the additional\nproperties that are not listed in the {@link properties}.\n\nIf the value is `true`, it means that the additional properties are not\nrestricted. They can be any type. Otherwise, if the value is\n{@link ILlmSchema} type, it means that the additional properties must\nfollow the type schema info.\n\n- `true`: `Record<string, any>`\n- `ILlmSchema`: `Record<string, T>`"
          },
          "type": {
            "const": "object",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "required": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "List of key values of the required properties",
            "description": "List of key values of the required properties.\n\nThe `required` means a list of the key values of the required\n{@link properties}. If some property key is not listed in the `required`\nlist, it means that property is optional. Otherwise some property key\nexists in the `required` list, it means that the property must be filled.\n\nBelow is an example of the {@link properties} and `required`.\n\n```typescript\ninterface SomeObject {\n  id: string;\n  email: string;\n  name?: string;\n}\n```\n\nAs you can see, `id` and `email` {@link properties} are {@link required},\nso that they are listed in the `required` list.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": { \"type\": \"string\" },\n    \"email\": { \"type\": \"string\" },\n    \"name\": { \"type\": \"string\" }\n  },\n  \"required\": [\"id\", \"email\"]\n}\n```"
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          },
          "nullable": {
            "type": "boolean",
            "title": "Whether to allow `null` value or not",
            "description": "Whether to allow `null` value or not."
          },
          "x-wrtn-placeholder": {
            "type": "string",
            "title": "Placeholder value for frontend application",
            "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
          },
          "x-wrtn-prerequisite": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfJMesPath"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfFunction"
              }
            ],
            "title": "Prerequisite API endpoint for the schema",
            "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
          }
        },
        "required": [
          "type"
        ],
        "description": "Object type schema info."
      },
      "RecordstringIOpenAiSchema": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/IOpenAiSchema.IBoolean"
            },
            {
              "$ref": "#/components/schemas/IOpenAiSchema.IInteger"
            },
            {
              "$ref": "#/components/schemas/IOpenAiSchema.INumber"
            },
            {
              "$ref": "#/components/schemas/IOpenAiSchema.IString"
            },
            {
              "$ref": "#/components/schemas/IOpenAiSchema.IArray"
            },
            {
              "$ref": "#/components/schemas/IOpenAiSchema.IObject"
            },
            {
              "$ref": "#/components/schemas/IOpenAiSchema.IUnknown"
            },
            {
              "$ref": "#/components/schemas/IOpenAiSchema.INullOnly"
            },
            {
              "$ref": "#/components/schemas/IOpenAiSchema.IOneOf"
            }
          ]
        }
      },
      "IOpenAiSchema.IUnknown": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          },
          "x-wrtn-placeholder": {
            "type": "string",
            "title": "Placeholder value for frontend application",
            "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
          },
          "x-wrtn-prerequisite": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfJMesPath"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfFunction"
              }
            ],
            "title": "Prerequisite API endpoint for the schema",
            "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
          }
        },
        "description": "Unknown type schema info.\n\nIt means the type of the value is `any`."
      },
      "IOpenAiSchema.INullOnly": {
        "type": "object",
        "properties": {
          "type": {
            "const": "null",
            "title": "Type is always `null`",
            "description": "Type is always `null`."
          },
          "default": {
            "type": "null",
            "title": "Default value",
            "description": "Default value."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          },
          "x-wrtn-placeholder": {
            "type": "string",
            "title": "Placeholder value for frontend application",
            "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
          },
          "x-wrtn-prerequisite": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfJMesPath"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfFunction"
              }
            ],
            "title": "Prerequisite API endpoint for the schema",
            "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
          }
        },
        "required": [
          "type"
        ],
        "description": "Null only type schema info."
      },
      "IOpenAiSchema.IOneOf": {
        "type": "object",
        "properties": {
          "oneOf": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IOpenAiSchema.IBoolean"
                },
                {
                  "$ref": "#/components/schemas/IOpenAiSchema.IInteger"
                },
                {
                  "$ref": "#/components/schemas/IOpenAiSchema.INumber"
                },
                {
                  "$ref": "#/components/schemas/IOpenAiSchema.IString"
                },
                {
                  "$ref": "#/components/schemas/IOpenAiSchema.IArray"
                },
                {
                  "$ref": "#/components/schemas/IOpenAiSchema.IObject"
                },
                {
                  "$ref": "#/components/schemas/IOpenAiSchema.IUnknown"
                },
                {
                  "$ref": "#/components/schemas/IOpenAiSchema.INullOnly"
                }
              ]
            },
            "title": "List of the union types",
            "description": "List of the union types."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          },
          "x-wrtn-placeholder": {
            "type": "string",
            "title": "Placeholder value for frontend application",
            "description": "Placeholder value for frontend application.\n\nPlaceholder means the value to be shown in the input field as a hint.\nFor example, when an email input field exists, the placeholder value\nwould be \"Insert your email address here\"."
          },
          "x-wrtn-prerequisite": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfJMesPath"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchemaPlugin.IPrerequisiteOfFunction"
              }
            ],
            "title": "Prerequisite API endpoint for the schema",
            "description": "Prerequisite API endpoint for the schema.\n\n`x-wrtn-prerequisite` is a property representing the prerequisite API\ninteraction. It means that, the endpoint API should be called before\ncalling the target API, for composing some argument value."
          }
        },
        "required": [
          "oneOf"
        ],
        "description": "One of type schema info.\n\n`IOneOf` represents an union type of the TypeScript (`A | B | C`).\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined `anyOf` instead of the `oneOf`, {@link OpenAiComposer} forcibly\nconverts it to `oneOf` type."
      },
      "IStudioMetaChatSessionMessageData.ICompleteFunction": {
        "type": "object",
        "properties": {
          "complete": {
            "$ref": "#/components/schemas/IStudioMetaChatFunctionCall.IComplete",
            "title": "Function call completion information",
            "description": "Function call completion information."
          },
          "function": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string"
              },
              "method": {
                "oneOf": [
                  {
                    "const": "delete"
                  },
                  {
                    "const": "get"
                  },
                  {
                    "const": "patch"
                  },
                  {
                    "const": "post"
                  },
                  {
                    "const": "put"
                  }
                ]
              }
            },
            "required": [
              "path",
              "method"
            ],
            "title": "Endpoint information of the function that LLM called",
            "description": "Endpoint information of the function that LLM called.\n\nIt can be undefined for the legacy reason."
          },
          "kind": {
            "const": "completeFunction",
            "title": "Type of data",
            "description": "Type of data."
          },
          "reaction": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IExecutionResult.IFailure"
              },
              {
                "$ref": "#/components/schemas/IExecutionResult.ISuccessany"
              }
            ],
            "title": "The return value of the target RPC function",
            "description": "The return value of the target RPC function.\n\nWhen calling an RPC function from a server to a client, it is the return value of the client function,\nand when calling an RPC function from a client to a server, it is the return value of the server function.\n\nHowever, since the function call is not always successful, an error may have occurred instead of the return value,\nso {@link IExecutionResult}, which corresponds to the union type of returned value and thrown exception, was used.\n\n> The original attribute name `return` is semantically correct, but it was intentionally avoided because it is a reserved word."
          }
        },
        "required": [
          "complete",
          "kind",
          "reaction"
        ],
        "description": "Function call completion message data.\n\n{@link IStudioMetaChatListener.completeFunction}\nRPC (Remote Procedure Call) function call and response data information from server to client."
      },
      "IStudioMetaChatFunctionCall.IComplete": {
        "type": "object",
        "properties": {
          "function": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string"
              },
              "method": {
                "oneOf": [
                  {
                    "const": "delete"
                  },
                  {
                    "const": "get"
                  },
                  {
                    "const": "patch"
                  },
                  {
                    "const": "post"
                  },
                  {
                    "const": "put"
                  }
                ]
              }
            },
            "required": [
              "path",
              "method"
            ],
            "title": "Endpoint information of the function that LLM called",
            "description": "Endpoint information of the function that LLM called.\n\nIt can be undefined for the legacy reason."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "status": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "Return status value",
            "description": "Return status value.\n\nIf this attribute value is `null`, it means that the connection to the target\nfunction (API operation) itself has failed. On the other hand, if the connection\nitself is successful, the response status of the HTTP protocol is recorded\nregardless of the success or failure of the function call {@link success}."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Function call time",
            "description": "Function call time."
          },
          "value": {
            "title": "The value returned as a result of a function call",
            "description": "The value returned as a result of a function call."
          },
          "arguments": {
            "type": "array",
            "items": {},
            "title": "A list of arguments used in a function call",
            "description": "A list of arguments used in a function call."
          },
          "completed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "The time when the function call was completed",
            "description": "The time when the function call was completed.\n\nIf this property value is `null`, it means that the connection to the target\nfunction (API operation) itself failed."
          },
          "success": {
            "type": "boolean",
            "title": "Whether the function call was successful",
            "description": "Whether the function call was successful."
          }
        },
        "required": [
          "id",
          "status",
          "created_at",
          "value",
          "arguments",
          "completed_at",
          "success"
        ],
        "description": "Function call completion information.\n\nIn a Meta LLM chat session, when a call to {@link ISelect specified function}\nis completed, information to notify the client of this.\n\nThe Meta LLM chat server notifies the client of the success or failure of the call\nof the function, as well as the return value, by calling the client's\n{@link IStudioMetaChatListener.complete} function."
      },
      "IStudioMetaChatSessionMessageData.IPrepareWorkflow": {
        "type": "object",
        "properties": {
          "input": {
            "$ref": "#/components/schemas/IStudioWorkflowData.ICreate",
            "title": "Workflow data entry area",
            "description": "Workflow data entry area."
          },
          "plan": {
            "$ref": "#/components/schemas/IStudioMetaChatWorkflowPlan",
            "title": "Workflow configuration plan",
            "description": "Workflow configuration plan.\n\nThis data is not available for older versions of data."
          },
          "kind": {
            "const": "prepareWorkflow",
            "title": "Type of data",
            "description": "Type of data."
          },
          "reaction": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IExecutionResult.IFailure"
              },
              {
                "$ref": "#/components/schemas/IExecutionResult.ISuccessIStudioMetaChatWorkflowConfirmnull"
              }
            ],
            "title": "The return value of the target RPC function",
            "description": "The return value of the target RPC function.\n\nWhen calling an RPC function from a server to a client, it is the return value of the client function,\nand when calling an RPC function from a client to a server, it is the return value of the server function.\n\nHowever, since the function call is not always successful, an error may have occurred instead of the return value,\nso {@link IExecutionResult}, which corresponds to the union type of returned value and thrown exception, was used.\n\n> The original attribute name `return` is semantically correct, but it was intentionally avoided because it is a reserved word."
          }
        },
        "required": [
          "input",
          "kind",
          "reaction"
        ],
        "description": "Workflow preparation message data.\n\n{@link IStudioMetaChatListener.prepareWorkflow} from server to client\n\nRPC (Remote Procedure Call) function call and response data information."
      },
      "IStudioWorkflowData.ICreate": {
        "type": "object",
        "properties": {
          "components": {
            "$ref": "#/components/schemas/ISwaggerComponents",
            "title": "Named type collection (internal use)",
            "description": "Named type collection (internal use).\n\nA private collection of parameters and return types only."
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioWorkflowParameter"
            },
            "title": "List of parameter types",
            "description": "List of parameter types."
          },
          "arguments": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/IAstArrayLiteralExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstBinaryExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstCallExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstConditionalExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstParenthesizedExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstDeleteExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstNonNullExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstSpreadElementExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstElementAccessExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstObjectLiteralExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstPrefixUnaryExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstPostfixUnaryExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstPropertyAccessExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstTemplateExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstNumericLiteral"
                    },
                    {
                      "$ref": "#/components/schemas/IAstIdentifier"
                    },
                    {
                      "$ref": "#/components/schemas/IAstNoSubstitutionTemplateLiteral"
                    },
                    {
                      "$ref": "#/components/schemas/IAstStringLiteral"
                    },
                    {
                      "$ref": "#/components/schemas/IAstWorkflowVariableIdentifier"
                    },
                    {
                      "$ref": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier"
                    },
                    {
                      "$ref": "#/components/schemas/IAstWorkflowMetadataIdentifier"
                    },
                    {
                      "$ref": "#/components/schemas/IAstTrueLiteral"
                    },
                    {
                      "$ref": "#/components/schemas/IAstFalseLiteral"
                    },
                    {
                      "$ref": "#/components/schemas/IAstNullLiteral"
                    },
                    {
                      "$ref": "#/components/schemas/IAstArrayFilterExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstArrayFlatExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstArrayFunctionParameterIdentifier"
                    },
                    {
                      "$ref": "#/components/schemas/IAstArrayFunctionIndexIdentifier"
                    },
                    {
                      "$ref": "#/components/schemas/IAstArrayMapExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstObjectFlatExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstObjectEntriesExpression"
                    },
                    {
                      "$ref": "#/components/schemas/IAstWorkflowParameterIdentifier"
                    },
                    {
                      "$ref": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier"
                    },
                    {
                      "$ref": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier"
                    },
                    {
                      "$ref": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier"
                    },
                    {
                      "$ref": "#/components/schemas/IAstWorkflowSecretIdentifier"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "ArrayLiteralExpression": "#/components/schemas/IAstArrayLiteralExpression",
                      "BinaryExpression": "#/components/schemas/IAstBinaryExpression",
                      "CallExpression": "#/components/schemas/IAstCallExpression",
                      "ConditionalExpression": "#/components/schemas/IAstConditionalExpression",
                      "ParenthesizedExpression": "#/components/schemas/IAstParenthesizedExpression",
                      "DeleteExpression": "#/components/schemas/IAstDeleteExpression",
                      "NonNullExpression": "#/components/schemas/IAstNonNullExpression",
                      "SpreadElementExpression": "#/components/schemas/IAstSpreadElementExpression",
                      "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                      "ObjectLiteralExpression": "#/components/schemas/IAstObjectLiteralExpression",
                      "PrefixUnaryExpression": "#/components/schemas/IAstPrefixUnaryExpression",
                      "PostfixUnaryExpression": "#/components/schemas/IAstPostfixUnaryExpression",
                      "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                      "TemplateExpression": "#/components/schemas/IAstTemplateExpression",
                      "NumericLiteral": "#/components/schemas/IAstNumericLiteral",
                      "Identifier": "#/components/schemas/IAstIdentifier",
                      "NoSubstitutionTemplateLiteral": "#/components/schemas/IAstNoSubstitutionTemplateLiteral",
                      "StringLiteral": "#/components/schemas/IAstStringLiteral",
                      "WorkflowVariableIdentifier": "#/components/schemas/IAstWorkflowVariableIdentifier",
                      "WorkflowEnvironmentVariableIdentifier": "#/components/schemas/IAstWorkflowEnvironmentVariableIdentifier",
                      "WorkflowMetadataIdentifier": "#/components/schemas/IAstWorkflowMetadataIdentifier",
                      "TrueLiteral": "#/components/schemas/IAstTrueLiteral",
                      "FalseLiteral": "#/components/schemas/IAstFalseLiteral",
                      "NullLiteral": "#/components/schemas/IAstNullLiteral",
                      "ArrayFilterExpression": "#/components/schemas/IAstArrayFilterExpression",
                      "ArrayFlatExpression": "#/components/schemas/IAstArrayFlatExpression",
                      "ArrayFunctionParameterIdentifier": "#/components/schemas/IAstArrayFunctionParameterIdentifier",
                      "ArrayFunctionIndexIdentifier": "#/components/schemas/IAstArrayFunctionIndexIdentifier",
                      "ArrayMapExpression": "#/components/schemas/IAstArrayMapExpression",
                      "ObjectFlatExpression": "#/components/schemas/IAstObjectFlatExpression",
                      "ObjectEntriesExpression": "#/components/schemas/IAstObjectEntriesExpression",
                      "WorkflowParameterIdentifier": "#/components/schemas/IAstWorkflowParameterIdentifier",
                      "WorkflowCallStatementResultIdentifier": "#/components/schemas/IAstWorkflowCallStatementResultIdentifier",
                      "WorkflowLoopStatementElementIdentifier": "#/components/schemas/IAstWorkflowLoopStatementElementIdentifier",
                      "WorkflowLoopStatementResultIdentifier": "#/components/schemas/IAstWorkflowLoopStatementResultIdentifier",
                      "WorkflowSecretIdentifier": "#/components/schemas/IAstWorkflowSecretIdentifier"
                    }
                  }
                }
              }
            ],
            "title": "A list of element values to be input as default values for parameters",
            "description": "A list of element values to be input as default values for parameters."
          },
          "output": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IConstant"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IString"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.ITuple"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IOneOf"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.INull"
              },
              {
                "$ref": "#/components/schemas/ISwaggerSchema.IUnknown"
              }
            ],
            "title": "The return type can be specified separately",
            "description": "The return type can be specified separately.\n\nHowever, the value may change during compilation."
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioWorkflowVariable"
            },
            "title": "A list of variables to be used by the workflow",
            "description": "A list of variables to be used by the workflow.\n\nEach variable can be referred to by {@link IAstIdentifier}."
          },
          "release_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "title": "{@link IStudioRepositoryRelease.id} list of releases to use",
            "description": "{@link IStudioRepositoryRelease.id} list of releases to use.\n\nYou must register the releases you are interested in in order\nto use the release connector function."
          },
          "swaggers": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IStudioWorkflowSwagger.IGoodCreate"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflowSwagger.IManualCreate"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflowSwagger.ILinkCreate"
                }
              ],
              "discriminator": {
                "propertyName": "source",
                "mapping": {
                  "good": "#/components/schemas/IStudioWorkflowSwagger.IGoodCreate",
                  "manual": "#/components/schemas/IStudioWorkflowSwagger.IManualCreate",
                  "link": "#/components/schemas/IStudioWorkflowSwagger.ILinkCreate"
                }
              }
            },
            "title": "List of Swagger documents to use",
            "description": "List of Swagger documents to use.\n\nTo use the Swagger connector function, you must register the Swagger\ndocuments that belong to you."
          },
          "statements": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IStudioWorkflowBlockStatement"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflowBranchStatement"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflowCallStatement"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflowExpressionStatement"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflowSetStatement"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflowForEachStatement"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflowWhileStatement"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflowRepeatStatement"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflowReturnStatement"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflowSetReturnValueStatement"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflowBreakStatement"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflowContinueStatement"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "WorkflowBlockStatement": "#/components/schemas/IStudioWorkflowBlockStatement",
                  "WorkflowBranchStatement": "#/components/schemas/IStudioWorkflowBranchStatement",
                  "WorkflowCallStatement": "#/components/schemas/IStudioWorkflowCallStatement",
                  "WorkflowExpressionStatement": "#/components/schemas/IStudioWorkflowExpressionStatement",
                  "WorkflowSetStatement": "#/components/schemas/IStudioWorkflowSetStatement",
                  "WorkflowForEachStatement": "#/components/schemas/IStudioWorkflowForEachStatement",
                  "WorkflowWhileStatement": "#/components/schemas/IStudioWorkflowWhileStatement",
                  "WorkflowRepeatStatement": "#/components/schemas/IStudioWorkflowRepeatStatement",
                  "WorkflowReturnStatement": "#/components/schemas/IStudioWorkflowReturnStatement",
                  "WorkflowSetReturnValueStatement": "#/components/schemas/IStudioWorkflowSetReturnValueStatement",
                  "WorkflowBreakStatement": "#/components/schemas/IStudioWorkflowBreakStatement",
                  "WorkflowContinueStatement": "#/components/schemas/IStudioWorkflowContinueStatement"
                }
              }
            },
            "title": "A list of Statement nodes deployed within the current workflow",
            "description": "A list of Statement nodes deployed within the current workflow."
          },
          "chatbot_config": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IChatbotConfigV1"
              }
            ],
            "discriminator": {
              "propertyName": "chatbot_session_parameter_version",
              "mapping": {
                "v1": "#/components/schemas/IChatbotConfigV1"
              }
            },
            "title": "Settings when using as a chatbot (agent)",
            "description": "Settings when using as a chatbot (agent)."
          }
        },
        "required": [
          "components",
          "parameters",
          "arguments",
          "release_ids",
          "swaggers",
          "statements"
        ],
        "description": "Input information for the main data of the workflow."
      },
      "IStudioWorkflowSwagger.IGoodCreate": {
        "type": "object",
        "properties": {
          "source": {
            "const": "good",
            "title": "If the source of the swagger is a custom product",
            "description": "If the source of the swagger is a custom product."
          },
          "reference": {
            "$ref": "#/components/schemas/IStudioWorkflowSwagger.IReference",
            "title": "Reference information for ordered items",
            "description": "Reference information for ordered items."
          },
          "id": {
            "type": "string",
            "title": "Primary Key",
            "description": "Primary Key.\n\nIf omitted, {@link IHubSaleUnit.id} of the target unit is used."
          }
        },
        "required": [
          "source",
          "reference"
        ],
        "description": "If the product is an order purchased from an API brokerage exchange."
      },
      "IStudioWorkflowSwagger.IManualCreate": {
        "type": "object",
        "properties": {
          "source": {
            "const": "manual",
            "title": "If the source of the swagger is direct input",
            "description": "If the source of the swagger is direct input."
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ISwagger"
              },
              {
                "$ref": "#/components/schemas/SwaggerV2.IDocument"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3.IDocument"
              },
              {
                "$ref": "#/components/schemas/OpenApiV3_1.IDocument"
              }
            ],
            "title": "The Swagger document main data",
            "description": "The Swagger document main data.\n\nCan be converted to {@link ISwagger} format after correction."
          },
          "id": {
            "type": "string",
            "title": "Primary Key",
            "description": "Primary Key.\n\nIf omitted, it is composed by combining the url and version of the target server.\n\nThe format is `${url}@${version}`"
          }
        },
        "required": [
          "source",
          "data"
        ],
        "description": "If you input the swagger file directly."
      },
      "IStudioWorkflowSwagger.ILinkCreate": {
        "type": "object",
        "properties": {
          "source": {
            "const": "link",
            "title": "If the source of the swagger is a link",
            "description": "If the source of the swagger is a link."
          },
          "url": {
            "type": "string",
            "format": "uri",
            "title": "URL of the Swagger JSON/Yaml file",
            "description": "URL of the Swagger JSON/Yaml file."
          },
          "id": {
            "type": "string",
            "title": "Primary Key",
            "description": "Primary Key.\n\nIf omitted, it is composed by combining the url and version of the target server.\n\nThe format is `${url}@${version}`"
          }
        },
        "required": [
          "source",
          "url"
        ],
        "description": "If you provide the Swagger file as a URL link."
      },
      "IStudioMetaChatWorkflowPlan": {
        "type": "object",
        "properties": {
          "general": {
            "type": "string",
            "title": "A description of the entire plan",
            "description": "A description of the entire plan."
          },
          "steps": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "A list of descriptions for each step",
            "description": "A list of descriptions for each step."
          },
          "title": {
            "type": "string",
            "title": "Workflow title",
            "description": "Workflow title."
          },
          "summary": {
            "type": "string",
            "title": "Workflow summary",
            "description": "Workflow summary."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the workflow",
            "description": "Detailed description of the workflow."
          }
        },
        "required": [
          "general",
          "steps",
          "title",
          "summary",
          "description"
        ],
        "description": "Meta Chat Agent Workflow Plan Description.\n\n`IStudioMetaChatWorkflowPlan` is an interface that the server uses\nin a Meta LLM chat session to describe the {@link IStudioWorkflow Workflow} plan\nthat has been prepared for the client. It contains a description of what kind of\nworkflow Meta LLM will configure and the overall/development level of the\nconfiguration plan.\n\nUsed in the {@link IStudioMetaChatListener.prepareWorkflow} function in RPC\n(Remote Procedure Call)."
      },
      "IExecutionResult.ISuccessIStudioMetaChatWorkflowConfirmnull": {
        "type": "object",
        "properties": {
          "success": {
            "const": true
          },
          "value": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IStudioMetaChatWorkflowConfirm"
              }
            ]
          }
        },
        "required": [
          "success",
          "value"
        ]
      },
      "IStudioMetaChatWorkflowConfirm": {
        "type": "object",
        "properties": {
          "account": {
            "type": "string",
            "title": "{@link IStudioAccount.code} of the affiliated account",
            "description": "{@link IStudioAccount.code} of the affiliated account."
          },
          "repository": {
            "type": "string",
            "title": "{@link IStudioRepository.code} in the repository you are privy to",
            "description": "{@link IStudioRepository.code} in the repository you are privy to."
          },
          "commit": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IStudioMetaChatWorkflowConfirm.ICommitCreate"
              },
              {
                "$ref": "#/components/schemas/IStudioMetaChatWorkflowConfirm.ICommitUpdate"
              }
            ],
            "discriminator": {
              "propertyName": "kind",
              "mapping": {
                "create": "#/components/schemas/IStudioMetaChatWorkflowConfirm.ICommitCreate",
                "update": "#/components/schemas/IStudioMetaChatWorkflowConfirm.ICommitUpdate"
              }
            },
            "title": "Commit information",
            "description": "Commit information.\n\nCreate a new commit, or modify an existing commit by overwriting it."
          },
          "workflow": {
            "$ref": "#/components/schemas/OmitIStudioWorkflow.ICreatedatatitledescriptionsummary",
            "title": "The remaining input information excluding the data section of the workflow",
            "description": "The remaining input information excluding the data section of the workflow."
          }
        },
        "required": [
          "account",
          "repository",
          "commit",
          "workflow"
        ],
        "description": "Workflow acceptance information in Meta LLM chat.\n\n`IStudioMetaChatWorkflowConfirm` is an interface that, in a Meta LLM chat session,\nwhen the server notifies the client that the {@link IStudioWorkflow workflow} is ready\nto be created, the client responds by providing the {@link IStudioAccount account},\nthe {@link IStudioRepository repository}, the {@link IStudioRepositoryCommit commit},\nand additional description information to which the workflow will be recorded.\n\nIt is used in the {@link IStudioMetaChatListener.workflow} function in RPC\n(Remote Procedure Call)."
      },
      "IStudioMetaChatWorkflowConfirm.ICommitCreate": {
        "type": "object",
        "properties": {
          "kind": {
            "const": "create",
            "title": "Discriminator of union type",
            "description": "Discriminator of union type."
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "The title of the commit",
            "description": "The title of the commit."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "A description of the commit",
            "description": "A description of the commit."
          },
          "source_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "title": "The ID of the original commit",
            "description": "The ID of the original commit.\n\nIf omitted (`undefined`), the {@link IStudioRepositoryCommit.id} of the last commit\nis assigned.\n\nIf `null` is entered, it corresponds to the first commit performed without any basis."
          }
        },
        "required": [
          "kind",
          "title",
          "description"
        ],
        "description": "Create a new commit."
      },
      "IStudioMetaChatWorkflowConfirm.ICommitUpdate": {
        "type": "object",
        "properties": {
          "kind": {
            "const": "update",
            "title": "Discriminator of union type",
            "description": "Discriminator of union type."
          },
          "commit_id": {
            "oneOf": [
              {
                "const": "latest"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "title": "{@lilnk IStudioRepositoryCommit.id} of the commit to be modified",
            "description": "{@lilnk IStudioRepositoryCommit.id} of the commit to be modified."
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "The title of the commit",
            "description": "The title of the commit."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "A description of the commit",
            "description": "A description of the commit."
          }
        },
        "required": [
          "kind",
          "commit_id"
        ],
        "description": "Modify an existing commit."
      },
      "OmitIStudioWorkflow.ICreatedatatitledescriptionsummary": {
        "type": "object",
        "properties": {
          "location": {
            "type": "string",
            "title": "Path to the bucket's belonging folder",
            "description": "Path to the bucket's belonging folder."
          },
          "name": {
            "type": "string",
            "title": "The file name in the bucket",
            "description": "The file name in the bucket."
          },
          "type": {
            "const": "workflow",
            "title": "Type of bucket",
            "description": "Type of bucket."
          },
          "namespace": {
            "type": "string",
            "title": "Workflow namespace identifier",
            "description": "Workflow namespace identifier."
          },
          "icon": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uri"
              }
            ],
            "title": "URL of the representative icon",
            "description": "URL of the representative icon."
          },
          "thumbnail": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uri"
              }
            ],
            "title": "Workflow thumbnail image",
            "description": "Workflow thumbnail image.\n\nThis corresponds to the minimap or thumbnail image in the workflow editor."
          }
        },
        "required": [
          "location",
          "name",
          "type",
          "icon",
          "thumbnail"
        ],
        "description": "Construct a type with the properties of T except for those in type K."
      },
      "IStudioMetaChatSessionMessageData.ICompleteWorkflow": {
        "type": "object",
        "properties": {
          "account_code": {
            "type": "string",
            "title": "{@link IStudioAccount.code} of the affiliated account",
            "description": "{@link IStudioAccount.code} of the affiliated account."
          },
          "repository_code": {
            "type": "string",
            "title": "{@link IStudioRepository.code} in the repository you are privy to",
            "description": "{@link IStudioRepository.code} in the repository you are privy to."
          },
          "commit_id": {
            "type": "string",
            "format": "uuid",
            "title": "{@link IStudioCommit.id} of the target commit",
            "description": "{@link IStudioCommit.id} of the target commit."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "{@link IStudioWorkflow.id} of the target workflow",
            "description": "{@link IStudioWorkflow.id} of the target workflow."
          },
          "snapshot_id": {
            "type": "string",
            "format": "uuid",
            "title": "{@link IStudioWorkflow.snapshot_id} of the target workflow snapshot",
            "description": "{@link IStudioWorkflow.snapshot_id} of the target workflow snapshot."
          },
          "kind": {
            "const": "completeWorkflow",
            "title": "Type of data",
            "description": "Type of data."
          },
          "reaction": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IExecutionResult.IFailure"
              },
              {
                "$ref": "#/components/schemas/IExecutionResult.ISuccessany"
              }
            ],
            "title": "The return value of the target RPC function",
            "description": "The return value of the target RPC function.\n\nWhen calling an RPC function from a server to a client, it is the return value of the client function,\nand when calling an RPC function from a client to a server, it is the return value of the server function.\n\nHowever, since the function call is not always successful, an error may have occurred instead of the return value,\nso {@link IExecutionResult}, which corresponds to the union type of returned value and thrown exception, was used.\n\n> The original attribute name `return` is semantically correct, but it was intentionally avoided because it is a reserved word."
          }
        },
        "required": [
          "account_code",
          "repository_code",
          "commit_id",
          "id",
          "snapshot_id",
          "kind",
          "reaction"
        ],
        "description": "Workflow completion message data.\n\n{@link IStudioMetaChatListener.completeWorkflow}\nRPC (Remote Procedure Call) function call and response data information from server to client."
      },
      "IStudioMetaChatSession.IRequest": {
        "type": "object",
        "properties": {
          "pinned": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "search": {
            "$ref": "#/components/schemas/IStudioMetaChatSession.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-session.created_at"
                },
                {
                  "const": "+session.created_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Page and search request information."
      },
      "IStudioMetaChatSession.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IPageIStudioMetaChatSessionConnection": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioMetaChatSessionConnection"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IStudioMetaChatSessionConnection.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IStudioMetaChatSessionConnection.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-connection.connected_at"
                },
                {
                  "const": "-connection.disconnected_at"
                },
                {
                  "const": "+connection.connected_at"
                },
                {
                  "const": "+connection.disconnected_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Page and search request information."
      },
      "IStudioMetaChatSessionConnection.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IPageIStudioMetaChatSessionMessageIStudioMetaChatSessionMessageData": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioMetaChatSessionMessageIStudioMetaChatSessionMessageData"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IStudioMetaChatSessionMessageIStudioMetaChatSessionMessageData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "connection_id": {
            "type": "string",
            "format": "uuid",
            "title": "{@link IStudioMetaChatSessionConnection.id} of the session connection",
            "description": "{@link IStudioMetaChatSessionConnection.id} of the session connection.\n\nIf you need detailed information about the session connection,\n\nyou can directly query {@link  {@link IStudioMetaChatSessionConnection} through\nthe provided SDK API."
          },
          "speaker": {
            "oneOf": [
              {
                "const": "customer"
              },
              {
                "const": "agent"
              }
            ],
            "description": "Who is the speaker?\n\nIt means who is the originator of the current message, and conversely, it also means\nthe type of RPC function caller.\n\nThat is, if this attribute value is \"customer\", the client called the server's\n{@link IStudioMetaChatService} RPC function, and conversely, if this attribute value\nis \"agent\", the server called the client's {@link IStudioMetaChatListener} RPC function.\n\n- customer: Customer (human)\n- agent: LLM Agent (robot)"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IStudioMetaChatSessionMessageData.ITalk"
              },
              {
                "$ref": "#/components/schemas/IStudioMetaChatSessionMessageData.IFunctionCallPlan"
              },
              {
                "$ref": "#/components/schemas/IStudioMetaChatSessionMessageData.ISelectFunction"
              },
              {
                "$ref": "#/components/schemas/IStudioMetaChatSessionMessageData.IFillArgument"
              },
              {
                "$ref": "#/components/schemas/IStudioMetaChatSessionMessageData.ICompleteFunction"
              },
              {
                "$ref": "#/components/schemas/IStudioMetaChatSessionMessageData.IPrepareWorkflow"
              },
              {
                "$ref": "#/components/schemas/IStudioMetaChatSessionMessageData.ICompleteWorkflow"
              }
            ],
            "discriminator": {
              "propertyName": "kind",
              "mapping": {
                "talk": "#/components/schemas/IStudioMetaChatSessionMessageData.ITalk",
                "explainFunctionCall": "#/components/schemas/IStudioMetaChatSessionMessageData.IFunctionCallPlan",
                "selectFunction": "#/components/schemas/IStudioMetaChatSessionMessageData.ISelectFunction",
                "fillArgument": "#/components/schemas/IStudioMetaChatSessionMessageData.IFillArgument",
                "completeFunction": "#/components/schemas/IStudioMetaChatSessionMessageData.ICompleteFunction",
                "prepareWorkflow": "#/components/schemas/IStudioMetaChatSessionMessageData.IPrepareWorkflow",
                "completeWorkflow": "#/components/schemas/IStudioMetaChatSessionMessageData.ICompleteWorkflow"
              }
            },
            "title": "Message data",
            "description": "Message data.\n\nInformation on the call and response data of RPC functions."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the message was created",
            "description": "The date and time the message was created."
          },
          "completed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "The time when the message (function call) is completed",
            "description": "The time when the message (function call) is completed."
          }
        },
        "required": [
          "id",
          "connection_id",
          "speaker",
          "data",
          "created_at",
          "completed_at"
        ],
        "description": "Meta LLM chat session message information.\n\n`IStudioMetaChatSessionMessage` is an entity that records messages that occurred in a\n{@link IStudioMetaChatSession Meta LLM chat session}. To be precise, it records which\n{@link IStudioMetaChatSessionConnection WebSocket connection} within the chat session\nit occurred in.\n\nAnd since our Meta LLM chat session uses TGrid's\n[RPC (Remote Procedure Call)](https://tgrid.com/docs/remote-procedure-call/)\nconcept in the WebSocket protocol, this `IStudioMetaChatSessionMessage` is also an entity\nthat encompasses {@link IStudioMetaChatSessionMessageData}, the history information for\nRPC function calls."
      },
      "IStudioMetaChatSessionMessage.IRequest": {
        "type": "object",
        "properties": {
          "connection_id": {
            "type": "string",
            "format": "uuid",
            "title": "{@link IStudioMetaChatSessionConnection.id} of the WebSocket connection",
            "description": "{@link IStudioMetaChatSessionConnection.id} of the WebSocket connection.\n\nYou can search and retrieve messages limited to a specific websocket connection."
          },
          "search": {
            "$ref": "#/components/schemas/IStudioMetaChatSessionMessage.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-message.created_at"
                },
                {
                  "const": "+message.created_at"
                },
                {
                  "const": "-message.completed_at"
                },
                {
                  "const": "+message.completed_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Page and search request information."
      },
      "IStudioMetaChatSessionMessage.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IPageIStudioMetaChatSessionShare": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioMetaChatSessionShare"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IStudioMetaChatSessionShare": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "customer": {
            "$ref": "#/components/schemas/IHubCustomer",
            "title": "The customer who've issued the sharing record",
            "description": "The customer who've issued the sharing record."
          },
          "message_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "description": "Target message's {@link IStudioMetaChatMessage.id}\nif you want to restrict the sharing to a specific message as endpoint."
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Title of the sharing record",
            "description": "Title of the sharing record."
          },
          "session": {
            "$ref": "#/components/schemas/IStudioMetaChatSession",
            "title": "The shared {@link IStudioMetaChatSession Meta LLM chat session}",
            "description": "The shared {@link IStudioMetaChatSession Meta LLM chat session}."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the record",
            "description": "Creation time of the record."
          }
        },
        "required": [
          "id",
          "customer",
          "message_id",
          "title",
          "session",
          "created_at"
        ],
        "description": "A record of sharing a Meta LLM chat session.\n\n{@link IStudioMetaChatSessionShare} is a record of sharing a\n{@link IStudioMetaChatSession Meta LLM chat session}'s\n{@link IStudioMetaChatMessage message contents}."
      },
      "IStudioMetaChatSessionShare.IRequest": {
        "type": "object",
        "properties": {
          "session_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "title": "Target session's {@link IStudioMetaChatSession.id}",
            "description": "Target session's {@link IStudioMetaChatSession.id}.\n\nIf configure as `null`, all sharing records will be retrieved."
          },
          "search": {
            "$ref": "#/components/schemas/IStudioMetaChatSessionShare.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-share.title"
                },
                {
                  "const": "-share.created_at"
                },
                {
                  "const": "+share.title"
                },
                {
                  "const": "+share.created_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "required": [
          "session_id"
        ],
        "description": "Page and search request information."
      },
      "IStudioMetaChatSessionShare.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          }
        }
      },
      "IPageIStudioRepository.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioRepository.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IStudioRepository.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IStudioRepository.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-account.code"
                },
                {
                  "const": "+account.code"
                },
                {
                  "const": "-account.created_at"
                },
                {
                  "const": "+account.created_at"
                },
                {
                  "const": "-repository.code"
                },
                {
                  "const": "-repository.title"
                },
                {
                  "const": "-repository.created_at"
                },
                {
                  "const": "+repository.code"
                },
                {
                  "const": "+repository.title"
                },
                {
                  "const": "+repository.created_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Page request and retrieval information."
      },
      "IStudioRepository": {
        "type": "object",
        "properties": {
          "commit": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IStudioRepositoryCommit.ISummary"
              }
            ],
            "title": "Summary information for the last commit",
            "description": "Summary information for the last commit.\n\nIf no commits have been made yet, `null` is assigned."
          },
          "release": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IStudioRepositoryRelease.ISummary"
              }
            ],
            "title": "Summary information for the most recent release",
            "description": "Summary information for the most recent release."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "account": {
            "$ref": "#/components/schemas/IStudioAccount.ISummary",
            "title": "Your account information",
            "description": "Your account information."
          },
          "code": {
            "type": "string",
            "title": "The identifier code of the repository",
            "description": "The identifier code of the repository."
          },
          "disclosure": {
            "oneOf": [
              {
                "const": "public"
              },
              {
                "const": "protected"
              },
              {
                "const": "private"
              }
            ],
            "title": "The visibility level of the repository",
            "description": "The visibility level of the repository.\n\n- `public`: A public repository that can be viewed by all members.\n- `protected`: A protected repository that can be viewed only by staff.\n- `private`: A private repository that can be viewed only by those who have been granted permission."
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Repository title",
            "description": "Repository title."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Detailed description of the repository",
            "description": "Detailed description of the repository."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "title": "List of search tag values",
            "description": "List of search tag values."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the repository was created",
            "description": "The date and time the repository was created."
          }
        },
        "required": [
          "commit",
          "release",
          "id",
          "account",
          "code",
          "disclosure",
          "title",
          "description",
          "tags",
          "created_at"
        ],
        "description": "Studio Repository.\n\n`IStudioRepository` is an entity that represents an individual repository\nwithin the studio system, and is similar to the concept of GitHub's repository\nin online services. And physically, it can be likened to a disk drive.\n\nAnd the repository belongs to a specific {@link IStudioAccount account}, and the\naccount owner who owns each repository can be a {@link IHubMember member} or a\n{@link IStudioEnterprise company}. In addition, the account owner who created the\nrepository can use the repository with fellow members or\n{@link IStudioEnterpriseTeamCompanion team members} through the\n{@link IStudioRepositoryAccess access control} of the repository."
      },
      "IPageIStudioRepositoryAccess.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioRepositoryAccess.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IStudioRepositoryAccess.ISummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "actor": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IHubMember"
              },
              {
                "$ref": "#/components/schemas/IStudioEnterpriseTeam.ISummary"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "member": "#/components/schemas/IHubMember",
                "team": "#/components/schemas/IStudioEnterpriseTeam.ISummary"
              }
            },
            "title": "Target information",
            "description": "Target information."
          },
          "role": {
            "oneOf": [
              {
                "const": "member"
              },
              {
                "const": "owner"
              },
              {
                "const": "manager"
              },
              {
                "const": "observer"
              }
            ],
            "title": "The role assigned to the target",
            "description": "The role assigned to the target."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          },
          "approved_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Date and time of invitation approval",
            "description": "Date and time of invitation approval."
          }
        },
        "required": [
          "id",
          "actor",
          "role",
          "created_at",
          "approved_at"
        ],
        "description": "Summary information about repository permissions."
      },
      "IStudioRepositoryAccess.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IStudioRepositoryAccess.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-access.created_at"
                },
                {
                  "const": "-access.approved_at"
                },
                {
                  "const": "-access.role"
                },
                {
                  "const": "+access.created_at"
                },
                {
                  "const": "+access.approved_at"
                },
                {
                  "const": "+access.role"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Page and search request information."
      },
      "IStudioRepositoryAccess.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "role": {
            "oneOf": [
              {
                "const": "member"
              },
              {
                "const": "owner"
              },
              {
                "const": "manager"
              },
              {
                "const": "observer"
              }
            ]
          },
          "approved": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IStudioRepositoryAccess": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "actor": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IHubMember"
              },
              {
                "$ref": "#/components/schemas/IStudioEnterpriseTeam.IInvert"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "member": "#/components/schemas/IHubMember",
                "team": "#/components/schemas/IStudioEnterpriseTeam.IInvert"
              }
            },
            "title": "Target information",
            "description": "Target information."
          },
          "role": {
            "oneOf": [
              {
                "const": "member"
              },
              {
                "const": "owner"
              },
              {
                "const": "manager"
              },
              {
                "const": "observer"
              }
            ],
            "title": "The role assigned to the target",
            "description": "The role assigned to the target."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          },
          "approved_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Date and time of invitation approval",
            "description": "Date and time of invitation approval."
          }
        },
        "required": [
          "id",
          "actor",
          "role",
          "created_at",
          "approved_at"
        ],
        "description": "Repository access control.\n\n`IStudioRepositoryAccess` is an entity that embodies the access control of\n{@link IStudioRepository repository}. It is an entity that is recorded when\n{@link IStudioAccount account holder} shares the repository authority to other\n{@link IHubMember members} or {@link IStudioEnterpriseTeam team} of the company.\n\nAs a reference, the account holder who created the repository is also a target of\naccess control. In other words, as soon as the account holder creates the repository,\none record of this table is created and started."
      },
      "IStudioEnterpriseTeam.IInvert": {
        "type": "object",
        "properties": {
          "enterprise": {
            "$ref": "#/components/schemas/IStudioEnterprise.ISummary",
            "title": "Affiliated company information",
            "description": "Affiliated company information."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "const": "team",
            "title": "Identifier of the Discriminated Union type",
            "description": "Identifier of the Discriminated Union type."
          },
          "code": {
            "type": "string",
            "title": "The team identifier code",
            "description": "The team identifier code.\n\nPart of the path in the URL address of the team page."
          },
          "name": {
            "type": "string",
            "title": "Team name",
            "description": "Team name."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          }
        },
        "required": [
          "enterprise",
          "id",
          "type",
          "code",
          "name",
          "created_at"
        ],
        "description": "Team reverse reference information."
      },
      "IPageIStudioRepositoryBucket.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IStudioRepositoryDirectory.ISummary"
                },
                {
                  "$ref": "#/components/schemas/IStudioRepositoryFile.ISummary"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflow.ISummary"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "directory": "#/components/schemas/IStudioRepositoryDirectory.ISummary",
                  "file": "#/components/schemas/IStudioRepositoryFile.ISummary",
                  "workflow": "#/components/schemas/IStudioWorkflow.ISummary"
                }
              }
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IStudioRepositoryBucket.IRequest": {
        "type": "object",
        "properties": {
          "location": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Folder path",
            "description": "Folder path.\n\nIf this value is `null`, it will be searched regardless of the folder path.\nInstead, {@link IStudioRepositoryDirectory folder information} will not be loaded.\n\nNote that the difference from {@link ISearch.location} is that this property is\nan equals search, whereas {@link ISearch.location} is a like search."
          },
          "search": {
            "$ref": "#/components/schemas/IStudioRepositoryBucket.IRequest.ISearch",
            "title": "Search information",
            "description": "Search information."
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-bucket.name"
                },
                {
                  "const": "-bucket.type"
                },
                {
                  "const": "-bucket.extension"
                },
                {
                  "const": "-bucket.created_at"
                },
                {
                  "const": "-bucket.updated_at"
                },
                {
                  "const": "+bucket.name"
                },
                {
                  "const": "+bucket.type"
                },
                {
                  "const": "+bucket.extension"
                },
                {
                  "const": "+bucket.created_at"
                },
                {
                  "const": "+bucket.updated_at"
                }
              ]
            },
            "title": "Sorting information",
            "description": "Sorting information."
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Page and search request information."
      },
      "IStudioRepositoryBucket.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "type": {
            "oneOf": [
              {
                "const": "file"
              },
              {
                "const": "directory"
              },
              {
                "const": "workflow"
              }
            ]
          },
          "name": {
            "type": "string"
          },
          "extension": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ]
          },
          "location": {
            "type": "string"
          }
        }
      },
      "IStudioRepositoryDirectory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "snapshot_id": {
            "type": "string",
            "format": "uuid",
            "title": "Snapshot ID",
            "description": "Snapshot ID."
          },
          "type": {
            "const": "directory",
            "title": "Type of bucket",
            "description": "Type of bucket."
          },
          "commit_id": {
            "type": "string",
            "format": "uuid",
            "title": "The commit ID of the last modified snapshot",
            "description": "The commit ID of the last modified snapshot."
          },
          "migration": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IStudioRepositoryBucketMigration"
              }
            ],
            "title": "Information migrated from Studio 1.0",
            "description": "Information migrated from Studio 1.0."
          },
          "path": {
            "type": "string",
            "title": "The full path to the bucket",
            "description": "The full path to the bucket."
          },
          "location": {
            "type": "string",
            "title": "Path to the bucket's belonging folder",
            "description": "Path to the bucket's belonging folder."
          },
          "name": {
            "type": "string",
            "title": "The file name in the bucket",
            "description": "The file name in the bucket."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The initial creation time of the bucket",
            "description": "The initial creation time of the bucket.\n\nThat is, the same as the time of the commit that initially created the bucket."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "The last modified date of the bucket",
            "description": "The last modified date of the bucket.\n\nThat is, the date and time of the commit that last modified the bucket."
          }
        },
        "required": [
          "id",
          "snapshot_id",
          "type",
          "commit_id",
          "migration",
          "path",
          "location",
          "name",
          "created_at",
          "updated_at"
        ],
        "description": "Folder information in the repository.\n\n`IStudioRepositoryDirectory` is an entity that visualizes folders existing in\n{@link IStudioRepository repository}, and is a type of\n{@link IStudioRepositoryBucket bucket}.\n\nAnd when a folder is first created, and whenever it is modified or the path is changed,\nthe details are stored in the DB as a unit called a snapshot and tracked. In addition,\nall modifications to these folders are grouped into a unit called\n{@link IStudioRepositoryCommit commit} and are done at once. Therefore, by viewing\npast folders, it is also possible to view the previous history of each folder."
      },
      "IStudioRepositoryFile": {
        "type": "object",
        "properties": {
          "extension": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "maxLength": 8
              }
            ],
            "title": "The extension of the file",
            "description": "The extension of the file."
          },
          "url": {
            "type": "string",
            "format": "uri",
            "title": "The URL address where the file is actually located",
            "description": "The URL address where the file is actually located."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "snapshot_id": {
            "type": "string",
            "format": "uuid",
            "title": "Snapshot ID",
            "description": "Snapshot ID."
          },
          "type": {
            "const": "file",
            "title": "Type of bucket",
            "description": "Type of bucket."
          },
          "commit_id": {
            "type": "string",
            "format": "uuid",
            "title": "The commit ID of the last modified snapshot",
            "description": "The commit ID of the last modified snapshot."
          },
          "migration": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IStudioRepositoryBucketMigration"
              }
            ],
            "title": "Information migrated from Studio 1.0",
            "description": "Information migrated from Studio 1.0."
          },
          "path": {
            "type": "string",
            "title": "The full path to the bucket",
            "description": "The full path to the bucket."
          },
          "location": {
            "type": "string",
            "title": "Path to the bucket's belonging folder",
            "description": "Path to the bucket's belonging folder."
          },
          "name": {
            "type": "string",
            "title": "The file name in the bucket",
            "description": "The file name in the bucket."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The initial creation time of the bucket",
            "description": "The initial creation time of the bucket.\n\nThat is, the same as the time of the commit that initially created the bucket."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "The last modified date of the bucket",
            "description": "The last modified date of the bucket.\n\nThat is, the date and time of the commit that last modified the bucket."
          }
        },
        "required": [
          "extension",
          "url",
          "id",
          "snapshot_id",
          "type",
          "commit_id",
          "migration",
          "path",
          "location",
          "name",
          "created_at",
          "updated_at"
        ],
        "description": "File information of the repository.\n\n`IStudioRepositoryFile` is an entity that visualizes files existing in\n{@link IStudioRepository repository}, and is a type of\n{@link IStudioRepositoryBucket bucket}.\n\nAnd when a file is first created, and whenever it is modified or its path is changed,\nits history is stored in the DB as a unit called a snapshot and tracked. In addition,\nall modifications to these files are grouped into a unit called\n{@link IStudioRepositoryCommit commit} and are done at once. Therefore, by viewing\npast files, it is also possible to view the previous history of each file."
      },
      "IStudioRepositoryBucket.IPath": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          }
        },
        "required": [
          "path"
        ]
      },
      "IPageIStudioRepositoryCommit.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioRepositoryCommit.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IStudioRepositoryCommit.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IStudioRepositoryCommit.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-commit.updated_at"
                },
                {
                  "const": "-commit.title"
                },
                {
                  "const": "-commit.created_at"
                },
                {
                  "const": "+commit.updated_at"
                },
                {
                  "const": "+commit.title"
                },
                {
                  "const": "+commit.created_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        }
      },
      "IStudioRepositoryCommit.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IPageIStudioWorkflowHistory.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioWorkflowHistory.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IStudioWorkflowHistory.ISummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "commit_id": {
            "type": "string",
            "format": "uuid"
          },
          "success": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "completed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "terminated_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          }
        },
        "required": [
          "id",
          "commit_id",
          "success",
          "created_at",
          "started_at",
          "completed_at",
          "terminated_at"
        ]
      },
      "IStudioWorkflowHistory.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IStudioWorkflowHistory.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-history.created_at"
                },
                {
                  "const": "-history.started_at"
                },
                {
                  "const": "-history.completed_at"
                },
                {
                  "const": "+history.created_at"
                },
                {
                  "const": "+history.started_at"
                },
                {
                  "const": "+history.completed_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        }
      },
      "IStudioWorkflowHistory.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          }
        }
      },
      "IPageIStudioWorkflowHistory": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioWorkflowHistory"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IStudioWorkflowStandalone.IPath": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          }
        },
        "required": [
          "path"
        ]
      },
      "IStudioWorkflow.IExecute": {
        "type": "object",
        "properties": {
          "history_id": {
            "type": "string",
            "format": "uuid",
            "description": "{@link IStudioWorkflowHistory.id} to store the execution result of\nthe workflow function.\n\nIf this value is explicitly specified, after executing the current workflow,\nthe ID of the {@link IStudioWorkflowHistory} record that stores its history\nwill be assigned to this value.\n\nIf possible, use `uuid.v4()` to avoid duplication."
          },
          "parameters": {
            "oneOf": [
              {
                "type": "array",
                "items": {}
              },
              {
                "$ref": "#/components/schemas/Recordpnumberany"
              }
            ],
            "title": "A list of parameters to be passed to the workflow function",
            "description": "A list of parameters to be passed to the workflow function."
          }
        },
        "required": [
          "parameters"
        ],
        "description": "Input information for executing the workflow."
      },
      "Recordpnumberany": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {}
      },
      "IStudioWorkflow.ISimulate": {
        "type": "object",
        "properties": {
          "debug": {
            "type": "boolean"
          }
        },
        "required": [
          "debug"
        ],
        "description": "Compile simulation request information."
      },
      "IPageIStudioRepositoryRelease.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioRepositoryRelease.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IStudioRepositoryRelease.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IStudioRepositoryRelease.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-release.document.title"
                },
                {
                  "const": "-release.version"
                },
                {
                  "const": "-release.created_at"
                },
                {
                  "const": "-release.opened_at"
                },
                {
                  "const": "+release.document.title"
                },
                {
                  "const": "+release.version"
                },
                {
                  "const": "+release.created_at"
                },
                {
                  "const": "+release.opened_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        }
      },
      "IStudioRepositoryReleaseNode.IExecute": {
        "type": "object",
        "properties": {
          "history_id": {
            "type": "string",
            "format": "uuid",
            "title": "{@link IStudioRepositoryReleaseNodeHistory.id} to store the execution result of the function",
            "description": "{@link IStudioRepositoryReleaseNodeHistory.id} to store the execution result of the function.\n\nIf this value is explicitly specified, after executing the current release node,\nthe ID of the {@link IStudioRepositoryReleaseNodeHistory}\nrecord that stores the history will be specified as this value.\n\nIf possible, use `uuid.v4()` to avoid duplication."
          },
          "schedule_id": {
            "type": "string",
            "format": "uuid",
            "title": "{@link IStudioRepositorySchedule.id} of the scheduler to be run manually",
            "description": "{@link IStudioRepositorySchedule.id} of the scheduler to be run manually.\n\nIf you want to refer to the scheduler as the execution entity of the release node instead of a human,\nyou can fill in this property value with the ID of the scheduler.\n\nThen, in the execution history {@link IStudioRepositoryReleaseNodeHistory.actor},\nit will be recorded that the release node was not run by a human, but rather by the scheduler running outside the specified time."
          },
          "parameters": {
            "oneOf": [
              {
                "type": "array",
                "items": {}
              },
              {
                "$ref": "#/components/schemas/Recordpnumberany"
              }
            ],
            "title": "A list of parameters to be passed to the function",
            "description": "A list of parameters to be passed to the function."
          }
        },
        "required": [
          "parameters"
        ],
        "description": "Input information for running the release node."
      },
      "IStudioRepositoryReleaseNodeHistory.ISummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "success": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "schedule": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "completed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "terminated_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          }
        },
        "required": [
          "id",
          "success",
          "schedule",
          "created_at",
          "started_at",
          "completed_at",
          "terminated_at"
        ]
      },
      "IPageIStudioRepositoryReleaseNodeHistory.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioRepositoryReleaseNodeHistory.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IStudioRepositoryReleaseNodeHistory.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IStudioRepositoryReleaseNodeHistory.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-history.created_at"
                },
                {
                  "const": "-history.started_at"
                },
                {
                  "const": "-history.completed_at"
                },
                {
                  "const": "+history.created_at"
                },
                {
                  "const": "+history.started_at"
                },
                {
                  "const": "+history.completed_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        }
      },
      "IStudioRepositoryReleaseNodeHistory.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "executor": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "const": "customer"
              },
              {
                "const": "scheduler"
              }
            ]
          }
        }
      },
      "IPageIStudioRepositoryReleaseNodeHistory": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioRepositoryReleaseNodeHistory"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IStudioAccount.ICreate": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "title": "Identifier code",
            "description": "Identifier code."
          }
        },
        "required": [
          "code"
        ],
        "description": "Account creation information."
      },
      "IStudioAccount.IUpdate": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "title": "New identifier code",
            "description": "New identifier code."
          }
        },
        "required": [
          "code"
        ],
        "description": "Modification information for your account."
      },
      "IStudioAccountSchedule.ICreateForRelease": {
        "type": "object",
        "properties": {
          "from": {
            "const": "release",
            "title": "Discriminator for the discriminated union type",
            "description": "Discriminator for the discriminated union type."
          },
          "release_node_id": {
            "type": "string",
            "title": "{@link IStudioRepositoryReleaseNode.id} of the release node to be run",
            "description": "{@link IStudioRepositoryReleaseNode.id} of the release node to be run."
          },
          "arguments": {
            "type": "array",
            "items": {},
            "title": "A list of argument values to be entered for the parameter",
            "description": "A list of argument values to be entered for the parameter."
          },
          "intervals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioAccountScheduleInterval.ICreate"
            },
            "minItems": 1,
            "title": "Execution interval",
            "description": "Execution interval."
          }
        },
        "required": [
          "release_node_id",
          "arguments",
          "intervals"
        ],
        "description": "Account schedule creation information."
      },
      "IStudioAccountScheduleInterval.ICreate": {
        "type": "object",
        "properties": {
          "duration": {
            "type": "string",
            "format": "duration",
            "description": "duration value"
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "title": "The start time and date of the first execution of the schedule",
            "description": "The start time and date of the first execution of the schedule."
          },
          "paused_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time of the schedule suspension",
            "description": "The date and time of the schedule suspension."
          },
          "closed_at": {
            "type": "string",
            "format": "date-time",
            "title": "Schedule interruption date",
            "description": "Schedule interruption date."
          }
        },
        "required": [
          "duration",
          "started_at"
        ]
      },
      "IStudioAccountSchedule.ICreateForGood": {
        "type": "object",
        "properties": {
          "from": {
            "const": "good",
            "title": "Discriminator for the discriminated union type",
            "description": "Discriminator for the discriminated union type."
          },
          "order_id": {
            "type": "string",
            "format": "uuid",
            "description": "{@link IHubOrder.id} for a specific order"
          },
          "good_id": {
            "type": "string",
            "format": "uuid",
            "description": "{@link IHubOrderGood.id} for specific product"
          },
          "unit_id": {
            "type": "string",
            "format": "uuid",
            "description": "{@link IHubSaleUnit.id} for a specific unit"
          },
          "release_node_id": {
            "type": "string",
            "title": "{@link IStudioRepositoryReleaseNode.id} of the release node to be run",
            "description": "{@link IStudioRepositoryReleaseNode.id} of the release node to be run."
          },
          "arguments": {
            "type": "array",
            "items": {},
            "title": "A list of argument values to be entered for the parameter",
            "description": "A list of argument values to be entered for the parameter."
          },
          "intervals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioAccountScheduleInterval.ICreate"
            },
            "minItems": 1,
            "title": "Execution interval",
            "description": "Execution interval."
          }
        },
        "required": [
          "from",
          "order_id",
          "good_id",
          "unit_id",
          "release_node_id",
          "arguments",
          "intervals"
        ],
        "description": "The basic information that is generated from the SALE ORDER of\nthe account schedule that I purchased."
      },
      "IStudioAccountSchedule.IPause": {
        "type": "object",
        "properties": {
          "interval_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Target interval id",
            "description": "Target interval id."
          }
        },
        "required": [
          "interval_ids"
        ],
        "description": "Interval information to pause."
      },
      "IStudioAccountSchedule.IResume": {
        "type": "object",
        "properties": {
          "interval_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Target interval id",
            "description": "Target interval id."
          }
        },
        "required": [
          "interval_ids"
        ],
        "description": "Interval information to start again."
      },
      "IStudioAccountSchedule.IUpdate": {
        "type": "object",
        "properties": {
          "arguments": {
            "type": "array",
            "items": {},
            "title": "A list of argument values to be entered for the parameter",
            "description": "A list of argument values to be entered for the parameter."
          },
          "intervals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioAccountScheduleInterval.ICreate"
            },
            "title": "Execution interval",
            "description": "Execution interval."
          }
        },
        "description": "Information on modifying account schedules."
      },
      "IStudioAccountSecret.ICreate": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "title": "Key value, i.e. variable name",
            "description": "Key value, i.e. variable name."
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioAccountSecretValue.ICreate"
            },
            "title": "A list of variable values",
            "description": "A list of variable values.\n\nStored encrypted in the DB."
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "A brief title for the variable",
            "description": "A brief title for the variable."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Detailed description of the variable",
            "description": "Detailed description of the variable."
          }
        },
        "required": [
          "key",
          "values",
          "title",
          "description"
        ],
        "description": "Request to create a secret."
      },
      "IStudioAccountSecretValue.ICreate": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "title": "Identifier code",
            "description": "Identifier code.\n\nUsually used are account emails or IDs of linked target services."
          },
          "value": {
            "type": "string",
            "title": "Variable values. Stored encrypted",
            "description": "Variable values. Stored encrypted."
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Scope of authority",
            "description": "Scope of authority."
          },
          "expired_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Expiration date and time of the variable value",
            "description": "Expiration date and time of the variable value."
          }
        },
        "required": [
          "code",
          "value",
          "scopes",
          "expired_at"
        ],
        "description": "Request to create a secret variable."
      },
      "IStudioAccountSecret.IUpdate": {
        "type": "object",
        "properties": {
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "A brief title for the variable",
            "description": "A brief title for the variable."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Detailed description of the variable",
            "description": "Detailed description of the variable."
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioAccountSecretValue.ICreate"
            },
            "title": "A list of new variable values to be configured",
            "description": "A list of new variable values to be configured.\n\nAll previous variables are deleted and new variable values are configured."
          },
          "expired_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Expiration date and time of the variable value",
            "description": "Expiration date and time of the variable value."
          }
        },
        "description": "Request a secret update."
      },
      "IStudioAccountSecretValue.IUpdate": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "title": "Identifier code",
            "description": "Identifier code.\n\nUsually used are account emails or IDs of linked target services."
          },
          "value": {
            "type": "string",
            "title": "Variable values. Stored encrypted",
            "description": "Variable values. Stored encrypted."
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Scope of authority",
            "description": "Scope of authority."
          },
          "expired_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Expiration date and time of the variable value",
            "description": "Expiration date and time of the variable value."
          }
        },
        "description": "Request to modify secret variables."
      },
      "IStudioAccountSecretValueSandbox": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "key": {
            "type": "string",
            "title": "Key value, i.e. variable name",
            "description": "Key value, i.e. variable name."
          },
          "code": {
            "type": "string",
            "title": "Identifier code",
            "description": "Identifier code.\n\nUsually used are account emails or IDs of linked target services."
          },
          "value": {
            "type": "string",
            "title": "Secret value",
            "description": "Secret value."
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Scope of authority",
            "description": "Scope of authority."
          }
        },
        "required": [
          "id",
          "key",
          "code",
          "value",
          "scopes"
        ],
        "description": "Sandbox information for secret variable values registered to a studio account.\n\n`IStudioAccountSecretValueSandbox` is information that separates\n{@link IStudioAccountSecretValue secret variable value} registered to\n{@link IStudioAccount studio account} into a sandbox."
      },
      "IStudioAccountSecretValueSandbox.IUpdate": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "title": "The value to change",
            "description": "The value to change."
          }
        },
        "required": [
          "value"
        ],
        "description": "Information on changing secret variable values."
      },
      "IStudioAccountWidgetTile.ICreate": {
        "type": "object",
        "properties": {
          "component": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IStudioAccountWidgetTileComponentOfReleaseNode.ICreate"
              },
              {
                "$ref": "#/components/schemas/IStudioAccountWidgetTileComponentOfSchedule.ICreate"
              },
              {
                "$ref": "#/components/schemas/IStudioAccountWidgetTileComponentOfWorkflow.ICreate"
              }
            ],
            "title": "The component to be placed in the widget",
            "description": "The component to be placed in the widget."
          },
          "geometries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioAccountWidgetTileGeometry.ICreate"
            },
            "title": "List of coordinates/size information for each tile size",
            "description": "List of coordinates/size information for each tile size.\n\nFor each {@link IStudioAccountWidgetTileGeometry.breakpoint},\nboth coordinates and size information must be set."
          },
          "updates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioAccountWidgetTile.IUpdate"
            },
            "description": "As new tiles are placed, a list of new geometry information for those\nthat are pushed by them and have their coordinates changed."
          }
        },
        "required": [
          "component",
          "geometries"
        ],
        "description": "Tile generation information."
      },
      "IStudioAccountWidgetTileComponentOfReleaseNode.ICreate": {
        "type": "object",
        "properties": {
          "kind": {
            "oneOf": [
              {
                "const": "release-node"
              },
              {
                "const": "release-node-agent"
              }
            ],
            "title": "Type of tile component",
            "description": "Type of tile component."
          },
          "account_code": {
            "type": "string",
            "description": "{@link IStudioAccount.code} of the affiliated account"
          },
          "repository_code": {
            "type": "string",
            "description": "{@link IStudioRepository.code} in the repository you are in"
          },
          "release_id": {
            "type": "string",
            "format": "uuid",
            "description": "{@link IStudioRepositoryRelease.id} of the target release"
          },
          "release_node_id": {
            "type": "string",
            "format": "uuid",
            "description": "{@link IStudioRepositoryReleaseNode.id} of the target release node"
          },
          "arguments": {
            "type": "array",
            "items": {},
            "title": "A list of argument values to use when executing the function",
            "description": "A list of argument values to use when executing the function."
          }
        },
        "required": [
          "kind",
          "account_code",
          "repository_code",
          "release_id",
          "release_node_id",
          "arguments"
        ],
        "description": "Creation information."
      },
      "IStudioAccountWidgetTileComponentOfSchedule.ICreate": {
        "type": "object",
        "properties": {
          "kind": {
            "const": "schedule",
            "title": "Type of tile component",
            "description": "Type of tile component."
          },
          "schedule_id": {
            "type": "string",
            "format": "uuid",
            "description": "{@link IStudioAccountSchedule.id} of the target routine schedule"
          }
        },
        "required": [
          "kind",
          "schedule_id"
        ],
        "description": "Creation information."
      },
      "IStudioAccountWidgetTileComponentOfWorkflow.ICreate": {
        "type": "object",
        "properties": {
          "kind": {
            "const": "workflow",
            "title": "Type of tile component",
            "description": "Type of tile component."
          },
          "account_code": {
            "type": "string",
            "description": "{@link IStudioAccount.code} of the affiliated account"
          },
          "repository_code": {
            "type": "string",
            "description": "{@link IStudioRepository.code} in the repository you are in"
          },
          "workflow_id": {
            "type": "string",
            "format": "uuid",
            "description": "{@link IStudioWorkflow.id} of the target workflow"
          },
          "arguments": {
            "type": "array",
            "items": {},
            "title": "A list of argument values to use when executing the function",
            "description": "A list of argument values to use when executing the function."
          }
        },
        "required": [
          "kind",
          "account_code",
          "repository_code",
          "workflow_id",
          "arguments"
        ],
        "description": "Creation information."
      },
      "IStudioAccountWidgetTileGeometry.ICreate": {
        "type": "object",
        "properties": {
          "breakpoint": {
            "oneOf": [
              {
                "const": "md"
              },
              {
                "const": "xs"
              },
              {
                "const": "sm"
              },
              {
                "const": "lg"
              }
            ],
            "title": "Breakpoints for responsive UI",
            "description": "Breakpoints for responsive UI.\n\n- xs: 1 space\n- sm: 2 spaces\n- md: 4 spaces\n- lg: 4 spaces"
          },
          "position": {
            "$ref": "#/components/schemas/IStudioAccountWidgetTileGeometry.IPosition",
            "title": "Location information",
            "description": "Location information."
          },
          "scale": {
            "$ref": "#/components/schemas/IStudioAccountWidgetTileGeometry.IScale",
            "title": "Size information",
            "description": "Size information."
          },
          "pinned": {
            "type": "boolean",
            "title": "Whether to fix the coordinates",
            "description": "Whether to fix the coordinates.\n\nIf this value is set to `true` and the target tile's coordinates are fixed,\n\nit will not be affected by the future pushing movement of other tiles.\n\nThis means that the coordinates are completely fixed."
          }
        },
        "required": [
          "breakpoint",
          "position",
          "scale",
          "pinned"
        ],
        "description": "Geometry creation information."
      },
      "IStudioAccountWidgetTile.IUpdate": {
        "type": "object",
        "properties": {
          "tile_id": {
            "type": "string",
            "format": "uuid",
            "description": "{@link IStudioAccountWidgetTile.id} of the target tile"
          },
          "geometries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioAccountWidgetTileGeometry.IUpdate"
            },
            "title": "List of geometry information to change",
            "description": "List of geometry information to change."
          }
        },
        "required": [
          "tile_id",
          "geometries"
        ],
        "description": "Information about changes in the geometry of the tile."
      },
      "IStudioAccountWidgetTileGeometry.IUpdate": {
        "type": "object",
        "properties": {
          "breakpoint": {
            "oneOf": [
              {
                "const": "md"
              },
              {
                "const": "xs"
              },
              {
                "const": "sm"
              },
              {
                "const": "lg"
              }
            ],
            "title": "Breakpoints for responsive UI",
            "description": "Breakpoints for responsive UI.\n\n- xs: 1 space\n- sm: 2 spaces\n- md: 4 spaces\n- lg: 4 spaces"
          },
          "position": {
            "$ref": "#/components/schemas/IStudioAccountWidgetTileGeometry.IPosition",
            "title": "Location information",
            "description": "Location information."
          },
          "scale": {
            "$ref": "#/components/schemas/IStudioAccountWidgetTileGeometry.IScale",
            "title": "Size information",
            "description": "Size information."
          },
          "pinned": {
            "type": "boolean",
            "title": "Whether to fix the coordinates",
            "description": "Whether to fix the coordinates.\n\nIf this value is set to `true` and the target tile's coordinates are fixed,\n\nit will not be affected by the future pushing movement of other tiles.\n\nThis means that the coordinates are completely fixed."
          }
        },
        "required": [
          "breakpoint",
          "position",
          "scale"
        ],
        "description": "Geometry modification information."
      },
      "IStudioAccountWidgetTile.IRestore": {
        "type": "object",
        "properties": {
          "tile_id": {
            "type": "string",
            "format": "uuid",
            "description": "{@link IStudioAccountWidgetTile.id} of the target tile"
          },
          "geometries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioAccountWidgetTileGeometry.ICreate"
            },
            "title": "List of coordinates/size information for each tile size",
            "description": "List of coordinates/size information for each tile size.\n\nFor each {@link IStudioAccountWidgetTileGeometry.breakpoint},\nboth coordinates and size information must be set."
          },
          "updates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioAccountWidgetTile.IUpdate"
            },
            "description": "As new tiles are placed, a list of new geometry information for those\nthat are pushed by them and have their coordinates changed."
          }
        },
        "required": [
          "tile_id",
          "geometries"
        ]
      },
      "IPageIStudioAccountWidgetTile": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioAccountWidgetTile"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IStudioEnterpriseEmployee.ICreate": {
        "type": "object",
        "properties": {
          "member_id": {
            "type": "string",
            "format": "uuid",
            "description": "Target member's {@link IHubMember.id}"
          },
          "title": {
            "oneOf": [
              {
                "const": "member"
              },
              {
                "const": "owner"
              },
              {
                "const": "manager"
              },
              {
                "const": "observer"
              }
            ],
            "title": "The position to be granted",
            "description": "The position to be granted."
          }
        },
        "required": [
          "member_id",
          "title"
        ],
        "description": "Staff appointment information."
      },
      "IStudioEnterpriseEmployee.IUpdate": {
        "type": "object",
        "properties": {
          "title": {
            "oneOf": [
              {
                "const": "member"
              },
              {
                "const": "owner"
              },
              {
                "const": "manager"
              },
              {
                "const": "observer"
              }
            ],
            "title": "Position to change",
            "description": "Position to change."
          }
        },
        "required": [
          "title"
        ],
        "description": "Staff editing information."
      },
      "IStudioEnterprise.ICreate.INew": {
        "type": "object",
        "properties": {
          "migrate": {
            "const": false,
            "title": "Whether to transfer the account",
            "description": "Whether to transfer the account.\n\nA method of issuing a new account to the company rather than transferring\nthe customer's account to the company."
          },
          "account": {
            "type": "string",
            "title": "A new account code to be issued to the company",
            "description": "A new account code to be issued to the company."
          },
          "name": {
            "type": "string",
            "title": "Company name",
            "description": "Company name."
          }
        },
        "required": [
          "migrate",
          "account",
          "name"
        ]
      },
      "IStudioEnterprise.ICreate.IMigrate": {
        "type": "object",
        "properties": {
          "migrate": {
            "const": true,
            "title": "Whether to transfer the account",
            "description": "Whether to transfer the account.\n\nIf this value is set to `true`, the company will not issue a new account,\nbut will take over the current member's account as is. And the new account\nissued with the code written in {@link new_account_for_customer} will be given\nto the current member."
          },
          "new_account_for_customer": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "description": "After transferring the account to the company, the new account code to be\nissued to the customer.\n\nThe company takes over the current customer's account as is. And a new account\nis issued with the code written in this property `new_account_for_customer`.\nOf course, if this value is `null`, the customer becomes \"no account\" after\ntransferring the account to the company."
          },
          "name": {
            "type": "string",
            "title": "Company name",
            "description": "Company name."
          }
        },
        "required": [
          "migrate",
          "new_account_for_customer",
          "name"
        ]
      },
      "IStudioEnterprise.IUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Company name",
            "description": "Company name."
          }
        },
        "required": [
          "name"
        ],
        "description": "Editorial information for the company."
      },
      "IStudioEnterpriseTeamCompanion.ICreate": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "format": "uuid",
            "description": "Target Employee's {@link IStudioEnterpriseEmployee.id}"
          },
          "role": {
            "oneOf": [
              {
                "const": "member"
              },
              {
                "const": "manager"
              },
              {
                "const": "observer"
              },
              {
                "const": "chief"
              }
            ],
            "title": "Role to be assigned",
            "description": "Role to be assigned."
          }
        },
        "required": [
          "employee_id",
          "role"
        ],
        "description": "Enter (appoint) teammate information."
      },
      "IStudioEnterpriseTeamCompanion.IUpdate": {
        "type": "object",
        "properties": {
          "role": {
            "oneOf": [
              {
                "const": "member"
              },
              {
                "const": "manager"
              },
              {
                "const": "observer"
              },
              {
                "const": "chief"
              }
            ],
            "title": "Role to change",
            "description": "Role to change."
          }
        },
        "required": [
          "role"
        ],
        "description": "Information on changing the role of your teammate."
      },
      "IStudioEnterpriseTeam.ICreate": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "title": "The team identifier code",
            "description": "The team identifier code.\n\nPart of the path in the URL address of the team page."
          },
          "name": {
            "type": "string",
            "title": "Team name",
            "description": "Team name."
          }
        },
        "required": [
          "code",
          "name"
        ]
      },
      "IStudioEnterpriseTeam.IUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Team name",
            "description": "Team name."
          }
        },
        "required": [
          "name"
        ]
      },
      "IStudioEnterpriseTeam.IMerge": {
        "type": "object",
        "properties": {
          "keep": {
            "type": "string",
            "format": "uuid",
            "title": "Target record to keep after merging",
            "description": "Target record to keep after merging.\n\nAfter merge process, {@link absorbed} records would be merged into\nthis {@link keep} record."
          },
          "absorbed": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "title": "To be absorbed to {@link keep} after merging",
            "description": "To be absorbed to {@link keep} after merging."
          }
        },
        "required": [
          "keep",
          "absorbed"
        ],
        "description": "Team Merge Information.\n\nIf an employee belongs to both the teams being merged, the role of the team\nbeing merged is maintained, and the role of the team being merged is discarded."
      },
      "IStudioMetaChatSession.ICreate": {
        "type": "object",
        "properties": {
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "The title of the chat session",
            "description": "The title of the chat session."
          }
        },
        "description": "Information about opening a chat session."
      },
      "IStudioMetaChatSession.IUpdate": {
        "type": "object",
        "properties": {
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "The title of the chat session",
            "description": "The title of the chat session."
          }
        },
        "description": "Information on requesting corrections."
      },
      "IStudioMetaChatSessionShare.ICreate": {
        "type": "object",
        "properties": {
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Title of the sharing record",
            "description": "Title of the sharing record."
          },
          "session_id": {
            "type": "string",
            "format": "uuid",
            "title": "Target session's {@link IStudioMetaChatSession.id}",
            "description": "Target session's {@link IStudioMetaChatSession.id}."
          },
          "message_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "description": "Target message's {@link IStudioMetaChatSessionMessage.id}\nif you want to restrict the sharing to a specific message as endpoint."
          }
        },
        "required": [
          "title",
          "session_id",
          "message_id"
        ],
        "description": "Creation information of the sharing record."
      },
      "IStudioMetaChatSessionShare.IUpdate": {
        "type": "object",
        "properties": {
          "message_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "description": "Target message's {@link IStudioMetaChatSessionMessage.id}\nif you want to restrict the sharing to a specific message as endpoint."
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Title of the sharing record",
            "description": "Title of the sharing record."
          }
        },
        "description": "Update information of the sharing record."
      },
      "IStudioRepository.ICreate": {
        "type": "object",
        "properties": {
          "account": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "{@link IStudioAccount.code} of the account",
            "description": "{@link IStudioAccount.code} of the account.\n\nIf `null` is given, the account of the {@link IHubCustomer customer} will be used.\n\nAnd it is possible to enter the account code of the {@link IStudioEnterprise company} to which the customer belongs as a {@link IStudioEnterpriseEmployee employee}."
          },
          "code": {
            "type": "string",
            "title": "The identifier code of the repository",
            "description": "The identifier code of the repository."
          },
          "disclosure": {
            "oneOf": [
              {
                "const": "public"
              },
              {
                "const": "protected"
              },
              {
                "const": "private"
              }
            ],
            "title": "The visibility level of the repository",
            "description": "The visibility level of the repository.\n\n- `public`: A public repository that can be viewed by all members.\n- `protected`: A protected repository that can be viewed only by staff.\n- `private`: A private repository that can be viewed only by those who have been granted permission."
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Repository title",
            "description": "Repository title."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Detailed description of the repository",
            "description": "Detailed description of the repository."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "title": "List of search tag values",
            "description": "List of search tag values."
          }
        },
        "required": [
          "account",
          "code",
          "disclosure",
          "title",
          "description",
          "tags"
        ],
        "description": "Repository creation information."
      },
      "PartialIStudioRepository.ICreate": {
        "type": "object",
        "properties": {
          "account": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "{@link IStudioAccount.code} of the account",
            "description": "{@link IStudioAccount.code} of the account.\n\nIf `null` is given, the account of the {@link IHubCustomer customer} will be used.\n\nAnd it is possible to enter the account code of the {@link IStudioEnterprise company} to which the customer belongs as a {@link IStudioEnterpriseEmployee employee}."
          },
          "code": {
            "type": "string",
            "title": "The identifier code of the repository",
            "description": "The identifier code of the repository."
          },
          "disclosure": {
            "oneOf": [
              {
                "const": "public"
              },
              {
                "const": "protected"
              },
              {
                "const": "private"
              }
            ],
            "title": "The visibility level of the repository",
            "description": "The visibility level of the repository.\n\n- `public`: A public repository that can be viewed by all members.\n- `protected`: A protected repository that can be viewed only by staff.\n- `private`: A private repository that can be viewed only by those who have been granted permission."
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Repository title",
            "description": "Repository title."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Detailed description of the repository",
            "description": "Detailed description of the repository."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "title": "List of search tag values",
            "description": "List of search tag values."
          }
        },
        "description": "Make all properties in T optional"
      },
      "IStudioRepository.IShift": {
        "type": "object",
        "properties": {
          "account": {
            "type": "string",
            "title": "The transfer target account code",
            "description": "The transfer target account code."
          }
        },
        "required": [
          "account"
        ],
        "description": "Storage ownership transfer information.\n\nDTO used when transferring the current storage to another account."
      },
      "IStudioRepositoryAccess.ICreate": {
        "type": "object",
        "properties": {
          "type": {
            "oneOf": [
              {
                "const": "member"
              },
              {
                "const": "team"
              }
            ],
            "title": "Type of target",
            "description": "Type of target."
          },
          "actor_id": {
            "type": "string",
            "format": "uuid",
            "title": "The record ID of the target actor",
            "description": "The record ID of the target actor."
          },
          "role": {
            "oneOf": [
              {
                "const": "member"
              },
              {
                "const": "owner"
              },
              {
                "const": "manager"
              },
              {
                "const": "observer"
              }
            ],
            "title": "The role assigned",
            "description": "The role assigned."
          }
        },
        "required": [
          "type",
          "actor_id",
          "role"
        ],
        "description": "Enter storage permission information."
      },
      "IStudioRepositoryAccess.IUpdate": {
        "type": "object",
        "properties": {
          "role": {
            "oneOf": [
              {
                "const": "member"
              },
              {
                "const": "owner"
              },
              {
                "const": "manager"
              },
              {
                "const": "observer"
              }
            ],
            "title": "Role to change",
            "description": "Role to change."
          }
        },
        "required": [
          "role"
        ],
        "description": "Information about modifying repository permissions."
      },
      "IStudioRepositoryCommit.ICreate": {
        "type": "object",
        "properties": {
          "source_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "title": "The ID of the original commit",
            "description": "The ID of the original commit.\n\nIf omitted (`undefined`), the {@link IStudioRepositoryCommit.id} of the last commit\nis assigned.\n\nIf `null` is entered, it corresponds to the first commit performed without any basis."
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "The title of the commit",
            "description": "The title of the commit."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "A description of the commit",
            "description": "A description of the commit."
          },
          "creates": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IStudioRepositoryDirectory.ICreate"
                },
                {
                  "$ref": "#/components/schemas/IStudioRepositoryFile.ICreate"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflow.ICreate"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "directory": "#/components/schemas/IStudioRepositoryDirectory.ICreate",
                  "file": "#/components/schemas/IStudioRepositoryFile.ICreate",
                  "workflow": "#/components/schemas/IStudioWorkflow.ICreate"
                }
              }
            },
            "title": "A new bucket list to create",
            "description": "A new bucket list to create."
          },
          "updates": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IStudioRepositoryDirectory.IUpdate"
                },
                {
                  "$ref": "#/components/schemas/IStudioRepositoryFile.IUpdate"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflow.IUpdate"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "directory": "#/components/schemas/IStudioRepositoryDirectory.IUpdate",
                  "file": "#/components/schemas/IStudioRepositoryFile.IUpdate",
                  "workflow": "#/components/schemas/IStudioWorkflow.IUpdate"
                }
              }
            },
            "title": "Bucket list to edit",
            "description": "Bucket list to edit."
          },
          "erases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioRepositoryBucket.IErase"
            },
            "title": "Bucket list to delete",
            "description": "Bucket list to delete."
          }
        },
        "required": [
          "title",
          "description",
          "creates",
          "updates",
          "erases"
        ],
        "description": "Input information for creating a new bucket."
      },
      "IStudioRepositoryDirectory.ICreate": {
        "type": "object",
        "properties": {
          "type": {
            "const": "directory",
            "title": "Type of bucket",
            "description": "Type of bucket."
          },
          "location": {
            "type": "string",
            "title": "Path to the bucket's belonging folder",
            "description": "Path to the bucket's belonging folder."
          },
          "name": {
            "type": "string",
            "title": "The file name in the bucket",
            "description": "The file name in the bucket."
          }
        },
        "required": [
          "type",
          "location",
          "name"
        ],
        "description": "Creation information for folders within the repository."
      },
      "IStudioRepositoryFile.ICreate": {
        "type": "object",
        "properties": {
          "extension": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "maxLength": 8
              }
            ],
            "title": "The extension of the file",
            "description": "The extension of the file."
          },
          "url": {
            "type": "string",
            "format": "uri",
            "title": "The URL address where the file is actually located",
            "description": "The URL address where the file is actually located."
          },
          "type": {
            "const": "file",
            "title": "Type of bucket",
            "description": "Type of bucket."
          },
          "location": {
            "type": "string",
            "title": "Path to the bucket's belonging folder",
            "description": "Path to the bucket's belonging folder."
          },
          "name": {
            "type": "string",
            "title": "The file name in the bucket",
            "description": "The file name in the bucket."
          }
        },
        "required": [
          "extension",
          "url",
          "type",
          "location",
          "name"
        ],
        "description": "Creation information for the repository file."
      },
      "IStudioWorkflow.ICreate": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/IStudioWorkflowData.ICreate",
            "title": "This data entry information",
            "description": "This data entry information."
          },
          "icon": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uri"
              }
            ],
            "title": "URL of the representative icon",
            "description": "URL of the representative icon."
          },
          "thumbnail": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uri"
              }
            ],
            "title": "Workflow thumbnail image",
            "description": "Workflow thumbnail image.\n\nThis corresponds to the minimap or thumbnail image in the workflow editor."
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Workflow title",
            "description": "Workflow title."
          },
          "summary": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "A brief description of the workflow functions",
            "description": "A brief description of the workflow functions."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Detailed description of the workflow function",
            "description": "Detailed description of the workflow function."
          },
          "namespace": {
            "type": "string",
            "title": "Workflow namespace identifier",
            "description": "Workflow namespace identifier."
          },
          "type": {
            "const": "workflow",
            "title": "Type of bucket",
            "description": "Type of bucket."
          },
          "location": {
            "type": "string",
            "title": "Path to the bucket's belonging folder",
            "description": "Path to the bucket's belonging folder."
          },
          "name": {
            "type": "string",
            "title": "The file name in the bucket",
            "description": "The file name in the bucket."
          }
        },
        "required": [
          "data",
          "icon",
          "thumbnail",
          "summary",
          "description",
          "type",
          "location",
          "name"
        ],
        "description": "Workflow creation information."
      },
      "IStudioRepositoryDirectory.IUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key.\n\n{@link IStudioRepositoryBucket.id} of the bucket to be edited"
          },
          "type": {
            "const": "directory",
            "title": "Type of target bucket",
            "description": "Type of target bucket.\n\nEven if the ID matches, if the type of the bucket is different, it is an error."
          },
          "name": {
            "type": "string",
            "title": "The bucket name to modify",
            "description": "The bucket name to modify.\n\nUsed when changing the file or folder name."
          },
          "location": {
            "type": "string",
            "title": "When you want to modify the path to the folder you are assigned to",
            "description": "When you want to modify the path to the folder you are assigned to."
          }
        },
        "required": [
          "id",
          "type"
        ],
        "description": "Modification information for folders within the repository."
      },
      "IStudioRepositoryFile.IUpdate": {
        "type": "object",
        "properties": {
          "extension": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "maxLength": 8
              }
            ],
            "title": "File extension",
            "description": "File extension.\n\nIf omitted, the existing value is used as is."
          },
          "url": {
            "type": "string",
            "format": "uri",
            "title": "The URL address where the file is actually located",
            "description": "The URL address where the file is actually located.\n\nIf omitted, the existing value is used as is."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key.\n\n{@link IStudioRepositoryBucket.id} of the bucket to be edited"
          },
          "type": {
            "const": "file",
            "title": "Type of target bucket",
            "description": "Type of target bucket.\n\nEven if the ID matches, if the type of the bucket is different, it is an error."
          },
          "name": {
            "type": "string",
            "title": "The bucket name to modify",
            "description": "The bucket name to modify.\n\nUsed when changing the file or folder name."
          },
          "location": {
            "type": "string",
            "title": "When you want to modify the path to the folder you are assigned to",
            "description": "When you want to modify the path to the folder you are assigned to."
          }
        },
        "required": [
          "id",
          "type"
        ],
        "description": "Information about file modifications in the repository."
      },
      "IStudioWorkflow.IUpdate": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/IStudioWorkflowData.ICreate",
            "title": "This data entry information",
            "description": "This data entry information."
          },
          "icon": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uri"
              }
            ],
            "title": "URL of the representative icon",
            "description": "URL of the representative icon."
          },
          "thumbnail": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uri"
              }
            ],
            "title": "Workflow thumbnail image",
            "description": "Workflow thumbnail image.\n\nThis corresponds to the minimap or thumbnail image in the workflow editor."
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Workflow title",
            "description": "Workflow title."
          },
          "summary": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "A brief description of the workflow functions",
            "description": "A brief description of the workflow functions."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Detailed explanation of the return type",
            "description": "Detailed explanation of the return type."
          },
          "namespace": {
            "type": "string",
            "title": "Workflow namespace identifier",
            "description": "Workflow namespace identifier."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key.\n\n{@link IStudioRepositoryBucket.id} of the bucket to be edited"
          },
          "type": {
            "const": "workflow",
            "title": "Type of target bucket",
            "description": "Type of target bucket.\n\nEven if the ID matches, if the type of the bucket is different, it is an error."
          },
          "name": {
            "type": "string",
            "title": "The bucket name to modify",
            "description": "The bucket name to modify.\n\nUsed when changing the file or folder name."
          },
          "location": {
            "type": "string",
            "title": "When you want to modify the path to the folder you are assigned to",
            "description": "When you want to modify the path to the folder you are assigned to."
          }
        },
        "required": [
          "id",
          "type"
        ],
        "description": "Workflow modification information."
      },
      "IStudioRepositoryBucket.IErase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "oneOf": [
              {
                "const": "file"
              },
              {
                "const": "directory"
              },
              {
                "const": "workflow"
              }
            ]
          }
        },
        "required": [
          "id",
          "type"
        ],
        "description": "Bucket deletion information."
      },
      "IStudioRepositoryCommit.IUpdate": {
        "type": "object",
        "properties": {
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "The title of the commit",
            "description": "The title of the commit."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "A description of the commit",
            "description": "A description of the commit."
          },
          "creates": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IStudioRepositoryDirectory.ICreate"
                },
                {
                  "$ref": "#/components/schemas/IStudioRepositoryFile.ICreate"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflow.ICreate"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "directory": "#/components/schemas/IStudioRepositoryDirectory.ICreate",
                  "file": "#/components/schemas/IStudioRepositoryFile.ICreate",
                  "workflow": "#/components/schemas/IStudioWorkflow.ICreate"
                }
              }
            },
            "title": "A new bucket list to create",
            "description": "A new bucket list to create."
          },
          "updates": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IStudioRepositoryDirectory.IUpdate"
                },
                {
                  "$ref": "#/components/schemas/IStudioRepositoryFile.IUpdate"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflow.IUpdate"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "directory": "#/components/schemas/IStudioRepositoryDirectory.IUpdate",
                  "file": "#/components/schemas/IStudioRepositoryFile.IUpdate",
                  "workflow": "#/components/schemas/IStudioWorkflow.IUpdate"
                }
              }
            },
            "title": "Bucket list to edit",
            "description": "Bucket list to edit."
          },
          "erases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioRepositoryBucket.IErase"
            },
            "title": "Bucket list to delete",
            "description": "Bucket list to delete."
          }
        },
        "required": [
          "creates",
          "updates",
          "erases"
        ],
        "description": "Commit revision information."
      },
      "IStudioRepositoryCommit.IArchivedCommit": {
        "type": "object",
        "properties": {
          "archived_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "archived_at"
        ]
      },
      "IStudioRepository.ICreateFork": {
        "type": "object",
        "properties": {
          "good_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "title": "Unique id of the downloaded product",
            "description": "Unique id of the downloaded product.\n\nnull if you fork your own"
          },
          "account": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "{@link IStudioAccount.code} of the account",
            "description": "{@link IStudioAccount.code} of the account.\n\nIf `null` is given, the account of the {@link IHubCustomer customer} will be used.\n\nAnd it is possible to enter the account code of the {@link IStudioEnterprise company} to which the customer belongs as a {@link IStudioEnterpriseEmployee employee}."
          },
          "code": {
            "type": "string",
            "title": "The identifier code of the repository",
            "description": "The identifier code of the repository."
          },
          "disclosure": {
            "oneOf": [
              {
                "const": "public"
              },
              {
                "const": "protected"
              },
              {
                "const": "private"
              }
            ],
            "title": "The visibility level of the repository",
            "description": "The visibility level of the repository.\n\n- `public`: A public repository that can be viewed by all members.\n- `protected`: A protected repository that can be viewed only by staff.\n- `private`: A private repository that can be viewed only by those who have been granted permission."
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Repository title",
            "description": "Repository title."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Detailed description of the repository",
            "description": "Detailed description of the repository."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "title": "List of search tag values",
            "description": "List of search tag values."
          }
        },
        "required": [
          "good_id",
          "account",
          "code",
          "disclosure",
          "title",
          "description",
          "tags"
        ]
      },
      "IStudioRepositoryRelease.ICreate": {
        "type": "object",
        "properties": {
          "commit_id": {
            "type": "string",
            "format": "uuid",
            "description": "{@link IStudioRepositoryCommit.id} of the commit to be released"
          },
          "version": {
            "type": "string",
            "title": "Version name",
            "description": "Version name."
          },
          "nodes": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IStudioRepositoryReleaseNode.IFileCreate"
                },
                {
                  "$ref": "#/components/schemas/IStudioRepositoryReleaseNode.IWorkflowCreate"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "file": "#/components/schemas/IStudioRepositoryReleaseNode.IFileCreate",
                  "workflow": "#/components/schemas/IStudioRepositoryReleaseNode.IWorkflowCreate"
                }
              }
            },
            "minItems": 1,
            "title": "A list of nodes (functions) to deploy",
            "description": "A list of nodes (functions) to deploy.\n\nAt least one node is required when deploying."
          },
          "document": {
            "$ref": "#/components/schemas/IStudioRepositoryReleaseDocument.ICreate",
            "title": "Document creation information",
            "description": "Document creation information."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "title": "List of search tags",
            "description": "List of search tags."
          },
          "category_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "uniqueItems": true,
            "title": "{@link IHubChannelCategory.id} list of classification categories",
            "description": "{@link IHubChannelCategory.id} list of classification categories."
          },
          "opened_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Distribution start date and time",
            "description": "Distribution start date and time."
          }
        },
        "required": [
          "commit_id",
          "version",
          "nodes",
          "document",
          "tags",
          "category_ids",
          "opened_at"
        ],
        "description": "Information about creating distributions in the repository."
      },
      "IStudioRepositoryReleaseNode.IFileCreate": {
        "type": "object",
        "properties": {
          "type": {
            "const": "file",
            "title": "Discriminator type",
            "description": "Discriminator type."
          },
          "path": {
            "type": "string",
            "title": "Path to the target source file",
            "description": "Path to the target source file."
          },
          "accessor": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Accessor to the bucket node to be released",
            "description": "Accessor to the bucket node to be released."
          }
        },
        "required": [
          "type",
          "path",
          "accessor"
        ]
      },
      "IStudioRepositoryReleaseNode.IWorkflowCreate": {
        "type": "object",
        "properties": {
          "type": {
            "const": "workflow",
            "title": "Discriminator type",
            "description": "Discriminator type."
          },
          "path": {
            "type": "string",
            "title": "The file path of the target workflow",
            "description": "The file path of the target workflow."
          },
          "purpose": {
            "oneOf": [
              {
                "const": "app"
              },
              {
                "const": "agent"
              }
            ],
            "title": "Purpose of workflow extraction",
            "description": "Purpose of workflow extraction."
          }
        },
        "required": [
          "type",
          "path",
          "purpose"
        ]
      },
      "IStudioRepositoryReleaseDocument.ICreate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "title": "title",
            "description": "title."
          },
          "format": {
            "oneOf": [
              {
                "const": "txt"
              },
              {
                "const": "html"
              },
              {
                "const": "md"
              }
            ],
            "title": "Format of the body content",
            "description": "Format of the body content."
          },
          "body": {
            "type": "string",
            "title": "Descriptive text section",
            "description": "Descriptive text section."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachments",
            "description": "List of attachments."
          }
        },
        "required": [
          "title",
          "format",
          "body",
          "files"
        ],
        "description": "Input information for the repository distribution."
      },
      "IStudioRepositoryRelease.IUpdate": {
        "type": "object",
        "properties": {
          "document": {
            "$ref": "#/components/schemas/IStudioRepositoryReleaseDocument.ICreate",
            "title": "Information about editing documents",
            "description": "Information about editing documents."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "title": "List of search tags",
            "description": "List of search tags."
          },
          "category_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "uniqueItems": true,
            "title": "{@link IHubChannelCategory.id} list of classification categories",
            "description": "{@link IHubChannelCategory.id} list of classification categories."
          }
        },
        "required": [
          "document",
          "tags",
          "category_ids"
        ],
        "description": "Editing information for the repository's distribution.\n\nOnly documents and search tags can be edited. If you want to change commit history\nor version names, you can't, so delete them and create new ones."
      },
      "IStudioAccountSecretValueSandbox.IEmplace": {
        "type": "object",
        "properties": {
          "secret_id": {
            "type": "string",
            "format": "uuid"
          },
          "value_id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "secret_id",
          "value_id"
        ],
        "description": "Emplace request info.\n\nEmplace request info of secret value for a specific record unit.\n\nCurrently, the manual sandbox emplacing is used only in the\nworkflow editor. In other words, it is used from the workflow\nsnapshot entity."
      },
      "IStudioWorkflowStandalone.ICreate": {
        "type": "object",
        "properties": {
          "commit": {
            "$ref": "#/components/schemas/OmitIStudioRepositoryCommit.ICreatecreatesupdateserases"
          },
          "workflow": {
            "$ref": "#/components/schemas/IStudioWorkflow.ICreate"
          }
        },
        "required": [
          "commit",
          "workflow"
        ],
        "description": "Workflow-only creation information."
      },
      "OmitIStudioRepositoryCommit.ICreatecreatesupdateserases": {
        "type": "object",
        "properties": {
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "The title of the commit",
            "description": "The title of the commit."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "A description of the commit",
            "description": "A description of the commit."
          },
          "source_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "title": "The ID of the original commit",
            "description": "The ID of the original commit.\n\nIf omitted (`undefined`), the {@link IStudioRepositoryCommit.id} of the last commit\nis assigned.\n\nIf `null` is entered, it corresponds to the first commit performed without any basis."
          }
        },
        "required": [
          "title",
          "description"
        ],
        "description": "Construct a type with the properties of T except for those in type K."
      },
      "IStudioWorkflowStandalone.IAccumulate": {
        "type": "object",
        "properties": {
          "commit": {
            "$ref": "#/components/schemas/OmitIStudioRepositoryCommit.ICreatecreatesupdateserases"
          },
          "workflow": {
            "$ref": "#/components/schemas/IStudioWorkflow.IUpdate"
          }
        },
        "required": [
          "commit",
          "workflow"
        ],
        "description": "Workflow-only cumulative information.\n\nUsed when modifying existing workflow files and issuing new commits."
      },
      "IStudioWorkflowStandalone.IUpdate": {
        "type": "object",
        "properties": {
          "commit": {
            "$ref": "#/components/schemas/OmitIStudioRepositoryCommit.IUpdatecreatesupdateserases"
          },
          "workflow": {
            "$ref": "#/components/schemas/IStudioWorkflow.IUpdate"
          }
        },
        "required": [
          "commit",
          "workflow"
        ],
        "description": "Workflow-only modification information.\n\nUsed when modifying a workflow alone in a commit that has not yet been recorded."
      },
      "OmitIStudioRepositoryCommit.IUpdatecreatesupdateserases": {
        "type": "object",
        "properties": {
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "The title of the commit",
            "description": "The title of the commit."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "A description of the commit",
            "description": "A description of the commit."
          }
        },
        "description": "Construct a type with the properties of T except for those in type K."
      },
      "IPageIStudioWorkflowScriptConnector": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioWorkflowScriptConnector"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IStudioWorkflowScriptConnector.IRequest": {
        "type": "object",
        "properties": {
          "workflow_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "title": "{@link IStudioWorkflow.id} of the current workflow document",
            "description": "{@link IStudioWorkflow.id} of the current workflow document.\n\nThis is to prevent the current workflow document from being exposed repeatedly\nwhile querying script connectors. Since the workflow document is also treated\nas a function, it can be used as a script connector from another workflow document.\n\nOf course, if this value is set to `null`, there is no duplication check.\nYou will avoid the above situation yourself."
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "required": [
          "workflow_id"
        ],
        "description": "Page search and request information."
      },
      "IStudioWorkflowScriptConnector.ICreate": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "title": "Path to the target bucket",
            "description": "Path to the target bucket.\n\nRepresents the reference target bucket as a relative path relative\nto the current workflow."
          },
          "accessor": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAstElementAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstPropertyAccessExpression"
              },
              {
                "$ref": "#/components/schemas/IAstIdentifier"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ElementAccessExpression": "#/components/schemas/IAstElementAccessExpression",
                "PropertyAccessExpression": "#/components/schemas/IAstPropertyAccessExpression",
                "Identifier": "#/components/schemas/IAstIdentifier"
              }
            },
            "title": "Accessor for the target function",
            "description": "Accessor for the target function."
          }
        },
        "required": [
          "path",
          "accessor"
        ],
        "description": "Input information for the script connector in the workflow."
      },
      "IPageIStudioWorkflowSwagger": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IStudioWorkflowSwagger.ILinkSwagger"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflowSwagger.IManualSwagger"
                },
                {
                  "$ref": "#/components/schemas/IStudioWorkflowSwagger.IGoodSwagger"
                }
              ],
              "discriminator": {
                "propertyName": "source",
                "mapping": {
                  "link": "#/components/schemas/IStudioWorkflowSwagger.ILinkSwagger",
                  "manual": "#/components/schemas/IStudioWorkflowSwagger.IManualSwagger",
                  "good": "#/components/schemas/IStudioWorkflowSwagger.IGoodSwagger"
                }
              }
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IPageIStudioWorkflowTemporary.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioWorkflowTemporary.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IStudioWorkflowTemporary.ISummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "customer": {
            "$ref": "#/components/schemas/IHubCustomer",
            "title": "Customer information when temporarily stored",
            "description": "Customer information when temporarily stored."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          }
        },
        "required": [
          "id",
          "customer",
          "created_at"
        ],
        "description": "Summary information on temporary storage."
      },
      "IStudioWorkflowTemporary.IRequest": {
        "type": "object",
        "properties": {
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-created_at"
                },
                {
                  "const": "+created_at"
                }
              ]
            },
            "title": "Sorting options",
            "description": "Sorting options."
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Page request information."
      },
      "IStudioWorkflowTemporary": {
        "type": "object",
        "properties": {
          "document": {
            "$ref": "#/components/schemas/IStudioWorkflow.ICreate",
            "title": "Input information for a temporarily saved workflow document",
            "description": "Input information for a temporarily saved workflow document."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "customer": {
            "$ref": "#/components/schemas/IHubCustomer",
            "title": "Customer information when temporarily stored",
            "description": "Customer information when temporarily stored."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The date and time the record was created",
            "description": "The date and time the record was created."
          }
        },
        "required": [
          "document",
          "id",
          "customer",
          "created_at"
        ],
        "description": "Workflow temporary storage information.\n\n`IStudioWorkflowTemporary` is an entity that visualizes the case where\n{@link IStudioWorkflow workflow document} is temporarily stored before\n{@link IStudioRepositoryCommit.archived_at commit confirmation}.\n\nNote that the entity that temporarily stores the workflow document is the\nfront application, and each temporary storage record is deleted in bulk at\nthe moment when the {@link IStudioRepositoryCommit commit} is confirmed.\nAlso, for the temporary storage records for the associated commit and workflow\ndocument, they are automatically deleted even if they exceed N."
      },
      "IStudioWorkflowTemporary.IQuery": {
        "type": "object",
        "properties": {
          "erase": {
            "type": "boolean",
            "title": "Whether to delete",
            "description": "Whether to delete.\n\nWhether to view the temporary storage record and delete the record."
          }
        },
        "description": "Additional query information when retrieving temporary storage records."
      },
      "IStudioWorkflowTemporary.ICreate": {
        "type": "object",
        "properties": {
          "document": {
            "$ref": "#/components/schemas/IStudioWorkflow.ICreate",
            "title": "Input information for the workflow document to be temporarily saved",
            "description": "Input information for the workflow document to be temporarily saved."
          }
        },
        "required": [
          "document"
        ],
        "description": "Temporary storage of input information."
      },
      "IPageIStudioShelfCommitWorkflow.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioShelfCommitWorkflow.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IStudioShelfCommitWorkflow.ISummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key.\n\nCurrently a non-existent property, same as {@link IStudioWorkflow.id}.\n\nIn the future, the ability to add and remove workflows from shelves will be added,\nand then the meaning will be given."
          },
          "repository": {
            "$ref": "#/components/schemas/IStudioRepository.ISummary",
            "title": "Affiliated storage",
            "description": "Affiliated storage."
          },
          "commit": {
            "$ref": "#/components/schemas/IStudioRepositoryCommit.ISummary",
            "title": "Commit of attribution. The most recent version",
            "description": "Commit of attribution. The most recent version."
          },
          "workflow": {
            "$ref": "#/components/schemas/IStudioWorkflow.ISummary",
            "title": "Workflow documentation",
            "description": "Workflow documentation."
          },
          "last_messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioShelfCommitWorkflow.ILastMessage"
            },
            "title": "The user's first spoken message",
            "description": "The user's first spoken message."
          },
          "schedules": {
            "type": "boolean",
            "title": "Whether to set a schedule",
            "description": "Whether to set a schedule."
          }
        },
        "required": [
          "id",
          "repository",
          "commit",
          "workflow",
          "last_messages",
          "schedules"
        ],
        "description": "Summary information about the workflow bookshelf you are working on."
      },
      "IStudioShelfCommitWorkflow.ILastMessage": {
        "type": "object",
        "properties": {
          "role": {
            "oneOf": [
              {
                "const": "user"
              },
              {
                "const": "assistant"
              }
            ]
          },
          "message": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "role"
        ]
      },
      "IStudioShelfCommitWorkflow.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IStudioShelfCommitWorkflow.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-account.code"
                },
                {
                  "const": "+account.code"
                },
                {
                  "const": "-account.created_at"
                },
                {
                  "const": "+account.created_at"
                },
                {
                  "const": "-repository.code"
                },
                {
                  "const": "-repository.title"
                },
                {
                  "const": "-repository.created_at"
                },
                {
                  "const": "+repository.code"
                },
                {
                  "const": "+repository.title"
                },
                {
                  "const": "+repository.created_at"
                },
                {
                  "const": "-commit.updated_at"
                },
                {
                  "const": "-commit.title"
                },
                {
                  "const": "-commit.created_at"
                },
                {
                  "const": "+commit.updated_at"
                },
                {
                  "const": "+commit.title"
                },
                {
                  "const": "+commit.created_at"
                },
                {
                  "const": "-bucket.name"
                },
                {
                  "const": "-bucket.created_at"
                },
                {
                  "const": "-bucket.updated_at"
                },
                {
                  "const": "+bucket.name"
                },
                {
                  "const": "+bucket.created_at"
                },
                {
                  "const": "+bucket.updated_at"
                },
                {
                  "const": "-workflow.summary"
                },
                {
                  "const": "-workflow.title"
                },
                {
                  "const": "+workflow.summary"
                },
                {
                  "const": "+workflow.title"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Page and search request information."
      },
      "IStudioShelfCommitWorkflow.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "repository": {
            "$ref": "#/components/schemas/IStudioRepository.IRequest.ISearch"
          },
          "commit": {
            "$ref": "#/components/schemas/IStudioRepositoryCommit.IRequest.ISearch"
          },
          "workflow": {
            "$ref": "#/components/schemas/IStudioWorkflow.IRequest.ISearch"
          },
          "schedules": {
            "type": "boolean"
          }
        }
      },
      "IPageIStudioShelfCommitWorkflow": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioShelfCommitWorkflow"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IStudioShelfCommitWorkflow": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "repository": {
            "$ref": "#/components/schemas/IStudioRepository.IStandalone",
            "title": "Affiliated storage",
            "description": "Affiliated storage."
          },
          "commit": {
            "$ref": "#/components/schemas/IStudioRepositoryCommit",
            "title": "Commit of attribution. The most recent version",
            "description": "Commit of attribution. The most recent version."
          },
          "workflow": {
            "$ref": "#/components/schemas/IStudioWorkflow",
            "title": "Workflow documentation",
            "description": "Workflow documentation."
          }
        },
        "required": [
          "id",
          "repository",
          "commit",
          "workflow"
        ],
        "description": "Workflow being worked on is placed on the bookshelf.\n\n`IStudioShelfCommitWorkflow` is an entity that represents the \"workflow document\nplaced on the bookshelf of the workspace\" by the customer.\n\nNote that the concept of \"placed on the bookshelf of the workspace\" means that the\n{@link IStudioWorkflow workflow document} has not been distributed even once. If a\nspecific workflow document has been distributed even once, it is classified as\n{@link IStudioShelfReleaseWorkflow}, which means the bookshelf of the distribution unit.\n\nAlso, the access path of the workflow on this entity is not ({@link IStudioAccount account} ->\n{@link IStudioRepository repository} -> {@link IStudioRepositoryCommit commit} ->\n{@link IStudioWorkflow workflow}), but rather the concept of gathering everything on\nthe bookshelf at once. Therefore, this entity contains the associated repository and\ncommit information. And only the most recent commit's workflow is placed on the bookshelf."
      },
      "IPageIStudioShelfReleaseWorkflow.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioShelfReleaseWorkflow.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IStudioShelfReleaseWorkflow.ISummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key.\n\nCurrently non-existent property. Same as {@link IStudioWorkflow.id}.\n\nIn the future, the ability to add and remove workflows from shelves\nwill be added, and then the meaning will be given."
          },
          "repository": {
            "$ref": "#/components/schemas/IStudioRepository.ISummary",
            "title": "Affiliated storage",
            "description": "Affiliated storage."
          },
          "release": {
            "$ref": "#/components/schemas/IStudioRepositoryRelease.ISummary",
            "title": "Commit of attribution. The most recent version",
            "description": "Commit of attribution. The most recent version."
          },
          "node": {
            "$ref": "#/components/schemas/IStudioRepositoryReleaseNode.ISummary",
            "title": "Affiliated release node",
            "description": "Affiliated release node."
          },
          "workflow": {
            "$ref": "#/components/schemas/IStudioWorkflow.ISummary",
            "title": "Workflow documentation",
            "description": "Workflow documentation."
          },
          "purpose": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "const": "app"
              },
              {
                "const": "agent"
              }
            ],
            "title": "For app differentiation purposes",
            "description": "For app differentiation purposes."
          },
          "schedule_state": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "const": "paused"
              },
              {
                "const": "active"
              }
            ],
            "title": "A list of schedules to execute this function",
            "description": "A list of schedules to execute this function."
          }
        },
        "required": [
          "id",
          "repository",
          "release",
          "node",
          "workflow",
          "purpose",
          "schedule_state"
        ],
        "description": "Summary information about the deployed workflow bookshelf."
      },
      "IStudioRepositoryReleaseNode.ISummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "purpose": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "const": "app"
              },
              {
                "const": "agent"
              }
            ],
            "title": "Purpose of extracting the release",
            "description": "Purpose of extracting the release."
          }
        },
        "required": [
          "id",
          "purpose"
        ]
      },
      "IStudioShelfReleaseWorkflow.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IStudioShelfReleaseWorkflow.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-account.code"
                },
                {
                  "const": "+account.code"
                },
                {
                  "const": "-account.created_at"
                },
                {
                  "const": "+account.created_at"
                },
                {
                  "const": "-repository.code"
                },
                {
                  "const": "-repository.title"
                },
                {
                  "const": "-repository.created_at"
                },
                {
                  "const": "+repository.code"
                },
                {
                  "const": "+repository.title"
                },
                {
                  "const": "+repository.created_at"
                },
                {
                  "const": "-bucket.name"
                },
                {
                  "const": "-bucket.created_at"
                },
                {
                  "const": "-bucket.updated_at"
                },
                {
                  "const": "+bucket.name"
                },
                {
                  "const": "+bucket.created_at"
                },
                {
                  "const": "+bucket.updated_at"
                },
                {
                  "const": "-release.document.title"
                },
                {
                  "const": "-release.version"
                },
                {
                  "const": "-release.created_at"
                },
                {
                  "const": "-release.opened_at"
                },
                {
                  "const": "-workflow.summary"
                },
                {
                  "const": "-workflow.title"
                },
                {
                  "const": "+release.document.title"
                },
                {
                  "const": "+release.version"
                },
                {
                  "const": "+release.created_at"
                },
                {
                  "const": "+release.opened_at"
                },
                {
                  "const": "+workflow.summary"
                },
                {
                  "const": "+workflow.title"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Page and search request information."
      },
      "IStudioShelfReleaseWorkflow.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "repository": {
            "$ref": "#/components/schemas/IStudioRepository.IRequest.ISearch"
          },
          "release": {
            "$ref": "#/components/schemas/IStudioRepositoryRelease.IRequest.ISearch"
          },
          "workflow": {
            "$ref": "#/components/schemas/IStudioWorkflow.IRequest.ISearch"
          }
        }
      },
      "IStudioShelfReleaseWorkflow": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "repository": {
            "$ref": "#/components/schemas/IStudioRepository.IStandalone",
            "title": "Affiliated storage",
            "description": "Affiliated storage."
          },
          "node": {
            "$ref": "#/components/schemas/IStudioRepositoryReleaseNode.IInvert",
            "title": "Affiliated release node",
            "description": "Affiliated release node."
          },
          "workflow": {
            "$ref": "#/components/schemas/IStudioWorkflow",
            "title": "Workflow documentation",
            "description": "Workflow documentation."
          },
          "schedule_state": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "const": "paused"
              },
              {
                "const": "active"
              }
            ],
            "title": "A list of schedules to execute this function",
            "description": "A list of schedules to execute this function."
          }
        },
        "required": [
          "id",
          "repository",
          "node",
          "workflow",
          "schedule_state"
        ],
        "description": "Released workflow program is put on the bookshelf.\n\n`IStudioShelfReleaseWorkflow` is an entity that visualizes the \"workflow document\nput on the bookshelf of the distribution room\" by the customer.\n\nNote that the concept of \"put on the bookshelf of the distribution room\" means that\nthe corresponding {@link IStudioWorkflow workflow document} has been\n{@link IStudioRepositoryRelease released} at least once. If the corresponding workflow\ndocument has not been deployed yet, then it is classified as\n{@link IStudioShelfCommitWorkflow}, which means the bookshelf of the work room.\n\nAlso, the access path of the workflow on this entity is not ({@link IStudioAccount account} ->\n{@link IStudioRepository repository} -> {@link IStudioRepositoryRelease release} ->\n{@link IStudioWorkflow workflow}), but the concept of gathering everything on the bookshelf\nat once. Therefore, this entity contains both the repository and the release information.\nAnd only the most recent release of the workflow is placed on the bookshelf."
      },
      "IStudioShelfReleaseWorkflow.Category": {
        "type": "object",
        "properties": {
          "total_count": {
            "type": "number",
            "title": "The total number of workflows",
            "description": "The total number of workflows.\n\nIf purpose is app, the number of workflows extracted by app.\n\nIf purpose is agent, the number of workflows extracted by agent."
          },
          "each_category_count": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IStudioShelfReleaseWorkflow.ReleasedWorkflowCountByCategory"
            },
            "title": "Number of workflows per category",
            "description": "Number of workflows per category."
          }
        },
        "required": [
          "total_count",
          "each_category_count"
        ]
      },
      "IStudioShelfReleaseWorkflow.ReleasedWorkflowCountByCategory": {
        "type": "object",
        "properties": {
          "category_id": {
            "type": "string",
            "format": "uuid",
            "title": "Category id",
            "description": "Category id."
          },
          "category_name": {
            "type": "string",
            "title": "Category name",
            "description": "Category name."
          },
          "count": {
            "type": "number",
            "title": "Number of workflows per category",
            "description": "Number of workflows per category."
          }
        },
        "required": [
          "category_id",
          "category_name",
          "count"
        ]
      }
    },
    "securitySchemes": {
      "bearer": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "tags": [
    {
      "name": "Monitor"
    },
    {
      "name": "External"
    },
    {
      "name": "Admin"
    },
    {
      "name": "Authenticate"
    },
    {
      "name": "Coupon"
    },
    {
      "name": "Deposit"
    },
    {
      "name": "OpenAPI"
    },
    {
      "name": "Issue"
    },
    {
      "name": "Order"
    },
    {
      "name": "PushMessage"
    },
    {
      "name": "Sale"
    },
    {
      "name": "Inquiry"
    },
    {
      "name": "Systematic"
    },
    {
      "name": "Statistics"
    },
    {
      "name": "SSO"
    },
    {
      "name": "commons"
    },
    {
      "name": "Cart"
    },
    {
      "name": "Like"
    },
    {
      "name": "Account"
    },
    {
      "name": "Enterprise"
    },
    {
      "name": "Meta"
    },
    {
      "name": "Repository"
    },
    {
      "name": "Workflow"
    },
    {
      "name": "Shelves"
    }
  ],
  "x-samchon-emended": true
}